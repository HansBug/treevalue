{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:00.593834Z",
     "iopub.status.busy": "2023-02-27T11:04:00.593610Z",
     "iopub.status.idle": "2023-02-27T11:04:01.591164Z",
     "shell.execute_reply": "2023-02-27T11:04:01.590309Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:01.595304Z",
     "iopub.status.busy": "2023-02-27T11:04:01.594831Z",
     "iopub.status.idle": "2023-02-27T11:04:01.629824Z",
     "shell.execute_reply": "2023-02-27T11:04:01.629145Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:01.633405Z",
     "iopub.status.busy": "2023-02-27T11:04:01.632781Z",
     "iopub.status.idle": "2023-02-27T11:04:01.643638Z",
     "shell.execute_reply": "2023-02-27T11:04:01.643020Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcb2099aa60>\n",
       "├── 'a' --> tensor([[ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcb2099aa90>\n",
       "    └── 'c' --> tensor([[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:01.646857Z",
     "iopub.status.busy": "2023-02-27T11:04:01.646263Z",
     "iopub.status.idle": "2023-02-27T11:04:01.652816Z",
     "shell.execute_reply": "2023-02-27T11:04:01.652206Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5037, -0.2940, -0.2364],\n",
       "        [-0.1660,  0.3115, -2.0718]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:01.655985Z",
     "iopub.status.busy": "2023-02-27T11:04:01.655417Z",
     "iopub.status.idle": "2023-02-27T11:04:07.021560Z",
     "shell.execute_reply": "2023-02-27T11:04:07.020671Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.1 ns ± 0.0654 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:07.025367Z",
     "iopub.status.busy": "2023-02-27T11:04:07.024778Z",
     "iopub.status.idle": "2023-02-27T11:04:07.032460Z",
     "shell.execute_reply": "2023-02-27T11:04:07.031359Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcb2099aa60>\n",
       "├── 'a' --> tensor([[-0.6911,  0.6460, -0.3729],\n",
       "│                   [ 0.1930, -0.1178,  0.6163]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcb2099aa90>\n",
       "    └── 'c' --> tensor([[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:07.035211Z",
     "iopub.status.busy": "2023-02-27T11:04:07.034864Z",
     "iopub.status.idle": "2023-02-27T11:04:12.511033Z",
     "shell.execute_reply": "2023-02-27T11:04:12.510340Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.4 ns ± 0.0793 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:12.514830Z",
     "iopub.status.busy": "2023-02-27T11:04:12.514289Z",
     "iopub.status.idle": "2023-02-27T11:04:12.883214Z",
     "shell.execute_reply": "2023-02-27T11:04:12.882424Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:12.887158Z",
     "iopub.status.busy": "2023-02-27T11:04:12.886654Z",
     "iopub.status.idle": "2023-02-27T11:04:12.892513Z",
     "shell.execute_reply": "2023-02-27T11:04:12.891839Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:12.895311Z",
     "iopub.status.busy": "2023-02-27T11:04:12.894862Z",
     "iopub.status.idle": "2023-02-27T11:04:12.899829Z",
     "shell.execute_reply": "2023-02-27T11:04:12.899154Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5037, -0.2940, -0.2364],\n",
       "        [-0.1660,  0.3115, -2.0718]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:12.902416Z",
     "iopub.status.busy": "2023-02-27T11:04:12.902048Z",
     "iopub.status.idle": "2023-02-27T11:04:17.622503Z",
     "shell.execute_reply": "2023-02-27T11:04:17.621251Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 ns ± 0.45 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:17.626068Z",
     "iopub.status.busy": "2023-02-27T11:04:17.625553Z",
     "iopub.status.idle": "2023-02-27T11:04:17.631896Z",
     "shell.execute_reply": "2023-02-27T11:04:17.631187Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5031, -0.0870,  0.9516],\n",
       "               [-0.2755, -0.5261, -1.8269]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:17.635090Z",
     "iopub.status.busy": "2023-02-27T11:04:17.634440Z",
     "iopub.status.idle": "2023-02-27T11:04:21.627510Z",
     "shell.execute_reply": "2023-02-27T11:04:21.626565Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492 ns ± 0.0187 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:21.631434Z",
     "iopub.status.busy": "2023-02-27T11:04:21.630953Z",
     "iopub.status.idle": "2023-02-27T11:04:28.375613Z",
     "shell.execute_reply": "2023-02-27T11:04:28.374678Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "831 ns ± 1.68 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:28.379171Z",
     "iopub.status.busy": "2023-02-27T11:04:28.378736Z",
     "iopub.status.idle": "2023-02-27T11:04:37.201887Z",
     "shell.execute_reply": "2023-02-27T11:04:37.201010Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 91.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:37.205590Z",
     "iopub.status.busy": "2023-02-27T11:04:37.205082Z",
     "iopub.status.idle": "2023-02-27T11:04:37.209480Z",
     "shell.execute_reply": "2023-02-27T11:04:37.208824Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:37.212470Z",
     "iopub.status.busy": "2023-02-27T11:04:37.211862Z",
     "iopub.status.idle": "2023-02-27T11:04:48.740625Z",
     "shell.execute_reply": "2023-02-27T11:04:48.739984Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 413 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:48.743834Z",
     "iopub.status.busy": "2023-02-27T11:04:48.743314Z",
     "iopub.status.idle": "2023-02-27T11:05:00.238218Z",
     "shell.execute_reply": "2023-02-27T11:05:00.237573Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 323 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:00.241457Z",
     "iopub.status.busy": "2023-02-27T11:05:00.240931Z",
     "iopub.status.idle": "2023-02-27T11:05:00.244528Z",
     "shell.execute_reply": "2023-02-27T11:05:00.243964Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:00.247240Z",
     "iopub.status.busy": "2023-02-27T11:05:00.246626Z",
     "iopub.status.idle": "2023-02-27T11:05:00.253807Z",
     "shell.execute_reply": "2023-02-27T11:05:00.253256Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fca74675040>\n",
       "├── 'a' --> tensor([[[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]],\n",
       "│           \n",
       "│                   [[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]],\n",
       "│           \n",
       "│                   [[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]],\n",
       "│           \n",
       "│                   [[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]],\n",
       "│           \n",
       "│                   [[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]],\n",
       "│           \n",
       "│                   [[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]],\n",
       "│           \n",
       "│                   [[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]],\n",
       "│           \n",
       "│                   [[ 0.5037, -0.2940, -0.2364],\n",
       "│                    [-0.1660,  0.3115, -2.0718]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fca746752e0>\n",
       "    └── 'c' --> tensor([[[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "                \n",
       "                        [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "                \n",
       "                        [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "                \n",
       "                        [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "                \n",
       "                        [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "                \n",
       "                        [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "                \n",
       "                        [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "                \n",
       "                        [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                         [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                         [ 0.5979,  0.8779,  1.8151,  1.0372]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:00.256455Z",
     "iopub.status.busy": "2023-02-27T11:05:00.255848Z",
     "iopub.status.idle": "2023-02-27T11:05:02.863127Z",
     "shell.execute_reply": "2023-02-27T11:05:02.862284Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 61 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:02.867612Z",
     "iopub.status.busy": "2023-02-27T11:05:02.867331Z",
     "iopub.status.idle": "2023-02-27T11:05:02.875552Z",
     "shell.execute_reply": "2023-02-27T11:05:02.874842Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcb209a1370>\n",
       "├── 'a' --> tensor([[ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718],\n",
       "│                   [ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718],\n",
       "│                   [ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718],\n",
       "│                   [ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718],\n",
       "│                   [ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718],\n",
       "│                   [ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718],\n",
       "│                   [ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718],\n",
       "│                   [ 0.5037, -0.2940, -0.2364],\n",
       "│                   [-0.1660,  0.3115, -2.0718]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcb209a1580>\n",
       "    └── 'c' --> tensor([[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                        [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                        [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                        [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                        [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                        [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                        [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                        [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                        [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                        [ 0.5979,  0.8779,  1.8151,  1.0372]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:02.878341Z",
     "iopub.status.busy": "2023-02-27T11:05:02.877882Z",
     "iopub.status.idle": "2023-02-27T11:05:05.329355Z",
     "shell.execute_reply": "2023-02-27T11:05:05.328462Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.1 µs ± 64 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:05.333343Z",
     "iopub.status.busy": "2023-02-27T11:05:05.332739Z",
     "iopub.status.idle": "2023-02-27T11:05:09.948582Z",
     "shell.execute_reply": "2023-02-27T11:05:09.947461Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.7 µs ± 78.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:09.951975Z",
     "iopub.status.busy": "2023-02-27T11:05:09.951468Z",
     "iopub.status.idle": "2023-02-27T11:05:09.960087Z",
     "shell.execute_reply": "2023-02-27T11:05:09.959442Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]],\n",
       "       \n",
       "               [[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]],\n",
       "       \n",
       "               [[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]],\n",
       "       \n",
       "               [[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]],\n",
       "       \n",
       "               [[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]],\n",
       "       \n",
       "               [[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]],\n",
       "       \n",
       "               [[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]],\n",
       "       \n",
       "               [[ 0.5037, -0.2940, -0.2364],\n",
       "                [-0.1660,  0.3115, -2.0718]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "              \n",
       "                      [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "              \n",
       "                      [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "              \n",
       "                      [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "              \n",
       "                      [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "              \n",
       "                      [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "              \n",
       "                      [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]],\n",
       "              \n",
       "                      [[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                       [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                       [ 0.5979,  0.8779,  1.8151,  1.0372]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:09.963005Z",
     "iopub.status.busy": "2023-02-27T11:05:09.962639Z",
     "iopub.status.idle": "2023-02-27T11:05:16.293929Z",
     "shell.execute_reply": "2023-02-27T11:05:16.293039Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.9 µs ± 885 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:16.298008Z",
     "iopub.status.busy": "2023-02-27T11:05:16.297395Z",
     "iopub.status.idle": "2023-02-27T11:05:16.305749Z",
     "shell.execute_reply": "2023-02-27T11:05:16.305120Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718],\n",
       "               [ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718],\n",
       "               [ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718],\n",
       "               [ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718],\n",
       "               [ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718],\n",
       "               [ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718],\n",
       "               [ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718],\n",
       "               [ 0.5037, -0.2940, -0.2364],\n",
       "               [-0.1660,  0.3115, -2.0718]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                      [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                      [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                      [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                      [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                      [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                      [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372],\n",
       "                      [ 0.5873,  0.1504,  0.1417,  0.8499],\n",
       "                      [-0.7327, -1.2987, -0.6745,  0.3113],\n",
       "                      [ 0.5979,  0.8779,  1.8151,  1.0372]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:16.308845Z",
     "iopub.status.busy": "2023-02-27T11:05:16.308233Z",
     "iopub.status.idle": "2023-02-27T11:05:28.099090Z",
     "shell.execute_reply": "2023-02-27T11:05:28.098345Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 1.44 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:28.102801Z",
     "iopub.status.busy": "2023-02-27T11:05:28.102089Z",
     "iopub.status.idle": "2023-02-27T11:05:30.740400Z",
     "shell.execute_reply": "2023-02-27T11:05:30.739293Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "324 µs ± 3.42 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
