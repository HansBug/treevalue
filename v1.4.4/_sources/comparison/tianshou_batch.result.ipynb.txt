{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:44.040512Z",
     "iopub.status.busy": "2023-02-25T18:01:44.040035Z",
     "iopub.status.idle": "2023-02-25T18:01:44.958595Z",
     "shell.execute_reply": "2023-02-25T18:01:44.957918Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:44.962122Z",
     "iopub.status.busy": "2023-02-25T18:01:44.961545Z",
     "iopub.status.idle": "2023-02-25T18:01:44.994618Z",
     "shell.execute_reply": "2023-02-25T18:01:44.993996Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:44.997800Z",
     "iopub.status.busy": "2023-02-25T18:01:44.997436Z",
     "iopub.status.idle": "2023-02-25T18:01:45.005942Z",
     "shell.execute_reply": "2023-02-25T18:01:45.005315Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8486e1e80>\n",
       "├── 'a' --> tensor([[-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8486e1e50>\n",
       "    └── 'c' --> tensor([[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:45.008920Z",
     "iopub.status.busy": "2023-02-25T18:01:45.008408Z",
     "iopub.status.idle": "2023-02-25T18:01:45.014012Z",
     "shell.execute_reply": "2023-02-25T18:01:45.013435Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8355, -1.0703,  1.5445],\n",
       "        [ 1.8138, -0.7282, -0.7805]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:45.016701Z",
     "iopub.status.busy": "2023-02-25T18:01:45.016373Z",
     "iopub.status.idle": "2023-02-25T18:01:49.880131Z",
     "shell.execute_reply": "2023-02-25T18:01:49.879400Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.7 ns ± 0.039 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:49.883463Z",
     "iopub.status.busy": "2023-02-25T18:01:49.882830Z",
     "iopub.status.idle": "2023-02-25T18:01:49.890135Z",
     "shell.execute_reply": "2023-02-25T18:01:49.888915Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8486e1e80>\n",
       "├── 'a' --> tensor([[-0.0139,  0.5999,  0.8151],\n",
       "│                   [-1.5821,  1.0812, -0.2161]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8486e1e50>\n",
       "    └── 'c' --> tensor([[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:49.892724Z",
     "iopub.status.busy": "2023-02-25T18:01:49.892376Z",
     "iopub.status.idle": "2023-02-25T18:01:54.869876Z",
     "shell.execute_reply": "2023-02-25T18:01:54.869114Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.2 ns ± 0.185 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:54.872878Z",
     "iopub.status.busy": "2023-02-25T18:01:54.872520Z",
     "iopub.status.idle": "2023-02-25T18:01:55.212409Z",
     "shell.execute_reply": "2023-02-25T18:01:55.211713Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:55.216044Z",
     "iopub.status.busy": "2023-02-25T18:01:55.215402Z",
     "iopub.status.idle": "2023-02-25T18:01:55.221616Z",
     "shell.execute_reply": "2023-02-25T18:01:55.221025Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:55.224246Z",
     "iopub.status.busy": "2023-02-25T18:01:55.223897Z",
     "iopub.status.idle": "2023-02-25T18:01:55.229647Z",
     "shell.execute_reply": "2023-02-25T18:01:55.229052Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8355, -1.0703,  1.5445],\n",
       "        [ 1.8138, -0.7282, -0.7805]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:55.232435Z",
     "iopub.status.busy": "2023-02-25T18:01:55.232098Z",
     "iopub.status.idle": "2023-02-25T18:01:59.787379Z",
     "shell.execute_reply": "2023-02-25T18:01:59.786660Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56 ns ± 0.0508 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:59.790171Z",
     "iopub.status.busy": "2023-02-25T18:01:59.789814Z",
     "iopub.status.idle": "2023-02-25T18:01:59.796616Z",
     "shell.execute_reply": "2023-02-25T18:01:59.795656Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.1068,  0.5276,  0.3291],\n",
       "               [ 0.2599, -0.7940, -0.0113]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:01:59.799166Z",
     "iopub.status.busy": "2023-02-25T18:01:59.798831Z",
     "iopub.status.idle": "2023-02-25T18:02:03.724760Z",
     "shell.execute_reply": "2023-02-25T18:02:03.724052Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "483 ns ± 0.185 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:03.728275Z",
     "iopub.status.busy": "2023-02-25T18:02:03.727585Z",
     "iopub.status.idle": "2023-02-25T18:02:10.592469Z",
     "shell.execute_reply": "2023-02-25T18:02:10.591770Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "846 ns ± 0.103 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:10.595616Z",
     "iopub.status.busy": "2023-02-25T18:02:10.595010Z",
     "iopub.status.idle": "2023-02-25T18:02:19.771806Z",
     "shell.execute_reply": "2023-02-25T18:02:19.771090Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 19.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:19.774901Z",
     "iopub.status.busy": "2023-02-25T18:02:19.774321Z",
     "iopub.status.idle": "2023-02-25T18:02:19.777964Z",
     "shell.execute_reply": "2023-02-25T18:02:19.777382Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:19.780600Z",
     "iopub.status.busy": "2023-02-25T18:02:19.780262Z",
     "iopub.status.idle": "2023-02-25T18:02:30.920437Z",
     "shell.execute_reply": "2023-02-25T18:02:30.919866Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 349 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:30.924382Z",
     "iopub.status.busy": "2023-02-25T18:02:30.923417Z",
     "iopub.status.idle": "2023-02-25T18:02:42.272852Z",
     "shell.execute_reply": "2023-02-25T18:02:42.272268Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 418 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:42.276829Z",
     "iopub.status.busy": "2023-02-25T18:02:42.275854Z",
     "iopub.status.idle": "2023-02-25T18:02:42.280175Z",
     "shell.execute_reply": "2023-02-25T18:02:42.279642Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:42.283104Z",
     "iopub.status.busy": "2023-02-25T18:02:42.282621Z",
     "iopub.status.idle": "2023-02-25T18:02:42.289581Z",
     "shell.execute_reply": "2023-02-25T18:02:42.289065Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb79c3a7130>\n",
       "├── 'a' --> tensor([[[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]],\n",
       "│           \n",
       "│                   [[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]],\n",
       "│           \n",
       "│                   [[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]],\n",
       "│           \n",
       "│                   [[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]],\n",
       "│           \n",
       "│                   [[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]],\n",
       "│           \n",
       "│                   [[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]],\n",
       "│           \n",
       "│                   [[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]],\n",
       "│           \n",
       "│                   [[-0.8355, -1.0703,  1.5445],\n",
       "│                    [ 1.8138, -0.7282, -0.7805]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb79c3a7e20>\n",
       "    └── 'c' --> tensor([[[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "                \n",
       "                        [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "                \n",
       "                        [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "                \n",
       "                        [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "                \n",
       "                        [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "                \n",
       "                        [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "                \n",
       "                        [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "                \n",
       "                        [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                         [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                         [ 0.9901,  0.2347,  1.9765,  1.1955]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:42.292174Z",
     "iopub.status.busy": "2023-02-25T18:02:42.291560Z",
     "iopub.status.idle": "2023-02-25T18:02:44.894133Z",
     "shell.execute_reply": "2023-02-25T18:02:44.893399Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 74.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:44.897057Z",
     "iopub.status.busy": "2023-02-25T18:02:44.896488Z",
     "iopub.status.idle": "2023-02-25T18:02:44.903669Z",
     "shell.execute_reply": "2023-02-25T18:02:44.903040Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb79c47d130>\n",
       "├── 'a' --> tensor([[-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805],\n",
       "│                   [-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805],\n",
       "│                   [-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805],\n",
       "│                   [-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805],\n",
       "│                   [-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805],\n",
       "│                   [-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805],\n",
       "│                   [-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805],\n",
       "│                   [-0.8355, -1.0703,  1.5445],\n",
       "│                   [ 1.8138, -0.7282, -0.7805]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8486da760>\n",
       "    └── 'c' --> tensor([[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                        [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                        [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                        [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                        [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                        [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                        [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                        [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                        [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                        [ 0.9901,  0.2347,  1.9765,  1.1955]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:44.906441Z",
     "iopub.status.busy": "2023-02-25T18:02:44.905924Z",
     "iopub.status.idle": "2023-02-25T18:02:47.313619Z",
     "shell.execute_reply": "2023-02-25T18:02:47.312928Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.6 µs ± 41.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:47.316405Z",
     "iopub.status.busy": "2023-02-25T18:02:47.316055Z",
     "iopub.status.idle": "2023-02-25T18:02:51.914638Z",
     "shell.execute_reply": "2023-02-25T18:02:51.913931Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.6 µs ± 65.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:51.917473Z",
     "iopub.status.busy": "2023-02-25T18:02:51.917111Z",
     "iopub.status.idle": "2023-02-25T18:02:51.925155Z",
     "shell.execute_reply": "2023-02-25T18:02:51.924568Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "              \n",
       "                      [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "              \n",
       "                      [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "              \n",
       "                      [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "              \n",
       "                      [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "              \n",
       "                      [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "              \n",
       "                      [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]],\n",
       "              \n",
       "                      [[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                       [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                       [ 0.9901,  0.2347,  1.9765,  1.1955]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]],\n",
       "       \n",
       "               [[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]],\n",
       "       \n",
       "               [[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]],\n",
       "       \n",
       "               [[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]],\n",
       "       \n",
       "               [[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]],\n",
       "       \n",
       "               [[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]],\n",
       "       \n",
       "               [[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]],\n",
       "       \n",
       "               [[-0.8355, -1.0703,  1.5445],\n",
       "                [ 1.8138, -0.7282, -0.7805]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:51.927647Z",
     "iopub.status.busy": "2023-02-25T18:02:51.927304Z",
     "iopub.status.idle": "2023-02-25T18:02:58.169616Z",
     "shell.execute_reply": "2023-02-25T18:02:58.168945Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.8 µs ± 124 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:58.172607Z",
     "iopub.status.busy": "2023-02-25T18:02:58.172242Z",
     "iopub.status.idle": "2023-02-25T18:02:58.179529Z",
     "shell.execute_reply": "2023-02-25T18:02:58.178958Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                      [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                      [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                      [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                      [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                      [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                      [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955],\n",
       "                      [ 0.0311, -1.4602, -0.5836, -0.2576],\n",
       "                      [-1.4393,  1.6647,  0.7051, -0.0036],\n",
       "                      [ 0.9901,  0.2347,  1.9765,  1.1955]]),\n",
       "       ),\n",
       "    a: tensor([[-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805],\n",
       "               [-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805],\n",
       "               [-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805],\n",
       "               [-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805],\n",
       "               [-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805],\n",
       "               [-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805],\n",
       "               [-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805],\n",
       "               [-0.8355, -1.0703,  1.5445],\n",
       "               [ 1.8138, -0.7282, -0.7805]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:02:58.182322Z",
     "iopub.status.busy": "2023-02-25T18:02:58.181832Z",
     "iopub.status.idle": "2023-02-25T18:03:09.863001Z",
     "shell.execute_reply": "2023-02-25T18:03:09.862170Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 231 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:03:09.866004Z",
     "iopub.status.busy": "2023-02-25T18:03:09.865658Z",
     "iopub.status.idle": "2023-02-25T18:03:12.340001Z",
     "shell.execute_reply": "2023-02-25T18:03:12.339457Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "304 µs ± 1.34 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
