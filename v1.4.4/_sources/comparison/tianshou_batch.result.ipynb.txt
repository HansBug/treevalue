{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:07.026875Z",
     "iopub.status.busy": "2023-08-14T06:23:07.026387Z",
     "iopub.status.idle": "2023-08-14T06:23:08.398723Z",
     "shell.execute_reply": "2023-08-14T06:23:08.397886Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:08.402736Z",
     "iopub.status.busy": "2023-08-14T06:23:08.402264Z",
     "iopub.status.idle": "2023-08-14T06:23:08.431390Z",
     "shell.execute_reply": "2023-08-14T06:23:08.430688Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:08.434769Z",
     "iopub.status.busy": "2023-08-14T06:23:08.434539Z",
     "iopub.status.idle": "2023-08-14T06:23:08.443166Z",
     "shell.execute_reply": "2023-08-14T06:23:08.442443Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc0083bd0d0>\n",
       "├── 'a' --> tensor([[-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc0083bd520>\n",
       "    └── 'c' --> tensor([[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:08.446715Z",
     "iopub.status.busy": "2023-08-14T06:23:08.446352Z",
     "iopub.status.idle": "2023-08-14T06:23:08.451280Z",
     "shell.execute_reply": "2023-08-14T06:23:08.450569Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8996, -0.9988,  0.4572],\n",
       "        [ 0.3706, -0.5591, -0.1941]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:08.454831Z",
     "iopub.status.busy": "2023-08-14T06:23:08.454471Z",
     "iopub.status.idle": "2023-08-14T06:23:14.266749Z",
     "shell.execute_reply": "2023-08-14T06:23:14.266061Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.6 ns ± 0.0495 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:14.270361Z",
     "iopub.status.busy": "2023-08-14T06:23:14.269745Z",
     "iopub.status.idle": "2023-08-14T06:23:14.276368Z",
     "shell.execute_reply": "2023-08-14T06:23:14.275653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc0083bd0d0>\n",
       "├── 'a' --> tensor([[-0.7755,  0.6422,  0.6405],\n",
       "│                   [-1.1932,  0.2794,  0.0169]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc0083bd520>\n",
       "    └── 'c' --> tensor([[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:14.279523Z",
     "iopub.status.busy": "2023-08-14T06:23:14.279141Z",
     "iopub.status.idle": "2023-08-14T06:23:20.137523Z",
     "shell.execute_reply": "2023-08-14T06:23:20.136764Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.2 ns ± 0.122 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:20.141492Z",
     "iopub.status.busy": "2023-08-14T06:23:20.140773Z",
     "iopub.status.idle": "2023-08-14T06:23:20.519297Z",
     "shell.execute_reply": "2023-08-14T06:23:20.518541Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:20.523047Z",
     "iopub.status.busy": "2023-08-14T06:23:20.522560Z",
     "iopub.status.idle": "2023-08-14T06:23:20.531341Z",
     "shell.execute_reply": "2023-08-14T06:23:20.530663Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:20.534428Z",
     "iopub.status.busy": "2023-08-14T06:23:20.533897Z",
     "iopub.status.idle": "2023-08-14T06:23:20.538906Z",
     "shell.execute_reply": "2023-08-14T06:23:20.538210Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8996, -0.9988,  0.4572],\n",
       "        [ 0.3706, -0.5591, -0.1941]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:20.542596Z",
     "iopub.status.busy": "2023-08-14T06:23:20.542239Z",
     "iopub.status.idle": "2023-08-14T06:23:25.803719Z",
     "shell.execute_reply": "2023-08-14T06:23:25.802946Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.8 ns ± 0.0655 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:25.807189Z",
     "iopub.status.busy": "2023-08-14T06:23:25.806704Z",
     "iopub.status.idle": "2023-08-14T06:23:25.813016Z",
     "shell.execute_reply": "2023-08-14T06:23:25.812279Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.3970, -2.7109,  1.7050],\n",
       "               [-0.1942, -1.7102, -0.6237]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:25.816156Z",
     "iopub.status.busy": "2023-08-14T06:23:25.815784Z",
     "iopub.status.idle": "2023-08-14T06:23:30.401817Z",
     "shell.execute_reply": "2023-08-14T06:23:30.401058Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "565 ns ± 0.733 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:30.405733Z",
     "iopub.status.busy": "2023-08-14T06:23:30.405008Z",
     "iopub.status.idle": "2023-08-14T06:23:37.773158Z",
     "shell.execute_reply": "2023-08-14T06:23:37.772475Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "909 ns ± 1.54 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:37.776589Z",
     "iopub.status.busy": "2023-08-14T06:23:37.776113Z",
     "iopub.status.idle": "2023-08-14T06:23:46.968419Z",
     "shell.execute_reply": "2023-08-14T06:23:46.967662Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 57.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:46.972307Z",
     "iopub.status.busy": "2023-08-14T06:23:46.971659Z",
     "iopub.status.idle": "2023-08-14T06:23:46.975366Z",
     "shell.execute_reply": "2023-08-14T06:23:46.974579Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:46.978934Z",
     "iopub.status.busy": "2023-08-14T06:23:46.978559Z",
     "iopub.status.idle": "2023-08-14T06:23:58.958793Z",
     "shell.execute_reply": "2023-08-14T06:23:58.957956Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148 µs ± 574 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:23:58.962621Z",
     "iopub.status.busy": "2023-08-14T06:23:58.962123Z",
     "iopub.status.idle": "2023-08-14T06:24:10.771851Z",
     "shell.execute_reply": "2023-08-14T06:24:10.771177Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 839 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:10.775363Z",
     "iopub.status.busy": "2023-08-14T06:24:10.774851Z",
     "iopub.status.idle": "2023-08-14T06:24:10.778390Z",
     "shell.execute_reply": "2023-08-14T06:24:10.777821Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:10.781441Z",
     "iopub.status.busy": "2023-08-14T06:24:10.780834Z",
     "iopub.status.idle": "2023-08-14T06:24:10.788266Z",
     "shell.execute_reply": "2023-08-14T06:24:10.787661Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbf3c58afd0>\n",
       "├── 'a' --> tensor([[[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]],\n",
       "│           \n",
       "│                   [[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]],\n",
       "│           \n",
       "│                   [[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]],\n",
       "│           \n",
       "│                   [[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]],\n",
       "│           \n",
       "│                   [[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]],\n",
       "│           \n",
       "│                   [[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]],\n",
       "│           \n",
       "│                   [[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]],\n",
       "│           \n",
       "│                   [[-0.8996, -0.9988,  0.4572],\n",
       "│                    [ 0.3706, -0.5591, -0.1941]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbf3c58aca0>\n",
       "    └── 'c' --> tensor([[[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "                \n",
       "                        [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "                \n",
       "                        [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "                \n",
       "                        [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "                \n",
       "                        [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "                \n",
       "                        [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "                \n",
       "                        [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "                \n",
       "                        [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                         [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                         [ 0.5592, -1.2376, -2.0921, -2.0153]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:10.791116Z",
     "iopub.status.busy": "2023-08-14T06:24:10.790679Z",
     "iopub.status.idle": "2023-08-14T06:24:13.542032Z",
     "shell.execute_reply": "2023-08-14T06:24:13.541284Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.8 µs ± 41.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:13.545490Z",
     "iopub.status.busy": "2023-08-14T06:24:13.545058Z",
     "iopub.status.idle": "2023-08-14T06:24:13.556022Z",
     "shell.execute_reply": "2023-08-14T06:24:13.555346Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbf3c5b3f40>\n",
       "├── 'a' --> tensor([[-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941],\n",
       "│                   [-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941],\n",
       "│                   [-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941],\n",
       "│                   [-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941],\n",
       "│                   [-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941],\n",
       "│                   [-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941],\n",
       "│                   [-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941],\n",
       "│                   [-0.8996, -0.9988,  0.4572],\n",
       "│                   [ 0.3706, -0.5591, -0.1941]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbf3c683370>\n",
       "    └── 'c' --> tensor([[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                        [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                        [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                        [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                        [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                        [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                        [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                        [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                        [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                        [ 0.5592, -1.2376, -2.0921, -2.0153]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:13.559403Z",
     "iopub.status.busy": "2023-08-14T06:24:13.558993Z",
     "iopub.status.idle": "2023-08-14T06:24:16.149509Z",
     "shell.execute_reply": "2023-08-14T06:24:16.148724Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.8 µs ± 106 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:16.153221Z",
     "iopub.status.busy": "2023-08-14T06:24:16.152715Z",
     "iopub.status.idle": "2023-08-14T06:24:21.747539Z",
     "shell.execute_reply": "2023-08-14T06:24:21.746770Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.8 µs ± 32.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:21.751087Z",
     "iopub.status.busy": "2023-08-14T06:24:21.750602Z",
     "iopub.status.idle": "2023-08-14T06:24:21.758558Z",
     "shell.execute_reply": "2023-08-14T06:24:21.757829Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]],\n",
       "       \n",
       "               [[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]],\n",
       "       \n",
       "               [[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]],\n",
       "       \n",
       "               [[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]],\n",
       "       \n",
       "               [[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]],\n",
       "       \n",
       "               [[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]],\n",
       "       \n",
       "               [[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]],\n",
       "       \n",
       "               [[-0.8996, -0.9988,  0.4572],\n",
       "                [ 0.3706, -0.5591, -0.1941]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "              \n",
       "                      [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "              \n",
       "                      [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "              \n",
       "                      [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "              \n",
       "                      [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "              \n",
       "                      [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "              \n",
       "                      [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]],\n",
       "              \n",
       "                      [[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                       [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                       [ 0.5592, -1.2376, -2.0921, -2.0153]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:21.761798Z",
     "iopub.status.busy": "2023-08-14T06:24:21.761418Z",
     "iopub.status.idle": "2023-08-14T06:24:28.591299Z",
     "shell.execute_reply": "2023-08-14T06:24:28.590524Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.1 µs ± 123 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:28.594880Z",
     "iopub.status.busy": "2023-08-14T06:24:28.594349Z",
     "iopub.status.idle": "2023-08-14T06:24:28.602187Z",
     "shell.execute_reply": "2023-08-14T06:24:28.601449Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941],\n",
       "               [-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941],\n",
       "               [-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941],\n",
       "               [-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941],\n",
       "               [-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941],\n",
       "               [-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941],\n",
       "               [-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941],\n",
       "               [-0.8996, -0.9988,  0.4572],\n",
       "               [ 0.3706, -0.5591, -0.1941]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                      [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                      [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                      [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                      [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                      [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                      [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153],\n",
       "                      [ 0.5583,  0.0673,  0.7767, -0.0027],\n",
       "                      [ 0.2225,  0.1238,  0.1468, -0.7128],\n",
       "                      [ 0.5592, -1.2376, -2.0921, -2.0153]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:28.605629Z",
     "iopub.status.busy": "2023-08-14T06:24:28.605079Z",
     "iopub.status.idle": "2023-08-14T06:24:41.044963Z",
     "shell.execute_reply": "2023-08-14T06:24:41.044202Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "153 µs ± 352 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:24:41.048408Z",
     "iopub.status.busy": "2023-08-14T06:24:41.047988Z",
     "iopub.status.idle": "2023-08-14T06:24:43.932318Z",
     "shell.execute_reply": "2023-08-14T06:24:43.931497Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "354 µs ± 7.02 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
