{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:16.128408Z",
     "iopub.status.busy": "2023-02-24T07:44:16.127953Z",
     "iopub.status.idle": "2023-02-24T07:44:17.104480Z",
     "shell.execute_reply": "2023-02-24T07:44:17.103098Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:17.108619Z",
     "iopub.status.busy": "2023-02-24T07:44:17.107953Z",
     "iopub.status.idle": "2023-02-24T07:44:17.142765Z",
     "shell.execute_reply": "2023-02-24T07:44:17.141687Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:17.146415Z",
     "iopub.status.busy": "2023-02-24T07:44:17.145809Z",
     "iopub.status.idle": "2023-02-24T07:44:17.155626Z",
     "shell.execute_reply": "2023-02-24T07:44:17.154991Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f79fc40c550>\n",
       "├── 'a' --> tensor([[-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692]])\n",
       "└── 'x' --> <FastTreeValue 0x7f79fc40c580>\n",
       "    └── 'c' --> tensor([[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:17.158646Z",
     "iopub.status.busy": "2023-02-24T07:44:17.158268Z",
     "iopub.status.idle": "2023-02-24T07:44:17.164642Z",
     "shell.execute_reply": "2023-02-24T07:44:17.164022Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9704,  0.8543, -0.4403],\n",
       "        [-1.2249, -0.2003, -0.1692]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:17.167567Z",
     "iopub.status.busy": "2023-02-24T07:44:17.167210Z",
     "iopub.status.idle": "2023-02-24T07:44:22.558440Z",
     "shell.execute_reply": "2023-02-24T07:44:22.557562Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.8 ns ± 0.0276 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:22.562083Z",
     "iopub.status.busy": "2023-02-24T07:44:22.561639Z",
     "iopub.status.idle": "2023-02-24T07:44:22.568496Z",
     "shell.execute_reply": "2023-02-24T07:44:22.567790Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f79fc40c550>\n",
       "├── 'a' --> tensor([[ 0.1788, -1.6586, -1.4141],\n",
       "│                   [-0.9242, -0.8671,  0.3343]])\n",
       "└── 'x' --> <FastTreeValue 0x7f79fc40c580>\n",
       "    └── 'c' --> tensor([[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:22.571845Z",
     "iopub.status.busy": "2023-02-24T07:44:22.571291Z",
     "iopub.status.idle": "2023-02-24T07:44:28.038417Z",
     "shell.execute_reply": "2023-02-24T07:44:28.037522Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.3 ns ± 0.0461 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:28.041824Z",
     "iopub.status.busy": "2023-02-24T07:44:28.041395Z",
     "iopub.status.idle": "2023-02-24T07:44:28.410217Z",
     "shell.execute_reply": "2023-02-24T07:44:28.409443Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:28.414150Z",
     "iopub.status.busy": "2023-02-24T07:44:28.413525Z",
     "iopub.status.idle": "2023-02-24T07:44:28.420302Z",
     "shell.execute_reply": "2023-02-24T07:44:28.419682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:28.423311Z",
     "iopub.status.busy": "2023-02-24T07:44:28.422796Z",
     "iopub.status.idle": "2023-02-24T07:44:28.428077Z",
     "shell.execute_reply": "2023-02-24T07:44:28.427399Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9704,  0.8543, -0.4403],\n",
       "        [-1.2249, -0.2003, -0.1692]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:28.431014Z",
     "iopub.status.busy": "2023-02-24T07:44:28.430660Z",
     "iopub.status.idle": "2023-02-24T07:44:33.744463Z",
     "shell.execute_reply": "2023-02-24T07:44:33.743601Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.4 ns ± 0.0471 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:33.748173Z",
     "iopub.status.busy": "2023-02-24T07:44:33.747575Z",
     "iopub.status.idle": "2023-02-24T07:44:33.754507Z",
     "shell.execute_reply": "2023-02-24T07:44:33.753864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.9028,  0.4506, -0.0981],\n",
       "               [ 0.0139,  0.0194, -0.5882]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:33.757231Z",
     "iopub.status.busy": "2023-02-24T07:44:33.756858Z",
     "iopub.status.idle": "2023-02-24T07:44:37.838458Z",
     "shell.execute_reply": "2023-02-24T07:44:37.837586Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "503 ns ± 0.254 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:37.842610Z",
     "iopub.status.busy": "2023-02-24T07:44:37.841855Z",
     "iopub.status.idle": "2023-02-24T07:44:44.601075Z",
     "shell.execute_reply": "2023-02-24T07:44:44.600318Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "833 ns ± 4.11 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:44.604480Z",
     "iopub.status.busy": "2023-02-24T07:44:44.604224Z",
     "iopub.status.idle": "2023-02-24T07:44:53.521261Z",
     "shell.execute_reply": "2023-02-24T07:44:53.520338Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 µs ± 25.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:53.525294Z",
     "iopub.status.busy": "2023-02-24T07:44:53.524656Z",
     "iopub.status.idle": "2023-02-24T07:44:53.529306Z",
     "shell.execute_reply": "2023-02-24T07:44:53.528605Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:44:53.532412Z",
     "iopub.status.busy": "2023-02-24T07:44:53.532051Z",
     "iopub.status.idle": "2023-02-24T07:45:05.430910Z",
     "shell.execute_reply": "2023-02-24T07:45:05.430172Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "147 µs ± 1.67 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:05.434042Z",
     "iopub.status.busy": "2023-02-24T07:45:05.433794Z",
     "iopub.status.idle": "2023-02-24T07:45:17.200021Z",
     "shell.execute_reply": "2023-02-24T07:45:17.199364Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 825 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:17.203401Z",
     "iopub.status.busy": "2023-02-24T07:45:17.203130Z",
     "iopub.status.idle": "2023-02-24T07:45:17.207495Z",
     "shell.execute_reply": "2023-02-24T07:45:17.206857Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:17.210429Z",
     "iopub.status.busy": "2023-02-24T07:45:17.209795Z",
     "iopub.status.idle": "2023-02-24T07:45:17.217544Z",
     "shell.execute_reply": "2023-02-24T07:45:17.216848Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f79520d14f0>\n",
       "├── 'a' --> tensor([[[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]],\n",
       "│           \n",
       "│                   [[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]],\n",
       "│           \n",
       "│                   [[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]],\n",
       "│           \n",
       "│                   [[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]],\n",
       "│           \n",
       "│                   [[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]],\n",
       "│           \n",
       "│                   [[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]],\n",
       "│           \n",
       "│                   [[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]],\n",
       "│           \n",
       "│                   [[-0.9704,  0.8543, -0.4403],\n",
       "│                    [-1.2249, -0.2003, -0.1692]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f79520d1fa0>\n",
       "    └── 'c' --> tensor([[[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "                \n",
       "                        [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "                \n",
       "                        [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "                \n",
       "                        [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "                \n",
       "                        [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "                \n",
       "                        [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "                \n",
       "                        [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "                \n",
       "                        [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                         [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                         [-1.0692, -1.0326,  0.0490, -0.4640]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:17.220441Z",
     "iopub.status.busy": "2023-02-24T07:45:17.219898Z",
     "iopub.status.idle": "2023-02-24T07:45:19.837570Z",
     "shell.execute_reply": "2023-02-24T07:45:19.836826Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.2 µs ± 70.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:19.841013Z",
     "iopub.status.busy": "2023-02-24T07:45:19.840433Z",
     "iopub.status.idle": "2023-02-24T07:45:19.849055Z",
     "shell.execute_reply": "2023-02-24T07:45:19.848401Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7958ed7280>\n",
       "├── 'a' --> tensor([[-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692],\n",
       "│                   [-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692],\n",
       "│                   [-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692],\n",
       "│                   [-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692],\n",
       "│                   [-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692],\n",
       "│                   [-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692],\n",
       "│                   [-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692],\n",
       "│                   [-0.9704,  0.8543, -0.4403],\n",
       "│                   [-1.2249, -0.2003, -0.1692]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7952083f40>\n",
       "    └── 'c' --> tensor([[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                        [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                        [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                        [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                        [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                        [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                        [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                        [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                        [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                        [-1.0692, -1.0326,  0.0490, -0.4640]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:19.852369Z",
     "iopub.status.busy": "2023-02-24T07:45:19.851778Z",
     "iopub.status.idle": "2023-02-24T07:45:22.318168Z",
     "shell.execute_reply": "2023-02-24T07:45:22.317285Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.3 µs ± 54.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:22.321528Z",
     "iopub.status.busy": "2023-02-24T07:45:22.321108Z",
     "iopub.status.idle": "2023-02-24T07:45:26.967800Z",
     "shell.execute_reply": "2023-02-24T07:45:26.966901Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.1 µs ± 64.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:26.971118Z",
     "iopub.status.busy": "2023-02-24T07:45:26.970716Z",
     "iopub.status.idle": "2023-02-24T07:45:26.979262Z",
     "shell.execute_reply": "2023-02-24T07:45:26.978622Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]],\n",
       "       \n",
       "               [[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]],\n",
       "       \n",
       "               [[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]],\n",
       "       \n",
       "               [[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]],\n",
       "       \n",
       "               [[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]],\n",
       "       \n",
       "               [[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]],\n",
       "       \n",
       "               [[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]],\n",
       "       \n",
       "               [[-0.9704,  0.8543, -0.4403],\n",
       "                [-1.2249, -0.2003, -0.1692]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "              \n",
       "                      [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "              \n",
       "                      [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "              \n",
       "                      [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "              \n",
       "                      [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "              \n",
       "                      [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "              \n",
       "                      [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]],\n",
       "              \n",
       "                      [[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                       [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                       [-1.0692, -1.0326,  0.0490, -0.4640]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:26.982111Z",
     "iopub.status.busy": "2023-02-24T07:45:26.981561Z",
     "iopub.status.idle": "2023-02-24T07:45:33.295421Z",
     "shell.execute_reply": "2023-02-24T07:45:33.294543Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.7 µs ± 158 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:33.299117Z",
     "iopub.status.busy": "2023-02-24T07:45:33.298687Z",
     "iopub.status.idle": "2023-02-24T07:45:33.307128Z",
     "shell.execute_reply": "2023-02-24T07:45:33.306477Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692],\n",
       "               [-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692],\n",
       "               [-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692],\n",
       "               [-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692],\n",
       "               [-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692],\n",
       "               [-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692],\n",
       "               [-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692],\n",
       "               [-0.9704,  0.8543, -0.4403],\n",
       "               [-1.2249, -0.2003, -0.1692]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                      [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                      [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                      [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                      [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                      [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                      [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640],\n",
       "                      [ 0.1953, -1.5366, -1.5377, -0.8438],\n",
       "                      [-0.5934,  0.3422,  0.4184,  0.8856],\n",
       "                      [-1.0692, -1.0326,  0.0490, -0.4640]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:33.310111Z",
     "iopub.status.busy": "2023-02-24T07:45:33.309731Z",
     "iopub.status.idle": "2023-02-24T07:45:45.335658Z",
     "shell.execute_reply": "2023-02-24T07:45:45.334750Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148 µs ± 1.62 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:45:45.339355Z",
     "iopub.status.busy": "2023-02-24T07:45:45.338922Z",
     "iopub.status.idle": "2023-02-24T07:45:47.979142Z",
     "shell.execute_reply": "2023-02-24T07:45:47.978513Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "324 µs ± 741 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
