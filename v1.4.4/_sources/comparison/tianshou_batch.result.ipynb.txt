{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:36.755984Z",
     "iopub.status.busy": "2023-02-26T14:36:36.755417Z",
     "iopub.status.idle": "2023-02-26T14:36:37.701381Z",
     "shell.execute_reply": "2023-02-26T14:36:37.700662Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:37.705270Z",
     "iopub.status.busy": "2023-02-26T14:36:37.704626Z",
     "iopub.status.idle": "2023-02-26T14:36:37.739284Z",
     "shell.execute_reply": "2023-02-26T14:36:37.738595Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:37.742755Z",
     "iopub.status.busy": "2023-02-26T14:36:37.742187Z",
     "iopub.status.idle": "2023-02-26T14:36:37.751925Z",
     "shell.execute_reply": "2023-02-26T14:36:37.751303Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd8bc4d9910>\n",
       "├── 'a' --> tensor([[ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd8bc4d9ac0>\n",
       "    └── 'c' --> tensor([[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:37.754457Z",
     "iopub.status.busy": "2023-02-26T14:36:37.754227Z",
     "iopub.status.idle": "2023-02-26T14:36:37.759248Z",
     "shell.execute_reply": "2023-02-26T14:36:37.758571Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4364,  0.6757, -0.8093],\n",
       "        [ 0.0915, -1.6948, -1.1888]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:37.762152Z",
     "iopub.status.busy": "2023-02-26T14:36:37.761802Z",
     "iopub.status.idle": "2023-02-26T14:36:42.566957Z",
     "shell.execute_reply": "2023-02-26T14:36:42.566144Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59 ns ± 0.0619 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:42.570408Z",
     "iopub.status.busy": "2023-02-26T14:36:42.569750Z",
     "iopub.status.idle": "2023-02-26T14:36:42.576013Z",
     "shell.execute_reply": "2023-02-26T14:36:42.575327Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd8bc4d9910>\n",
       "├── 'a' --> tensor([[ 1.6974,  0.9339,  0.3050],\n",
       "│                   [ 1.4125, -0.0343, -2.0125]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd8bc4d9ac0>\n",
       "    └── 'c' --> tensor([[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:42.579086Z",
     "iopub.status.busy": "2023-02-26T14:36:42.578459Z",
     "iopub.status.idle": "2023-02-26T14:36:48.245082Z",
     "shell.execute_reply": "2023-02-26T14:36:48.244303Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.7 ns ± 0.0188 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:48.248309Z",
     "iopub.status.busy": "2023-02-26T14:36:48.247710Z",
     "iopub.status.idle": "2023-02-26T14:36:48.594905Z",
     "shell.execute_reply": "2023-02-26T14:36:48.594161Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:48.598864Z",
     "iopub.status.busy": "2023-02-26T14:36:48.598108Z",
     "iopub.status.idle": "2023-02-26T14:36:48.604635Z",
     "shell.execute_reply": "2023-02-26T14:36:48.604026Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:48.607635Z",
     "iopub.status.busy": "2023-02-26T14:36:48.607190Z",
     "iopub.status.idle": "2023-02-26T14:36:48.612765Z",
     "shell.execute_reply": "2023-02-26T14:36:48.612156Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4364,  0.6757, -0.8093],\n",
       "        [ 0.0915, -1.6948, -1.1888]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:48.615648Z",
     "iopub.status.busy": "2023-02-26T14:36:48.615061Z",
     "iopub.status.idle": "2023-02-26T14:36:52.960510Z",
     "shell.execute_reply": "2023-02-26T14:36:52.959795Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53.5 ns ± 0.0336 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:52.963296Z",
     "iopub.status.busy": "2023-02-26T14:36:52.962942Z",
     "iopub.status.idle": "2023-02-26T14:36:52.969329Z",
     "shell.execute_reply": "2023-02-26T14:36:52.968751Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.1522, -1.8388,  0.5697],\n",
       "               [-0.6811,  0.3520,  0.3934]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:52.971900Z",
     "iopub.status.busy": "2023-02-26T14:36:52.971545Z",
     "iopub.status.idle": "2023-02-26T14:36:56.893932Z",
     "shell.execute_reply": "2023-02-26T14:36:56.893213Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "483 ns ± 0.161 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:36:56.897065Z",
     "iopub.status.busy": "2023-02-26T14:36:56.896491Z",
     "iopub.status.idle": "2023-02-26T14:37:03.838780Z",
     "shell.execute_reply": "2023-02-26T14:37:03.838047Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "855 ns ± 1.46 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:03.841756Z",
     "iopub.status.busy": "2023-02-26T14:37:03.841384Z",
     "iopub.status.idle": "2023-02-26T14:37:13.132812Z",
     "shell.execute_reply": "2023-02-26T14:37:13.132090Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 29.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:13.135963Z",
     "iopub.status.busy": "2023-02-26T14:37:13.135416Z",
     "iopub.status.idle": "2023-02-26T14:37:13.139462Z",
     "shell.execute_reply": "2023-02-26T14:37:13.138856Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:13.141949Z",
     "iopub.status.busy": "2023-02-26T14:37:13.141604Z",
     "iopub.status.idle": "2023-02-26T14:37:24.149878Z",
     "shell.execute_reply": "2023-02-26T14:37:24.149300Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "136 µs ± 331 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:24.153760Z",
     "iopub.status.busy": "2023-02-26T14:37:24.152815Z",
     "iopub.status.idle": "2023-02-26T14:37:35.295296Z",
     "shell.execute_reply": "2023-02-26T14:37:35.294683Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 324 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:35.299199Z",
     "iopub.status.busy": "2023-02-26T14:37:35.298237Z",
     "iopub.status.idle": "2023-02-26T14:37:35.305762Z",
     "shell.execute_reply": "2023-02-26T14:37:35.304472Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:35.309757Z",
     "iopub.status.busy": "2023-02-26T14:37:35.308944Z",
     "iopub.status.idle": "2023-02-26T14:37:35.326151Z",
     "shell.execute_reply": "2023-02-26T14:37:35.325199Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd8bc53cfd0>\n",
       "├── 'a' --> tensor([[[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]],\n",
       "│           \n",
       "│                   [[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]],\n",
       "│           \n",
       "│                   [[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]],\n",
       "│           \n",
       "│                   [[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]],\n",
       "│           \n",
       "│                   [[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]],\n",
       "│           \n",
       "│                   [[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]],\n",
       "│           \n",
       "│                   [[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]],\n",
       "│           \n",
       "│                   [[ 0.4364,  0.6757, -0.8093],\n",
       "│                    [ 0.0915, -1.6948, -1.1888]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd89815b310>\n",
       "    └── 'c' --> tensor([[[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "                \n",
       "                        [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "                \n",
       "                        [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "                \n",
       "                        [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "                \n",
       "                        [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "                \n",
       "                        [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "                \n",
       "                        [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "                \n",
       "                        [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                         [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                         [-0.6989,  0.9514,  0.6280,  0.4683]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:35.331097Z",
     "iopub.status.busy": "2023-02-26T14:37:35.330875Z",
     "iopub.status.idle": "2023-02-26T14:37:37.940614Z",
     "shell.execute_reply": "2023-02-26T14:37:37.939897Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 92.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:37.943410Z",
     "iopub.status.busy": "2023-02-26T14:37:37.943050Z",
     "iopub.status.idle": "2023-02-26T14:37:37.951804Z",
     "shell.execute_reply": "2023-02-26T14:37:37.951212Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd80f185130>\n",
       "├── 'a' --> tensor([[ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888],\n",
       "│                   [ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888],\n",
       "│                   [ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888],\n",
       "│                   [ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888],\n",
       "│                   [ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888],\n",
       "│                   [ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888],\n",
       "│                   [ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888],\n",
       "│                   [ 0.4364,  0.6757, -0.8093],\n",
       "│                   [ 0.0915, -1.6948, -1.1888]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd80f185af0>\n",
       "    └── 'c' --> tensor([[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                        [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                        [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                        [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                        [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                        [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                        [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                        [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                        [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                        [-0.6989,  0.9514,  0.6280,  0.4683]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:37.954485Z",
     "iopub.status.busy": "2023-02-26T14:37:37.954148Z",
     "iopub.status.idle": "2023-02-26T14:37:40.392184Z",
     "shell.execute_reply": "2023-02-26T14:37:40.391464Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 µs ± 99.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:40.395422Z",
     "iopub.status.busy": "2023-02-26T14:37:40.394838Z",
     "iopub.status.idle": "2023-02-26T14:37:44.956987Z",
     "shell.execute_reply": "2023-02-26T14:37:44.956235Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.1 µs ± 86 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:44.960040Z",
     "iopub.status.busy": "2023-02-26T14:37:44.959690Z",
     "iopub.status.idle": "2023-02-26T14:37:44.968133Z",
     "shell.execute_reply": "2023-02-26T14:37:44.967545Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "              \n",
       "                      [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "              \n",
       "                      [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "              \n",
       "                      [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "              \n",
       "                      [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "              \n",
       "                      [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "              \n",
       "                      [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]],\n",
       "              \n",
       "                      [[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                       [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                       [-0.6989,  0.9514,  0.6280,  0.4683]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]],\n",
       "       \n",
       "               [[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]],\n",
       "       \n",
       "               [[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]],\n",
       "       \n",
       "               [[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]],\n",
       "       \n",
       "               [[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]],\n",
       "       \n",
       "               [[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]],\n",
       "       \n",
       "               [[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]],\n",
       "       \n",
       "               [[ 0.4364,  0.6757, -0.8093],\n",
       "                [ 0.0915, -1.6948, -1.1888]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:44.970832Z",
     "iopub.status.busy": "2023-02-26T14:37:44.970497Z",
     "iopub.status.idle": "2023-02-26T14:37:51.342623Z",
     "shell.execute_reply": "2023-02-26T14:37:51.341906Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.4 µs ± 72.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:51.345723Z",
     "iopub.status.busy": "2023-02-26T14:37:51.345354Z",
     "iopub.status.idle": "2023-02-26T14:37:51.353867Z",
     "shell.execute_reply": "2023-02-26T14:37:51.353258Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                      [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                      [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                      [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                      [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                      [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                      [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683],\n",
       "                      [ 1.5318,  1.1804, -0.7363, -0.9501],\n",
       "                      [ 0.1973,  0.9728, -0.7312,  1.3755],\n",
       "                      [-0.6989,  0.9514,  0.6280,  0.4683]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888],\n",
       "               [ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888],\n",
       "               [ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888],\n",
       "               [ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888],\n",
       "               [ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888],\n",
       "               [ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888],\n",
       "               [ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888],\n",
       "               [ 0.4364,  0.6757, -0.8093],\n",
       "               [ 0.0915, -1.6948, -1.1888]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:37:51.356612Z",
     "iopub.status.busy": "2023-02-26T14:37:51.356049Z",
     "iopub.status.idle": "2023-02-26T14:38:02.915848Z",
     "shell.execute_reply": "2023-02-26T14:38:02.915097Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 291 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:38:02.919025Z",
     "iopub.status.busy": "2023-02-26T14:38:02.918484Z",
     "iopub.status.idle": "2023-02-26T14:38:05.457722Z",
     "shell.execute_reply": "2023-02-26T14:38:05.457134Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313 µs ± 18.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
