{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:14.974419Z",
     "iopub.status.busy": "2023-03-06T10:16:14.974105Z",
     "iopub.status.idle": "2023-03-06T10:16:16.125141Z",
     "shell.execute_reply": "2023-03-06T10:16:16.124247Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:16.129603Z",
     "iopub.status.busy": "2023-03-06T10:16:16.129264Z",
     "iopub.status.idle": "2023-03-06T10:16:16.171321Z",
     "shell.execute_reply": "2023-03-06T10:16:16.170463Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:16.174273Z",
     "iopub.status.busy": "2023-03-06T10:16:16.174004Z",
     "iopub.status.idle": "2023-03-06T10:16:16.186082Z",
     "shell.execute_reply": "2023-03-06T10:16:16.185239Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd164332c70>\n",
       "├── 'a' --> tensor([[-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd164332ca0>\n",
       "    └── 'c' --> tensor([[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:16.189046Z",
     "iopub.status.busy": "2023-03-06T10:16:16.188740Z",
     "iopub.status.idle": "2023-03-06T10:16:16.197257Z",
     "shell.execute_reply": "2023-03-06T10:16:16.196291Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.0387,  2.1786,  1.0509],\n",
       "        [ 1.2989,  0.8705,  0.5961]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:16.200319Z",
     "iopub.status.busy": "2023-03-06T10:16:16.200046Z",
     "iopub.status.idle": "2023-03-06T10:16:21.699969Z",
     "shell.execute_reply": "2023-03-06T10:16:21.698794Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68 ns ± 1.04 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:21.703922Z",
     "iopub.status.busy": "2023-03-06T10:16:21.703438Z",
     "iopub.status.idle": "2023-03-06T10:16:21.712291Z",
     "shell.execute_reply": "2023-03-06T10:16:21.711459Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd164332c70>\n",
       "├── 'a' --> tensor([[-0.7862, -0.9325, -0.3381],\n",
       "│                   [-0.6127,  0.8699, -2.7746]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd164332ca0>\n",
       "    └── 'c' --> tensor([[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:21.715937Z",
     "iopub.status.busy": "2023-03-06T10:16:21.715407Z",
     "iopub.status.idle": "2023-03-06T10:16:27.330542Z",
     "shell.execute_reply": "2023-03-06T10:16:27.329622Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.1 ns ± 1.81 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:27.335013Z",
     "iopub.status.busy": "2023-03-06T10:16:27.333565Z",
     "iopub.status.idle": "2023-03-06T10:16:27.733941Z",
     "shell.execute_reply": "2023-03-06T10:16:27.732944Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:27.737914Z",
     "iopub.status.busy": "2023-03-06T10:16:27.737449Z",
     "iopub.status.idle": "2023-03-06T10:16:27.746751Z",
     "shell.execute_reply": "2023-03-06T10:16:27.745682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:27.750734Z",
     "iopub.status.busy": "2023-03-06T10:16:27.750467Z",
     "iopub.status.idle": "2023-03-06T10:16:27.756810Z",
     "shell.execute_reply": "2023-03-06T10:16:27.755986Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.0387,  2.1786,  1.0509],\n",
       "        [ 1.2989,  0.8705,  0.5961]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:27.760604Z",
     "iopub.status.busy": "2023-03-06T10:16:27.760347Z",
     "iopub.status.idle": "2023-03-06T10:16:32.762150Z",
     "shell.execute_reply": "2023-03-06T10:16:32.760966Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.2 ns ± 2.5 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:32.765654Z",
     "iopub.status.busy": "2023-03-06T10:16:32.764962Z",
     "iopub.status.idle": "2023-03-06T10:16:32.772338Z",
     "shell.execute_reply": "2023-03-06T10:16:32.771584Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0889, -1.0488, -2.0534],\n",
       "               [ 0.1907, -0.0112,  0.9962]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:32.775225Z",
     "iopub.status.busy": "2023-03-06T10:16:32.774949Z",
     "iopub.status.idle": "2023-03-06T10:16:37.688039Z",
     "shell.execute_reply": "2023-03-06T10:16:37.687128Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "607 ns ± 6.27 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:37.692185Z",
     "iopub.status.busy": "2023-03-06T10:16:37.691599Z",
     "iopub.status.idle": "2023-03-06T10:16:45.775229Z",
     "shell.execute_reply": "2023-03-06T10:16:45.774171Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "985 ns ± 18.5 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:45.779140Z",
     "iopub.status.busy": "2023-03-06T10:16:45.778659Z",
     "iopub.status.idle": "2023-03-06T10:16:55.953867Z",
     "shell.execute_reply": "2023-03-06T10:16:55.952694Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.5 µs ± 182 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:55.957499Z",
     "iopub.status.busy": "2023-03-06T10:16:55.957204Z",
     "iopub.status.idle": "2023-03-06T10:16:55.962762Z",
     "shell.execute_reply": "2023-03-06T10:16:55.961360Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:55.966200Z",
     "iopub.status.busy": "2023-03-06T10:16:55.965893Z",
     "iopub.status.idle": "2023-03-06T10:16:58.062914Z",
     "shell.execute_reply": "2023-03-06T10:16:58.062026Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "258 µs ± 7.59 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:16:58.067322Z",
     "iopub.status.busy": "2023-03-06T10:16:58.066634Z",
     "iopub.status.idle": "2023-03-06T10:17:00.109144Z",
     "shell.execute_reply": "2023-03-06T10:17:00.108296Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "250 µs ± 6.77 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:00.112608Z",
     "iopub.status.busy": "2023-03-06T10:17:00.111936Z",
     "iopub.status.idle": "2023-03-06T10:17:00.117155Z",
     "shell.execute_reply": "2023-03-06T10:17:00.116296Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:00.120020Z",
     "iopub.status.busy": "2023-03-06T10:17:00.119561Z",
     "iopub.status.idle": "2023-03-06T10:17:00.128983Z",
     "shell.execute_reply": "2023-03-06T10:17:00.128157Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd0b4f688b0>\n",
       "├── 'a' --> tensor([[[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]],\n",
       "│           \n",
       "│                   [[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]],\n",
       "│           \n",
       "│                   [[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]],\n",
       "│           \n",
       "│                   [[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]],\n",
       "│           \n",
       "│                   [[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]],\n",
       "│           \n",
       "│                   [[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]],\n",
       "│           \n",
       "│                   [[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]],\n",
       "│           \n",
       "│                   [[-0.0387,  2.1786,  1.0509],\n",
       "│                    [ 1.2989,  0.8705,  0.5961]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd0bbbebf70>\n",
       "    └── 'c' --> tensor([[[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "                \n",
       "                        [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "                \n",
       "                        [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "                \n",
       "                        [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "                \n",
       "                        [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "                \n",
       "                        [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "                \n",
       "                        [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "                \n",
       "                        [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                         [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                         [ 0.3915,  0.8803, -0.6810, -0.8067]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:00.132301Z",
     "iopub.status.busy": "2023-03-06T10:17:00.131742Z",
     "iopub.status.idle": "2023-03-06T10:17:03.641133Z",
     "shell.execute_reply": "2023-03-06T10:17:03.639927Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.8 µs ± 1.29 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:03.644869Z",
     "iopub.status.busy": "2023-03-06T10:17:03.644512Z",
     "iopub.status.idle": "2023-03-06T10:17:03.655970Z",
     "shell.execute_reply": "2023-03-06T10:17:03.655192Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd0bbbeba30>\n",
       "├── 'a' --> tensor([[-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961],\n",
       "│                   [-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961],\n",
       "│                   [-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961],\n",
       "│                   [-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961],\n",
       "│                   [-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961],\n",
       "│                   [-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961],\n",
       "│                   [-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961],\n",
       "│                   [-0.0387,  2.1786,  1.0509],\n",
       "│                   [ 1.2989,  0.8705,  0.5961]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd0bbbfc760>\n",
       "    └── 'c' --> tensor([[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                        [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                        [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                        [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                        [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                        [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                        [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                        [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                        [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                        [ 0.3915,  0.8803, -0.6810, -0.8067]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:03.659930Z",
     "iopub.status.busy": "2023-03-06T10:17:03.659328Z",
     "iopub.status.idle": "2023-03-06T10:17:06.916373Z",
     "shell.execute_reply": "2023-03-06T10:17:06.915311Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40 µs ± 518 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:06.920139Z",
     "iopub.status.busy": "2023-03-06T10:17:06.919813Z",
     "iopub.status.idle": "2023-03-06T10:17:13.238904Z",
     "shell.execute_reply": "2023-03-06T10:17:13.237967Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.6 µs ± 2.34 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:13.242807Z",
     "iopub.status.busy": "2023-03-06T10:17:13.242474Z",
     "iopub.status.idle": "2023-03-06T10:17:13.252765Z",
     "shell.execute_reply": "2023-03-06T10:17:13.251810Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]],\n",
       "       \n",
       "               [[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]],\n",
       "       \n",
       "               [[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]],\n",
       "       \n",
       "               [[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]],\n",
       "       \n",
       "               [[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]],\n",
       "       \n",
       "               [[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]],\n",
       "       \n",
       "               [[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]],\n",
       "       \n",
       "               [[-0.0387,  2.1786,  1.0509],\n",
       "                [ 1.2989,  0.8705,  0.5961]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "              \n",
       "                      [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "              \n",
       "                      [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "              \n",
       "                      [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "              \n",
       "                      [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "              \n",
       "                      [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "              \n",
       "                      [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]],\n",
       "              \n",
       "                      [[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                       [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                       [ 0.3915,  0.8803, -0.6810, -0.8067]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:13.256457Z",
     "iopub.status.busy": "2023-03-06T10:17:13.256053Z",
     "iopub.status.idle": "2023-03-06T10:17:28.284468Z",
     "shell.execute_reply": "2023-03-06T10:17:28.283382Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "185 µs ± 2.42 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:28.287961Z",
     "iopub.status.busy": "2023-03-06T10:17:28.287402Z",
     "iopub.status.idle": "2023-03-06T10:17:28.297134Z",
     "shell.execute_reply": "2023-03-06T10:17:28.296019Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961],\n",
       "               [-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961],\n",
       "               [-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961],\n",
       "               [-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961],\n",
       "               [-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961],\n",
       "               [-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961],\n",
       "               [-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961],\n",
       "               [-0.0387,  2.1786,  1.0509],\n",
       "               [ 1.2989,  0.8705,  0.5961]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                      [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                      [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                      [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                      [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                      [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                      [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067],\n",
       "                      [ 1.0969, -1.3155,  0.5434, -1.3069],\n",
       "                      [-0.4802, -0.7260, -0.2455, -1.1421],\n",
       "                      [ 0.3915,  0.8803, -0.6810, -0.8067]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:28.300020Z",
     "iopub.status.busy": "2023-03-06T10:17:28.299768Z",
     "iopub.status.idle": "2023-03-06T10:17:42.053230Z",
     "shell.execute_reply": "2023-03-06T10:17:42.052166Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "170 µs ± 2.96 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T10:17:42.057971Z",
     "iopub.status.busy": "2023-03-06T10:17:42.056577Z",
     "iopub.status.idle": "2023-03-06T10:17:46.146864Z",
     "shell.execute_reply": "2023-03-06T10:17:46.145934Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500 µs ± 10.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
