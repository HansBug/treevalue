{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:33.501725Z",
     "iopub.status.busy": "2023-02-26T14:22:33.501452Z",
     "iopub.status.idle": "2023-02-26T14:22:34.735288Z",
     "shell.execute_reply": "2023-02-26T14:22:34.734057Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:34.740192Z",
     "iopub.status.busy": "2023-02-26T14:22:34.739777Z",
     "iopub.status.idle": "2023-02-26T14:22:34.786945Z",
     "shell.execute_reply": "2023-02-26T14:22:34.784858Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:34.791076Z",
     "iopub.status.busy": "2023-02-26T14:22:34.790759Z",
     "iopub.status.idle": "2023-02-26T14:22:34.803927Z",
     "shell.execute_reply": "2023-02-26T14:22:34.802940Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f73208cc190>\n",
       "├── 'a' --> tensor([[ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088]])\n",
       "└── 'x' --> <FastTreeValue 0x7f73208ccee0>\n",
       "    └── 'c' --> tensor([[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:34.807697Z",
     "iopub.status.busy": "2023-02-26T14:22:34.807401Z",
     "iopub.status.idle": "2023-02-26T14:22:34.815669Z",
     "shell.execute_reply": "2023-02-26T14:22:34.814605Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4960, -0.0107, -0.1843],\n",
       "        [ 0.4342, -0.1665,  0.7088]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:34.819054Z",
     "iopub.status.busy": "2023-02-26T14:22:34.818754Z",
     "iopub.status.idle": "2023-02-26T14:22:40.868121Z",
     "shell.execute_reply": "2023-02-26T14:22:40.866845Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.9 ns ± 0.866 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:40.872014Z",
     "iopub.status.busy": "2023-02-26T14:22:40.871436Z",
     "iopub.status.idle": "2023-02-26T14:22:40.880499Z",
     "shell.execute_reply": "2023-02-26T14:22:40.879590Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f73208cc190>\n",
       "├── 'a' --> tensor([[-1.3389,  0.7729,  1.2049],\n",
       "│                   [ 0.5881,  0.9834, -0.8464]])\n",
       "└── 'x' --> <FastTreeValue 0x7f73208ccee0>\n",
       "    └── 'c' --> tensor([[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:40.884016Z",
     "iopub.status.busy": "2023-02-26T14:22:40.883716Z",
     "iopub.status.idle": "2023-02-26T14:22:47.234434Z",
     "shell.execute_reply": "2023-02-26T14:22:47.233453Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 ns ± 1.37 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:47.238294Z",
     "iopub.status.busy": "2023-02-26T14:22:47.238010Z",
     "iopub.status.idle": "2023-02-26T14:22:47.672995Z",
     "shell.execute_reply": "2023-02-26T14:22:47.671953Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:47.677447Z",
     "iopub.status.busy": "2023-02-26T14:22:47.677039Z",
     "iopub.status.idle": "2023-02-26T14:22:47.686351Z",
     "shell.execute_reply": "2023-02-26T14:22:47.685439Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:47.689842Z",
     "iopub.status.busy": "2023-02-26T14:22:47.689542Z",
     "iopub.status.idle": "2023-02-26T14:22:47.698504Z",
     "shell.execute_reply": "2023-02-26T14:22:47.697573Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4960, -0.0107, -0.1843],\n",
       "        [ 0.4342, -0.1665,  0.7088]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:47.701697Z",
     "iopub.status.busy": "2023-02-26T14:22:47.701218Z",
     "iopub.status.idle": "2023-02-26T14:22:53.763199Z",
     "shell.execute_reply": "2023-02-26T14:22:53.762161Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.7 ns ± 1.74 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:53.767434Z",
     "iopub.status.busy": "2023-02-26T14:22:53.766634Z",
     "iopub.status.idle": "2023-02-26T14:22:53.775961Z",
     "shell.execute_reply": "2023-02-26T14:22:53.774884Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3258, -0.2371,  0.0467],\n",
       "               [-1.9247,  0.3447, -0.5207]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:53.779269Z",
     "iopub.status.busy": "2023-02-26T14:22:53.778979Z",
     "iopub.status.idle": "2023-02-26T14:22:58.931202Z",
     "shell.execute_reply": "2023-02-26T14:22:58.930159Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "637 ns ± 4.93 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:22:58.934957Z",
     "iopub.status.busy": "2023-02-26T14:22:58.934660Z",
     "iopub.status.idle": "2023-02-26T14:23:07.184231Z",
     "shell.execute_reply": "2023-02-26T14:23:07.183203Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.02 µs ± 9.24 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:07.187831Z",
     "iopub.status.busy": "2023-02-26T14:23:07.187534Z",
     "iopub.status.idle": "2023-02-26T14:23:17.934095Z",
     "shell.execute_reply": "2023-02-26T14:23:17.933044Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.2 µs ± 153 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:17.937696Z",
     "iopub.status.busy": "2023-02-26T14:23:17.937402Z",
     "iopub.status.idle": "2023-02-26T14:23:17.942694Z",
     "shell.execute_reply": "2023-02-26T14:23:17.941585Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:17.947245Z",
     "iopub.status.busy": "2023-02-26T14:23:17.945779Z",
     "iopub.status.idle": "2023-02-26T14:23:20.328489Z",
     "shell.execute_reply": "2023-02-26T14:23:20.327614Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "292 µs ± 8.23 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:20.334262Z",
     "iopub.status.busy": "2023-02-26T14:23:20.332273Z",
     "iopub.status.idle": "2023-02-26T14:23:22.587187Z",
     "shell.execute_reply": "2023-02-26T14:23:22.586283Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "275 µs ± 3.56 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:22.592315Z",
     "iopub.status.busy": "2023-02-26T14:23:22.591374Z",
     "iopub.status.idle": "2023-02-26T14:23:22.596465Z",
     "shell.execute_reply": "2023-02-26T14:23:22.595625Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:22.600164Z",
     "iopub.status.busy": "2023-02-26T14:23:22.599639Z",
     "iopub.status.idle": "2023-02-26T14:23:22.609860Z",
     "shell.execute_reply": "2023-02-26T14:23:22.608430Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7320860550>\n",
       "├── 'a' --> tensor([[[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]],\n",
       "│           \n",
       "│                   [[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]],\n",
       "│           \n",
       "│                   [[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]],\n",
       "│           \n",
       "│                   [[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]],\n",
       "│           \n",
       "│                   [[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]],\n",
       "│           \n",
       "│                   [[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]],\n",
       "│           \n",
       "│                   [[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]],\n",
       "│           \n",
       "│                   [[ 0.4960, -0.0107, -0.1843],\n",
       "│                    [ 0.4342, -0.1665,  0.7088]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f73208161f0>\n",
       "    └── 'c' --> tensor([[[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "                \n",
       "                        [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "                \n",
       "                        [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "                \n",
       "                        [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "                \n",
       "                        [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "                \n",
       "                        [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "                \n",
       "                        [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "                \n",
       "                        [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                         [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                         [-1.0911,  0.1900,  0.8893,  2.0028]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:22.613485Z",
     "iopub.status.busy": "2023-02-26T14:23:22.612938Z",
     "iopub.status.idle": "2023-02-26T14:23:26.830685Z",
     "shell.execute_reply": "2023-02-26T14:23:26.829035Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.7 µs ± 352 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:26.834860Z",
     "iopub.status.busy": "2023-02-26T14:23:26.834487Z",
     "iopub.status.idle": "2023-02-26T14:23:26.845183Z",
     "shell.execute_reply": "2023-02-26T14:23:26.844026Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f73248e5be0>\n",
       "├── 'a' --> tensor([[ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088],\n",
       "│                   [ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088],\n",
       "│                   [ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088],\n",
       "│                   [ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088],\n",
       "│                   [ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088],\n",
       "│                   [ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088],\n",
       "│                   [ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088],\n",
       "│                   [ 0.4960, -0.0107, -0.1843],\n",
       "│                   [ 0.4342, -0.1665,  0.7088]])\n",
       "└── 'x' --> <FastTreeValue 0x7f727c1ca5e0>\n",
       "    └── 'c' --> tensor([[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                        [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                        [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                        [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                        [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                        [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                        [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                        [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                        [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                        [-1.0911,  0.1900,  0.8893,  2.0028]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:26.848760Z",
     "iopub.status.busy": "2023-02-26T14:23:26.848414Z",
     "iopub.status.idle": "2023-02-26T14:23:30.667361Z",
     "shell.execute_reply": "2023-02-26T14:23:30.666261Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47.1 µs ± 919 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:30.670976Z",
     "iopub.status.busy": "2023-02-26T14:23:30.670655Z",
     "iopub.status.idle": "2023-02-26T14:23:37.357796Z",
     "shell.execute_reply": "2023-02-26T14:23:37.356735Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.5 µs ± 2.07 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:37.362395Z",
     "iopub.status.busy": "2023-02-26T14:23:37.361909Z",
     "iopub.status.idle": "2023-02-26T14:23:37.372643Z",
     "shell.execute_reply": "2023-02-26T14:23:37.371732Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]],\n",
       "       \n",
       "               [[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]],\n",
       "       \n",
       "               [[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]],\n",
       "       \n",
       "               [[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]],\n",
       "       \n",
       "               [[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]],\n",
       "       \n",
       "               [[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]],\n",
       "       \n",
       "               [[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]],\n",
       "       \n",
       "               [[ 0.4960, -0.0107, -0.1843],\n",
       "                [ 0.4342, -0.1665,  0.7088]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "              \n",
       "                      [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "              \n",
       "                      [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "              \n",
       "                      [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "              \n",
       "                      [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "              \n",
       "                      [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "              \n",
       "                      [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]],\n",
       "              \n",
       "                      [[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                       [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                       [-1.0911,  0.1900,  0.8893,  2.0028]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:37.376079Z",
     "iopub.status.busy": "2023-02-26T14:23:37.375577Z",
     "iopub.status.idle": "2023-02-26T14:23:45.855447Z",
     "shell.execute_reply": "2023-02-26T14:23:45.854366Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "104 µs ± 1.92 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:45.859553Z",
     "iopub.status.busy": "2023-02-26T14:23:45.859058Z",
     "iopub.status.idle": "2023-02-26T14:23:45.869090Z",
     "shell.execute_reply": "2023-02-26T14:23:45.868086Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088],\n",
       "               [ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088],\n",
       "               [ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088],\n",
       "               [ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088],\n",
       "               [ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088],\n",
       "               [ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088],\n",
       "               [ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088],\n",
       "               [ 0.4960, -0.0107, -0.1843],\n",
       "               [ 0.4342, -0.1665,  0.7088]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                      [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                      [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                      [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                      [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                      [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                      [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028],\n",
       "                      [ 3.4909, -2.0214, -0.8582,  0.2418],\n",
       "                      [-0.3799, -0.4379, -0.4376,  1.0057],\n",
       "                      [-1.0911,  0.1900,  0.8893,  2.0028]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:23:45.872575Z",
     "iopub.status.busy": "2023-02-26T14:23:45.872150Z",
     "iopub.status.idle": "2023-02-26T14:24:01.106686Z",
     "shell.execute_reply": "2023-02-26T14:24:01.105551Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "188 µs ± 1.04 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:24:01.110570Z",
     "iopub.status.busy": "2023-02-26T14:24:01.110003Z",
     "iopub.status.idle": "2023-02-26T14:24:06.073713Z",
     "shell.execute_reply": "2023-02-26T14:24:06.072855Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "614 µs ± 11.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
