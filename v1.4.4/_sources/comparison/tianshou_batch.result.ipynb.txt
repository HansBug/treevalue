{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:13.668445Z",
     "iopub.status.busy": "2023-02-24T10:49:13.667821Z",
     "iopub.status.idle": "2023-02-24T10:49:15.010964Z",
     "shell.execute_reply": "2023-02-24T10:49:15.009845Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:15.016077Z",
     "iopub.status.busy": "2023-02-24T10:49:15.015324Z",
     "iopub.status.idle": "2023-02-24T10:49:15.064344Z",
     "shell.execute_reply": "2023-02-24T10:49:15.063323Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:15.069138Z",
     "iopub.status.busy": "2023-02-24T10:49:15.068820Z",
     "iopub.status.idle": "2023-02-24T10:49:15.086918Z",
     "shell.execute_reply": "2023-02-24T10:49:15.085882Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0cb4b0c9d0>\n",
       "├── 'a' --> tensor([[-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0cb4a98b20>\n",
       "    └── 'c' --> tensor([[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:15.091233Z",
     "iopub.status.busy": "2023-02-24T10:49:15.090681Z",
     "iopub.status.idle": "2023-02-24T10:49:15.101850Z",
     "shell.execute_reply": "2023-02-24T10:49:15.098828Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8762, -0.9651,  0.1883],\n",
       "        [ 2.0656, -0.4280,  1.7746]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:15.106111Z",
     "iopub.status.busy": "2023-02-24T10:49:15.105803Z",
     "iopub.status.idle": "2023-02-24T10:49:21.627864Z",
     "shell.execute_reply": "2023-02-24T10:49:21.626777Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.3 ns ± 0.723 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:21.632320Z",
     "iopub.status.busy": "2023-02-24T10:49:21.631547Z",
     "iopub.status.idle": "2023-02-24T10:49:21.641619Z",
     "shell.execute_reply": "2023-02-24T10:49:21.640568Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0cb4b0c9d0>\n",
       "├── 'a' --> tensor([[ 1.1886,  0.6863,  0.3304],\n",
       "│                   [-0.3612,  0.0446,  1.3160]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0cb4a98b20>\n",
       "    └── 'c' --> tensor([[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:21.645418Z",
     "iopub.status.busy": "2023-02-24T10:49:21.644924Z",
     "iopub.status.idle": "2023-02-24T10:49:28.140033Z",
     "shell.execute_reply": "2023-02-24T10:49:28.139082Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.7 ns ± 0.697 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:28.144455Z",
     "iopub.status.busy": "2023-02-24T10:49:28.143660Z",
     "iopub.status.idle": "2023-02-24T10:49:28.654995Z",
     "shell.execute_reply": "2023-02-24T10:49:28.654009Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:28.659296Z",
     "iopub.status.busy": "2023-02-24T10:49:28.658682Z",
     "iopub.status.idle": "2023-02-24T10:49:28.668010Z",
     "shell.execute_reply": "2023-02-24T10:49:28.667109Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:28.672227Z",
     "iopub.status.busy": "2023-02-24T10:49:28.671732Z",
     "iopub.status.idle": "2023-02-24T10:49:28.682250Z",
     "shell.execute_reply": "2023-02-24T10:49:28.681400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8762, -0.9651,  0.1883],\n",
       "        [ 2.0656, -0.4280,  1.7746]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:28.686445Z",
     "iopub.status.busy": "2023-02-24T10:49:28.685893Z",
     "iopub.status.idle": "2023-02-24T10:49:34.377137Z",
     "shell.execute_reply": "2023-02-24T10:49:34.372063Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.8 ns ± 0.847 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:34.381457Z",
     "iopub.status.busy": "2023-02-24T10:49:34.380879Z",
     "iopub.status.idle": "2023-02-24T10:49:34.388891Z",
     "shell.execute_reply": "2023-02-24T10:49:34.387946Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2205,  0.8103, -1.4005],\n",
       "               [ 0.8096,  0.7091,  1.3942]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:34.392722Z",
     "iopub.status.busy": "2023-02-24T10:49:34.392262Z",
     "iopub.status.idle": "2023-02-24T10:49:39.728181Z",
     "shell.execute_reply": "2023-02-24T10:49:39.726962Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "655 ns ± 5.06 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:39.732239Z",
     "iopub.status.busy": "2023-02-24T10:49:39.731739Z",
     "iopub.status.idle": "2023-02-24T10:49:48.750065Z",
     "shell.execute_reply": "2023-02-24T10:49:48.748832Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.12 µs ± 49.5 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:49:48.754808Z",
     "iopub.status.busy": "2023-02-24T10:49:48.753987Z",
     "iopub.status.idle": "2023-02-24T10:50:00.984714Z",
     "shell.execute_reply": "2023-02-24T10:50:00.983674Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15.1 µs ± 207 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:00.988730Z",
     "iopub.status.busy": "2023-02-24T10:50:00.988250Z",
     "iopub.status.idle": "2023-02-24T10:50:00.992935Z",
     "shell.execute_reply": "2023-02-24T10:50:00.991839Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:00.997336Z",
     "iopub.status.busy": "2023-02-24T10:50:00.996218Z",
     "iopub.status.idle": "2023-02-24T10:50:03.512121Z",
     "shell.execute_reply": "2023-02-24T10:50:03.511267Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "307 µs ± 19.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:03.515898Z",
     "iopub.status.busy": "2023-02-24T10:50:03.515287Z",
     "iopub.status.idle": "2023-02-24T10:50:05.938399Z",
     "shell.execute_reply": "2023-02-24T10:50:05.937379Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "302 µs ± 18.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:05.942913Z",
     "iopub.status.busy": "2023-02-24T10:50:05.942588Z",
     "iopub.status.idle": "2023-02-24T10:50:05.948823Z",
     "shell.execute_reply": "2023-02-24T10:50:05.947816Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:05.952780Z",
     "iopub.status.busy": "2023-02-24T10:50:05.952471Z",
     "iopub.status.idle": "2023-02-24T10:50:05.965157Z",
     "shell.execute_reply": "2023-02-24T10:50:05.964208Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0c097b64f0>\n",
       "├── 'a' --> tensor([[[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]],\n",
       "│           \n",
       "│                   [[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]],\n",
       "│           \n",
       "│                   [[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]],\n",
       "│           \n",
       "│                   [[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]],\n",
       "│           \n",
       "│                   [[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]],\n",
       "│           \n",
       "│                   [[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]],\n",
       "│           \n",
       "│                   [[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]],\n",
       "│           \n",
       "│                   [[-0.8762, -0.9651,  0.1883],\n",
       "│                    [ 2.0656, -0.4280,  1.7746]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0cb4ad04c0>\n",
       "    └── 'c' --> tensor([[[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "                \n",
       "                        [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "                \n",
       "                        [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "                \n",
       "                        [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "                \n",
       "                        [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "                \n",
       "                        [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "                \n",
       "                        [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "                \n",
       "                        [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                         [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                         [-0.0139, -0.5839,  0.6985,  0.0647]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:05.969150Z",
     "iopub.status.busy": "2023-02-24T10:50:05.968824Z",
     "iopub.status.idle": "2023-02-24T10:50:09.982884Z",
     "shell.execute_reply": "2023-02-24T10:50:09.981635Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48.9 µs ± 4.03 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:09.987366Z",
     "iopub.status.busy": "2023-02-24T10:50:09.986736Z",
     "iopub.status.idle": "2023-02-24T10:50:10.001866Z",
     "shell.execute_reply": "2023-02-24T10:50:10.000789Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0c103b28e0>\n",
       "├── 'a' --> tensor([[-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746],\n",
       "│                   [-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746],\n",
       "│                   [-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746],\n",
       "│                   [-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746],\n",
       "│                   [-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746],\n",
       "│                   [-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746],\n",
       "│                   [-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746],\n",
       "│                   [-0.8762, -0.9651,  0.1883],\n",
       "│                   [ 2.0656, -0.4280,  1.7746]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0c0983e490>\n",
       "    └── 'c' --> tensor([[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                        [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                        [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                        [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                        [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                        [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                        [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                        [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                        [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                        [-0.0139, -0.5839,  0.6985,  0.0647]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:10.006431Z",
     "iopub.status.busy": "2023-02-24T10:50:10.005716Z",
     "iopub.status.idle": "2023-02-24T10:50:13.496561Z",
     "shell.execute_reply": "2023-02-24T10:50:13.495417Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.8 µs ± 779 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:13.503815Z",
     "iopub.status.busy": "2023-02-24T10:50:13.503245Z",
     "iopub.status.idle": "2023-02-24T10:50:20.362439Z",
     "shell.execute_reply": "2023-02-24T10:50:20.361488Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.5 µs ± 974 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:20.366692Z",
     "iopub.status.busy": "2023-02-24T10:50:20.365883Z",
     "iopub.status.idle": "2023-02-24T10:50:20.378111Z",
     "shell.execute_reply": "2023-02-24T10:50:20.376595Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "              \n",
       "                      [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "              \n",
       "                      [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "              \n",
       "                      [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "              \n",
       "                      [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "              \n",
       "                      [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "              \n",
       "                      [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]],\n",
       "              \n",
       "                      [[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                       [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                       [-0.0139, -0.5839,  0.6985,  0.0647]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]],\n",
       "       \n",
       "               [[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]],\n",
       "       \n",
       "               [[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]],\n",
       "       \n",
       "               [[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]],\n",
       "       \n",
       "               [[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]],\n",
       "       \n",
       "               [[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]],\n",
       "       \n",
       "               [[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]],\n",
       "       \n",
       "               [[-0.8762, -0.9651,  0.1883],\n",
       "                [ 2.0656, -0.4280,  1.7746]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:20.382212Z",
     "iopub.status.busy": "2023-02-24T10:50:20.381896Z",
     "iopub.status.idle": "2023-02-24T10:50:29.491520Z",
     "shell.execute_reply": "2023-02-24T10:50:29.490317Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "112 µs ± 949 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:29.495627Z",
     "iopub.status.busy": "2023-02-24T10:50:29.494958Z",
     "iopub.status.idle": "2023-02-24T10:50:29.506561Z",
     "shell.execute_reply": "2023-02-24T10:50:29.505530Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                      [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                      [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                      [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                      [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                      [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                      [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647],\n",
       "                      [ 1.2206, -1.2723, -1.0659,  0.1906],\n",
       "                      [-1.0474,  1.3397, -1.4550, -0.9992],\n",
       "                      [-0.0139, -0.5839,  0.6985,  0.0647]]),\n",
       "       ),\n",
       "    a: tensor([[-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746],\n",
       "               [-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746],\n",
       "               [-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746],\n",
       "               [-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746],\n",
       "               [-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746],\n",
       "               [-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746],\n",
       "               [-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746],\n",
       "               [-0.8762, -0.9651,  0.1883],\n",
       "               [ 2.0656, -0.4280,  1.7746]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:29.511021Z",
     "iopub.status.busy": "2023-02-24T10:50:29.510672Z",
     "iopub.status.idle": "2023-02-24T10:50:31.207258Z",
     "shell.execute_reply": "2023-02-24T10:50:31.206212Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "207 µs ± 5.59 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:50:31.211559Z",
     "iopub.status.busy": "2023-02-24T10:50:31.210934Z",
     "iopub.status.idle": "2023-02-24T10:50:36.253430Z",
     "shell.execute_reply": "2023-02-24T10:50:36.252411Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "622 µs ± 50.5 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
