{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:45:52.002955Z",
     "iopub.status.busy": "2023-10-20T07:45:52.002535Z",
     "iopub.status.idle": "2023-10-20T07:45:53.466280Z",
     "shell.execute_reply": "2023-10-20T07:45:53.465552Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:45:53.470222Z",
     "iopub.status.busy": "2023-10-20T07:45:53.469572Z",
     "iopub.status.idle": "2023-10-20T07:45:53.500851Z",
     "shell.execute_reply": "2023-10-20T07:45:53.500215Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:45:53.504075Z",
     "iopub.status.busy": "2023-10-20T07:45:53.503628Z",
     "iopub.status.idle": "2023-10-20T07:45:53.512902Z",
     "shell.execute_reply": "2023-10-20T07:45:53.512225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f95c4ae0a00>\n",
       "├── 'a' --> tensor([[-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734]])\n",
       "└── 'x' --> <FastTreeValue 0x7f95c4ae0ca0>\n",
       "    └── 'c' --> tensor([[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:45:53.516755Z",
     "iopub.status.busy": "2023-10-20T07:45:53.515376Z",
     "iopub.status.idle": "2023-10-20T07:45:53.522022Z",
     "shell.execute_reply": "2023-10-20T07:45:53.521416Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.5593,  0.0860, -0.7266],\n",
       "        [ 1.1838,  0.0055,  0.1734]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:45:53.524953Z",
     "iopub.status.busy": "2023-10-20T07:45:53.524399Z",
     "iopub.status.idle": "2023-10-20T07:45:59.100512Z",
     "shell.execute_reply": "2023-10-20T07:45:59.099860Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69 ns ± 0.0227 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:45:59.103868Z",
     "iopub.status.busy": "2023-10-20T07:45:59.103393Z",
     "iopub.status.idle": "2023-10-20T07:45:59.111624Z",
     "shell.execute_reply": "2023-10-20T07:45:59.111031Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f95c4ae0a00>\n",
       "├── 'a' --> tensor([[-0.8622, -0.7571,  0.5042],\n",
       "│                   [-0.7706,  0.1978,  0.9313]])\n",
       "└── 'x' --> <FastTreeValue 0x7f95c4ae0ca0>\n",
       "    └── 'c' --> tensor([[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:45:59.114667Z",
     "iopub.status.busy": "2023-10-20T07:45:59.114142Z",
     "iopub.status.idle": "2023-10-20T07:46:04.515405Z",
     "shell.execute_reply": "2023-10-20T07:46:04.514744Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.6 ns ± 0.0646 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:04.518608Z",
     "iopub.status.busy": "2023-10-20T07:46:04.518161Z",
     "iopub.status.idle": "2023-10-20T07:46:04.894151Z",
     "shell.execute_reply": "2023-10-20T07:46:04.893471Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:04.898483Z",
     "iopub.status.busy": "2023-10-20T07:46:04.897039Z",
     "iopub.status.idle": "2023-10-20T07:46:04.904841Z",
     "shell.execute_reply": "2023-10-20T07:46:04.904205Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:04.908097Z",
     "iopub.status.busy": "2023-10-20T07:46:04.907669Z",
     "iopub.status.idle": "2023-10-20T07:46:04.914404Z",
     "shell.execute_reply": "2023-10-20T07:46:04.913815Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.5593,  0.0860, -0.7266],\n",
       "        [ 1.1838,  0.0055,  0.1734]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:04.917198Z",
     "iopub.status.busy": "2023-10-20T07:46:04.916772Z",
     "iopub.status.idle": "2023-10-20T07:46:09.412678Z",
     "shell.execute_reply": "2023-10-20T07:46:09.412007Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.5 ns ± 0.0196 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:09.416134Z",
     "iopub.status.busy": "2023-10-20T07:46:09.415560Z",
     "iopub.status.idle": "2023-10-20T07:46:09.422874Z",
     "shell.execute_reply": "2023-10-20T07:46:09.422264Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3485, -1.3631,  0.5684],\n",
       "               [-1.1630, -0.8394, -0.6366]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:09.426062Z",
     "iopub.status.busy": "2023-10-20T07:46:09.425520Z",
     "iopub.status.idle": "2023-10-20T07:46:13.454039Z",
     "shell.execute_reply": "2023-10-20T07:46:13.453124Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "497 ns ± 0.123 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:13.457257Z",
     "iopub.status.busy": "2023-10-20T07:46:13.456804Z",
     "iopub.status.idle": "2023-10-20T07:46:20.659931Z",
     "shell.execute_reply": "2023-10-20T07:46:20.659111Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "888 ns ± 12.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:20.663469Z",
     "iopub.status.busy": "2023-10-20T07:46:20.662985Z",
     "iopub.status.idle": "2023-10-20T07:46:29.929696Z",
     "shell.execute_reply": "2023-10-20T07:46:29.928975Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 34.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:29.933478Z",
     "iopub.status.busy": "2023-10-20T07:46:29.932801Z",
     "iopub.status.idle": "2023-10-20T07:46:29.937605Z",
     "shell.execute_reply": "2023-10-20T07:46:29.936272Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:29.940486Z",
     "iopub.status.busy": "2023-10-20T07:46:29.940063Z",
     "iopub.status.idle": "2023-10-20T07:46:41.500779Z",
     "shell.execute_reply": "2023-10-20T07:46:41.500184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 211 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:41.503883Z",
     "iopub.status.busy": "2023-10-20T07:46:41.503447Z",
     "iopub.status.idle": "2023-10-20T07:46:53.304099Z",
     "shell.execute_reply": "2023-10-20T07:46:53.303505Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 558 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:53.307323Z",
     "iopub.status.busy": "2023-10-20T07:46:53.307081Z",
     "iopub.status.idle": "2023-10-20T07:46:53.311467Z",
     "shell.execute_reply": "2023-10-20T07:46:53.310909Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:53.314148Z",
     "iopub.status.busy": "2023-10-20T07:46:53.313809Z",
     "iopub.status.idle": "2023-10-20T07:46:53.320665Z",
     "shell.execute_reply": "2023-10-20T07:46:53.320147Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f94e7b656a0>\n",
       "├── 'a' --> tensor([[[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]],\n",
       "│           \n",
       "│                   [[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]],\n",
       "│           \n",
       "│                   [[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]],\n",
       "│           \n",
       "│                   [[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]],\n",
       "│           \n",
       "│                   [[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]],\n",
       "│           \n",
       "│                   [[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]],\n",
       "│           \n",
       "│                   [[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]],\n",
       "│           \n",
       "│                   [[-0.5593,  0.0860, -0.7266],\n",
       "│                    [ 1.1838,  0.0055,  0.1734]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f94e7b65550>\n",
       "    └── 'c' --> tensor([[[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "                \n",
       "                        [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "                \n",
       "                        [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "                \n",
       "                        [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "                \n",
       "                        [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "                \n",
       "                        [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "                \n",
       "                        [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "                \n",
       "                        [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                         [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                         [ 0.1572,  0.0730, -0.5486,  1.6567]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:53.323333Z",
     "iopub.status.busy": "2023-10-20T07:46:53.322998Z",
     "iopub.status.idle": "2023-10-20T07:46:55.978059Z",
     "shell.execute_reply": "2023-10-20T07:46:55.977397Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.6 µs ± 34.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:55.981028Z",
     "iopub.status.busy": "2023-10-20T07:46:55.980790Z",
     "iopub.status.idle": "2023-10-20T07:46:55.988874Z",
     "shell.execute_reply": "2023-10-20T07:46:55.988210Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f95c6b46e50>\n",
       "├── 'a' --> tensor([[-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734],\n",
       "│                   [-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734],\n",
       "│                   [-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734],\n",
       "│                   [-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734],\n",
       "│                   [-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734],\n",
       "│                   [-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734],\n",
       "│                   [-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734],\n",
       "│                   [-0.5593,  0.0860, -0.7266],\n",
       "│                   [ 1.1838,  0.0055,  0.1734]])\n",
       "└── 'x' --> <FastTreeValue 0x7f95c4adbb20>\n",
       "    └── 'c' --> tensor([[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                        [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                        [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                        [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                        [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                        [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                        [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                        [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                        [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                        [ 0.1572,  0.0730, -0.5486,  1.6567]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:55.991922Z",
     "iopub.status.busy": "2023-10-20T07:46:55.991368Z",
     "iopub.status.idle": "2023-10-20T07:46:58.490239Z",
     "shell.execute_reply": "2023-10-20T07:46:58.489556Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.7 µs ± 94.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:46:58.493537Z",
     "iopub.status.busy": "2023-10-20T07:46:58.492955Z",
     "iopub.status.idle": "2023-10-20T07:47:03.916079Z",
     "shell.execute_reply": "2023-10-20T07:47:03.915044Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.7 µs ± 150 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:47:03.919279Z",
     "iopub.status.busy": "2023-10-20T07:47:03.918813Z",
     "iopub.status.idle": "2023-10-20T07:47:03.927539Z",
     "shell.execute_reply": "2023-10-20T07:47:03.926925Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "              \n",
       "                      [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "              \n",
       "                      [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "              \n",
       "                      [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "              \n",
       "                      [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "              \n",
       "                      [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "              \n",
       "                      [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]],\n",
       "              \n",
       "                      [[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                       [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                       [ 0.1572,  0.0730, -0.5486,  1.6567]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]],\n",
       "       \n",
       "               [[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]],\n",
       "       \n",
       "               [[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]],\n",
       "       \n",
       "               [[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]],\n",
       "       \n",
       "               [[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]],\n",
       "       \n",
       "               [[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]],\n",
       "       \n",
       "               [[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]],\n",
       "       \n",
       "               [[-0.5593,  0.0860, -0.7266],\n",
       "                [ 1.1838,  0.0055,  0.1734]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:47:03.930322Z",
     "iopub.status.busy": "2023-10-20T07:47:03.929961Z",
     "iopub.status.idle": "2023-10-20T07:47:10.445066Z",
     "shell.execute_reply": "2023-10-20T07:47:10.444270Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.2 µs ± 123 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:47:10.448264Z",
     "iopub.status.busy": "2023-10-20T07:47:10.447708Z",
     "iopub.status.idle": "2023-10-20T07:47:10.455800Z",
     "shell.execute_reply": "2023-10-20T07:47:10.455186Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                      [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                      [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                      [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                      [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                      [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                      [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567],\n",
       "                      [-1.6047, -0.6400, -0.7763,  0.6090],\n",
       "                      [ 0.7087, -0.2247, -1.4657, -0.7155],\n",
       "                      [ 0.1572,  0.0730, -0.5486,  1.6567]]),\n",
       "       ),\n",
       "    a: tensor([[-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734],\n",
       "               [-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734],\n",
       "               [-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734],\n",
       "               [-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734],\n",
       "               [-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734],\n",
       "               [-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734],\n",
       "               [-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734],\n",
       "               [-0.5593,  0.0860, -0.7266],\n",
       "               [ 1.1838,  0.0055,  0.1734]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:47:10.458530Z",
     "iopub.status.busy": "2023-10-20T07:47:10.458313Z",
     "iopub.status.idle": "2023-10-20T07:47:22.642133Z",
     "shell.execute_reply": "2023-10-20T07:47:22.641150Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150 µs ± 288 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:47:22.645403Z",
     "iopub.status.busy": "2023-10-20T07:47:22.644816Z",
     "iopub.status.idle": "2023-10-20T07:47:25.589712Z",
     "shell.execute_reply": "2023-10-20T07:47:25.589116Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "361 µs ± 5.78 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
