{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:33.284755Z",
     "iopub.status.busy": "2023-03-05T08:05:33.284064Z",
     "iopub.status.idle": "2023-03-05T08:05:34.312254Z",
     "shell.execute_reply": "2023-03-05T08:05:34.311405Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:34.316946Z",
     "iopub.status.busy": "2023-03-05T08:05:34.316426Z",
     "iopub.status.idle": "2023-03-05T08:05:34.353199Z",
     "shell.execute_reply": "2023-03-05T08:05:34.352434Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:34.357063Z",
     "iopub.status.busy": "2023-03-05T08:05:34.356585Z",
     "iopub.status.idle": "2023-03-05T08:05:34.367951Z",
     "shell.execute_reply": "2023-03-05T08:05:34.367310Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f08c95329d0>\n",
       "├── 'a' --> tensor([[ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128]])\n",
       "└── 'x' --> <FastTreeValue 0x7f08c9532c70>\n",
       "    └── 'c' --> tensor([[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:34.371205Z",
     "iopub.status.busy": "2023-03-05T08:05:34.370676Z",
     "iopub.status.idle": "2023-03-05T08:05:34.377073Z",
     "shell.execute_reply": "2023-03-05T08:05:34.376456Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3091, -0.3315,  0.3347],\n",
       "        [-0.2215,  0.3643,  1.3128]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:34.380280Z",
     "iopub.status.busy": "2023-03-05T08:05:34.379715Z",
     "iopub.status.idle": "2023-03-05T08:05:39.807970Z",
     "shell.execute_reply": "2023-03-05T08:05:39.807044Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.8 ns ± 0.0515 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:39.811546Z",
     "iopub.status.busy": "2023-03-05T08:05:39.810925Z",
     "iopub.status.idle": "2023-03-05T08:05:39.818413Z",
     "shell.execute_reply": "2023-03-05T08:05:39.817757Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f08c95329d0>\n",
       "├── 'a' --> tensor([[-0.5264, -0.4553, -0.1173],\n",
       "│                   [ 0.8574,  0.1487, -1.0452]])\n",
       "└── 'x' --> <FastTreeValue 0x7f08c9532c70>\n",
       "    └── 'c' --> tensor([[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:39.821419Z",
     "iopub.status.busy": "2023-03-05T08:05:39.820832Z",
     "iopub.status.idle": "2023-03-05T08:05:45.681045Z",
     "shell.execute_reply": "2023-03-05T08:05:45.679842Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72 ns ± 0.153 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:45.684861Z",
     "iopub.status.busy": "2023-03-05T08:05:45.684240Z",
     "iopub.status.idle": "2023-03-05T08:05:46.065009Z",
     "shell.execute_reply": "2023-03-05T08:05:46.064213Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:46.068550Z",
     "iopub.status.busy": "2023-03-05T08:05:46.068003Z",
     "iopub.status.idle": "2023-03-05T08:05:46.075061Z",
     "shell.execute_reply": "2023-03-05T08:05:46.074451Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:46.078018Z",
     "iopub.status.busy": "2023-03-05T08:05:46.077441Z",
     "iopub.status.idle": "2023-03-05T08:05:46.083600Z",
     "shell.execute_reply": "2023-03-05T08:05:46.082992Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3091, -0.3315,  0.3347],\n",
       "        [-0.2215,  0.3643,  1.3128]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:46.086525Z",
     "iopub.status.busy": "2023-03-05T08:05:46.086146Z",
     "iopub.status.idle": "2023-03-05T08:05:50.885723Z",
     "shell.execute_reply": "2023-03-05T08:05:50.884841Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59 ns ± 0.0497 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:50.889464Z",
     "iopub.status.busy": "2023-03-05T08:05:50.888955Z",
     "iopub.status.idle": "2023-03-05T08:05:50.895954Z",
     "shell.execute_reply": "2023-03-05T08:05:50.895330Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6563,  0.3406,  0.1921],\n",
       "               [ 1.1412, -0.4664,  0.1829]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:50.898647Z",
     "iopub.status.busy": "2023-03-05T08:05:50.898268Z",
     "iopub.status.idle": "2023-03-05T08:05:54.904945Z",
     "shell.execute_reply": "2023-03-05T08:05:54.904165Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "493 ns ± 0.18 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:05:54.908390Z",
     "iopub.status.busy": "2023-03-05T08:05:54.907997Z",
     "iopub.status.idle": "2023-03-05T08:06:01.598019Z",
     "shell.execute_reply": "2023-03-05T08:06:01.596912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "824 ns ± 0.716 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:01.601718Z",
     "iopub.status.busy": "2023-03-05T08:06:01.601429Z",
     "iopub.status.idle": "2023-03-05T08:06:10.679512Z",
     "shell.execute_reply": "2023-03-05T08:06:10.678631Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 21.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:10.683021Z",
     "iopub.status.busy": "2023-03-05T08:06:10.682610Z",
     "iopub.status.idle": "2023-03-05T08:06:10.687067Z",
     "shell.execute_reply": "2023-03-05T08:06:10.686435Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:10.690109Z",
     "iopub.status.busy": "2023-03-05T08:06:10.689746Z",
     "iopub.status.idle": "2023-03-05T08:06:22.237434Z",
     "shell.execute_reply": "2023-03-05T08:06:22.236780Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 572 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:22.241105Z",
     "iopub.status.busy": "2023-03-05T08:06:22.240448Z",
     "iopub.status.idle": "2023-03-05T08:06:33.810645Z",
     "shell.execute_reply": "2023-03-05T08:06:33.810002Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 484 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:33.813940Z",
     "iopub.status.busy": "2023-03-05T08:06:33.813539Z",
     "iopub.status.idle": "2023-03-05T08:06:33.816804Z",
     "shell.execute_reply": "2023-03-05T08:06:33.816246Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:33.819369Z",
     "iopub.status.busy": "2023-03-05T08:06:33.818997Z",
     "iopub.status.idle": "2023-03-05T08:06:33.825893Z",
     "shell.execute_reply": "2023-03-05T08:06:33.825344Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0820dd08b0>\n",
       "├── 'a' --> tensor([[[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]],\n",
       "│           \n",
       "│                   [[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]],\n",
       "│           \n",
       "│                   [[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]],\n",
       "│           \n",
       "│                   [[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]],\n",
       "│           \n",
       "│                   [[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]],\n",
       "│           \n",
       "│                   [[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]],\n",
       "│           \n",
       "│                   [[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]],\n",
       "│           \n",
       "│                   [[ 1.3091, -0.3315,  0.3347],\n",
       "│                    [-0.2215,  0.3643,  1.3128]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0820dd0670>\n",
       "    └── 'c' --> tensor([[[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "                \n",
       "                        [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "                \n",
       "                        [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "                \n",
       "                        [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "                \n",
       "                        [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "                \n",
       "                        [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "                \n",
       "                        [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "                \n",
       "                        [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                         [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                         [ 1.6376, -0.4515,  0.6696,  0.2338]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:33.828414Z",
     "iopub.status.busy": "2023-03-05T08:06:33.828025Z",
     "iopub.status.idle": "2023-03-05T08:06:36.490035Z",
     "shell.execute_reply": "2023-03-05T08:06:36.489152Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.8 µs ± 63 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:36.493610Z",
     "iopub.status.busy": "2023-03-05T08:06:36.493208Z",
     "iopub.status.idle": "2023-03-05T08:06:36.503122Z",
     "shell.execute_reply": "2023-03-05T08:06:36.502460Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f08c9532eb0>\n",
       "├── 'a' --> tensor([[ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128],\n",
       "│                   [ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128],\n",
       "│                   [ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128],\n",
       "│                   [ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128],\n",
       "│                   [ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128],\n",
       "│                   [ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128],\n",
       "│                   [ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128],\n",
       "│                   [ 1.3091, -0.3315,  0.3347],\n",
       "│                   [-0.2215,  0.3643,  1.3128]])\n",
       "└── 'x' --> <FastTreeValue 0x7f081a13eac0>\n",
       "    └── 'c' --> tensor([[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                        [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                        [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                        [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                        [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                        [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                        [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                        [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                        [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                        [ 1.6376, -0.4515,  0.6696,  0.2338]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:36.506078Z",
     "iopub.status.busy": "2023-03-05T08:06:36.505600Z",
     "iopub.status.idle": "2023-03-05T08:06:39.011663Z",
     "shell.execute_reply": "2023-03-05T08:06:39.010686Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.8 µs ± 146 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:39.015484Z",
     "iopub.status.busy": "2023-03-05T08:06:39.014922Z",
     "iopub.status.idle": "2023-03-05T08:06:43.608095Z",
     "shell.execute_reply": "2023-03-05T08:06:43.607208Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.5 µs ± 91.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:43.611591Z",
     "iopub.status.busy": "2023-03-05T08:06:43.611183Z",
     "iopub.status.idle": "2023-03-05T08:06:43.619987Z",
     "shell.execute_reply": "2023-03-05T08:06:43.619359Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]],\n",
       "       \n",
       "               [[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]],\n",
       "       \n",
       "               [[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]],\n",
       "       \n",
       "               [[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]],\n",
       "       \n",
       "               [[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]],\n",
       "       \n",
       "               [[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]],\n",
       "       \n",
       "               [[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]],\n",
       "       \n",
       "               [[ 1.3091, -0.3315,  0.3347],\n",
       "                [-0.2215,  0.3643,  1.3128]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "              \n",
       "                      [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "              \n",
       "                      [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "              \n",
       "                      [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "              \n",
       "                      [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "              \n",
       "                      [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "              \n",
       "                      [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]],\n",
       "              \n",
       "                      [[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                       [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                       [ 1.6376, -0.4515,  0.6696,  0.2338]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:43.622913Z",
     "iopub.status.busy": "2023-03-05T08:06:43.622386Z",
     "iopub.status.idle": "2023-03-05T08:06:54.997961Z",
     "shell.execute_reply": "2023-03-05T08:06:54.996659Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 371 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:55.001347Z",
     "iopub.status.busy": "2023-03-05T08:06:55.000861Z",
     "iopub.status.idle": "2023-03-05T08:06:55.009092Z",
     "shell.execute_reply": "2023-03-05T08:06:55.008464Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128],\n",
       "               [ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128],\n",
       "               [ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128],\n",
       "               [ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128],\n",
       "               [ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128],\n",
       "               [ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128],\n",
       "               [ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128],\n",
       "               [ 1.3091, -0.3315,  0.3347],\n",
       "               [-0.2215,  0.3643,  1.3128]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                      [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                      [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                      [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                      [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                      [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                      [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338],\n",
       "                      [ 1.7312, -0.3089,  0.3019,  1.9638],\n",
       "                      [-0.0581,  0.1818, -0.6221, -0.2366],\n",
       "                      [ 1.6376, -0.4515,  0.6696,  0.2338]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:55.011940Z",
     "iopub.status.busy": "2023-03-05T08:06:55.011329Z",
     "iopub.status.idle": "2023-03-05T08:06:58.571572Z",
     "shell.execute_reply": "2023-03-05T08:06:58.570515Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "454 µs ± 7.41 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:06:58.575032Z",
     "iopub.status.busy": "2023-03-05T08:06:58.574574Z",
     "iopub.status.idle": "2023-03-05T08:07:01.171849Z",
     "shell.execute_reply": "2023-03-05T08:07:01.170699Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "319 µs ± 4.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
