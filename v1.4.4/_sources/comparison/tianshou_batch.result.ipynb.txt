{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:04.684733Z",
     "iopub.status.busy": "2023-05-26T08:55:04.684439Z",
     "iopub.status.idle": "2023-05-26T08:55:06.093267Z",
     "shell.execute_reply": "2023-05-26T08:55:06.092474Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:06.098037Z",
     "iopub.status.busy": "2023-05-26T08:55:06.097483Z",
     "iopub.status.idle": "2023-05-26T08:55:06.127518Z",
     "shell.execute_reply": "2023-05-26T08:55:06.126761Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:06.131469Z",
     "iopub.status.busy": "2023-05-26T08:55:06.131056Z",
     "iopub.status.idle": "2023-05-26T08:55:06.141497Z",
     "shell.execute_reply": "2023-05-26T08:55:06.140777Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc1e8232e20>\n",
       "├── 'a' --> tensor([[ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc1e8232c10>\n",
       "    └── 'c' --> tensor([[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:06.144631Z",
     "iopub.status.busy": "2023-05-26T08:55:06.144249Z",
     "iopub.status.idle": "2023-05-26T08:55:06.149400Z",
     "shell.execute_reply": "2023-05-26T08:55:06.148728Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7018,  0.6071, -0.9971],\n",
       "        [ 0.2574, -0.4088,  0.2996]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:06.152602Z",
     "iopub.status.busy": "2023-05-26T08:55:06.152241Z",
     "iopub.status.idle": "2023-05-26T08:55:11.432388Z",
     "shell.execute_reply": "2023-05-26T08:55:11.431416Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.8 ns ± 0.0608 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:11.436321Z",
     "iopub.status.busy": "2023-05-26T08:55:11.435661Z",
     "iopub.status.idle": "2023-05-26T08:55:11.442320Z",
     "shell.execute_reply": "2023-05-26T08:55:11.441591Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc1e8232e20>\n",
       "├── 'a' --> tensor([[ 0.5250,  0.3378,  0.4931],\n",
       "│                   [-1.0610,  1.4997, -1.1443]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc1e8232c10>\n",
       "    └── 'c' --> tensor([[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:11.445499Z",
     "iopub.status.busy": "2023-05-26T08:55:11.445123Z",
     "iopub.status.idle": "2023-05-26T08:55:17.087511Z",
     "shell.execute_reply": "2023-05-26T08:55:17.086295Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.3 ns ± 0.0515 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:17.091060Z",
     "iopub.status.busy": "2023-05-26T08:55:17.090657Z",
     "iopub.status.idle": "2023-05-26T08:55:17.464579Z",
     "shell.execute_reply": "2023-05-26T08:55:17.463753Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:17.468662Z",
     "iopub.status.busy": "2023-05-26T08:55:17.468284Z",
     "iopub.status.idle": "2023-05-26T08:55:17.474498Z",
     "shell.execute_reply": "2023-05-26T08:55:17.473795Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:17.477511Z",
     "iopub.status.busy": "2023-05-26T08:55:17.477272Z",
     "iopub.status.idle": "2023-05-26T08:55:17.482537Z",
     "shell.execute_reply": "2023-05-26T08:55:17.481767Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7018,  0.6071, -0.9971],\n",
       "        [ 0.2574, -0.4088,  0.2996]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:17.486485Z",
     "iopub.status.busy": "2023-05-26T08:55:17.486247Z",
     "iopub.status.idle": "2023-05-26T08:55:22.287142Z",
     "shell.execute_reply": "2023-05-26T08:55:22.286382Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.9 ns ± 0.0541 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:22.290716Z",
     "iopub.status.busy": "2023-05-26T08:55:22.290009Z",
     "iopub.status.idle": "2023-05-26T08:55:22.296803Z",
     "shell.execute_reply": "2023-05-26T08:55:22.296081Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.7629,  0.5855,  0.6524],\n",
       "               [-0.7519,  0.1614,  0.4940]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:22.299915Z",
     "iopub.status.busy": "2023-05-26T08:55:22.299527Z",
     "iopub.status.idle": "2023-05-26T08:55:26.276631Z",
     "shell.execute_reply": "2023-05-26T08:55:26.275925Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "489 ns ± 0.0939 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:26.280261Z",
     "iopub.status.busy": "2023-05-26T08:55:26.279558Z",
     "iopub.status.idle": "2023-05-26T08:55:33.178257Z",
     "shell.execute_reply": "2023-05-26T08:55:33.177467Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "849 ns ± 1.71 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:33.181764Z",
     "iopub.status.busy": "2023-05-26T08:55:33.181269Z",
     "iopub.status.idle": "2023-05-26T08:55:41.871410Z",
     "shell.execute_reply": "2023-05-26T08:55:41.870668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 47.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:41.874978Z",
     "iopub.status.busy": "2023-05-26T08:55:41.874446Z",
     "iopub.status.idle": "2023-05-26T08:55:41.878033Z",
     "shell.execute_reply": "2023-05-26T08:55:41.877268Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:41.881426Z",
     "iopub.status.busy": "2023-05-26T08:55:41.881050Z",
     "iopub.status.idle": "2023-05-26T08:55:53.331297Z",
     "shell.execute_reply": "2023-05-26T08:55:53.330633Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 420 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:55:53.334653Z",
     "iopub.status.busy": "2023-05-26T08:55:53.334241Z",
     "iopub.status.idle": "2023-05-26T08:56:04.858351Z",
     "shell.execute_reply": "2023-05-26T08:56:04.857710Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 739 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:04.861769Z",
     "iopub.status.busy": "2023-05-26T08:56:04.861358Z",
     "iopub.status.idle": "2023-05-26T08:56:04.864656Z",
     "shell.execute_reply": "2023-05-26T08:56:04.864085Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:04.867494Z",
     "iopub.status.busy": "2023-05-26T08:56:04.867113Z",
     "iopub.status.idle": "2023-05-26T08:56:04.874760Z",
     "shell.execute_reply": "2023-05-26T08:56:04.874030Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc11b5417f0>\n",
       "├── 'a' --> tensor([[[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]],\n",
       "│           \n",
       "│                   [[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]],\n",
       "│           \n",
       "│                   [[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]],\n",
       "│           \n",
       "│                   [[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]],\n",
       "│           \n",
       "│                   [[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]],\n",
       "│           \n",
       "│                   [[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]],\n",
       "│           \n",
       "│                   [[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]],\n",
       "│           \n",
       "│                   [[ 0.7018,  0.6071, -0.9971],\n",
       "│                    [ 0.2574, -0.4088,  0.2996]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc11b5412e0>\n",
       "    └── 'c' --> tensor([[[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "                \n",
       "                        [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "                \n",
       "                        [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "                \n",
       "                        [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "                \n",
       "                        [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "                \n",
       "                        [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "                \n",
       "                        [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "                \n",
       "                        [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                         [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                         [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:04.877944Z",
     "iopub.status.busy": "2023-05-26T08:56:04.877408Z",
     "iopub.status.idle": "2023-05-26T08:56:07.596227Z",
     "shell.execute_reply": "2023-05-26T08:56:07.595504Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.4 µs ± 56.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:07.599498Z",
     "iopub.status.busy": "2023-05-26T08:56:07.598993Z",
     "iopub.status.idle": "2023-05-26T08:56:07.611803Z",
     "shell.execute_reply": "2023-05-26T08:56:07.611067Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc1e82292e0>\n",
       "├── 'a' --> tensor([[ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996],\n",
       "│                   [ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996],\n",
       "│                   [ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996],\n",
       "│                   [ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996],\n",
       "│                   [ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996],\n",
       "│                   [ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996],\n",
       "│                   [ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996],\n",
       "│                   [ 0.7018,  0.6071, -0.9971],\n",
       "│                   [ 0.2574, -0.4088,  0.2996]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc11b8603d0>\n",
       "    └── 'c' --> tensor([[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                        [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                        [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                        [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                        [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                        [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                        [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                        [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                        [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                        [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:07.615939Z",
     "iopub.status.busy": "2023-05-26T08:56:07.615551Z",
     "iopub.status.idle": "2023-05-26T08:56:10.176391Z",
     "shell.execute_reply": "2023-05-26T08:56:10.175547Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.5 µs ± 47.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:10.179694Z",
     "iopub.status.busy": "2023-05-26T08:56:10.179442Z",
     "iopub.status.idle": "2023-05-26T08:56:15.589709Z",
     "shell.execute_reply": "2023-05-26T08:56:15.588972Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.5 µs ± 81.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:15.593586Z",
     "iopub.status.busy": "2023-05-26T08:56:15.592938Z",
     "iopub.status.idle": "2023-05-26T08:56:15.601190Z",
     "shell.execute_reply": "2023-05-26T08:56:15.600423Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]],\n",
       "       \n",
       "               [[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]],\n",
       "       \n",
       "               [[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]],\n",
       "       \n",
       "               [[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]],\n",
       "       \n",
       "               [[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]],\n",
       "       \n",
       "               [[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]],\n",
       "       \n",
       "               [[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]],\n",
       "       \n",
       "               [[ 0.7018,  0.6071, -0.9971],\n",
       "                [ 0.2574, -0.4088,  0.2996]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "              \n",
       "                      [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "              \n",
       "                      [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "              \n",
       "                      [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "              \n",
       "                      [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "              \n",
       "                      [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "              \n",
       "                      [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]],\n",
       "              \n",
       "                      [[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                       [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                       [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:15.604420Z",
     "iopub.status.busy": "2023-05-26T08:56:15.604030Z",
     "iopub.status.idle": "2023-05-26T08:56:22.136062Z",
     "shell.execute_reply": "2023-05-26T08:56:22.135298Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.4 µs ± 231 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:22.139711Z",
     "iopub.status.busy": "2023-05-26T08:56:22.139271Z",
     "iopub.status.idle": "2023-05-26T08:56:22.149405Z",
     "shell.execute_reply": "2023-05-26T08:56:22.148771Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996],\n",
       "               [ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996],\n",
       "               [ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996],\n",
       "               [ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996],\n",
       "               [ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996],\n",
       "               [ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996],\n",
       "               [ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996],\n",
       "               [ 0.7018,  0.6071, -0.9971],\n",
       "               [ 0.2574, -0.4088,  0.2996]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                      [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                      [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                      [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                      [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                      [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                      [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00],\n",
       "                      [-1.7146e-01, -2.6752e-01, -1.9818e-04,  4.8624e-01],\n",
       "                      [-4.1051e-01, -4.4588e-01,  8.4460e-01, -1.8590e+00],\n",
       "                      [ 1.1623e+00,  8.4636e-01, -1.4528e-01, -2.4610e+00]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:22.152969Z",
     "iopub.status.busy": "2023-05-26T08:56:22.152361Z",
     "iopub.status.idle": "2023-05-26T08:56:34.078196Z",
     "shell.execute_reply": "2023-05-26T08:56:34.077461Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "147 µs ± 138 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T08:56:34.081898Z",
     "iopub.status.busy": "2023-05-26T08:56:34.081253Z",
     "iopub.status.idle": "2023-05-26T08:56:36.857547Z",
     "shell.execute_reply": "2023-05-26T08:56:36.856898Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "341 µs ± 1.84 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
