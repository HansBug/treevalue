{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:00.652818Z",
     "iopub.status.busy": "2023-03-15T12:44:00.652397Z",
     "iopub.status.idle": "2023-03-15T12:44:01.615993Z",
     "shell.execute_reply": "2023-03-15T12:44:01.614873Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:01.620054Z",
     "iopub.status.busy": "2023-03-15T12:44:01.619410Z",
     "iopub.status.idle": "2023-03-15T12:44:01.653396Z",
     "shell.execute_reply": "2023-03-15T12:44:01.652737Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:01.656814Z",
     "iopub.status.busy": "2023-03-15T12:44:01.656357Z",
     "iopub.status.idle": "2023-03-15T12:44:01.665736Z",
     "shell.execute_reply": "2023-03-15T12:44:01.665121Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4360da9cd0>\n",
       "├── 'a' --> tensor([[-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4360da9ca0>\n",
       "    └── 'c' --> tensor([[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:01.668935Z",
     "iopub.status.busy": "2023-03-15T12:44:01.668312Z",
     "iopub.status.idle": "2023-03-15T12:44:01.675143Z",
     "shell.execute_reply": "2023-03-15T12:44:01.673578Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.7661,  0.4394, -0.1520],\n",
       "        [-0.5523,  0.3536, -1.4245]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:01.677950Z",
     "iopub.status.busy": "2023-03-15T12:44:01.677715Z",
     "iopub.status.idle": "2023-03-15T12:44:06.947082Z",
     "shell.execute_reply": "2023-03-15T12:44:06.946266Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.8 ns ± 0.0696 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:06.950595Z",
     "iopub.status.busy": "2023-03-15T12:44:06.950189Z",
     "iopub.status.idle": "2023-03-15T12:44:06.957659Z",
     "shell.execute_reply": "2023-03-15T12:44:06.957039Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4360da9cd0>\n",
       "├── 'a' --> tensor([[-1.5974, -0.5976, -0.7977],\n",
       "│                   [-0.1169,  0.2271,  0.5161]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4360da9ca0>\n",
       "    └── 'c' --> tensor([[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:06.960694Z",
     "iopub.status.busy": "2023-03-15T12:44:06.960182Z",
     "iopub.status.idle": "2023-03-15T12:44:12.429304Z",
     "shell.execute_reply": "2023-03-15T12:44:12.428184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.3 ns ± 0.0545 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:12.432972Z",
     "iopub.status.busy": "2023-03-15T12:44:12.432377Z",
     "iopub.status.idle": "2023-03-15T12:44:13.036247Z",
     "shell.execute_reply": "2023-03-15T12:44:13.035509Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:13.039953Z",
     "iopub.status.busy": "2023-03-15T12:44:13.039384Z",
     "iopub.status.idle": "2023-03-15T12:44:13.045869Z",
     "shell.execute_reply": "2023-03-15T12:44:13.045056Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:13.048416Z",
     "iopub.status.busy": "2023-03-15T12:44:13.048192Z",
     "iopub.status.idle": "2023-03-15T12:44:13.053893Z",
     "shell.execute_reply": "2023-03-15T12:44:13.053284Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.7661,  0.4394, -0.1520],\n",
       "        [-0.5523,  0.3536, -1.4245]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:13.057030Z",
     "iopub.status.busy": "2023-03-15T12:44:13.056451Z",
     "iopub.status.idle": "2023-03-15T12:44:17.763084Z",
     "shell.execute_reply": "2023-03-15T12:44:17.762271Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.9 ns ± 0.0807 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:17.766373Z",
     "iopub.status.busy": "2023-03-15T12:44:17.765942Z",
     "iopub.status.idle": "2023-03-15T12:44:17.773622Z",
     "shell.execute_reply": "2023-03-15T12:44:17.772994Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1311, -1.0728,  0.7786],\n",
       "               [-0.0244,  0.6969,  0.3898]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:17.776525Z",
     "iopub.status.busy": "2023-03-15T12:44:17.776009Z",
     "iopub.status.idle": "2023-03-15T12:44:21.740848Z",
     "shell.execute_reply": "2023-03-15T12:44:21.739985Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.0694 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:21.744664Z",
     "iopub.status.busy": "2023-03-15T12:44:21.744095Z",
     "iopub.status.idle": "2023-03-15T12:44:28.556828Z",
     "shell.execute_reply": "2023-03-15T12:44:28.556011Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "840 ns ± 2.05 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:28.560266Z",
     "iopub.status.busy": "2023-03-15T12:44:28.559662Z",
     "iopub.status.idle": "2023-03-15T12:44:37.194490Z",
     "shell.execute_reply": "2023-03-15T12:44:37.193610Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.6 µs ± 17.8 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:37.198434Z",
     "iopub.status.busy": "2023-03-15T12:44:37.197830Z",
     "iopub.status.idle": "2023-03-15T12:44:37.202249Z",
     "shell.execute_reply": "2023-03-15T12:44:37.201586Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:37.205525Z",
     "iopub.status.busy": "2023-03-15T12:44:37.204930Z",
     "iopub.status.idle": "2023-03-15T12:44:48.842141Z",
     "shell.execute_reply": "2023-03-15T12:44:48.841274Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 429 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:44:48.845753Z",
     "iopub.status.busy": "2023-03-15T12:44:48.845184Z",
     "iopub.status.idle": "2023-03-15T12:45:00.472395Z",
     "shell.execute_reply": "2023-03-15T12:45:00.471743Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 872 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:00.475943Z",
     "iopub.status.busy": "2023-03-15T12:45:00.475305Z",
     "iopub.status.idle": "2023-03-15T12:45:00.480422Z",
     "shell.execute_reply": "2023-03-15T12:45:00.479740Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:00.483374Z",
     "iopub.status.busy": "2023-03-15T12:45:00.482928Z",
     "iopub.status.idle": "2023-03-15T12:45:00.491625Z",
     "shell.execute_reply": "2023-03-15T12:45:00.490135Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f42ac835e20>\n",
       "├── 'a' --> tensor([[[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]],\n",
       "│           \n",
       "│                   [[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]],\n",
       "│           \n",
       "│                   [[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]],\n",
       "│           \n",
       "│                   [[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]],\n",
       "│           \n",
       "│                   [[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]],\n",
       "│           \n",
       "│                   [[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]],\n",
       "│           \n",
       "│                   [[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]],\n",
       "│           \n",
       "│                   [[-1.7661,  0.4394, -0.1520],\n",
       "│                    [-0.5523,  0.3536, -1.4245]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f42bc717670>\n",
       "    └── 'c' --> tensor([[[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "                \n",
       "                        [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "                \n",
       "                        [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "                \n",
       "                        [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "                \n",
       "                        [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "                \n",
       "                        [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "                \n",
       "                        [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "                \n",
       "                        [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                         [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                         [-0.1294,  0.2696, -0.0838,  0.5286]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:00.495478Z",
     "iopub.status.busy": "2023-03-15T12:45:00.494944Z",
     "iopub.status.idle": "2023-03-15T12:45:03.052955Z",
     "shell.execute_reply": "2023-03-15T12:45:03.052041Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.5 µs ± 82.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:03.056289Z",
     "iopub.status.busy": "2023-03-15T12:45:03.055889Z",
     "iopub.status.idle": "2023-03-15T12:45:03.063861Z",
     "shell.execute_reply": "2023-03-15T12:45:03.063132Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4360db0430>\n",
       "├── 'a' --> tensor([[-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245],\n",
       "│                   [-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245],\n",
       "│                   [-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245],\n",
       "│                   [-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245],\n",
       "│                   [-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245],\n",
       "│                   [-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245],\n",
       "│                   [-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245],\n",
       "│                   [-1.7661,  0.4394, -0.1520],\n",
       "│                   [-0.5523,  0.3536, -1.4245]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4360db0250>\n",
       "    └── 'c' --> tensor([[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                        [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                        [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                        [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                        [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                        [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                        [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                        [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                        [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                        [-0.1294,  0.2696, -0.0838,  0.5286]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:03.067974Z",
     "iopub.status.busy": "2023-03-15T12:45:03.067353Z",
     "iopub.status.idle": "2023-03-15T12:45:05.483397Z",
     "shell.execute_reply": "2023-03-15T12:45:05.482417Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.7 µs ± 40.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:05.486721Z",
     "iopub.status.busy": "2023-03-15T12:45:05.486337Z",
     "iopub.status.idle": "2023-03-15T12:45:10.063418Z",
     "shell.execute_reply": "2023-03-15T12:45:10.062387Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.2 µs ± 73.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:10.066582Z",
     "iopub.status.busy": "2023-03-15T12:45:10.066099Z",
     "iopub.status.idle": "2023-03-15T12:45:10.074364Z",
     "shell.execute_reply": "2023-03-15T12:45:10.073740Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]],\n",
       "       \n",
       "               [[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]],\n",
       "       \n",
       "               [[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]],\n",
       "       \n",
       "               [[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]],\n",
       "       \n",
       "               [[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]],\n",
       "       \n",
       "               [[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]],\n",
       "       \n",
       "               [[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]],\n",
       "       \n",
       "               [[-1.7661,  0.4394, -0.1520],\n",
       "                [-0.5523,  0.3536, -1.4245]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "              \n",
       "                      [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "              \n",
       "                      [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "              \n",
       "                      [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "              \n",
       "                      [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "              \n",
       "                      [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "              \n",
       "                      [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]],\n",
       "              \n",
       "                      [[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                       [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                       [-0.1294,  0.2696, -0.0838,  0.5286]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:10.076996Z",
     "iopub.status.busy": "2023-03-15T12:45:10.076556Z",
     "iopub.status.idle": "2023-03-15T12:45:16.393698Z",
     "shell.execute_reply": "2023-03-15T12:45:16.392758Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.7 µs ± 266 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:16.396947Z",
     "iopub.status.busy": "2023-03-15T12:45:16.396575Z",
     "iopub.status.idle": "2023-03-15T12:45:16.405212Z",
     "shell.execute_reply": "2023-03-15T12:45:16.403953Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245],\n",
       "               [-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245],\n",
       "               [-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245],\n",
       "               [-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245],\n",
       "               [-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245],\n",
       "               [-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245],\n",
       "               [-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245],\n",
       "               [-1.7661,  0.4394, -0.1520],\n",
       "               [-0.5523,  0.3536, -1.4245]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                      [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                      [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                      [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                      [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                      [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                      [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286],\n",
       "                      [-0.3563, -1.0826,  0.4630, -0.0472],\n",
       "                      [-0.0239,  1.3690, -1.6710, -0.9967],\n",
       "                      [-0.1294,  0.2696, -0.0838,  0.5286]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:16.408264Z",
     "iopub.status.busy": "2023-03-15T12:45:16.407738Z",
     "iopub.status.idle": "2023-03-15T12:45:28.072969Z",
     "shell.execute_reply": "2023-03-15T12:45:28.072073Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 605 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T12:45:28.076890Z",
     "iopub.status.busy": "2023-03-15T12:45:28.076312Z",
     "iopub.status.idle": "2023-03-15T12:45:30.717490Z",
     "shell.execute_reply": "2023-03-15T12:45:30.716864Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "323 µs ± 342 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
