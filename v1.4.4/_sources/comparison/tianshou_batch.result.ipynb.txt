{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:33.704122Z",
     "iopub.status.busy": "2023-02-25T06:17:33.703525Z",
     "iopub.status.idle": "2023-02-25T06:17:34.604478Z",
     "shell.execute_reply": "2023-02-25T06:17:34.603839Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:34.607537Z",
     "iopub.status.busy": "2023-02-25T06:17:34.607262Z",
     "iopub.status.idle": "2023-02-25T06:17:34.639653Z",
     "shell.execute_reply": "2023-02-25T06:17:34.639053Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:34.642400Z",
     "iopub.status.busy": "2023-02-25T06:17:34.642174Z",
     "iopub.status.idle": "2023-02-25T06:17:34.652896Z",
     "shell.execute_reply": "2023-02-25T06:17:34.652211Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8574ab9e80>\n",
       "├── 'a' --> tensor([[-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8574ab9e50>\n",
       "    └── 'c' --> tensor([[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:34.655686Z",
     "iopub.status.busy": "2023-02-25T06:17:34.655139Z",
     "iopub.status.idle": "2023-02-25T06:17:34.660344Z",
     "shell.execute_reply": "2023-02-25T06:17:34.659766Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.6010, -0.7998, -1.1729],\n",
       "        [ 1.4727,  0.8255, -0.8335]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:34.662996Z",
     "iopub.status.busy": "2023-02-25T06:17:34.662671Z",
     "iopub.status.idle": "2023-02-25T06:17:39.633618Z",
     "shell.execute_reply": "2023-02-25T06:17:39.632869Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.3 ns ± 0.0544 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:39.636850Z",
     "iopub.status.busy": "2023-02-25T06:17:39.636275Z",
     "iopub.status.idle": "2023-02-25T06:17:39.642884Z",
     "shell.execute_reply": "2023-02-25T06:17:39.642303Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8574ab9e80>\n",
       "├── 'a' --> tensor([[ 0.2589,  0.6215, -1.3883],\n",
       "│                   [ 0.8201, -1.8638, -1.0767]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8574ab9e50>\n",
       "    └── 'c' --> tensor([[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:39.645732Z",
     "iopub.status.busy": "2023-02-25T06:17:39.645254Z",
     "iopub.status.idle": "2023-02-25T06:17:44.597863Z",
     "shell.execute_reply": "2023-02-25T06:17:44.597158Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.9 ns ± 0.0544 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:44.600884Z",
     "iopub.status.busy": "2023-02-25T06:17:44.600310Z",
     "iopub.status.idle": "2023-02-25T06:17:44.926241Z",
     "shell.execute_reply": "2023-02-25T06:17:44.925571Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:44.929595Z",
     "iopub.status.busy": "2023-02-25T06:17:44.928981Z",
     "iopub.status.idle": "2023-02-25T06:17:44.935001Z",
     "shell.execute_reply": "2023-02-25T06:17:44.934424Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:44.937620Z",
     "iopub.status.busy": "2023-02-25T06:17:44.937119Z",
     "iopub.status.idle": "2023-02-25T06:17:44.941724Z",
     "shell.execute_reply": "2023-02-25T06:17:44.941114Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.6010, -0.7998, -1.1729],\n",
       "        [ 1.4727,  0.8255, -0.8335]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:44.944154Z",
     "iopub.status.busy": "2023-02-25T06:17:44.943829Z",
     "iopub.status.idle": "2023-02-25T06:17:49.561286Z",
     "shell.execute_reply": "2023-02-25T06:17:49.560574Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.9 ns ± 0.0383 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:49.564102Z",
     "iopub.status.busy": "2023-02-25T06:17:49.563755Z",
     "iopub.status.idle": "2023-02-25T06:17:49.569445Z",
     "shell.execute_reply": "2023-02-25T06:17:49.568799Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1637,  1.0838,  0.1490],\n",
       "               [-0.4572, -0.9493,  2.3689]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:49.572058Z",
     "iopub.status.busy": "2023-02-25T06:17:49.571732Z",
     "iopub.status.idle": "2023-02-25T06:17:53.448178Z",
     "shell.execute_reply": "2023-02-25T06:17:53.447470Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "477 ns ± 0.134 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:17:53.451151Z",
     "iopub.status.busy": "2023-02-25T06:17:53.450782Z",
     "iopub.status.idle": "2023-02-25T06:18:00.354697Z",
     "shell.execute_reply": "2023-02-25T06:18:00.353987Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "852 ns ± 0.194 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:00.357620Z",
     "iopub.status.busy": "2023-02-25T06:18:00.357258Z",
     "iopub.status.idle": "2023-02-25T06:18:09.586419Z",
     "shell.execute_reply": "2023-02-25T06:18:09.585708Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 31.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:09.589505Z",
     "iopub.status.busy": "2023-02-25T06:18:09.588927Z",
     "iopub.status.idle": "2023-02-25T06:18:09.592486Z",
     "shell.execute_reply": "2023-02-25T06:18:09.591923Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:09.594875Z",
     "iopub.status.busy": "2023-02-25T06:18:09.594535Z",
     "iopub.status.idle": "2023-02-25T06:18:20.854213Z",
     "shell.execute_reply": "2023-02-25T06:18:20.853637Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 564 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:20.858160Z",
     "iopub.status.busy": "2023-02-25T06:18:20.857189Z",
     "iopub.status.idle": "2023-02-25T06:18:32.375215Z",
     "shell.execute_reply": "2023-02-25T06:18:32.374604Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 1.18 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:32.379184Z",
     "iopub.status.busy": "2023-02-25T06:18:32.378216Z",
     "iopub.status.idle": "2023-02-25T06:18:32.382509Z",
     "shell.execute_reply": "2023-02-25T06:18:32.381991Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:32.385173Z",
     "iopub.status.busy": "2023-02-25T06:18:32.384789Z",
     "iopub.status.idle": "2023-02-25T06:18:32.391975Z",
     "shell.execute_reply": "2023-02-25T06:18:32.391353Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8574a53340>\n",
       "├── 'a' --> tensor([[[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]],\n",
       "│           \n",
       "│                   [[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]],\n",
       "│           \n",
       "│                   [[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]],\n",
       "│           \n",
       "│                   [[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]],\n",
       "│           \n",
       "│                   [[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]],\n",
       "│           \n",
       "│                   [[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]],\n",
       "│           \n",
       "│                   [[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]],\n",
       "│           \n",
       "│                   [[-1.6010, -0.7998, -1.1729],\n",
       "│                    [ 1.4727,  0.8255, -0.8335]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8574ab9df0>\n",
       "    └── 'c' --> tensor([[[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "                \n",
       "                        [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "                \n",
       "                        [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "                \n",
       "                        [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "                \n",
       "                        [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "                \n",
       "                        [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "                \n",
       "                        [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "                \n",
       "                        [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                         [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                         [ 0.1073,  2.3316, -0.6865, -0.6532]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:32.394859Z",
     "iopub.status.busy": "2023-02-25T06:18:32.394327Z",
     "iopub.status.idle": "2023-02-25T06:18:34.998535Z",
     "shell.execute_reply": "2023-02-25T06:18:34.997792Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 49.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:35.001350Z",
     "iopub.status.busy": "2023-02-25T06:18:35.001006Z",
     "iopub.status.idle": "2023-02-25T06:18:35.008818Z",
     "shell.execute_reply": "2023-02-25T06:18:35.008246Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8574acd190>\n",
       "├── 'a' --> tensor([[-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335],\n",
       "│                   [-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335],\n",
       "│                   [-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335],\n",
       "│                   [-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335],\n",
       "│                   [-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335],\n",
       "│                   [-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335],\n",
       "│                   [-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335],\n",
       "│                   [-1.6010, -0.7998, -1.1729],\n",
       "│                   [ 1.4727,  0.8255, -0.8335]])\n",
       "└── 'x' --> <FastTreeValue 0x7f84c9d48f70>\n",
       "    └── 'c' --> tensor([[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                        [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                        [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                        [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                        [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                        [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                        [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                        [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                        [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                        [ 0.1073,  2.3316, -0.6865, -0.6532]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:35.011446Z",
     "iopub.status.busy": "2023-02-25T06:18:35.010911Z",
     "iopub.status.idle": "2023-02-25T06:18:37.461948Z",
     "shell.execute_reply": "2023-02-25T06:18:37.461289Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.1 µs ± 39.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:37.465198Z",
     "iopub.status.busy": "2023-02-25T06:18:37.464651Z",
     "iopub.status.idle": "2023-02-25T06:18:42.106212Z",
     "shell.execute_reply": "2023-02-25T06:18:42.105500Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.1 µs ± 58.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:42.109271Z",
     "iopub.status.busy": "2023-02-25T06:18:42.108730Z",
     "iopub.status.idle": "2023-02-25T06:18:42.116489Z",
     "shell.execute_reply": "2023-02-25T06:18:42.115851Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]],\n",
       "       \n",
       "               [[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]],\n",
       "       \n",
       "               [[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]],\n",
       "       \n",
       "               [[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]],\n",
       "       \n",
       "               [[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]],\n",
       "       \n",
       "               [[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]],\n",
       "       \n",
       "               [[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]],\n",
       "       \n",
       "               [[-1.6010, -0.7998, -1.1729],\n",
       "                [ 1.4727,  0.8255, -0.8335]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "              \n",
       "                      [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "              \n",
       "                      [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "              \n",
       "                      [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "              \n",
       "                      [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "              \n",
       "                      [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "              \n",
       "                      [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]],\n",
       "              \n",
       "                      [[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                       [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                       [ 0.1073,  2.3316, -0.6865, -0.6532]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:42.118923Z",
     "iopub.status.busy": "2023-02-25T06:18:42.118580Z",
     "iopub.status.idle": "2023-02-25T06:18:48.522051Z",
     "shell.execute_reply": "2023-02-25T06:18:48.521389Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.8 µs ± 244 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:48.525085Z",
     "iopub.status.busy": "2023-02-25T06:18:48.524539Z",
     "iopub.status.idle": "2023-02-25T06:18:48.531923Z",
     "shell.execute_reply": "2023-02-25T06:18:48.531344Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335],\n",
       "               [-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335],\n",
       "               [-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335],\n",
       "               [-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335],\n",
       "               [-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335],\n",
       "               [-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335],\n",
       "               [-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335],\n",
       "               [-1.6010, -0.7998, -1.1729],\n",
       "               [ 1.4727,  0.8255, -0.8335]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                      [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                      [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                      [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                      [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                      [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                      [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532],\n",
       "                      [-0.4454, -1.4041,  0.4436,  0.4038],\n",
       "                      [ 0.9479,  0.3456, -0.5346, -0.9527],\n",
       "                      [ 0.1073,  2.3316, -0.6865, -0.6532]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:48.534301Z",
     "iopub.status.busy": "2023-02-25T06:18:48.533967Z",
     "iopub.status.idle": "2023-02-25T06:18:59.966231Z",
     "shell.execute_reply": "2023-02-25T06:18:59.965526Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 251 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:18:59.969260Z",
     "iopub.status.busy": "2023-02-25T06:18:59.968672Z",
     "iopub.status.idle": "2023-02-25T06:19:02.535116Z",
     "shell.execute_reply": "2023-02-25T06:19:02.534288Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "315 µs ± 711 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
