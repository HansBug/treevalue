{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:01.914803Z",
     "iopub.status.busy": "2023-08-10T04:29:01.914195Z",
     "iopub.status.idle": "2023-08-10T04:29:03.510044Z",
     "shell.execute_reply": "2023-08-10T04:29:03.509032Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:03.514601Z",
     "iopub.status.busy": "2023-08-10T04:29:03.513982Z",
     "iopub.status.idle": "2023-08-10T04:29:03.548511Z",
     "shell.execute_reply": "2023-08-10T04:29:03.547682Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:03.552891Z",
     "iopub.status.busy": "2023-08-10T04:29:03.552431Z",
     "iopub.status.idle": "2023-08-10T04:29:03.562765Z",
     "shell.execute_reply": "2023-08-10T04:29:03.561942Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fceae570cd0>\n",
       "├── 'a' --> tensor([[ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978]])\n",
       "└── 'x' --> <FastTreeValue 0x7fceae570340>\n",
       "    └── 'c' --> tensor([[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:03.567163Z",
     "iopub.status.busy": "2023-08-10T04:29:03.566625Z",
     "iopub.status.idle": "2023-08-10T04:29:03.572486Z",
     "shell.execute_reply": "2023-08-10T04:29:03.571661Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.1292, -0.9573,  0.6968],\n",
       "        [-1.5165,  0.8399, -0.9978]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:03.576825Z",
     "iopub.status.busy": "2023-08-10T04:29:03.576400Z",
     "iopub.status.idle": "2023-08-10T04:29:10.706939Z",
     "shell.execute_reply": "2023-08-10T04:29:10.705459Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "87.9 ns ± 0.369 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:10.711303Z",
     "iopub.status.busy": "2023-08-10T04:29:10.710720Z",
     "iopub.status.idle": "2023-08-10T04:29:10.718082Z",
     "shell.execute_reply": "2023-08-10T04:29:10.717282Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fceae570cd0>\n",
       "├── 'a' --> tensor([[ 0.2923, -0.1461, -0.3340],\n",
       "│                   [-0.2101,  0.5021,  0.3524]])\n",
       "└── 'x' --> <FastTreeValue 0x7fceae570340>\n",
       "    └── 'c' --> tensor([[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:10.721960Z",
     "iopub.status.busy": "2023-08-10T04:29:10.721337Z",
     "iopub.status.idle": "2023-08-10T04:29:17.903589Z",
     "shell.execute_reply": "2023-08-10T04:29:17.902196Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88.6 ns ± 0.326 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:17.907901Z",
     "iopub.status.busy": "2023-08-10T04:29:17.907328Z",
     "iopub.status.idle": "2023-08-10T04:29:18.345975Z",
     "shell.execute_reply": "2023-08-10T04:29:18.344942Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:18.351655Z",
     "iopub.status.busy": "2023-08-10T04:29:18.351250Z",
     "iopub.status.idle": "2023-08-10T04:29:18.358264Z",
     "shell.execute_reply": "2023-08-10T04:29:18.357464Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:18.361980Z",
     "iopub.status.busy": "2023-08-10T04:29:18.361456Z",
     "iopub.status.idle": "2023-08-10T04:29:18.367223Z",
     "shell.execute_reply": "2023-08-10T04:29:18.366397Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.1292, -0.9573,  0.6968],\n",
       "        [-1.5165,  0.8399, -0.9978]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:18.371304Z",
     "iopub.status.busy": "2023-08-10T04:29:18.370870Z",
     "iopub.status.idle": "2023-08-10T04:29:24.667540Z",
     "shell.execute_reply": "2023-08-10T04:29:24.666264Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.5 ns ± 0.122 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:24.672866Z",
     "iopub.status.busy": "2023-08-10T04:29:24.671770Z",
     "iopub.status.idle": "2023-08-10T04:29:24.680262Z",
     "shell.execute_reply": "2023-08-10T04:29:24.679416Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.5058,  1.2944,  1.4295],\n",
       "               [ 0.9987, -1.6404, -0.4977]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:24.684377Z",
     "iopub.status.busy": "2023-08-10T04:29:24.683625Z",
     "iopub.status.idle": "2023-08-10T04:29:29.900430Z",
     "shell.execute_reply": "2023-08-10T04:29:29.899674Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "641 ns ± 2.19 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:29.904549Z",
     "iopub.status.busy": "2023-08-10T04:29:29.903990Z",
     "iopub.status.idle": "2023-08-10T04:29:38.318952Z",
     "shell.execute_reply": "2023-08-10T04:29:38.317892Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.03 µs ± 3.45 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:38.323752Z",
     "iopub.status.busy": "2023-08-10T04:29:38.322953Z",
     "iopub.status.idle": "2023-08-10T04:29:48.405309Z",
     "shell.execute_reply": "2023-08-10T04:29:48.403951Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.4 µs ± 90.8 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:48.409629Z",
     "iopub.status.busy": "2023-08-10T04:29:48.408974Z",
     "iopub.status.idle": "2023-08-10T04:29:48.414258Z",
     "shell.execute_reply": "2023-08-10T04:29:48.413527Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:29:48.418339Z",
     "iopub.status.busy": "2023-08-10T04:29:48.417678Z",
     "iopub.status.idle": "2023-08-10T04:30:01.995147Z",
     "shell.execute_reply": "2023-08-10T04:30:01.994383Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 874 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:01.999082Z",
     "iopub.status.busy": "2023-08-10T04:30:01.998788Z",
     "iopub.status.idle": "2023-08-10T04:30:16.076768Z",
     "shell.execute_reply": "2023-08-10T04:30:16.076023Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "174 µs ± 8.72 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:16.081419Z",
     "iopub.status.busy": "2023-08-10T04:30:16.080535Z",
     "iopub.status.idle": "2023-08-10T04:30:16.084906Z",
     "shell.execute_reply": "2023-08-10T04:30:16.084187Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:16.088388Z",
     "iopub.status.busy": "2023-08-10T04:30:16.088118Z",
     "iopub.status.idle": "2023-08-10T04:30:16.096876Z",
     "shell.execute_reply": "2023-08-10T04:30:16.096045Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcde684fa00>\n",
       "├── 'a' --> tensor([[[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]],\n",
       "│           \n",
       "│                   [[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]],\n",
       "│           \n",
       "│                   [[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]],\n",
       "│           \n",
       "│                   [[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]],\n",
       "│           \n",
       "│                   [[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]],\n",
       "│           \n",
       "│                   [[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]],\n",
       "│           \n",
       "│                   [[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]],\n",
       "│           \n",
       "│                   [[ 1.1292, -0.9573,  0.6968],\n",
       "│                    [-1.5165,  0.8399, -0.9978]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcdde6a0fd0>\n",
       "    └── 'c' --> tensor([[[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "                \n",
       "                        [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "                \n",
       "                        [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "                \n",
       "                        [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "                \n",
       "                        [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "                \n",
       "                        [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "                \n",
       "                        [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "                \n",
       "                        [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                         [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                         [-1.7225, -0.0649,  2.4844, -0.5314]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:16.100655Z",
     "iopub.status.busy": "2023-08-10T04:30:16.100386Z",
     "iopub.status.idle": "2023-08-10T04:30:19.222114Z",
     "shell.execute_reply": "2023-08-10T04:30:19.221126Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38.4 µs ± 199 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:19.226484Z",
     "iopub.status.busy": "2023-08-10T04:30:19.225761Z",
     "iopub.status.idle": "2023-08-10T04:30:19.237647Z",
     "shell.execute_reply": "2023-08-10T04:30:19.236911Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcdde6a0fa0>\n",
       "├── 'a' --> tensor([[ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978],\n",
       "│                   [ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978],\n",
       "│                   [ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978],\n",
       "│                   [ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978],\n",
       "│                   [ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978],\n",
       "│                   [ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978],\n",
       "│                   [ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978],\n",
       "│                   [ 1.1292, -0.9573,  0.6968],\n",
       "│                   [-1.5165,  0.8399, -0.9978]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcdde6a0b80>\n",
       "    └── 'c' --> tensor([[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                        [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                        [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                        [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                        [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                        [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                        [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                        [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                        [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                        [-1.7225, -0.0649,  2.4844, -0.5314]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:19.241235Z",
     "iopub.status.busy": "2023-08-10T04:30:19.240708Z",
     "iopub.status.idle": "2023-08-10T04:30:22.196462Z",
     "shell.execute_reply": "2023-08-10T04:30:22.195483Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.3 µs ± 136 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:22.200905Z",
     "iopub.status.busy": "2023-08-10T04:30:22.200004Z",
     "iopub.status.idle": "2023-08-10T04:30:28.428140Z",
     "shell.execute_reply": "2023-08-10T04:30:28.426915Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.6 µs ± 350 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:28.432798Z",
     "iopub.status.busy": "2023-08-10T04:30:28.432086Z",
     "iopub.status.idle": "2023-08-10T04:30:28.443055Z",
     "shell.execute_reply": "2023-08-10T04:30:28.441911Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "              \n",
       "                      [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "              \n",
       "                      [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "              \n",
       "                      [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "              \n",
       "                      [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "              \n",
       "                      [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "              \n",
       "                      [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]],\n",
       "              \n",
       "                      [[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                       [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                       [-1.7225, -0.0649,  2.4844, -0.5314]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]],\n",
       "       \n",
       "               [[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]],\n",
       "       \n",
       "               [[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]],\n",
       "       \n",
       "               [[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]],\n",
       "       \n",
       "               [[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]],\n",
       "       \n",
       "               [[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]],\n",
       "       \n",
       "               [[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]],\n",
       "       \n",
       "               [[ 1.1292, -0.9573,  0.6968],\n",
       "                [-1.5165,  0.8399, -0.9978]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:28.446836Z",
     "iopub.status.busy": "2023-08-10T04:30:28.446372Z",
     "iopub.status.idle": "2023-08-10T04:30:36.302548Z",
     "shell.execute_reply": "2023-08-10T04:30:36.301785Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96.7 µs ± 357 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:36.306460Z",
     "iopub.status.busy": "2023-08-10T04:30:36.305907Z",
     "iopub.status.idle": "2023-08-10T04:30:36.314413Z",
     "shell.execute_reply": "2023-08-10T04:30:36.313602Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                      [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                      [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                      [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                      [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                      [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                      [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314],\n",
       "                      [ 0.4270, -1.0331,  1.6964, -0.8139],\n",
       "                      [ 0.3548, -1.2394, -0.7148, -1.0874],\n",
       "                      [-1.7225, -0.0649,  2.4844, -0.5314]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978],\n",
       "               [ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978],\n",
       "               [ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978],\n",
       "               [ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978],\n",
       "               [ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978],\n",
       "               [ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978],\n",
       "               [ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978],\n",
       "               [ 1.1292, -0.9573,  0.6968],\n",
       "               [-1.5165,  0.8399, -0.9978]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:36.318290Z",
     "iopub.status.busy": "2023-08-10T04:30:36.317690Z",
     "iopub.status.idle": "2023-08-10T04:30:50.938638Z",
     "shell.execute_reply": "2023-08-10T04:30:50.937420Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "180 µs ± 514 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:30:50.943021Z",
     "iopub.status.busy": "2023-08-10T04:30:50.942354Z",
     "iopub.status.idle": "2023-08-10T04:30:54.249828Z",
     "shell.execute_reply": "2023-08-10T04:30:54.248854Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "407 µs ± 5.61 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
