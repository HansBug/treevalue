{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:14.608238Z",
     "iopub.status.busy": "2023-02-27T10:50:14.608019Z",
     "iopub.status.idle": "2023-02-27T10:50:15.499609Z",
     "shell.execute_reply": "2023-02-27T10:50:15.498963Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:15.503113Z",
     "iopub.status.busy": "2023-02-27T10:50:15.502513Z",
     "iopub.status.idle": "2023-02-27T10:50:15.535228Z",
     "shell.execute_reply": "2023-02-27T10:50:15.534302Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:15.538027Z",
     "iopub.status.busy": "2023-02-27T10:50:15.537471Z",
     "iopub.status.idle": "2023-02-27T10:50:15.547341Z",
     "shell.execute_reply": "2023-02-27T10:50:15.546163Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd20c81fc70>\n",
       "├── 'a' --> tensor([[-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd20c81fcd0>\n",
       "    └── 'c' --> tensor([[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:15.549803Z",
     "iopub.status.busy": "2023-02-27T10:50:15.549457Z",
     "iopub.status.idle": "2023-02-27T10:50:15.554413Z",
     "shell.execute_reply": "2023-02-27T10:50:15.553818Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.6769, -1.5168,  0.1395],\n",
       "        [-1.0905,  0.4804,  0.8916]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:15.556889Z",
     "iopub.status.busy": "2023-02-27T10:50:15.556547Z",
     "iopub.status.idle": "2023-02-27T10:50:20.490033Z",
     "shell.execute_reply": "2023-02-27T10:50:20.489266Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.8 ns ± 0.165 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:20.493028Z",
     "iopub.status.busy": "2023-02-27T10:50:20.492448Z",
     "iopub.status.idle": "2023-02-27T10:50:20.499011Z",
     "shell.execute_reply": "2023-02-27T10:50:20.498436Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd20c81fc70>\n",
       "├── 'a' --> tensor([[-0.7545, -0.5742,  0.3898],\n",
       "│                   [-3.5947, -1.6637, -0.0848]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd20c81fcd0>\n",
       "    └── 'c' --> tensor([[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:20.501395Z",
     "iopub.status.busy": "2023-02-27T10:50:20.501056Z",
     "iopub.status.idle": "2023-02-27T10:50:25.357365Z",
     "shell.execute_reply": "2023-02-27T10:50:25.356634Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 ns ± 0.0486 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:25.360622Z",
     "iopub.status.busy": "2023-02-27T10:50:25.360139Z",
     "iopub.status.idle": "2023-02-27T10:50:25.683553Z",
     "shell.execute_reply": "2023-02-27T10:50:25.682598Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:25.686745Z",
     "iopub.status.busy": "2023-02-27T10:50:25.686086Z",
     "iopub.status.idle": "2023-02-27T10:50:25.692216Z",
     "shell.execute_reply": "2023-02-27T10:50:25.691634Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:25.694735Z",
     "iopub.status.busy": "2023-02-27T10:50:25.694411Z",
     "iopub.status.idle": "2023-02-27T10:50:25.700139Z",
     "shell.execute_reply": "2023-02-27T10:50:25.699212Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.6769, -1.5168,  0.1395],\n",
       "        [-1.0905,  0.4804,  0.8916]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:25.702535Z",
     "iopub.status.busy": "2023-02-27T10:50:25.702198Z",
     "iopub.status.idle": "2023-02-27T10:50:30.255722Z",
     "shell.execute_reply": "2023-02-27T10:50:30.255022Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56 ns ± 0.0457 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:30.258811Z",
     "iopub.status.busy": "2023-02-27T10:50:30.258235Z",
     "iopub.status.idle": "2023-02-27T10:50:30.263989Z",
     "shell.execute_reply": "2023-02-27T10:50:30.263377Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3202,  0.1601,  1.1307],\n",
       "               [ 0.1025,  0.2893, -1.6955]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:30.266270Z",
     "iopub.status.busy": "2023-02-27T10:50:30.266059Z",
     "iopub.status.idle": "2023-02-27T10:50:34.211145Z",
     "shell.execute_reply": "2023-02-27T10:50:34.210443Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "486 ns ± 0.26 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:34.214400Z",
     "iopub.status.busy": "2023-02-27T10:50:34.213843Z",
     "iopub.status.idle": "2023-02-27T10:50:41.078864Z",
     "shell.execute_reply": "2023-02-27T10:50:41.078169Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "846 ns ± 1.33 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:41.082178Z",
     "iopub.status.busy": "2023-02-27T10:50:41.081580Z",
     "iopub.status.idle": "2023-02-27T10:50:50.260197Z",
     "shell.execute_reply": "2023-02-27T10:50:50.259492Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 14.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:50.263479Z",
     "iopub.status.busy": "2023-02-27T10:50:50.262954Z",
     "iopub.status.idle": "2023-02-27T10:50:50.266522Z",
     "shell.execute_reply": "2023-02-27T10:50:50.265947Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:50:50.268966Z",
     "iopub.status.busy": "2023-02-27T10:50:50.268628Z",
     "iopub.status.idle": "2023-02-27T10:51:01.277726Z",
     "shell.execute_reply": "2023-02-27T10:51:01.277058Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "136 µs ± 294 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:01.281017Z",
     "iopub.status.busy": "2023-02-27T10:51:01.280765Z",
     "iopub.status.idle": "2023-02-27T10:51:12.540885Z",
     "shell.execute_reply": "2023-02-27T10:51:12.540205Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 317 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:12.544039Z",
     "iopub.status.busy": "2023-02-27T10:51:12.543796Z",
     "iopub.status.idle": "2023-02-27T10:51:12.547701Z",
     "shell.execute_reply": "2023-02-27T10:51:12.547126Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:12.550246Z",
     "iopub.status.busy": "2023-02-27T10:51:12.550020Z",
     "iopub.status.idle": "2023-02-27T10:51:12.557696Z",
     "shell.execute_reply": "2023-02-27T10:51:12.557141Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd1624ce190>\n",
       "├── 'a' --> tensor([[[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]],\n",
       "│           \n",
       "│                   [[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]],\n",
       "│           \n",
       "│                   [[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]],\n",
       "│           \n",
       "│                   [[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]],\n",
       "│           \n",
       "│                   [[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]],\n",
       "│           \n",
       "│                   [[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]],\n",
       "│           \n",
       "│                   [[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]],\n",
       "│           \n",
       "│                   [[-1.6769, -1.5168,  0.1395],\n",
       "│                    [-1.0905,  0.4804,  0.8916]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd169106400>\n",
       "    └── 'c' --> tensor([[[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "                \n",
       "                        [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "                \n",
       "                        [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "                \n",
       "                        [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "                \n",
       "                        [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "                \n",
       "                        [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "                \n",
       "                        [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "                \n",
       "                        [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                         [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                         [-0.4247, -0.5472,  0.4194, -0.0534]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:12.560146Z",
     "iopub.status.busy": "2023-02-27T10:51:12.559938Z",
     "iopub.status.idle": "2023-02-27T10:51:15.142616Z",
     "shell.execute_reply": "2023-02-27T10:51:15.141399Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.8 µs ± 76.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:15.145795Z",
     "iopub.status.busy": "2023-02-27T10:51:15.145230Z",
     "iopub.status.idle": "2023-02-27T10:51:15.154334Z",
     "shell.execute_reply": "2023-02-27T10:51:15.153386Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd1624eadf0>\n",
       "├── 'a' --> tensor([[-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916],\n",
       "│                   [-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916],\n",
       "│                   [-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916],\n",
       "│                   [-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916],\n",
       "│                   [-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916],\n",
       "│                   [-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916],\n",
       "│                   [-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916],\n",
       "│                   [-1.6769, -1.5168,  0.1395],\n",
       "│                   [-1.0905,  0.4804,  0.8916]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd1624eafa0>\n",
       "    └── 'c' --> tensor([[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                        [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                        [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                        [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                        [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                        [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                        [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                        [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                        [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                        [-0.4247, -0.5472,  0.4194, -0.0534]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:15.156628Z",
     "iopub.status.busy": "2023-02-27T10:51:15.156421Z",
     "iopub.status.idle": "2023-02-27T10:51:17.612225Z",
     "shell.execute_reply": "2023-02-27T10:51:17.611524Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.2 µs ± 42.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:17.615192Z",
     "iopub.status.busy": "2023-02-27T10:51:17.614653Z",
     "iopub.status.idle": "2023-02-27T10:51:22.390995Z",
     "shell.execute_reply": "2023-02-27T10:51:22.390291Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.8 µs ± 84.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:22.394170Z",
     "iopub.status.busy": "2023-02-27T10:51:22.393814Z",
     "iopub.status.idle": "2023-02-27T10:51:22.401669Z",
     "shell.execute_reply": "2023-02-27T10:51:22.401098Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "              \n",
       "                      [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "              \n",
       "                      [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "              \n",
       "                      [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "              \n",
       "                      [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "              \n",
       "                      [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "              \n",
       "                      [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]],\n",
       "              \n",
       "                      [[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                       [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                       [-0.4247, -0.5472,  0.4194, -0.0534]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]],\n",
       "       \n",
       "               [[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]],\n",
       "       \n",
       "               [[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]],\n",
       "       \n",
       "               [[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]],\n",
       "       \n",
       "               [[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]],\n",
       "       \n",
       "               [[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]],\n",
       "       \n",
       "               [[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]],\n",
       "       \n",
       "               [[-1.6769, -1.5168,  0.1395],\n",
       "                [-1.0905,  0.4804,  0.8916]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:22.404475Z",
     "iopub.status.busy": "2023-02-27T10:51:22.403971Z",
     "iopub.status.idle": "2023-02-27T10:51:28.776404Z",
     "shell.execute_reply": "2023-02-27T10:51:28.775703Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.5 µs ± 180 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:28.779245Z",
     "iopub.status.busy": "2023-02-27T10:51:28.778908Z",
     "iopub.status.idle": "2023-02-27T10:51:28.786487Z",
     "shell.execute_reply": "2023-02-27T10:51:28.785891Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                      [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                      [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                      [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                      [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                      [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                      [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534],\n",
       "                      [-1.1305,  0.5783, -1.1402,  1.2265],\n",
       "                      [-1.4749,  0.0588, -1.2343, -0.9589],\n",
       "                      [-0.4247, -0.5472,  0.4194, -0.0534]]),\n",
       "       ),\n",
       "    a: tensor([[-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916],\n",
       "               [-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916],\n",
       "               [-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916],\n",
       "               [-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916],\n",
       "               [-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916],\n",
       "               [-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916],\n",
       "               [-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916],\n",
       "               [-1.6769, -1.5168,  0.1395],\n",
       "               [-1.0905,  0.4804,  0.8916]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:28.788897Z",
     "iopub.status.busy": "2023-02-27T10:51:28.788550Z",
     "iopub.status.idle": "2023-02-27T10:51:40.500209Z",
     "shell.execute_reply": "2023-02-27T10:51:40.499515Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 155 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:51:40.503044Z",
     "iopub.status.busy": "2023-02-27T10:51:40.502614Z",
     "iopub.status.idle": "2023-02-27T10:51:43.034560Z",
     "shell.execute_reply": "2023-02-27T10:51:43.033990Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 8.8 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
