{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:41.720391Z",
     "iopub.status.busy": "2023-08-10T09:32:41.720096Z",
     "iopub.status.idle": "2023-08-10T09:32:43.416722Z",
     "shell.execute_reply": "2023-08-10T09:32:43.415753Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:43.421371Z",
     "iopub.status.busy": "2023-08-10T09:32:43.420798Z",
     "iopub.status.idle": "2023-08-10T09:32:43.457787Z",
     "shell.execute_reply": "2023-08-10T09:32:43.456856Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:43.462362Z",
     "iopub.status.busy": "2023-08-10T09:32:43.461856Z",
     "iopub.status.idle": "2023-08-10T09:32:43.476746Z",
     "shell.execute_reply": "2023-08-10T09:32:43.475931Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd1d8ffca00>\n",
       "├── 'a' --> tensor([[-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd1d8ffcf40>\n",
       "    └── 'c' --> tensor([[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:43.480978Z",
     "iopub.status.busy": "2023-08-10T09:32:43.480396Z",
     "iopub.status.idle": "2023-08-10T09:32:43.488965Z",
     "shell.execute_reply": "2023-08-10T09:32:43.488230Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3744,  1.5878,  3.7638],\n",
       "        [ 0.4636,  0.2477, -0.2154]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:43.492971Z",
     "iopub.status.busy": "2023-08-10T09:32:43.492504Z",
     "iopub.status.idle": "2023-08-10T09:32:50.426095Z",
     "shell.execute_reply": "2023-08-10T09:32:50.425292Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.4 ns ± 0.0537 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:50.430188Z",
     "iopub.status.busy": "2023-08-10T09:32:50.429597Z",
     "iopub.status.idle": "2023-08-10T09:32:50.437439Z",
     "shell.execute_reply": "2023-08-10T09:32:50.436555Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd1d8ffca00>\n",
       "├── 'a' --> tensor([[-0.0357,  1.7343,  1.4026],\n",
       "│                   [-1.5537, -0.1947,  0.8365]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd1d8ffcf40>\n",
       "    └── 'c' --> tensor([[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:50.441462Z",
     "iopub.status.busy": "2023-08-10T09:32:50.440878Z",
     "iopub.status.idle": "2023-08-10T09:32:57.398088Z",
     "shell.execute_reply": "2023-08-10T09:32:57.396854Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.7 ns ± 0.0905 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:57.402809Z",
     "iopub.status.busy": "2023-08-10T09:32:57.401944Z",
     "iopub.status.idle": "2023-08-10T09:32:57.866096Z",
     "shell.execute_reply": "2023-08-10T09:32:57.864889Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:57.870363Z",
     "iopub.status.busy": "2023-08-10T09:32:57.869766Z",
     "iopub.status.idle": "2023-08-10T09:32:57.876749Z",
     "shell.execute_reply": "2023-08-10T09:32:57.875931Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:57.880492Z",
     "iopub.status.busy": "2023-08-10T09:32:57.879978Z",
     "iopub.status.idle": "2023-08-10T09:32:57.886265Z",
     "shell.execute_reply": "2023-08-10T09:32:57.885444Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3744,  1.5878,  3.7638],\n",
       "        [ 0.4636,  0.2477, -0.2154]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:32:57.890483Z",
     "iopub.status.busy": "2023-08-10T09:32:57.890039Z",
     "iopub.status.idle": "2023-08-10T09:33:04.156090Z",
     "shell.execute_reply": "2023-08-10T09:33:04.154478Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.2 ns ± 0.0933 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:04.160327Z",
     "iopub.status.busy": "2023-08-10T09:33:04.159731Z",
     "iopub.status.idle": "2023-08-10T09:33:04.167154Z",
     "shell.execute_reply": "2023-08-10T09:33:04.166302Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3733,  0.9931, -1.8552],\n",
       "               [ 0.6453,  0.1023,  1.3317]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:04.170869Z",
     "iopub.status.busy": "2023-08-10T09:33:04.170586Z",
     "iopub.status.idle": "2023-08-10T09:33:09.454785Z",
     "shell.execute_reply": "2023-08-10T09:33:09.453770Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "648 ns ± 0.174 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:09.459351Z",
     "iopub.status.busy": "2023-08-10T09:33:09.458596Z",
     "iopub.status.idle": "2023-08-10T09:33:18.021797Z",
     "shell.execute_reply": "2023-08-10T09:33:18.020668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.05 µs ± 0.236 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:18.026314Z",
     "iopub.status.busy": "2023-08-10T09:33:18.025570Z",
     "iopub.status.idle": "2023-08-10T09:33:28.567911Z",
     "shell.execute_reply": "2023-08-10T09:33:28.567124Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13 µs ± 21.8 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:28.571980Z",
     "iopub.status.busy": "2023-08-10T09:33:28.571378Z",
     "iopub.status.idle": "2023-08-10T09:33:28.575262Z",
     "shell.execute_reply": "2023-08-10T09:33:28.574410Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:28.579752Z",
     "iopub.status.busy": "2023-08-10T09:33:28.579071Z",
     "iopub.status.idle": "2023-08-10T09:33:42.635380Z",
     "shell.execute_reply": "2023-08-10T09:33:42.634453Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "173 µs ± 1.94 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:42.639583Z",
     "iopub.status.busy": "2023-08-10T09:33:42.638973Z",
     "iopub.status.idle": "2023-08-10T09:33:56.813921Z",
     "shell.execute_reply": "2023-08-10T09:33:56.812984Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175 µs ± 1.04 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:56.818139Z",
     "iopub.status.busy": "2023-08-10T09:33:56.817524Z",
     "iopub.status.idle": "2023-08-10T09:33:56.821891Z",
     "shell.execute_reply": "2023-08-10T09:33:56.821034Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:56.826110Z",
     "iopub.status.busy": "2023-08-10T09:33:56.825560Z",
     "iopub.status.idle": "2023-08-10T09:33:56.835122Z",
     "shell.execute_reply": "2023-08-10T09:33:56.834253Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd1d4f7a220>\n",
       "├── 'a' --> tensor([[[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]],\n",
       "│           \n",
       "│                   [[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]],\n",
       "│           \n",
       "│                   [[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]],\n",
       "│           \n",
       "│                   [[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]],\n",
       "│           \n",
       "│                   [[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]],\n",
       "│           \n",
       "│                   [[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]],\n",
       "│           \n",
       "│                   [[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]],\n",
       "│           \n",
       "│                   [[-0.3744,  1.5878,  3.7638],\n",
       "│                    [ 0.4636,  0.2477, -0.2154]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd1d4f7ae50>\n",
       "    └── 'c' --> tensor([[[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "                \n",
       "                        [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "                \n",
       "                        [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "                \n",
       "                        [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "                \n",
       "                        [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "                \n",
       "                        [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "                \n",
       "                        [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "                \n",
       "                        [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                         [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                         [-1.9713,  0.9861, -2.0437, -1.0594]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:33:56.838862Z",
     "iopub.status.busy": "2023-08-10T09:33:56.838568Z",
     "iopub.status.idle": "2023-08-10T09:34:00.017396Z",
     "shell.execute_reply": "2023-08-10T09:34:00.016548Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39.1 µs ± 96.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:00.021393Z",
     "iopub.status.busy": "2023-08-10T09:34:00.020776Z",
     "iopub.status.idle": "2023-08-10T09:34:00.030163Z",
     "shell.execute_reply": "2023-08-10T09:34:00.029268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd109182820>\n",
       "├── 'a' --> tensor([[-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154],\n",
       "│                   [-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154],\n",
       "│                   [-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154],\n",
       "│                   [-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154],\n",
       "│                   [-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154],\n",
       "│                   [-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154],\n",
       "│                   [-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154],\n",
       "│                   [-0.3744,  1.5878,  3.7638],\n",
       "│                   [ 0.4636,  0.2477, -0.2154]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd109182760>\n",
       "    └── 'c' --> tensor([[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                        [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                        [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                        [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                        [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                        [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                        [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                        [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                        [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                        [-1.9713,  0.9861, -2.0437, -1.0594]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:00.034462Z",
     "iopub.status.busy": "2023-08-10T09:34:00.033734Z",
     "iopub.status.idle": "2023-08-10T09:34:03.053290Z",
     "shell.execute_reply": "2023-08-10T09:34:03.052531Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37 µs ± 46.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:03.057885Z",
     "iopub.status.busy": "2023-08-10T09:34:03.056969Z",
     "iopub.status.idle": "2023-08-10T09:34:09.351535Z",
     "shell.execute_reply": "2023-08-10T09:34:09.348622Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.4 µs ± 105 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:09.356874Z",
     "iopub.status.busy": "2023-08-10T09:34:09.356302Z",
     "iopub.status.idle": "2023-08-10T09:34:09.367263Z",
     "shell.execute_reply": "2023-08-10T09:34:09.366420Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]],\n",
       "       \n",
       "               [[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]],\n",
       "       \n",
       "               [[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]],\n",
       "       \n",
       "               [[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]],\n",
       "       \n",
       "               [[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]],\n",
       "       \n",
       "               [[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]],\n",
       "       \n",
       "               [[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]],\n",
       "       \n",
       "               [[-0.3744,  1.5878,  3.7638],\n",
       "                [ 0.4636,  0.2477, -0.2154]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "              \n",
       "                      [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "              \n",
       "                      [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "              \n",
       "                      [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "              \n",
       "                      [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "              \n",
       "                      [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "              \n",
       "                      [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]],\n",
       "              \n",
       "                      [[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                       [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                       [-1.9713,  0.9861, -2.0437, -1.0594]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:09.371464Z",
     "iopub.status.busy": "2023-08-10T09:34:09.370788Z",
     "iopub.status.idle": "2023-08-10T09:34:17.490718Z",
     "shell.execute_reply": "2023-08-10T09:34:17.489937Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 µs ± 202 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:17.494708Z",
     "iopub.status.busy": "2023-08-10T09:34:17.493996Z",
     "iopub.status.idle": "2023-08-10T09:34:17.503185Z",
     "shell.execute_reply": "2023-08-10T09:34:17.501926Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154],\n",
       "               [-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154],\n",
       "               [-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154],\n",
       "               [-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154],\n",
       "               [-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154],\n",
       "               [-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154],\n",
       "               [-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154],\n",
       "               [-0.3744,  1.5878,  3.7638],\n",
       "               [ 0.4636,  0.2477, -0.2154]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                      [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                      [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                      [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                      [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                      [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                      [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594],\n",
       "                      [ 0.8382,  0.8111, -1.2707,  0.0985],\n",
       "                      [ 0.1601, -0.2383,  0.5786,  0.0639],\n",
       "                      [-1.9713,  0.9861, -2.0437, -1.0594]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:17.508836Z",
     "iopub.status.busy": "2023-08-10T09:34:17.508550Z",
     "iopub.status.idle": "2023-08-10T09:34:32.157373Z",
     "shell.execute_reply": "2023-08-10T09:34:32.156373Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "180 µs ± 146 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:34:32.162409Z",
     "iopub.status.busy": "2023-08-10T09:34:32.161712Z",
     "iopub.status.idle": "2023-08-10T09:34:35.626151Z",
     "shell.execute_reply": "2023-08-10T09:34:35.625210Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "424 µs ± 6.04 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
