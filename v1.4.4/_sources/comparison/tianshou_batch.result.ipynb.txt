{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:42.085130Z",
     "iopub.status.busy": "2023-02-27T11:57:42.084489Z",
     "iopub.status.idle": "2023-02-27T11:57:43.071739Z",
     "shell.execute_reply": "2023-02-27T11:57:43.070940Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:43.076219Z",
     "iopub.status.busy": "2023-02-27T11:57:43.075587Z",
     "iopub.status.idle": "2023-02-27T11:57:43.110676Z",
     "shell.execute_reply": "2023-02-27T11:57:43.109995Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:43.113886Z",
     "iopub.status.busy": "2023-02-27T11:57:43.113438Z",
     "iopub.status.idle": "2023-02-27T11:57:43.123131Z",
     "shell.execute_reply": "2023-02-27T11:57:43.122481Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f77a860ef10>\n",
       "├── 'a' --> tensor([[ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923]])\n",
       "└── 'x' --> <FastTreeValue 0x7f77a860e9a0>\n",
       "    └── 'c' --> tensor([[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:43.126144Z",
     "iopub.status.busy": "2023-02-27T11:57:43.125687Z",
     "iopub.status.idle": "2023-02-27T11:57:43.132037Z",
     "shell.execute_reply": "2023-02-27T11:57:43.131429Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2352,  1.8256,  1.5618],\n",
       "        [ 0.0571,  0.2170, -2.1923]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:43.134823Z",
     "iopub.status.busy": "2023-02-27T11:57:43.134435Z",
     "iopub.status.idle": "2023-02-27T11:57:48.731571Z",
     "shell.execute_reply": "2023-02-27T11:57:48.730640Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.7 ns ± 0.0271 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:48.734930Z",
     "iopub.status.busy": "2023-02-27T11:57:48.734502Z",
     "iopub.status.idle": "2023-02-27T11:57:48.742018Z",
     "shell.execute_reply": "2023-02-27T11:57:48.741368Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f77a860ef10>\n",
       "├── 'a' --> tensor([[ 0.7365, -0.6917,  1.8769],\n",
       "│                   [ 0.2519,  1.2031, -0.2722]])\n",
       "└── 'x' --> <FastTreeValue 0x7f77a860e9a0>\n",
       "    └── 'c' --> tensor([[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:48.744672Z",
     "iopub.status.busy": "2023-02-27T11:57:48.744298Z",
     "iopub.status.idle": "2023-02-27T11:57:54.264357Z",
     "shell.execute_reply": "2023-02-27T11:57:54.263194Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.9 ns ± 0.8 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:54.267864Z",
     "iopub.status.busy": "2023-02-27T11:57:54.267375Z",
     "iopub.status.idle": "2023-02-27T11:57:54.628991Z",
     "shell.execute_reply": "2023-02-27T11:57:54.628236Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:54.632796Z",
     "iopub.status.busy": "2023-02-27T11:57:54.632185Z",
     "iopub.status.idle": "2023-02-27T11:57:54.638168Z",
     "shell.execute_reply": "2023-02-27T11:57:54.637504Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:54.641264Z",
     "iopub.status.busy": "2023-02-27T11:57:54.640645Z",
     "iopub.status.idle": "2023-02-27T11:57:54.645491Z",
     "shell.execute_reply": "2023-02-27T11:57:54.644829Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2352,  1.8256,  1.5618],\n",
       "        [ 0.0571,  0.2170, -2.1923]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:54.648277Z",
     "iopub.status.busy": "2023-02-27T11:57:54.647749Z",
     "iopub.status.idle": "2023-02-27T11:57:59.494028Z",
     "shell.execute_reply": "2023-02-27T11:57:59.493120Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.7 ns ± 0.0461 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:59.497401Z",
     "iopub.status.busy": "2023-02-27T11:57:59.496966Z",
     "iopub.status.idle": "2023-02-27T11:57:59.504175Z",
     "shell.execute_reply": "2023-02-27T11:57:59.503547Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.1881,  0.2054, -1.0151],\n",
       "               [ 0.3463,  0.7112,  0.2917]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:57:59.507027Z",
     "iopub.status.busy": "2023-02-27T11:57:59.506452Z",
     "iopub.status.idle": "2023-02-27T11:58:03.524225Z",
     "shell.execute_reply": "2023-02-27T11:58:03.523367Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "495 ns ± 3.94 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:03.527792Z",
     "iopub.status.busy": "2023-02-27T11:58:03.527331Z",
     "iopub.status.idle": "2023-02-27T11:58:10.205770Z",
     "shell.execute_reply": "2023-02-27T11:58:10.205015Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "823 ns ± 7.74 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:10.209596Z",
     "iopub.status.busy": "2023-02-27T11:58:10.208994Z",
     "iopub.status.idle": "2023-02-27T11:58:19.159661Z",
     "shell.execute_reply": "2023-02-27T11:58:19.158509Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 µs ± 30.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:19.163156Z",
     "iopub.status.busy": "2023-02-27T11:58:19.162484Z",
     "iopub.status.idle": "2023-02-27T11:58:19.165720Z",
     "shell.execute_reply": "2023-02-27T11:58:19.165163Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:19.168449Z",
     "iopub.status.busy": "2023-02-27T11:58:19.168010Z",
     "iopub.status.idle": "2023-02-27T11:58:30.759566Z",
     "shell.execute_reply": "2023-02-27T11:58:30.758692Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 534 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:30.762881Z",
     "iopub.status.busy": "2023-02-27T11:58:30.762594Z",
     "iopub.status.idle": "2023-02-27T11:58:42.315982Z",
     "shell.execute_reply": "2023-02-27T11:58:42.315148Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 455 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:42.319485Z",
     "iopub.status.busy": "2023-02-27T11:58:42.319224Z",
     "iopub.status.idle": "2023-02-27T11:58:42.323629Z",
     "shell.execute_reply": "2023-02-27T11:58:42.322980Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:42.326644Z",
     "iopub.status.busy": "2023-02-27T11:58:42.326278Z",
     "iopub.status.idle": "2023-02-27T11:58:42.335489Z",
     "shell.execute_reply": "2023-02-27T11:58:42.334862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f777ca87610>\n",
       "├── 'a' --> tensor([[[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]],\n",
       "│           \n",
       "│                   [[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]],\n",
       "│           \n",
       "│                   [[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]],\n",
       "│           \n",
       "│                   [[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]],\n",
       "│           \n",
       "│                   [[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]],\n",
       "│           \n",
       "│                   [[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]],\n",
       "│           \n",
       "│                   [[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]],\n",
       "│           \n",
       "│                   [[ 0.2352,  1.8256,  1.5618],\n",
       "│                    [ 0.0571,  0.2170, -2.1923]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f77a8595250>\n",
       "    └── 'c' --> tensor([[[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "                \n",
       "                        [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "                \n",
       "                        [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "                \n",
       "                        [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "                \n",
       "                        [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "                \n",
       "                        [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "                \n",
       "                        [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "                \n",
       "                        [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                         [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                         [ 0.6018,  0.1297, -0.1041, -1.2848]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:42.338519Z",
     "iopub.status.busy": "2023-02-27T11:58:42.337926Z",
     "iopub.status.idle": "2023-02-27T11:58:44.988090Z",
     "shell.execute_reply": "2023-02-27T11:58:44.987250Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.6 µs ± 62.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:44.991489Z",
     "iopub.status.busy": "2023-02-27T11:58:44.991007Z",
     "iopub.status.idle": "2023-02-27T11:58:44.999291Z",
     "shell.execute_reply": "2023-02-27T11:58:44.998655Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f76fb3384c0>\n",
       "├── 'a' --> tensor([[ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923],\n",
       "│                   [ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923],\n",
       "│                   [ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923],\n",
       "│                   [ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923],\n",
       "│                   [ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923],\n",
       "│                   [ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923],\n",
       "│                   [ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923],\n",
       "│                   [ 0.2352,  1.8256,  1.5618],\n",
       "│                   [ 0.0571,  0.2170, -2.1923]])\n",
       "└── 'x' --> <FastTreeValue 0x7f76fb245970>\n",
       "    └── 'c' --> tensor([[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                        [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                        [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                        [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                        [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                        [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                        [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                        [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                        [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                        [ 0.6018,  0.1297, -0.1041, -1.2848]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:45.002406Z",
     "iopub.status.busy": "2023-02-27T11:58:45.001992Z",
     "iopub.status.idle": "2023-02-27T11:58:47.460884Z",
     "shell.execute_reply": "2023-02-27T11:58:47.459985Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.2 µs ± 198 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:47.464745Z",
     "iopub.status.busy": "2023-02-27T11:58:47.464250Z",
     "iopub.status.idle": "2023-02-27T11:58:52.028801Z",
     "shell.execute_reply": "2023-02-27T11:58:52.027899Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.1 µs ± 72.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:52.032495Z",
     "iopub.status.busy": "2023-02-27T11:58:52.031874Z",
     "iopub.status.idle": "2023-02-27T11:58:52.040636Z",
     "shell.execute_reply": "2023-02-27T11:58:52.040012Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "              \n",
       "                      [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "              \n",
       "                      [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "              \n",
       "                      [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "              \n",
       "                      [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "              \n",
       "                      [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "              \n",
       "                      [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]],\n",
       "              \n",
       "                      [[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                       [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                       [ 0.6018,  0.1297, -0.1041, -1.2848]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]],\n",
       "       \n",
       "               [[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]],\n",
       "       \n",
       "               [[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]],\n",
       "       \n",
       "               [[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]],\n",
       "       \n",
       "               [[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]],\n",
       "       \n",
       "               [[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]],\n",
       "       \n",
       "               [[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]],\n",
       "       \n",
       "               [[ 0.2352,  1.8256,  1.5618],\n",
       "                [ 0.0571,  0.2170, -2.1923]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:52.043605Z",
     "iopub.status.busy": "2023-02-27T11:58:52.043244Z",
     "iopub.status.idle": "2023-02-27T11:58:58.353712Z",
     "shell.execute_reply": "2023-02-27T11:58:58.352773Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.6 µs ± 60.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:58.357356Z",
     "iopub.status.busy": "2023-02-27T11:58:58.356824Z",
     "iopub.status.idle": "2023-02-27T11:58:58.364884Z",
     "shell.execute_reply": "2023-02-27T11:58:58.364242Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                      [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                      [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                      [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                      [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                      [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                      [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848],\n",
       "                      [-0.5775, -0.0528, -0.8623,  1.7479],\n",
       "                      [-0.4966,  0.2127,  1.1874, -0.4692],\n",
       "                      [ 0.6018,  0.1297, -0.1041, -1.2848]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923],\n",
       "               [ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923],\n",
       "               [ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923],\n",
       "               [ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923],\n",
       "               [ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923],\n",
       "               [ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923],\n",
       "               [ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923],\n",
       "               [ 0.2352,  1.8256,  1.5618],\n",
       "               [ 0.0571,  0.2170, -2.1923]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:58:58.368134Z",
     "iopub.status.busy": "2023-02-27T11:58:58.367560Z",
     "iopub.status.idle": "2023-02-27T11:59:10.068255Z",
     "shell.execute_reply": "2023-02-27T11:59:10.067321Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 148 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:59:10.072219Z",
     "iopub.status.busy": "2023-02-27T11:59:10.071781Z",
     "iopub.status.idle": "2023-02-27T11:59:12.705673Z",
     "shell.execute_reply": "2023-02-27T11:59:12.704954Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "324 µs ± 7.98 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
