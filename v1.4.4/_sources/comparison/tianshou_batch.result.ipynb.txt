{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:46.460476Z",
     "iopub.status.busy": "2023-02-25T18:37:46.460160Z",
     "iopub.status.idle": "2023-02-25T18:37:47.452896Z",
     "shell.execute_reply": "2023-02-25T18:37:47.452143Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:47.457480Z",
     "iopub.status.busy": "2023-02-25T18:37:47.456947Z",
     "iopub.status.idle": "2023-02-25T18:37:47.491684Z",
     "shell.execute_reply": "2023-02-25T18:37:47.490952Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:47.495372Z",
     "iopub.status.busy": "2023-02-25T18:37:47.494896Z",
     "iopub.status.idle": "2023-02-25T18:37:47.505951Z",
     "shell.execute_reply": "2023-02-25T18:37:47.505307Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1ad81cc550>\n",
       "├── 'a' --> tensor([[-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1ad81cc100>\n",
       "    └── 'c' --> tensor([[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:47.508955Z",
     "iopub.status.busy": "2023-02-25T18:37:47.508567Z",
     "iopub.status.idle": "2023-02-25T18:37:47.515056Z",
     "shell.execute_reply": "2023-02-25T18:37:47.514284Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.4470, -0.1013, -0.2459],\n",
       "        [-0.2532, -0.5074, -0.6539]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:47.518726Z",
     "iopub.status.busy": "2023-02-25T18:37:47.518173Z",
     "iopub.status.idle": "2023-02-25T18:37:52.760632Z",
     "shell.execute_reply": "2023-02-25T18:37:52.759739Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.5 ns ± 0.0486 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:52.764203Z",
     "iopub.status.busy": "2023-02-25T18:37:52.763574Z",
     "iopub.status.idle": "2023-02-25T18:37:52.771080Z",
     "shell.execute_reply": "2023-02-25T18:37:52.770394Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1ad81cc550>\n",
       "├── 'a' --> tensor([[-0.7265,  0.6881, -0.2685],\n",
       "│                   [-0.2406, -1.1582, -1.0061]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1ad81cc100>\n",
       "    └── 'c' --> tensor([[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:52.774372Z",
     "iopub.status.busy": "2023-02-25T18:37:52.773744Z",
     "iopub.status.idle": "2023-02-25T18:37:58.437782Z",
     "shell.execute_reply": "2023-02-25T18:37:58.436819Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.8 ns ± 0.0386 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:58.441426Z",
     "iopub.status.busy": "2023-02-25T18:37:58.440911Z",
     "iopub.status.idle": "2023-02-25T18:37:58.802250Z",
     "shell.execute_reply": "2023-02-25T18:37:58.801422Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:58.805981Z",
     "iopub.status.busy": "2023-02-25T18:37:58.805406Z",
     "iopub.status.idle": "2023-02-25T18:37:58.812046Z",
     "shell.execute_reply": "2023-02-25T18:37:58.811430Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:58.815161Z",
     "iopub.status.busy": "2023-02-25T18:37:58.814715Z",
     "iopub.status.idle": "2023-02-25T18:37:58.821486Z",
     "shell.execute_reply": "2023-02-25T18:37:58.820896Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.4470, -0.1013, -0.2459],\n",
       "        [-0.2532, -0.5074, -0.6539]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:37:58.824123Z",
     "iopub.status.busy": "2023-02-25T18:37:58.823755Z",
     "iopub.status.idle": "2023-02-25T18:38:03.709242Z",
     "shell.execute_reply": "2023-02-25T18:38:03.708324Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 ns ± 0.0882 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:03.712563Z",
     "iopub.status.busy": "2023-02-25T18:38:03.712162Z",
     "iopub.status.idle": "2023-02-25T18:38:03.718979Z",
     "shell.execute_reply": "2023-02-25T18:38:03.718295Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3827,  0.7523, -0.0691],\n",
       "               [ 0.6629,  1.8331,  0.5627]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:03.721956Z",
     "iopub.status.busy": "2023-02-25T18:38:03.721351Z",
     "iopub.status.idle": "2023-02-25T18:38:07.754484Z",
     "shell.execute_reply": "2023-02-25T18:38:07.753566Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "496 ns ± 0.334 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:07.757675Z",
     "iopub.status.busy": "2023-02-25T18:38:07.757272Z",
     "iopub.status.idle": "2023-02-25T18:38:14.415756Z",
     "shell.execute_reply": "2023-02-25T18:38:14.414888Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "820 ns ± 0.165 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:14.421580Z",
     "iopub.status.busy": "2023-02-25T18:38:14.420849Z",
     "iopub.status.idle": "2023-02-25T18:38:23.299358Z",
     "shell.execute_reply": "2023-02-25T18:38:23.298400Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 16.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:23.302748Z",
     "iopub.status.busy": "2023-02-25T18:38:23.302264Z",
     "iopub.status.idle": "2023-02-25T18:38:23.306543Z",
     "shell.execute_reply": "2023-02-25T18:38:23.305885Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:23.309612Z",
     "iopub.status.busy": "2023-02-25T18:38:23.309066Z",
     "iopub.status.idle": "2023-02-25T18:38:35.176308Z",
     "shell.execute_reply": "2023-02-25T18:38:35.175668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 1.47 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:35.179221Z",
     "iopub.status.busy": "2023-02-25T18:38:35.178804Z",
     "iopub.status.idle": "2023-02-25T18:38:46.807866Z",
     "shell.execute_reply": "2023-02-25T18:38:46.807051Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 680 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:46.811069Z",
     "iopub.status.busy": "2023-02-25T18:38:46.810592Z",
     "iopub.status.idle": "2023-02-25T18:38:46.815092Z",
     "shell.execute_reply": "2023-02-25T18:38:46.814407Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:46.817641Z",
     "iopub.status.busy": "2023-02-25T18:38:46.817326Z",
     "iopub.status.idle": "2023-02-25T18:38:46.824824Z",
     "shell.execute_reply": "2023-02-25T18:38:46.824137Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1a2ce824f0>\n",
       "├── 'a' --> tensor([[[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]],\n",
       "│           \n",
       "│                   [[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]],\n",
       "│           \n",
       "│                   [[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]],\n",
       "│           \n",
       "│                   [[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]],\n",
       "│           \n",
       "│                   [[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]],\n",
       "│           \n",
       "│                   [[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]],\n",
       "│           \n",
       "│                   [[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]],\n",
       "│           \n",
       "│                   [[-1.4470, -0.1013, -0.2459],\n",
       "│                    [-0.2532, -0.5074, -0.6539]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1a2ce34f40>\n",
       "    └── 'c' --> tensor([[[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "                \n",
       "                        [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "                \n",
       "                        [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "                \n",
       "                        [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "                \n",
       "                        [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "                \n",
       "                        [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "                \n",
       "                        [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "                \n",
       "                        [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                         [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                         [ 0.2778,  1.8175,  0.5392,  0.0688]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:46.827791Z",
     "iopub.status.busy": "2023-02-25T18:38:46.827175Z",
     "iopub.status.idle": "2023-02-25T18:38:49.488822Z",
     "shell.execute_reply": "2023-02-25T18:38:49.488031Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.7 µs ± 48.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:49.492416Z",
     "iopub.status.busy": "2023-02-25T18:38:49.492153Z",
     "iopub.status.idle": "2023-02-25T18:38:49.505550Z",
     "shell.execute_reply": "2023-02-25T18:38:49.502113Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1a2ce35ee0>\n",
       "├── 'a' --> tensor([[-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539],\n",
       "│                   [-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539],\n",
       "│                   [-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539],\n",
       "│                   [-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539],\n",
       "│                   [-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539],\n",
       "│                   [-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539],\n",
       "│                   [-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539],\n",
       "│                   [-1.4470, -0.1013, -0.2459],\n",
       "│                   [-0.2532, -0.5074, -0.6539]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1ad81881f0>\n",
       "    └── 'c' --> tensor([[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                        [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                        [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                        [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                        [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                        [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                        [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                        [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                        [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                        [ 0.2778,  1.8175,  0.5392,  0.0688]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:49.508737Z",
     "iopub.status.busy": "2023-02-25T18:38:49.508337Z",
     "iopub.status.idle": "2023-02-25T18:38:52.030794Z",
     "shell.execute_reply": "2023-02-25T18:38:52.029850Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31 µs ± 35.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:52.034355Z",
     "iopub.status.busy": "2023-02-25T18:38:52.033847Z",
     "iopub.status.idle": "2023-02-25T18:38:56.635786Z",
     "shell.execute_reply": "2023-02-25T18:38:56.634797Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.6 µs ± 63.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:56.639856Z",
     "iopub.status.busy": "2023-02-25T18:38:56.639453Z",
     "iopub.status.idle": "2023-02-25T18:38:56.648883Z",
     "shell.execute_reply": "2023-02-25T18:38:56.648241Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]],\n",
       "       \n",
       "               [[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]],\n",
       "       \n",
       "               [[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]],\n",
       "       \n",
       "               [[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]],\n",
       "       \n",
       "               [[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]],\n",
       "       \n",
       "               [[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]],\n",
       "       \n",
       "               [[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]],\n",
       "       \n",
       "               [[-1.4470, -0.1013, -0.2459],\n",
       "                [-0.2532, -0.5074, -0.6539]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "              \n",
       "                      [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "              \n",
       "                      [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "              \n",
       "                      [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "              \n",
       "                      [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "              \n",
       "                      [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "              \n",
       "                      [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]],\n",
       "              \n",
       "                      [[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                       [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                       [ 0.2778,  1.8175,  0.5392,  0.0688]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:38:56.651762Z",
     "iopub.status.busy": "2023-02-25T18:38:56.651510Z",
     "iopub.status.idle": "2023-02-25T18:39:03.111363Z",
     "shell.execute_reply": "2023-02-25T18:39:03.110504Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.5 µs ± 240 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:39:03.114835Z",
     "iopub.status.busy": "2023-02-25T18:39:03.114218Z",
     "iopub.status.idle": "2023-02-25T18:39:03.122519Z",
     "shell.execute_reply": "2023-02-25T18:39:03.121894Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539],\n",
       "               [-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539],\n",
       "               [-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539],\n",
       "               [-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539],\n",
       "               [-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539],\n",
       "               [-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539],\n",
       "               [-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539],\n",
       "               [-1.4470, -0.1013, -0.2459],\n",
       "               [-0.2532, -0.5074, -0.6539]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                      [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                      [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                      [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                      [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                      [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                      [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688],\n",
       "                      [-0.9977, -0.8334,  0.3842,  1.0598],\n",
       "                      [ 0.9053, -0.7832,  0.6615, -0.1452],\n",
       "                      [ 0.2778,  1.8175,  0.5392,  0.0688]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:39:03.125073Z",
     "iopub.status.busy": "2023-02-25T18:39:03.124849Z",
     "iopub.status.idle": "2023-02-25T18:39:14.787105Z",
     "shell.execute_reply": "2023-02-25T18:39:14.786202Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 160 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:39:14.790725Z",
     "iopub.status.busy": "2023-02-25T18:39:14.790234Z",
     "iopub.status.idle": "2023-02-25T18:39:17.473970Z",
     "shell.execute_reply": "2023-02-25T18:39:17.473314Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "329 µs ± 647 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
