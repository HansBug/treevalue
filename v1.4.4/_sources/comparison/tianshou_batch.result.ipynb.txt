{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:24.101437Z",
     "iopub.status.busy": "2023-02-24T08:05:24.101135Z",
     "iopub.status.idle": "2023-02-24T08:05:25.286700Z",
     "shell.execute_reply": "2023-02-24T08:05:25.285519Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:25.291114Z",
     "iopub.status.busy": "2023-02-24T08:05:25.290496Z",
     "iopub.status.idle": "2023-02-24T08:05:25.338977Z",
     "shell.execute_reply": "2023-02-24T08:05:25.337904Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:25.343141Z",
     "iopub.status.busy": "2023-02-24T08:05:25.342409Z",
     "iopub.status.idle": "2023-02-24T08:05:25.356391Z",
     "shell.execute_reply": "2023-02-24T08:05:25.355477Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb6981db910>\n",
       "├── 'a' --> tensor([[-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb6981db8b0>\n",
       "    └── 'c' --> tensor([[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:25.360640Z",
     "iopub.status.busy": "2023-02-24T08:05:25.360164Z",
     "iopub.status.idle": "2023-02-24T08:05:25.368236Z",
     "shell.execute_reply": "2023-02-24T08:05:25.367298Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.7809,  0.5063,  0.5516],\n",
       "        [-0.3210, -0.8318, -0.4972]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:25.371607Z",
     "iopub.status.busy": "2023-02-24T08:05:25.371324Z",
     "iopub.status.idle": "2023-02-24T08:05:31.531303Z",
     "shell.execute_reply": "2023-02-24T08:05:31.530340Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76 ns ± 1 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:31.534963Z",
     "iopub.status.busy": "2023-02-24T08:05:31.534461Z",
     "iopub.status.idle": "2023-02-24T08:05:31.543960Z",
     "shell.execute_reply": "2023-02-24T08:05:31.543029Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb6981db910>\n",
       "├── 'a' --> tensor([[-0.5579,  0.1853,  0.4087],\n",
       "│                   [-0.6326,  1.6212,  0.5685]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb6981db8b0>\n",
       "    └── 'c' --> tensor([[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:31.547918Z",
     "iopub.status.busy": "2023-02-24T08:05:31.547431Z",
     "iopub.status.idle": "2023-02-24T08:05:38.227964Z",
     "shell.execute_reply": "2023-02-24T08:05:38.226947Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.7 ns ± 1.25 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:38.231809Z",
     "iopub.status.busy": "2023-02-24T08:05:38.231281Z",
     "iopub.status.idle": "2023-02-24T08:05:38.672160Z",
     "shell.execute_reply": "2023-02-24T08:05:38.671115Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:38.676798Z",
     "iopub.status.busy": "2023-02-24T08:05:38.676165Z",
     "iopub.status.idle": "2023-02-24T08:05:38.685792Z",
     "shell.execute_reply": "2023-02-24T08:05:38.684786Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:38.690362Z",
     "iopub.status.busy": "2023-02-24T08:05:38.689544Z",
     "iopub.status.idle": "2023-02-24T08:05:38.697142Z",
     "shell.execute_reply": "2023-02-24T08:05:38.696198Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.7809,  0.5063,  0.5516],\n",
       "        [-0.3210, -0.8318, -0.4972]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:38.700626Z",
     "iopub.status.busy": "2023-02-24T08:05:38.700300Z",
     "iopub.status.idle": "2023-02-24T08:05:44.594010Z",
     "shell.execute_reply": "2023-02-24T08:05:44.593025Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.2 ns ± 0.787 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:44.598477Z",
     "iopub.status.busy": "2023-02-24T08:05:44.597742Z",
     "iopub.status.idle": "2023-02-24T08:05:44.606673Z",
     "shell.execute_reply": "2023-02-24T08:05:44.605782Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5353,  1.1295, -0.0105],\n",
       "               [-1.3239,  0.4582,  0.8970]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:44.610263Z",
     "iopub.status.busy": "2023-02-24T08:05:44.610011Z",
     "iopub.status.idle": "2023-02-24T08:05:49.557677Z",
     "shell.execute_reply": "2023-02-24T08:05:49.556574Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "609 ns ± 9.85 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:49.562198Z",
     "iopub.status.busy": "2023-02-24T08:05:49.561754Z",
     "iopub.status.idle": "2023-02-24T08:05:57.435756Z",
     "shell.execute_reply": "2023-02-24T08:05:57.434795Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "970 ns ± 10 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:05:57.440156Z",
     "iopub.status.busy": "2023-02-24T08:05:57.439711Z",
     "iopub.status.idle": "2023-02-24T08:06:08.072615Z",
     "shell.execute_reply": "2023-02-24T08:06:08.071584Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.1 µs ± 204 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:08.076420Z",
     "iopub.status.busy": "2023-02-24T08:06:08.076119Z",
     "iopub.status.idle": "2023-02-24T08:06:08.081563Z",
     "shell.execute_reply": "2023-02-24T08:06:08.080519Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:08.085183Z",
     "iopub.status.busy": "2023-02-24T08:06:08.084760Z",
     "iopub.status.idle": "2023-02-24T08:06:10.500665Z",
     "shell.execute_reply": "2023-02-24T08:06:10.499498Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "295 µs ± 10.1 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:10.504622Z",
     "iopub.status.busy": "2023-02-24T08:06:10.504016Z",
     "iopub.status.idle": "2023-02-24T08:06:12.666186Z",
     "shell.execute_reply": "2023-02-24T08:06:12.665332Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "263 µs ± 4.62 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:12.670199Z",
     "iopub.status.busy": "2023-02-24T08:06:12.669698Z",
     "iopub.status.idle": "2023-02-24T08:06:12.674398Z",
     "shell.execute_reply": "2023-02-24T08:06:12.673549Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:12.678095Z",
     "iopub.status.busy": "2023-02-24T08:06:12.677208Z",
     "iopub.status.idle": "2023-02-24T08:06:12.686599Z",
     "shell.execute_reply": "2023-02-24T08:06:12.685599Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb5eaec0fd0>\n",
       "├── 'a' --> tensor([[[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]],\n",
       "│           \n",
       "│                   [[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]],\n",
       "│           \n",
       "│                   [[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]],\n",
       "│           \n",
       "│                   [[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]],\n",
       "│           \n",
       "│                   [[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]],\n",
       "│           \n",
       "│                   [[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]],\n",
       "│           \n",
       "│                   [[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]],\n",
       "│           \n",
       "│                   [[-0.7809,  0.5063,  0.5516],\n",
       "│                    [-0.3210, -0.8318, -0.4972]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb5eaec0fa0>\n",
       "    └── 'c' --> tensor([[[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "                \n",
       "                        [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "                \n",
       "                        [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "                \n",
       "                        [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "                \n",
       "                        [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "                \n",
       "                        [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "                \n",
       "                        [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "                \n",
       "                        [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                         [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                         [-0.4602,  0.8365, -1.7004, -0.1574]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:12.689988Z",
     "iopub.status.busy": "2023-02-24T08:06:12.689446Z",
     "iopub.status.idle": "2023-02-24T08:06:16.371890Z",
     "shell.execute_reply": "2023-02-24T08:06:16.370827Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.3 µs ± 916 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:16.375830Z",
     "iopub.status.busy": "2023-02-24T08:06:16.375406Z",
     "iopub.status.idle": "2023-02-24T08:06:16.384808Z",
     "shell.execute_reply": "2023-02-24T08:06:16.383833Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb69823bd90>\n",
       "├── 'a' --> tensor([[-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972],\n",
       "│                   [-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972],\n",
       "│                   [-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972],\n",
       "│                   [-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972],\n",
       "│                   [-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972],\n",
       "│                   [-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972],\n",
       "│                   [-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972],\n",
       "│                   [-0.7809,  0.5063,  0.5516],\n",
       "│                   [-0.3210, -0.8318, -0.4972]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb69823bd30>\n",
       "    └── 'c' --> tensor([[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                        [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                        [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                        [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                        [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                        [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                        [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                        [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                        [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                        [-0.4602,  0.8365, -1.7004, -0.1574]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:16.388111Z",
     "iopub.status.busy": "2023-02-24T08:06:16.387613Z",
     "iopub.status.idle": "2023-02-24T08:06:19.671818Z",
     "shell.execute_reply": "2023-02-24T08:06:19.670808Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40.2 µs ± 509 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:19.675601Z",
     "iopub.status.busy": "2023-02-24T08:06:19.675108Z",
     "iopub.status.idle": "2023-02-24T08:06:26.046079Z",
     "shell.execute_reply": "2023-02-24T08:06:26.044835Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.2 µs ± 2.04 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:26.049721Z",
     "iopub.status.busy": "2023-02-24T08:06:26.049433Z",
     "iopub.status.idle": "2023-02-24T08:06:26.060699Z",
     "shell.execute_reply": "2023-02-24T08:06:26.059306Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]],\n",
       "       \n",
       "               [[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]],\n",
       "       \n",
       "               [[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]],\n",
       "       \n",
       "               [[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]],\n",
       "       \n",
       "               [[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]],\n",
       "       \n",
       "               [[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]],\n",
       "       \n",
       "               [[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]],\n",
       "       \n",
       "               [[-0.7809,  0.5063,  0.5516],\n",
       "                [-0.3210, -0.8318, -0.4972]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "              \n",
       "                      [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "              \n",
       "                      [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "              \n",
       "                      [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "              \n",
       "                      [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "              \n",
       "                      [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "              \n",
       "                      [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]],\n",
       "              \n",
       "                      [[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                       [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                       [-0.4602,  0.8365, -1.7004, -0.1574]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:26.065117Z",
     "iopub.status.busy": "2023-02-24T08:06:26.064731Z",
     "iopub.status.idle": "2023-02-24T08:06:34.301907Z",
     "shell.execute_reply": "2023-02-24T08:06:34.300888Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "101 µs ± 2.09 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:34.305567Z",
     "iopub.status.busy": "2023-02-24T08:06:34.305218Z",
     "iopub.status.idle": "2023-02-24T08:06:34.316375Z",
     "shell.execute_reply": "2023-02-24T08:06:34.315250Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972],\n",
       "               [-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972],\n",
       "               [-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972],\n",
       "               [-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972],\n",
       "               [-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972],\n",
       "               [-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972],\n",
       "               [-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972],\n",
       "               [-0.7809,  0.5063,  0.5516],\n",
       "               [-0.3210, -0.8318, -0.4972]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                      [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                      [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                      [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                      [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                      [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                      [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574],\n",
       "                      [ 0.1581, -0.6751,  0.1647,  1.9021],\n",
       "                      [ 0.2731, -0.8836, -0.5057,  0.5117],\n",
       "                      [-0.4602,  0.8365, -1.7004, -0.1574]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:34.319899Z",
     "iopub.status.busy": "2023-02-24T08:06:34.319602Z",
     "iopub.status.idle": "2023-02-24T08:06:48.971827Z",
     "shell.execute_reply": "2023-02-24T08:06:48.969973Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "181 µs ± 2.39 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:06:48.975768Z",
     "iopub.status.busy": "2023-02-24T08:06:48.975162Z",
     "iopub.status.idle": "2023-02-24T08:06:53.627642Z",
     "shell.execute_reply": "2023-02-24T08:06:53.626414Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "573 µs ± 11.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
