{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:42.276920Z",
     "iopub.status.busy": "2023-02-24T10:51:42.276248Z",
     "iopub.status.idle": "2023-02-24T10:51:43.247152Z",
     "shell.execute_reply": "2023-02-24T10:51:43.246378Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:43.251156Z",
     "iopub.status.busy": "2023-02-24T10:51:43.250417Z",
     "iopub.status.idle": "2023-02-24T10:51:43.284206Z",
     "shell.execute_reply": "2023-02-24T10:51:43.283531Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:43.288065Z",
     "iopub.status.busy": "2023-02-24T10:51:43.287276Z",
     "iopub.status.idle": "2023-02-24T10:51:43.296384Z",
     "shell.execute_reply": "2023-02-24T10:51:43.295681Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6500fcd910>\n",
       "├── 'a' --> tensor([[ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6500fcd8b0>\n",
       "    └── 'c' --> tensor([[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:43.299428Z",
     "iopub.status.busy": "2023-02-24T10:51:43.299056Z",
     "iopub.status.idle": "2023-02-24T10:51:43.304081Z",
     "shell.execute_reply": "2023-02-24T10:51:43.303410Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5628,  0.8414, -0.3126],\n",
       "        [-0.6510, -0.9665, -1.1743]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:43.306956Z",
     "iopub.status.busy": "2023-02-24T10:51:43.306515Z",
     "iopub.status.idle": "2023-02-24T10:51:48.642708Z",
     "shell.execute_reply": "2023-02-24T10:51:48.641813Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.7 ns ± 0.0848 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:48.646387Z",
     "iopub.status.busy": "2023-02-24T10:51:48.645724Z",
     "iopub.status.idle": "2023-02-24T10:51:48.652170Z",
     "shell.execute_reply": "2023-02-24T10:51:48.651461Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6500fcd910>\n",
       "├── 'a' --> tensor([[-1.0950,  0.1192, -2.2323],\n",
       "│                   [ 1.2115, -1.3446, -0.2169]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6500fcd8b0>\n",
       "    └── 'c' --> tensor([[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:48.655179Z",
     "iopub.status.busy": "2023-02-24T10:51:48.654604Z",
     "iopub.status.idle": "2023-02-24T10:51:54.112740Z",
     "shell.execute_reply": "2023-02-24T10:51:54.111915Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.2 ns ± 0.0869 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:54.116392Z",
     "iopub.status.busy": "2023-02-24T10:51:54.115905Z",
     "iopub.status.idle": "2023-02-24T10:51:54.488238Z",
     "shell.execute_reply": "2023-02-24T10:51:54.487443Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:54.493126Z",
     "iopub.status.busy": "2023-02-24T10:51:54.491649Z",
     "iopub.status.idle": "2023-02-24T10:51:54.498457Z",
     "shell.execute_reply": "2023-02-24T10:51:54.497747Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:54.501486Z",
     "iopub.status.busy": "2023-02-24T10:51:54.501242Z",
     "iopub.status.idle": "2023-02-24T10:51:54.506174Z",
     "shell.execute_reply": "2023-02-24T10:51:54.505469Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5628,  0.8414, -0.3126],\n",
       "        [-0.6510, -0.9665, -1.1743]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:54.509172Z",
     "iopub.status.busy": "2023-02-24T10:51:54.508502Z",
     "iopub.status.idle": "2023-02-24T10:51:59.219491Z",
     "shell.execute_reply": "2023-02-24T10:51:59.218613Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 ns ± 0.145 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:59.222758Z",
     "iopub.status.busy": "2023-02-24T10:51:59.222333Z",
     "iopub.status.idle": "2023-02-24T10:51:59.228919Z",
     "shell.execute_reply": "2023-02-24T10:51:59.228215Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6816,  1.7625,  0.8519],\n",
       "               [ 1.9525, -0.4499, -0.9968]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:51:59.231626Z",
     "iopub.status.busy": "2023-02-24T10:51:59.231252Z",
     "iopub.status.idle": "2023-02-24T10:52:03.280901Z",
     "shell.execute_reply": "2023-02-24T10:52:03.279999Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "495 ns ± 0.164 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:03.284463Z",
     "iopub.status.busy": "2023-02-24T10:52:03.283866Z",
     "iopub.status.idle": "2023-02-24T10:52:10.101397Z",
     "shell.execute_reply": "2023-02-24T10:52:10.100493Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "840 ns ± 0.24 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:10.104969Z",
     "iopub.status.busy": "2023-02-24T10:52:10.104304Z",
     "iopub.status.idle": "2023-02-24T10:52:18.805638Z",
     "shell.execute_reply": "2023-02-24T10:52:18.804740Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 15 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:18.809205Z",
     "iopub.status.busy": "2023-02-24T10:52:18.808596Z",
     "iopub.status.idle": "2023-02-24T10:52:18.812932Z",
     "shell.execute_reply": "2023-02-24T10:52:18.812265Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:18.816087Z",
     "iopub.status.busy": "2023-02-24T10:52:18.815630Z",
     "iopub.status.idle": "2023-02-24T10:52:30.458661Z",
     "shell.execute_reply": "2023-02-24T10:52:30.458029Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 450 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:30.461960Z",
     "iopub.status.busy": "2023-02-24T10:52:30.461264Z",
     "iopub.status.idle": "2023-02-24T10:52:42.123257Z",
     "shell.execute_reply": "2023-02-24T10:52:42.122609Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 311 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:42.126487Z",
     "iopub.status.busy": "2023-02-24T10:52:42.125974Z",
     "iopub.status.idle": "2023-02-24T10:52:42.129503Z",
     "shell.execute_reply": "2023-02-24T10:52:42.128940Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:42.132247Z",
     "iopub.status.busy": "2023-02-24T10:52:42.131626Z",
     "iopub.status.idle": "2023-02-24T10:52:42.138840Z",
     "shell.execute_reply": "2023-02-24T10:52:42.138275Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f645acb7fa0>\n",
       "├── 'a' --> tensor([[[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]],\n",
       "│           \n",
       "│                   [[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]],\n",
       "│           \n",
       "│                   [[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]],\n",
       "│           \n",
       "│                   [[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]],\n",
       "│           \n",
       "│                   [[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]],\n",
       "│           \n",
       "│                   [[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]],\n",
       "│           \n",
       "│                   [[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]],\n",
       "│           \n",
       "│                   [[ 0.5628,  0.8414, -0.3126],\n",
       "│                    [-0.6510, -0.9665, -1.1743]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f645acb7a90>\n",
       "    └── 'c' --> tensor([[[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "                \n",
       "                        [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "                \n",
       "                        [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "                \n",
       "                        [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "                \n",
       "                        [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "                \n",
       "                        [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "                \n",
       "                        [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "                \n",
       "                        [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                         [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                         [-0.4329,  0.2975, -1.2439, -1.1262]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:42.141609Z",
     "iopub.status.busy": "2023-02-24T10:52:42.140982Z",
     "iopub.status.idle": "2023-02-24T10:52:44.733385Z",
     "shell.execute_reply": "2023-02-24T10:52:44.732470Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.9 µs ± 62.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:44.738096Z",
     "iopub.status.busy": "2023-02-24T10:52:44.736718Z",
     "iopub.status.idle": "2023-02-24T10:52:44.746755Z",
     "shell.execute_reply": "2023-02-24T10:52:44.746104Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f645acb7370>\n",
       "├── 'a' --> tensor([[ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743],\n",
       "│                   [ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743],\n",
       "│                   [ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743],\n",
       "│                   [ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743],\n",
       "│                   [ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743],\n",
       "│                   [ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743],\n",
       "│                   [ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743],\n",
       "│                   [ 0.5628,  0.8414, -0.3126],\n",
       "│                   [-0.6510, -0.9665, -1.1743]])\n",
       "└── 'x' --> <FastTreeValue 0x7f645acd1f10>\n",
       "    └── 'c' --> tensor([[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                        [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                        [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                        [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                        [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                        [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                        [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                        [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                        [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                        [-0.4329,  0.2975, -1.2439, -1.1262]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:44.749783Z",
     "iopub.status.busy": "2023-02-24T10:52:44.749193Z",
     "iopub.status.idle": "2023-02-24T10:52:47.192657Z",
     "shell.execute_reply": "2023-02-24T10:52:47.191779Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.1 µs ± 73.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:47.196436Z",
     "iopub.status.busy": "2023-02-24T10:52:47.195999Z",
     "iopub.status.idle": "2023-02-24T10:52:51.679608Z",
     "shell.execute_reply": "2023-02-24T10:52:51.678724Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.1 µs ± 120 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:51.683232Z",
     "iopub.status.busy": "2023-02-24T10:52:51.682489Z",
     "iopub.status.idle": "2023-02-24T10:52:51.690483Z",
     "shell.execute_reply": "2023-02-24T10:52:51.689784Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]],\n",
       "       \n",
       "               [[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]],\n",
       "       \n",
       "               [[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]],\n",
       "       \n",
       "               [[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]],\n",
       "       \n",
       "               [[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]],\n",
       "       \n",
       "               [[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]],\n",
       "       \n",
       "               [[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]],\n",
       "       \n",
       "               [[ 0.5628,  0.8414, -0.3126],\n",
       "                [-0.6510, -0.9665, -1.1743]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "              \n",
       "                      [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "              \n",
       "                      [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "              \n",
       "                      [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "              \n",
       "                      [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "              \n",
       "                      [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "              \n",
       "                      [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]],\n",
       "              \n",
       "                      [[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                       [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                       [-0.4329,  0.2975, -1.2439, -1.1262]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:51.693635Z",
     "iopub.status.busy": "2023-02-24T10:52:51.693179Z",
     "iopub.status.idle": "2023-02-24T10:52:58.033832Z",
     "shell.execute_reply": "2023-02-24T10:52:58.032954Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78 µs ± 179 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:58.037018Z",
     "iopub.status.busy": "2023-02-24T10:52:58.036620Z",
     "iopub.status.idle": "2023-02-24T10:52:58.044594Z",
     "shell.execute_reply": "2023-02-24T10:52:58.043978Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743],\n",
       "               [ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743],\n",
       "               [ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743],\n",
       "               [ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743],\n",
       "               [ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743],\n",
       "               [ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743],\n",
       "               [ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743],\n",
       "               [ 0.5628,  0.8414, -0.3126],\n",
       "               [-0.6510, -0.9665, -1.1743]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                      [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                      [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                      [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                      [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                      [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                      [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262],\n",
       "                      [ 0.6279, -1.7303,  1.3165,  0.7596],\n",
       "                      [-0.3084,  1.5033,  1.0054, -1.1923],\n",
       "                      [-0.4329,  0.2975, -1.2439, -1.1262]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:52:58.047565Z",
     "iopub.status.busy": "2023-02-24T10:52:58.047202Z",
     "iopub.status.idle": "2023-02-24T10:53:09.719794Z",
     "shell.execute_reply": "2023-02-24T10:53:09.718917Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 313 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T10:53:09.723271Z",
     "iopub.status.busy": "2023-02-24T10:53:09.722643Z",
     "iopub.status.idle": "2023-02-24T10:53:12.360544Z",
     "shell.execute_reply": "2023-02-24T10:53:12.359667Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "324 µs ± 1.64 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
