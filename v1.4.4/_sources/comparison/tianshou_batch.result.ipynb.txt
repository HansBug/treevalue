{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:03:48.628117Z",
     "iopub.status.busy": "2023-03-06T19:03:48.627797Z",
     "iopub.status.idle": "2023-03-06T19:03:49.880798Z",
     "shell.execute_reply": "2023-03-06T19:03:49.879680Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:03:49.885883Z",
     "iopub.status.busy": "2023-03-06T19:03:49.885137Z",
     "iopub.status.idle": "2023-03-06T19:03:49.928695Z",
     "shell.execute_reply": "2023-03-06T19:03:49.927656Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:03:49.932177Z",
     "iopub.status.busy": "2023-03-06T19:03:49.931910Z",
     "iopub.status.idle": "2023-03-06T19:03:49.943154Z",
     "shell.execute_reply": "2023-03-06T19:03:49.942052Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7eff5a1b7880>\n",
       "├── 'a' --> tensor([[ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080]])\n",
       "└── 'x' --> <FastTreeValue 0x7eff5a1b7100>\n",
       "    └── 'c' --> tensor([[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:03:49.946672Z",
     "iopub.status.busy": "2023-03-06T19:03:49.946319Z",
     "iopub.status.idle": "2023-03-06T19:03:49.953447Z",
     "shell.execute_reply": "2023-03-06T19:03:49.952416Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 2.3854,  1.4583, -0.2013],\n",
       "        [ 1.4440,  0.0894, -0.3080]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:03:49.956630Z",
     "iopub.status.busy": "2023-03-06T19:03:49.956237Z",
     "iopub.status.idle": "2023-03-06T19:03:56.045959Z",
     "shell.execute_reply": "2023-03-06T19:03:56.045077Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.7 ns ± 1.05 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:03:56.049723Z",
     "iopub.status.busy": "2023-03-06T19:03:56.049052Z",
     "iopub.status.idle": "2023-03-06T19:03:56.060356Z",
     "shell.execute_reply": "2023-03-06T19:03:56.059235Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7eff5a1b7880>\n",
       "├── 'a' --> tensor([[-0.1303, -0.9527,  2.2010],\n",
       "│                   [-1.1109,  0.3419, -0.4788]])\n",
       "└── 'x' --> <FastTreeValue 0x7eff5a1b7100>\n",
       "    └── 'c' --> tensor([[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:03:56.064473Z",
     "iopub.status.busy": "2023-03-06T19:03:56.064166Z",
     "iopub.status.idle": "2023-03-06T19:04:02.543982Z",
     "shell.execute_reply": "2023-03-06T19:04:02.542382Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80 ns ± 0.807 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:02.548357Z",
     "iopub.status.busy": "2023-03-06T19:04:02.547670Z",
     "iopub.status.idle": "2023-03-06T19:04:03.020494Z",
     "shell.execute_reply": "2023-03-06T19:04:03.019476Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:03.025229Z",
     "iopub.status.busy": "2023-03-06T19:04:03.024246Z",
     "iopub.status.idle": "2023-03-06T19:04:03.031893Z",
     "shell.execute_reply": "2023-03-06T19:04:03.030984Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:03.035362Z",
     "iopub.status.busy": "2023-03-06T19:04:03.035044Z",
     "iopub.status.idle": "2023-03-06T19:04:03.041571Z",
     "shell.execute_reply": "2023-03-06T19:04:03.040682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 2.3854,  1.4583, -0.2013],\n",
       "        [ 1.4440,  0.0894, -0.3080]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:03.045039Z",
     "iopub.status.busy": "2023-03-06T19:04:03.044751Z",
     "iopub.status.idle": "2023-03-06T19:04:08.838546Z",
     "shell.execute_reply": "2023-03-06T19:04:08.837250Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.2 ns ± 2.03 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:08.841748Z",
     "iopub.status.busy": "2023-03-06T19:04:08.841481Z",
     "iopub.status.idle": "2023-03-06T19:04:08.850474Z",
     "shell.execute_reply": "2023-03-06T19:04:08.849591Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5875,  0.5253, -0.0880],\n",
       "               [ 0.4805, -0.6859,  0.0631]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:08.853679Z",
     "iopub.status.busy": "2023-03-06T19:04:08.853425Z",
     "iopub.status.idle": "2023-03-06T19:04:13.819521Z",
     "shell.execute_reply": "2023-03-06T19:04:13.817942Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "610 ns ± 7.71 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:13.823998Z",
     "iopub.status.busy": "2023-03-06T19:04:13.823650Z",
     "iopub.status.idle": "2023-03-06T19:04:22.174919Z",
     "shell.execute_reply": "2023-03-06T19:04:22.173694Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.03 µs ± 16.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:22.180057Z",
     "iopub.status.busy": "2023-03-06T19:04:22.179283Z",
     "iopub.status.idle": "2023-03-06T19:04:32.815381Z",
     "shell.execute_reply": "2023-03-06T19:04:32.814291Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.1 µs ± 69.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:32.819758Z",
     "iopub.status.busy": "2023-03-06T19:04:32.819212Z",
     "iopub.status.idle": "2023-03-06T19:04:32.823864Z",
     "shell.execute_reply": "2023-03-06T19:04:32.822731Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:32.827628Z",
     "iopub.status.busy": "2023-03-06T19:04:32.827109Z",
     "iopub.status.idle": "2023-03-06T19:04:35.094572Z",
     "shell.execute_reply": "2023-03-06T19:04:35.093604Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "275 µs ± 16.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:35.098515Z",
     "iopub.status.busy": "2023-03-06T19:04:35.097770Z",
     "iopub.status.idle": "2023-03-06T19:04:37.153049Z",
     "shell.execute_reply": "2023-03-06T19:04:37.152224Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "250 µs ± 6.72 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:37.157585Z",
     "iopub.status.busy": "2023-03-06T19:04:37.156691Z",
     "iopub.status.idle": "2023-03-06T19:04:37.162121Z",
     "shell.execute_reply": "2023-03-06T19:04:37.160840Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:37.165474Z",
     "iopub.status.busy": "2023-03-06T19:04:37.165190Z",
     "iopub.status.idle": "2023-03-06T19:04:37.174371Z",
     "shell.execute_reply": "2023-03-06T19:04:37.173434Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7eff2c603430>\n",
       "├── 'a' --> tensor([[[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]],\n",
       "│           \n",
       "│                   [[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]],\n",
       "│           \n",
       "│                   [[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]],\n",
       "│           \n",
       "│                   [[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]],\n",
       "│           \n",
       "│                   [[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]],\n",
       "│           \n",
       "│                   [[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]],\n",
       "│           \n",
       "│                   [[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]],\n",
       "│           \n",
       "│                   [[ 2.3854,  1.4583, -0.2013],\n",
       "│                    [ 1.4440,  0.0894, -0.3080]]])\n",
       "└── 'x' --> <FastTreeValue 0x7eff2c603370>\n",
       "    └── 'c' --> tensor([[[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "                \n",
       "                        [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "                \n",
       "                        [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "                \n",
       "                        [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "                \n",
       "                        [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "                \n",
       "                        [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "                \n",
       "                        [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "                \n",
       "                        [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                         [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                         [-0.9591, -1.2287,  0.3666,  0.7477]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:37.178006Z",
     "iopub.status.busy": "2023-03-06T19:04:37.177689Z",
     "iopub.status.idle": "2023-03-06T19:04:40.880016Z",
     "shell.execute_reply": "2023-03-06T19:04:40.878766Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.7 µs ± 1.38 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:40.883766Z",
     "iopub.status.busy": "2023-03-06T19:04:40.883250Z",
     "iopub.status.idle": "2023-03-06T19:04:40.894496Z",
     "shell.execute_reply": "2023-03-06T19:04:40.893554Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7eff2c5e9e80>\n",
       "├── 'a' --> tensor([[ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080],\n",
       "│                   [ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080],\n",
       "│                   [ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080],\n",
       "│                   [ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080],\n",
       "│                   [ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080],\n",
       "│                   [ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080],\n",
       "│                   [ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080],\n",
       "│                   [ 2.3854,  1.4583, -0.2013],\n",
       "│                   [ 1.4440,  0.0894, -0.3080]])\n",
       "└── 'x' --> <FastTreeValue 0x7eff2c8aba00>\n",
       "    └── 'c' --> tensor([[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                        [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                        [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                        [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                        [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                        [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                        [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                        [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                        [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                        [-0.9591, -1.2287,  0.3666,  0.7477]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:40.898192Z",
     "iopub.status.busy": "2023-03-06T19:04:40.897870Z",
     "iopub.status.idle": "2023-03-06T19:04:44.151468Z",
     "shell.execute_reply": "2023-03-06T19:04:44.150042Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40 µs ± 322 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:44.155632Z",
     "iopub.status.busy": "2023-03-06T19:04:44.155115Z",
     "iopub.status.idle": "2023-03-06T19:04:50.870432Z",
     "shell.execute_reply": "2023-03-06T19:04:50.869340Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.1 µs ± 1.89 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:50.874264Z",
     "iopub.status.busy": "2023-03-06T19:04:50.873920Z",
     "iopub.status.idle": "2023-03-06T19:04:50.884551Z",
     "shell.execute_reply": "2023-03-06T19:04:50.883358Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]],\n",
       "       \n",
       "               [[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]],\n",
       "       \n",
       "               [[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]],\n",
       "       \n",
       "               [[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]],\n",
       "       \n",
       "               [[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]],\n",
       "       \n",
       "               [[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]],\n",
       "       \n",
       "               [[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]],\n",
       "       \n",
       "               [[ 2.3854,  1.4583, -0.2013],\n",
       "                [ 1.4440,  0.0894, -0.3080]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "              \n",
       "                      [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "              \n",
       "                      [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "              \n",
       "                      [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "              \n",
       "                      [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "              \n",
       "                      [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "              \n",
       "                      [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]],\n",
       "              \n",
       "                      [[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                       [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                       [-0.9591, -1.2287,  0.3666,  0.7477]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:50.888714Z",
     "iopub.status.busy": "2023-03-06T19:04:50.887904Z",
     "iopub.status.idle": "2023-03-06T19:04:59.741442Z",
     "shell.execute_reply": "2023-03-06T19:04:59.740444Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "109 µs ± 2.37 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:59.745320Z",
     "iopub.status.busy": "2023-03-06T19:04:59.744745Z",
     "iopub.status.idle": "2023-03-06T19:04:59.755283Z",
     "shell.execute_reply": "2023-03-06T19:04:59.754323Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080],\n",
       "               [ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080],\n",
       "               [ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080],\n",
       "               [ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080],\n",
       "               [ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080],\n",
       "               [ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080],\n",
       "               [ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080],\n",
       "               [ 2.3854,  1.4583, -0.2013],\n",
       "               [ 1.4440,  0.0894, -0.3080]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                      [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                      [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                      [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                      [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                      [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                      [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477],\n",
       "                      [-0.8316, -0.3256,  1.8931, -1.2142],\n",
       "                      [-1.6540, -0.8811, -0.3297,  0.1408],\n",
       "                      [-0.9591, -1.2287,  0.3666,  0.7477]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:04:59.758650Z",
     "iopub.status.busy": "2023-03-06T19:04:59.758224Z",
     "iopub.status.idle": "2023-03-06T19:05:15.009830Z",
     "shell.execute_reply": "2023-03-06T19:05:15.008790Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "187 µs ± 2.12 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:05:15.013956Z",
     "iopub.status.busy": "2023-03-06T19:05:15.013288Z",
     "iopub.status.idle": "2023-03-06T19:05:19.530690Z",
     "shell.execute_reply": "2023-03-06T19:05:19.529297Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "556 µs ± 9.82 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
