{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:53:48.629635Z",
     "iopub.status.busy": "2023-03-06T16:53:48.629218Z",
     "iopub.status.idle": "2023-03-06T16:53:49.571048Z",
     "shell.execute_reply": "2023-03-06T16:53:49.570330Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:53:49.574814Z",
     "iopub.status.busy": "2023-03-06T16:53:49.574193Z",
     "iopub.status.idle": "2023-03-06T16:53:49.607960Z",
     "shell.execute_reply": "2023-03-06T16:53:49.607323Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:53:49.611099Z",
     "iopub.status.busy": "2023-03-06T16:53:49.610565Z",
     "iopub.status.idle": "2023-03-06T16:53:49.619940Z",
     "shell.execute_reply": "2023-03-06T16:53:49.619348Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f74f0c70bb0>\n",
       "├── 'a' --> tensor([[-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591]])\n",
       "└── 'x' --> <FastTreeValue 0x7f74f0c70e80>\n",
       "    └── 'c' --> tensor([[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:53:49.622847Z",
     "iopub.status.busy": "2023-03-06T16:53:49.622364Z",
     "iopub.status.idle": "2023-03-06T16:53:49.628436Z",
     "shell.execute_reply": "2023-03-06T16:53:49.627846Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0002,  1.2646,  0.8105],\n",
       "        [ 1.3165,  0.9971,  0.7591]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:53:49.631072Z",
     "iopub.status.busy": "2023-03-06T16:53:49.630748Z",
     "iopub.status.idle": "2023-03-06T16:53:55.038222Z",
     "shell.execute_reply": "2023-03-06T16:53:55.037512Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.3 ns ± 0.0492 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:53:55.041230Z",
     "iopub.status.busy": "2023-03-06T16:53:55.040678Z",
     "iopub.status.idle": "2023-03-06T16:53:55.047352Z",
     "shell.execute_reply": "2023-03-06T16:53:55.046759Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f74f0c70bb0>\n",
       "├── 'a' --> tensor([[-1.1280,  1.2307,  1.7940],\n",
       "│                   [-0.0184,  0.3856,  0.4623]])\n",
       "└── 'x' --> <FastTreeValue 0x7f74f0c70e80>\n",
       "    └── 'c' --> tensor([[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:53:55.049995Z",
     "iopub.status.busy": "2023-03-06T16:53:55.049631Z",
     "iopub.status.idle": "2023-03-06T16:54:01.201317Z",
     "shell.execute_reply": "2023-03-06T16:54:01.200569Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.2 ns ± 0.0882 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:01.204615Z",
     "iopub.status.busy": "2023-03-06T16:54:01.204031Z",
     "iopub.status.idle": "2023-03-06T16:54:01.541020Z",
     "shell.execute_reply": "2023-03-06T16:54:01.540334Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:01.544110Z",
     "iopub.status.busy": "2023-03-06T16:54:01.543558Z",
     "iopub.status.idle": "2023-03-06T16:54:01.548886Z",
     "shell.execute_reply": "2023-03-06T16:54:01.548272Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:01.551521Z",
     "iopub.status.busy": "2023-03-06T16:54:01.551181Z",
     "iopub.status.idle": "2023-03-06T16:54:01.555835Z",
     "shell.execute_reply": "2023-03-06T16:54:01.555244Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0002,  1.2646,  0.8105],\n",
       "        [ 1.3165,  0.9971,  0.7591]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:01.558262Z",
     "iopub.status.busy": "2023-03-06T16:54:01.557915Z",
     "iopub.status.idle": "2023-03-06T16:54:05.752279Z",
     "shell.execute_reply": "2023-03-06T16:54:05.751661Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.7 ns ± 0.0492 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:05.755414Z",
     "iopub.status.busy": "2023-03-06T16:54:05.755043Z",
     "iopub.status.idle": "2023-03-06T16:54:05.761471Z",
     "shell.execute_reply": "2023-03-06T16:54:05.760839Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0502,  0.5952,  0.0805],\n",
       "               [ 1.2408, -0.4801,  1.7468]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:05.764119Z",
     "iopub.status.busy": "2023-03-06T16:54:05.763875Z",
     "iopub.status.idle": "2023-03-06T16:54:09.684281Z",
     "shell.execute_reply": "2023-03-06T16:54:09.683511Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "483 ns ± 0.136 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:09.687685Z",
     "iopub.status.busy": "2023-03-06T16:54:09.687109Z",
     "iopub.status.idle": "2023-03-06T16:54:16.520996Z",
     "shell.execute_reply": "2023-03-06T16:54:16.520284Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "841 ns ± 1.45 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:16.524291Z",
     "iopub.status.busy": "2023-03-06T16:54:16.523737Z",
     "iopub.status.idle": "2023-03-06T16:54:25.899926Z",
     "shell.execute_reply": "2023-03-06T16:54:25.899184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 23.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:25.903122Z",
     "iopub.status.busy": "2023-03-06T16:54:25.902748Z",
     "iopub.status.idle": "2023-03-06T16:54:25.906762Z",
     "shell.execute_reply": "2023-03-06T16:54:25.906158Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:25.909552Z",
     "iopub.status.busy": "2023-03-06T16:54:25.909211Z",
     "iopub.status.idle": "2023-03-06T16:54:37.057479Z",
     "shell.execute_reply": "2023-03-06T16:54:37.056867Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 287 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:37.060334Z",
     "iopub.status.busy": "2023-03-06T16:54:37.059958Z",
     "iopub.status.idle": "2023-03-06T16:54:48.445554Z",
     "shell.execute_reply": "2023-03-06T16:54:48.444957Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 330 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:48.448737Z",
     "iopub.status.busy": "2023-03-06T16:54:48.448272Z",
     "iopub.status.idle": "2023-03-06T16:54:48.452462Z",
     "shell.execute_reply": "2023-03-06T16:54:48.451833Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:48.455172Z",
     "iopub.status.busy": "2023-03-06T16:54:48.454847Z",
     "iopub.status.idle": "2023-03-06T16:54:48.462159Z",
     "shell.execute_reply": "2023-03-06T16:54:48.461543Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7445931e80>\n",
       "├── 'a' --> tensor([[[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]],\n",
       "│           \n",
       "│                   [[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]],\n",
       "│           \n",
       "│                   [[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]],\n",
       "│           \n",
       "│                   [[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]],\n",
       "│           \n",
       "│                   [[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]],\n",
       "│           \n",
       "│                   [[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]],\n",
       "│           \n",
       "│                   [[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]],\n",
       "│           \n",
       "│                   [[-2.0002,  1.2646,  0.8105],\n",
       "│                    [ 1.3165,  0.9971,  0.7591]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7445931a30>\n",
       "    └── 'c' --> tensor([[[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "                \n",
       "                        [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "                \n",
       "                        [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "                \n",
       "                        [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "                \n",
       "                        [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "                \n",
       "                        [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "                \n",
       "                        [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "                \n",
       "                        [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                         [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                         [ 0.5784, -0.0384,  1.9853, -2.2350]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:48.464687Z",
     "iopub.status.busy": "2023-03-06T16:54:48.464353Z",
     "iopub.status.idle": "2023-03-06T16:54:51.014831Z",
     "shell.execute_reply": "2023-03-06T16:54:51.014100Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 51.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:51.018233Z",
     "iopub.status.busy": "2023-03-06T16:54:51.017684Z",
     "iopub.status.idle": "2023-03-06T16:54:51.024868Z",
     "shell.execute_reply": "2023-03-06T16:54:51.024218Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f74f0c701f0>\n",
       "├── 'a' --> tensor([[-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591],\n",
       "│                   [-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591],\n",
       "│                   [-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591],\n",
       "│                   [-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591],\n",
       "│                   [-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591],\n",
       "│                   [-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591],\n",
       "│                   [-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591],\n",
       "│                   [-2.0002,  1.2646,  0.8105],\n",
       "│                   [ 1.3165,  0.9971,  0.7591]])\n",
       "└── 'x' --> <FastTreeValue 0x7f744c5d5670>\n",
       "    └── 'c' --> tensor([[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                        [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                        [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                        [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                        [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                        [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                        [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                        [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                        [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                        [ 0.5784, -0.0384,  1.9853, -2.2350]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:51.027377Z",
     "iopub.status.busy": "2023-03-06T16:54:51.027029Z",
     "iopub.status.idle": "2023-03-06T16:54:53.450271Z",
     "shell.execute_reply": "2023-03-06T16:54:53.449532Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.9 µs ± 68.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:53.453285Z",
     "iopub.status.busy": "2023-03-06T16:54:53.452721Z",
     "iopub.status.idle": "2023-03-06T16:54:58.211550Z",
     "shell.execute_reply": "2023-03-06T16:54:58.210901Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.5 µs ± 129 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:58.214516Z",
     "iopub.status.busy": "2023-03-06T16:54:58.213975Z",
     "iopub.status.idle": "2023-03-06T16:54:58.221863Z",
     "shell.execute_reply": "2023-03-06T16:54:58.221283Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]],\n",
       "       \n",
       "               [[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]],\n",
       "       \n",
       "               [[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]],\n",
       "       \n",
       "               [[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]],\n",
       "       \n",
       "               [[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]],\n",
       "       \n",
       "               [[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]],\n",
       "       \n",
       "               [[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]],\n",
       "       \n",
       "               [[-2.0002,  1.2646,  0.8105],\n",
       "                [ 1.3165,  0.9971,  0.7591]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "              \n",
       "                      [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "              \n",
       "                      [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "              \n",
       "                      [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "              \n",
       "                      [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "              \n",
       "                      [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "              \n",
       "                      [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]],\n",
       "              \n",
       "                      [[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                       [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                       [ 0.5784, -0.0384,  1.9853, -2.2350]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:54:58.224369Z",
     "iopub.status.busy": "2023-03-06T16:54:58.224015Z",
     "iopub.status.idle": "2023-03-06T16:55:04.597390Z",
     "shell.execute_reply": "2023-03-06T16:55:04.596665Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.4 µs ± 150 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:55:04.600321Z",
     "iopub.status.busy": "2023-03-06T16:55:04.599864Z",
     "iopub.status.idle": "2023-03-06T16:55:04.607505Z",
     "shell.execute_reply": "2023-03-06T16:55:04.606912Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591],\n",
       "               [-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591],\n",
       "               [-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591],\n",
       "               [-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591],\n",
       "               [-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591],\n",
       "               [-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591],\n",
       "               [-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591],\n",
       "               [-2.0002,  1.2646,  0.8105],\n",
       "               [ 1.3165,  0.9971,  0.7591]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                      [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                      [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                      [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                      [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                      [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                      [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350],\n",
       "                      [-1.3390, -1.0476,  0.2241, -0.8280],\n",
       "                      [-0.5244, -0.1751, -0.7174,  2.0278],\n",
       "                      [ 0.5784, -0.0384,  1.9853, -2.2350]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:55:04.610092Z",
     "iopub.status.busy": "2023-03-06T16:55:04.609721Z",
     "iopub.status.idle": "2023-03-06T16:55:16.321350Z",
     "shell.execute_reply": "2023-03-06T16:55:16.320629Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 508 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T16:55:16.324456Z",
     "iopub.status.busy": "2023-03-06T16:55:16.324094Z",
     "iopub.status.idle": "2023-03-06T16:55:18.830367Z",
     "shell.execute_reply": "2023-03-06T16:55:18.829817Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "308 µs ± 3.34 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
