{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:32.362951Z",
     "iopub.status.busy": "2023-03-06T17:37:32.362345Z",
     "iopub.status.idle": "2023-03-06T17:37:33.317599Z",
     "shell.execute_reply": "2023-03-06T17:37:33.316876Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:33.321549Z",
     "iopub.status.busy": "2023-03-06T17:37:33.320909Z",
     "iopub.status.idle": "2023-03-06T17:37:33.354700Z",
     "shell.execute_reply": "2023-03-06T17:37:33.354025Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:33.357863Z",
     "iopub.status.busy": "2023-03-06T17:37:33.357303Z",
     "iopub.status.idle": "2023-03-06T17:37:33.366725Z",
     "shell.execute_reply": "2023-03-06T17:37:33.366024Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f890fbf6490>\n",
       "├── 'a' --> tensor([[ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506]])\n",
       "└── 'x' --> <FastTreeValue 0x7f890fbf6130>\n",
       "    └── 'c' --> tensor([[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:33.369909Z",
     "iopub.status.busy": "2023-03-06T17:37:33.369403Z",
     "iopub.status.idle": "2023-03-06T17:37:33.375430Z",
     "shell.execute_reply": "2023-03-06T17:37:33.374834Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6298, -0.1541,  0.8906],\n",
       "        [-0.9172, -1.5432, -1.3506]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:33.378377Z",
     "iopub.status.busy": "2023-03-06T17:37:33.377887Z",
     "iopub.status.idle": "2023-03-06T17:37:38.392177Z",
     "shell.execute_reply": "2023-03-06T17:37:38.391454Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.6 ns ± 0.0643 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:38.395621Z",
     "iopub.status.busy": "2023-03-06T17:37:38.394986Z",
     "iopub.status.idle": "2023-03-06T17:37:38.401151Z",
     "shell.execute_reply": "2023-03-06T17:37:38.400493Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f890fbf6490>\n",
       "├── 'a' --> tensor([[-0.9546, -0.8433,  0.6158],\n",
       "│                   [ 0.1036,  0.9166,  0.6188]])\n",
       "└── 'x' --> <FastTreeValue 0x7f890fbf6130>\n",
       "    └── 'c' --> tensor([[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:38.403707Z",
     "iopub.status.busy": "2023-03-06T17:37:38.403336Z",
     "iopub.status.idle": "2023-03-06T17:37:43.809873Z",
     "shell.execute_reply": "2023-03-06T17:37:43.809053Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.9 ns ± 0.0529 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:43.813007Z",
     "iopub.status.busy": "2023-03-06T17:37:43.812451Z",
     "iopub.status.idle": "2023-03-06T17:37:44.158025Z",
     "shell.execute_reply": "2023-03-06T17:37:44.157308Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:44.161653Z",
     "iopub.status.busy": "2023-03-06T17:37:44.160896Z",
     "iopub.status.idle": "2023-03-06T17:37:44.166573Z",
     "shell.execute_reply": "2023-03-06T17:37:44.165936Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:44.169364Z",
     "iopub.status.busy": "2023-03-06T17:37:44.168816Z",
     "iopub.status.idle": "2023-03-06T17:37:44.173653Z",
     "shell.execute_reply": "2023-03-06T17:37:44.173027Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6298, -0.1541,  0.8906],\n",
       "        [-0.9172, -1.5432, -1.3506]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:44.176175Z",
     "iopub.status.busy": "2023-03-06T17:37:44.175965Z",
     "iopub.status.idle": "2023-03-06T17:37:48.798830Z",
     "shell.execute_reply": "2023-03-06T17:37:48.798091Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.4 ns ± 0.0557 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:48.801888Z",
     "iopub.status.busy": "2023-03-06T17:37:48.801320Z",
     "iopub.status.idle": "2023-03-06T17:37:48.807230Z",
     "shell.execute_reply": "2023-03-06T17:37:48.806589Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.5669, -0.0292, -0.3897],\n",
       "               [-2.6579,  0.0777, -1.0719]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:48.809911Z",
     "iopub.status.busy": "2023-03-06T17:37:48.809403Z",
     "iopub.status.idle": "2023-03-06T17:37:52.786764Z",
     "shell.execute_reply": "2023-03-06T17:37:52.785982Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "489 ns ± 0.241 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:52.790286Z",
     "iopub.status.busy": "2023-03-06T17:37:52.789596Z",
     "iopub.status.idle": "2023-03-06T17:37:59.697261Z",
     "shell.execute_reply": "2023-03-06T17:37:59.696520Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "850 ns ± 0.0742 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:37:59.700253Z",
     "iopub.status.busy": "2023-03-06T17:37:59.699888Z",
     "iopub.status.idle": "2023-03-06T17:38:09.178186Z",
     "shell.execute_reply": "2023-03-06T17:38:09.177502Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.7 µs ± 27.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:09.181398Z",
     "iopub.status.busy": "2023-03-06T17:38:09.181059Z",
     "iopub.status.idle": "2023-03-06T17:38:09.185148Z",
     "shell.execute_reply": "2023-03-06T17:38:09.184534Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:09.188381Z",
     "iopub.status.busy": "2023-03-06T17:38:09.187796Z",
     "iopub.status.idle": "2023-03-06T17:38:20.261882Z",
     "shell.execute_reply": "2023-03-06T17:38:20.261309Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "136 µs ± 346 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:20.266079Z",
     "iopub.status.busy": "2023-03-06T17:38:20.265055Z",
     "iopub.status.idle": "2023-03-06T17:38:31.532980Z",
     "shell.execute_reply": "2023-03-06T17:38:31.532368Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 264 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:31.536567Z",
     "iopub.status.busy": "2023-03-06T17:38:31.536143Z",
     "iopub.status.idle": "2023-03-06T17:38:31.539812Z",
     "shell.execute_reply": "2023-03-06T17:38:31.539110Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:31.542309Z",
     "iopub.status.busy": "2023-03-06T17:38:31.541958Z",
     "iopub.status.idle": "2023-03-06T17:38:31.549331Z",
     "shell.execute_reply": "2023-03-06T17:38:31.548655Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f88e40c4cd0>\n",
       "├── 'a' --> tensor([[[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]],\n",
       "│           \n",
       "│                   [[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]],\n",
       "│           \n",
       "│                   [[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]],\n",
       "│           \n",
       "│                   [[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]],\n",
       "│           \n",
       "│                   [[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]],\n",
       "│           \n",
       "│                   [[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]],\n",
       "│           \n",
       "│                   [[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]],\n",
       "│           \n",
       "│                   [[ 0.6298, -0.1541,  0.8906],\n",
       "│                    [-0.9172, -1.5432, -1.3506]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f88e40d6c10>\n",
       "    └── 'c' --> tensor([[[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "                \n",
       "                        [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "                \n",
       "                        [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "                \n",
       "                        [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "                \n",
       "                        [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "                \n",
       "                        [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "                \n",
       "                        [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "                \n",
       "                        [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                         [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                         [-0.7075, -0.2579, -0.3554, -0.1606]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:31.552132Z",
     "iopub.status.busy": "2023-03-06T17:38:31.551569Z",
     "iopub.status.idle": "2023-03-06T17:38:34.156600Z",
     "shell.execute_reply": "2023-03-06T17:38:34.155858Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 73.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:34.159726Z",
     "iopub.status.busy": "2023-03-06T17:38:34.159137Z",
     "iopub.status.idle": "2023-03-06T17:38:34.167205Z",
     "shell.execute_reply": "2023-03-06T17:38:34.166565Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f890cb84f70>\n",
       "├── 'a' --> tensor([[ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506],\n",
       "│                   [ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506],\n",
       "│                   [ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506],\n",
       "│                   [ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506],\n",
       "│                   [ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506],\n",
       "│                   [ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506],\n",
       "│                   [ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506],\n",
       "│                   [ 0.6298, -0.1541,  0.8906],\n",
       "│                   [-0.9172, -1.5432, -1.3506]])\n",
       "└── 'x' --> <FastTreeValue 0x7f890cb84820>\n",
       "    └── 'c' --> tensor([[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                        [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                        [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                        [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                        [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                        [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                        [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                        [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                        [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                        [-0.7075, -0.2579, -0.3554, -0.1606]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:34.170183Z",
     "iopub.status.busy": "2023-03-06T17:38:34.169811Z",
     "iopub.status.idle": "2023-03-06T17:38:36.639677Z",
     "shell.execute_reply": "2023-03-06T17:38:36.638946Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4 µs ± 87.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:36.642821Z",
     "iopub.status.busy": "2023-03-06T17:38:36.642446Z",
     "iopub.status.idle": "2023-03-06T17:38:41.354444Z",
     "shell.execute_reply": "2023-03-06T17:38:41.353680Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.9 µs ± 82.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:41.357776Z",
     "iopub.status.busy": "2023-03-06T17:38:41.357235Z",
     "iopub.status.idle": "2023-03-06T17:38:41.366272Z",
     "shell.execute_reply": "2023-03-06T17:38:41.365674Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]],\n",
       "       \n",
       "               [[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]],\n",
       "       \n",
       "               [[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]],\n",
       "       \n",
       "               [[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]],\n",
       "       \n",
       "               [[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]],\n",
       "       \n",
       "               [[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]],\n",
       "       \n",
       "               [[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]],\n",
       "       \n",
       "               [[ 0.6298, -0.1541,  0.8906],\n",
       "                [-0.9172, -1.5432, -1.3506]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "              \n",
       "                      [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "              \n",
       "                      [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "              \n",
       "                      [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "              \n",
       "                      [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "              \n",
       "                      [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "              \n",
       "                      [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]],\n",
       "              \n",
       "                      [[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                       [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                       [-0.7075, -0.2579, -0.3554, -0.1606]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:41.369330Z",
     "iopub.status.busy": "2023-03-06T17:38:41.368826Z",
     "iopub.status.idle": "2023-03-06T17:38:47.738004Z",
     "shell.execute_reply": "2023-03-06T17:38:47.737293Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 95.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:47.740820Z",
     "iopub.status.busy": "2023-03-06T17:38:47.740462Z",
     "iopub.status.idle": "2023-03-06T17:38:47.748096Z",
     "shell.execute_reply": "2023-03-06T17:38:47.747497Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506],\n",
       "               [ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506],\n",
       "               [ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506],\n",
       "               [ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506],\n",
       "               [ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506],\n",
       "               [ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506],\n",
       "               [ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506],\n",
       "               [ 0.6298, -0.1541,  0.8906],\n",
       "               [-0.9172, -1.5432, -1.3506]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                      [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                      [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                      [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                      [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                      [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                      [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606],\n",
       "                      [ 0.4839,  0.4579,  0.4785,  0.1805],\n",
       "                      [ 0.6601, -1.3868,  0.0134, -1.5892],\n",
       "                      [-0.7075, -0.2579, -0.3554, -0.1606]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:47.750696Z",
     "iopub.status.busy": "2023-03-06T17:38:47.750333Z",
     "iopub.status.idle": "2023-03-06T17:38:59.272964Z",
     "shell.execute_reply": "2023-03-06T17:38:59.272232Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 437 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:38:59.277151Z",
     "iopub.status.busy": "2023-03-06T17:38:59.275757Z",
     "iopub.status.idle": "2023-03-06T17:39:01.732795Z",
     "shell.execute_reply": "2023-03-06T17:39:01.732202Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "301 µs ± 1.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
