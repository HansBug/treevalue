{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:30.531612Z",
     "iopub.status.busy": "2023-03-06T18:59:30.531288Z",
     "iopub.status.idle": "2023-03-06T18:59:31.816147Z",
     "shell.execute_reply": "2023-03-06T18:59:31.814748Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:31.821858Z",
     "iopub.status.busy": "2023-03-06T18:59:31.821291Z",
     "iopub.status.idle": "2023-03-06T18:59:31.873717Z",
     "shell.execute_reply": "2023-03-06T18:59:31.872692Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:31.877545Z",
     "iopub.status.busy": "2023-03-06T18:59:31.877230Z",
     "iopub.status.idle": "2023-03-06T18:59:31.889258Z",
     "shell.execute_reply": "2023-03-06T18:59:31.888198Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb6d086f190>\n",
       "├── 'a' --> tensor([[-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb6d086f2b0>\n",
       "    └── 'c' --> tensor([[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:31.892791Z",
     "iopub.status.busy": "2023-03-06T18:59:31.892500Z",
     "iopub.status.idle": "2023-03-06T18:59:31.899306Z",
     "shell.execute_reply": "2023-03-06T18:59:31.897995Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3333, -1.3798, -2.0255],\n",
       "        [-0.8915,  1.9612, -0.6433]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:31.903102Z",
     "iopub.status.busy": "2023-03-06T18:59:31.902782Z",
     "iopub.status.idle": "2023-03-06T18:59:38.103152Z",
     "shell.execute_reply": "2023-03-06T18:59:38.101846Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.2 ns ± 0.806 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:38.106667Z",
     "iopub.status.busy": "2023-03-06T18:59:38.106367Z",
     "iopub.status.idle": "2023-03-06T18:59:38.116266Z",
     "shell.execute_reply": "2023-03-06T18:59:38.115274Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb6d086f190>\n",
       "├── 'a' --> tensor([[ 0.4431,  0.1688,  1.0481],\n",
       "│                   [ 2.0122, -0.3511,  1.6425]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb6d086f2b0>\n",
       "    └── 'c' --> tensor([[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:38.119801Z",
     "iopub.status.busy": "2023-03-06T18:59:38.119508Z",
     "iopub.status.idle": "2023-03-06T18:59:44.183011Z",
     "shell.execute_reply": "2023-03-06T18:59:44.181889Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.7 ns ± 1.1 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:44.187427Z",
     "iopub.status.busy": "2023-03-06T18:59:44.187098Z",
     "iopub.status.idle": "2023-03-06T18:59:44.653673Z",
     "shell.execute_reply": "2023-03-06T18:59:44.651957Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:44.658815Z",
     "iopub.status.busy": "2023-03-06T18:59:44.657970Z",
     "iopub.status.idle": "2023-03-06T18:59:44.665986Z",
     "shell.execute_reply": "2023-03-06T18:59:44.665019Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:44.669890Z",
     "iopub.status.busy": "2023-03-06T18:59:44.669113Z",
     "iopub.status.idle": "2023-03-06T18:59:44.676325Z",
     "shell.execute_reply": "2023-03-06T18:59:44.675320Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3333, -1.3798, -2.0255],\n",
       "        [-0.8915,  1.9612, -0.6433]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:44.679585Z",
     "iopub.status.busy": "2023-03-06T18:59:44.679305Z",
     "iopub.status.idle": "2023-03-06T18:59:49.995819Z",
     "shell.execute_reply": "2023-03-06T18:59:49.994858Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.4 ns ± 1.48 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:50.000213Z",
     "iopub.status.busy": "2023-03-06T18:59:49.999536Z",
     "iopub.status.idle": "2023-03-06T18:59:50.008797Z",
     "shell.execute_reply": "2023-03-06T18:59:50.007810Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9963, -1.6837,  2.0551],\n",
       "               [ 0.3906,  0.4094, -0.0560]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:50.012377Z",
     "iopub.status.busy": "2023-03-06T18:59:50.011807Z",
     "iopub.status.idle": "2023-03-06T18:59:55.136019Z",
     "shell.execute_reply": "2023-03-06T18:59:55.134972Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "635 ns ± 11.1 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:59:55.140529Z",
     "iopub.status.busy": "2023-03-06T18:59:55.139826Z",
     "iopub.status.idle": "2023-03-06T19:00:03.341859Z",
     "shell.execute_reply": "2023-03-06T19:00:03.340560Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.01 µs ± 29.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:03.345804Z",
     "iopub.status.busy": "2023-03-06T19:00:03.345494Z",
     "iopub.status.idle": "2023-03-06T19:00:14.498758Z",
     "shell.execute_reply": "2023-03-06T19:00:14.497657Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.7 µs ± 215 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:14.502819Z",
     "iopub.status.busy": "2023-03-06T19:00:14.502256Z",
     "iopub.status.idle": "2023-03-06T19:00:14.507664Z",
     "shell.execute_reply": "2023-03-06T19:00:14.506616Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:14.511555Z",
     "iopub.status.busy": "2023-03-06T19:00:14.510623Z",
     "iopub.status.idle": "2023-03-06T19:00:16.846671Z",
     "shell.execute_reply": "2023-03-06T19:00:16.845736Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "286 µs ± 7.51 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:16.850503Z",
     "iopub.status.busy": "2023-03-06T19:00:16.849693Z",
     "iopub.status.idle": "2023-03-06T19:00:19.032288Z",
     "shell.execute_reply": "2023-03-06T19:00:19.031273Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "268 µs ± 5.53 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:19.036154Z",
     "iopub.status.busy": "2023-03-06T19:00:19.035506Z",
     "iopub.status.idle": "2023-03-06T19:00:19.041599Z",
     "shell.execute_reply": "2023-03-06T19:00:19.040732Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:19.045158Z",
     "iopub.status.busy": "2023-03-06T19:00:19.044868Z",
     "iopub.status.idle": "2023-03-06T19:00:19.054756Z",
     "shell.execute_reply": "2023-03-06T19:00:19.053745Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb626b64a30>\n",
       "├── 'a' --> tensor([[[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]],\n",
       "│           \n",
       "│                   [[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]],\n",
       "│           \n",
       "│                   [[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]],\n",
       "│           \n",
       "│                   [[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]],\n",
       "│           \n",
       "│                   [[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]],\n",
       "│           \n",
       "│                   [[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]],\n",
       "│           \n",
       "│                   [[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]],\n",
       "│           \n",
       "│                   [[-0.3333, -1.3798, -2.0255],\n",
       "│                    [-0.8915,  1.9612, -0.6433]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb6d081e880>\n",
       "    └── 'c' --> tensor([[[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "                \n",
       "                        [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "                \n",
       "                        [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "                \n",
       "                        [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "                \n",
       "                        [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "                \n",
       "                        [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "                \n",
       "                        [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "                \n",
       "                        [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                         [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                         [-0.1515,  1.2312,  1.1232,  1.1931]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:19.058913Z",
     "iopub.status.busy": "2023-03-06T19:00:19.058409Z",
     "iopub.status.idle": "2023-03-06T19:00:23.007187Z",
     "shell.execute_reply": "2023-03-06T19:00:23.006081Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48.3 µs ± 997 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:23.010739Z",
     "iopub.status.busy": "2023-03-06T19:00:23.010447Z",
     "iopub.status.idle": "2023-03-06T19:00:23.021639Z",
     "shell.execute_reply": "2023-03-06T19:00:23.020708Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb62651d910>\n",
       "├── 'a' --> tensor([[-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433],\n",
       "│                   [-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433],\n",
       "│                   [-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433],\n",
       "│                   [-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433],\n",
       "│                   [-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433],\n",
       "│                   [-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433],\n",
       "│                   [-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433],\n",
       "│                   [-0.3333, -1.3798, -2.0255],\n",
       "│                   [-0.8915,  1.9612, -0.6433]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb62651d760>\n",
       "    └── 'c' --> tensor([[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                        [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                        [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                        [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                        [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                        [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                        [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                        [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                        [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                        [-0.1515,  1.2312,  1.1232,  1.1931]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:23.025215Z",
     "iopub.status.busy": "2023-03-06T19:00:23.024707Z",
     "iopub.status.idle": "2023-03-06T19:00:26.844771Z",
     "shell.execute_reply": "2023-03-06T19:00:26.843581Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47.2 µs ± 1.15 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:26.848534Z",
     "iopub.status.busy": "2023-03-06T19:00:26.848272Z",
     "iopub.status.idle": "2023-03-06T19:00:33.448930Z",
     "shell.execute_reply": "2023-03-06T19:00:33.447799Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81.3 µs ± 909 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:33.452375Z",
     "iopub.status.busy": "2023-03-06T19:00:33.452071Z",
     "iopub.status.idle": "2023-03-06T19:00:33.463899Z",
     "shell.execute_reply": "2023-03-06T19:00:33.462913Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "              \n",
       "                      [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "              \n",
       "                      [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "              \n",
       "                      [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "              \n",
       "                      [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "              \n",
       "                      [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "              \n",
       "                      [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]],\n",
       "              \n",
       "                      [[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                       [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                       [-0.1515,  1.2312,  1.1232,  1.1931]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]],\n",
       "       \n",
       "               [[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]],\n",
       "       \n",
       "               [[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]],\n",
       "       \n",
       "               [[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]],\n",
       "       \n",
       "               [[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]],\n",
       "       \n",
       "               [[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]],\n",
       "       \n",
       "               [[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]],\n",
       "       \n",
       "               [[-0.3333, -1.3798, -2.0255],\n",
       "                [-0.8915,  1.9612, -0.6433]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:33.467801Z",
     "iopub.status.busy": "2023-03-06T19:00:33.467191Z",
     "iopub.status.idle": "2023-03-06T19:00:41.908196Z",
     "shell.execute_reply": "2023-03-06T19:00:41.907072Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "104 µs ± 3.52 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:41.912828Z",
     "iopub.status.busy": "2023-03-06T19:00:41.911932Z",
     "iopub.status.idle": "2023-03-06T19:00:41.923045Z",
     "shell.execute_reply": "2023-03-06T19:00:41.922000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                      [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                      [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                      [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                      [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                      [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                      [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931],\n",
       "                      [ 1.6513, -0.0623, -0.2840, -0.1146],\n",
       "                      [-1.8464,  0.3189, -2.2465,  2.5610],\n",
       "                      [-0.1515,  1.2312,  1.1232,  1.1931]]),\n",
       "       ),\n",
       "    a: tensor([[-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433],\n",
       "               [-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433],\n",
       "               [-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433],\n",
       "               [-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433],\n",
       "               [-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433],\n",
       "               [-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433],\n",
       "               [-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433],\n",
       "               [-0.3333, -1.3798, -2.0255],\n",
       "               [-0.8915,  1.9612, -0.6433]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:41.926708Z",
     "iopub.status.busy": "2023-03-06T19:00:41.926096Z",
     "iopub.status.idle": "2023-03-06T19:00:43.599535Z",
     "shell.execute_reply": "2023-03-06T19:00:43.598280Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "204 µs ± 2.87 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:00:43.603373Z",
     "iopub.status.busy": "2023-03-06T19:00:43.602803Z",
     "iopub.status.idle": "2023-03-06T19:00:48.263387Z",
     "shell.execute_reply": "2023-03-06T19:00:48.262242Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "572 µs ± 13.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
