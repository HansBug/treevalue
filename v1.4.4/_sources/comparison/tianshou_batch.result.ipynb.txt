{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:05.049077Z",
     "iopub.status.busy": "2023-02-24T08:29:05.048565Z",
     "iopub.status.idle": "2023-02-24T08:29:06.351826Z",
     "shell.execute_reply": "2023-02-24T08:29:06.350717Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:06.356459Z",
     "iopub.status.busy": "2023-02-24T08:29:06.356024Z",
     "iopub.status.idle": "2023-02-24T08:29:06.402671Z",
     "shell.execute_reply": "2023-02-24T08:29:06.401539Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:06.407074Z",
     "iopub.status.busy": "2023-02-24T08:29:06.406726Z",
     "iopub.status.idle": "2023-02-24T08:29:06.420507Z",
     "shell.execute_reply": "2023-02-24T08:29:06.419459Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb69cfcde80>\n",
       "├── 'a' --> tensor([[-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb69cfcde50>\n",
       "    └── 'c' --> tensor([[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:06.424372Z",
     "iopub.status.busy": "2023-02-24T08:29:06.424047Z",
     "iopub.status.idle": "2023-02-24T08:29:06.432461Z",
     "shell.execute_reply": "2023-02-24T08:29:06.431390Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.0416, -0.1654,  0.1618],\n",
       "        [ 0.5258, -0.5184, -0.4607]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:06.437067Z",
     "iopub.status.busy": "2023-02-24T08:29:06.436412Z",
     "iopub.status.idle": "2023-02-24T08:29:12.815416Z",
     "shell.execute_reply": "2023-02-24T08:29:12.814496Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.9 ns ± 2.34 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:12.830848Z",
     "iopub.status.busy": "2023-02-24T08:29:12.829802Z",
     "iopub.status.idle": "2023-02-24T08:29:12.841592Z",
     "shell.execute_reply": "2023-02-24T08:29:12.840603Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb69cfcde80>\n",
       "├── 'a' --> tensor([[-0.5918, -0.8060, -0.0314],\n",
       "│                   [-0.7451, -1.2411,  0.0649]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb69cfcde50>\n",
       "    └── 'c' --> tensor([[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:12.846842Z",
     "iopub.status.busy": "2023-02-24T08:29:12.845334Z",
     "iopub.status.idle": "2023-02-24T08:29:19.801012Z",
     "shell.execute_reply": "2023-02-24T08:29:19.799865Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.4 ns ± 1.08 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:19.805346Z",
     "iopub.status.busy": "2023-02-24T08:29:19.804852Z",
     "iopub.status.idle": "2023-02-24T08:29:20.314243Z",
     "shell.execute_reply": "2023-02-24T08:29:20.313070Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:20.319376Z",
     "iopub.status.busy": "2023-02-24T08:29:20.318553Z",
     "iopub.status.idle": "2023-02-24T08:29:20.326627Z",
     "shell.execute_reply": "2023-02-24T08:29:20.325689Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:20.330859Z",
     "iopub.status.busy": "2023-02-24T08:29:20.330391Z",
     "iopub.status.idle": "2023-02-24T08:29:20.339273Z",
     "shell.execute_reply": "2023-02-24T08:29:20.338257Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.0416, -0.1654,  0.1618],\n",
       "        [ 0.5258, -0.5184, -0.4607]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:20.343224Z",
     "iopub.status.busy": "2023-02-24T08:29:20.342898Z",
     "iopub.status.idle": "2023-02-24T08:29:25.789955Z",
     "shell.execute_reply": "2023-02-24T08:29:25.788889Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.3 ns ± 0.731 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:25.794480Z",
     "iopub.status.busy": "2023-02-24T08:29:25.793573Z",
     "iopub.status.idle": "2023-02-24T08:29:25.803215Z",
     "shell.execute_reply": "2023-02-24T08:29:25.802230Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0575,  0.5402, -0.7430],\n",
       "               [ 0.3695,  0.1340,  0.2362]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:25.808739Z",
     "iopub.status.busy": "2023-02-24T08:29:25.807966Z",
     "iopub.status.idle": "2023-02-24T08:29:30.954134Z",
     "shell.execute_reply": "2023-02-24T08:29:30.953059Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "632 ns ± 7.12 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:30.958335Z",
     "iopub.status.busy": "2023-02-24T08:29:30.957772Z",
     "iopub.status.idle": "2023-02-24T08:29:39.341032Z",
     "shell.execute_reply": "2023-02-24T08:29:39.339988Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.03 µs ± 11.3 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:39.345852Z",
     "iopub.status.busy": "2023-02-24T08:29:39.344644Z",
     "iopub.status.idle": "2023-02-24T08:29:50.386126Z",
     "shell.execute_reply": "2023-02-24T08:29:50.385112Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.6 µs ± 115 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:50.390098Z",
     "iopub.status.busy": "2023-02-24T08:29:50.389509Z",
     "iopub.status.idle": "2023-02-24T08:29:50.394425Z",
     "shell.execute_reply": "2023-02-24T08:29:50.393466Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:50.398170Z",
     "iopub.status.busy": "2023-02-24T08:29:50.397584Z",
     "iopub.status.idle": "2023-02-24T08:29:52.798718Z",
     "shell.execute_reply": "2023-02-24T08:29:52.797052Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "297 µs ± 11.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:52.804307Z",
     "iopub.status.busy": "2023-02-24T08:29:52.803642Z",
     "iopub.status.idle": "2023-02-24T08:29:55.227920Z",
     "shell.execute_reply": "2023-02-24T08:29:55.227045Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "301 µs ± 19 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:55.231654Z",
     "iopub.status.busy": "2023-02-24T08:29:55.231169Z",
     "iopub.status.idle": "2023-02-24T08:29:55.237195Z",
     "shell.execute_reply": "2023-02-24T08:29:55.236251Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:55.241212Z",
     "iopub.status.busy": "2023-02-24T08:29:55.240903Z",
     "iopub.status.idle": "2023-02-24T08:29:55.252209Z",
     "shell.execute_reply": "2023-02-24T08:29:55.251268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb69cfcde20>\n",
       "├── 'a' --> tensor([[[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]],\n",
       "│           \n",
       "│                   [[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]],\n",
       "│           \n",
       "│                   [[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]],\n",
       "│           \n",
       "│                   [[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]],\n",
       "│           \n",
       "│                   [[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]],\n",
       "│           \n",
       "│                   [[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]],\n",
       "│           \n",
       "│                   [[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]],\n",
       "│           \n",
       "│                   [[-0.0416, -0.1654,  0.1618],\n",
       "│                    [ 0.5258, -0.5184, -0.4607]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb69cff6070>\n",
       "    └── 'c' --> tensor([[[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "                \n",
       "                        [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "                \n",
       "                        [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "                \n",
       "                        [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "                \n",
       "                        [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "                \n",
       "                        [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "                \n",
       "                        [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "                \n",
       "                        [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                         [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                         [-0.0812, -0.4028, -0.6148, -2.4973]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:55.258402Z",
     "iopub.status.busy": "2023-02-24T08:29:55.257580Z",
     "iopub.status.idle": "2023-02-24T08:29:59.223278Z",
     "shell.execute_reply": "2023-02-24T08:29:59.221892Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48.7 µs ± 1.12 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:59.227452Z",
     "iopub.status.busy": "2023-02-24T08:29:59.226965Z",
     "iopub.status.idle": "2023-02-24T08:29:59.242470Z",
     "shell.execute_reply": "2023-02-24T08:29:59.239404Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb69cfcdbe0>\n",
       "├── 'a' --> tensor([[-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607],\n",
       "│                   [-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607],\n",
       "│                   [-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607],\n",
       "│                   [-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607],\n",
       "│                   [-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607],\n",
       "│                   [-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607],\n",
       "│                   [-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607],\n",
       "│                   [-0.0416, -0.1654,  0.1618],\n",
       "│                   [ 0.5258, -0.5184, -0.4607]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb5f6da7490>\n",
       "    └── 'c' --> tensor([[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                        [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                        [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                        [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                        [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                        [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                        [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                        [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                        [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                        [-0.0812, -0.4028, -0.6148, -2.4973]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:29:59.246942Z",
     "iopub.status.busy": "2023-02-24T08:29:59.246502Z",
     "iopub.status.idle": "2023-02-24T08:30:02.873757Z",
     "shell.execute_reply": "2023-02-24T08:30:02.872699Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44.8 µs ± 2.38 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:30:02.877604Z",
     "iopub.status.busy": "2023-02-24T08:30:02.877020Z",
     "iopub.status.idle": "2023-02-24T08:30:09.612220Z",
     "shell.execute_reply": "2023-02-24T08:30:09.611201Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.7 µs ± 1.87 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:30:09.616401Z",
     "iopub.status.busy": "2023-02-24T08:30:09.615893Z",
     "iopub.status.idle": "2023-02-24T08:30:09.626622Z",
     "shell.execute_reply": "2023-02-24T08:30:09.625552Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]],\n",
       "       \n",
       "               [[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]],\n",
       "       \n",
       "               [[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]],\n",
       "       \n",
       "               [[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]],\n",
       "       \n",
       "               [[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]],\n",
       "       \n",
       "               [[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]],\n",
       "       \n",
       "               [[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]],\n",
       "       \n",
       "               [[-0.0416, -0.1654,  0.1618],\n",
       "                [ 0.5258, -0.5184, -0.4607]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "              \n",
       "                      [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "              \n",
       "                      [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "              \n",
       "                      [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "              \n",
       "                      [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "              \n",
       "                      [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "              \n",
       "                      [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]],\n",
       "              \n",
       "                      [[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                       [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                       [-0.0812, -0.4028, -0.6148, -2.4973]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:30:09.630745Z",
     "iopub.status.busy": "2023-02-24T08:30:09.630382Z",
     "iopub.status.idle": "2023-02-24T08:30:18.191862Z",
     "shell.execute_reply": "2023-02-24T08:30:18.190544Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "106 µs ± 1.69 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:30:18.196040Z",
     "iopub.status.busy": "2023-02-24T08:30:18.195676Z",
     "iopub.status.idle": "2023-02-24T08:30:18.208523Z",
     "shell.execute_reply": "2023-02-24T08:30:18.206821Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607],\n",
       "               [-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607],\n",
       "               [-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607],\n",
       "               [-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607],\n",
       "               [-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607],\n",
       "               [-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607],\n",
       "               [-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607],\n",
       "               [-0.0416, -0.1654,  0.1618],\n",
       "               [ 0.5258, -0.5184, -0.4607]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                      [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                      [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                      [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                      [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                      [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                      [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973],\n",
       "                      [ 1.4769, -1.3254,  0.0227, -0.1444],\n",
       "                      [-0.4445,  0.4219,  0.5354, -1.3769],\n",
       "                      [-0.0812, -0.4028, -0.6148, -2.4973]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:30:18.212534Z",
     "iopub.status.busy": "2023-02-24T08:30:18.212167Z",
     "iopub.status.idle": "2023-02-24T08:30:34.203026Z",
     "shell.execute_reply": "2023-02-24T08:30:34.201663Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "196 µs ± 5.4 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:30:34.207081Z",
     "iopub.status.busy": "2023-02-24T08:30:34.206327Z",
     "iopub.status.idle": "2023-02-24T08:30:39.224468Z",
     "shell.execute_reply": "2023-02-24T08:30:39.223433Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "616 µs ± 8.43 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
