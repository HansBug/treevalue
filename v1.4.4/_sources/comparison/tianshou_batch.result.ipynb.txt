{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:02.826270Z",
     "iopub.status.busy": "2023-02-26T14:13:02.825565Z",
     "iopub.status.idle": "2023-02-26T14:13:03.907079Z",
     "shell.execute_reply": "2023-02-26T14:13:03.906049Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:03.911646Z",
     "iopub.status.busy": "2023-02-26T14:13:03.911297Z",
     "iopub.status.idle": "2023-02-26T14:13:03.954616Z",
     "shell.execute_reply": "2023-02-26T14:13:03.953161Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:03.958226Z",
     "iopub.status.busy": "2023-02-26T14:13:03.957944Z",
     "iopub.status.idle": "2023-02-26T14:13:03.971362Z",
     "shell.execute_reply": "2023-02-26T14:13:03.970307Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f02108921f0>\n",
       "├── 'a' --> tensor([[-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0210892340>\n",
       "    └── 'c' --> tensor([[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:03.974684Z",
     "iopub.status.busy": "2023-02-26T14:13:03.974416Z",
     "iopub.status.idle": "2023-02-26T14:13:03.982241Z",
     "shell.execute_reply": "2023-02-26T14:13:03.981345Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.6570,  0.6017, -0.8354],\n",
       "        [-0.3116, -1.0796,  0.7825]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:03.985308Z",
     "iopub.status.busy": "2023-02-26T14:13:03.985041Z",
     "iopub.status.idle": "2023-02-26T14:13:09.336130Z",
     "shell.execute_reply": "2023-02-26T14:13:09.334977Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.9 ns ± 0.36 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:09.340771Z",
     "iopub.status.busy": "2023-02-26T14:13:09.340028Z",
     "iopub.status.idle": "2023-02-26T14:13:09.348651Z",
     "shell.execute_reply": "2023-02-26T14:13:09.347757Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f02108921f0>\n",
       "├── 'a' --> tensor([[ 0.7265,  0.2391,  1.0694],\n",
       "│                   [-0.5744, -0.8073, -1.5563]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0210892340>\n",
       "    └── 'c' --> tensor([[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:09.352031Z",
     "iopub.status.busy": "2023-02-26T14:13:09.351545Z",
     "iopub.status.idle": "2023-02-26T14:13:14.830077Z",
     "shell.execute_reply": "2023-02-26T14:13:14.828856Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.2 ns ± 0.927 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:14.834184Z",
     "iopub.status.busy": "2023-02-26T14:13:14.833516Z",
     "iopub.status.idle": "2023-02-26T14:13:15.247196Z",
     "shell.execute_reply": "2023-02-26T14:13:15.246171Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:15.251606Z",
     "iopub.status.busy": "2023-02-26T14:13:15.250939Z",
     "iopub.status.idle": "2023-02-26T14:13:15.259157Z",
     "shell.execute_reply": "2023-02-26T14:13:15.257867Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:15.262655Z",
     "iopub.status.busy": "2023-02-26T14:13:15.262252Z",
     "iopub.status.idle": "2023-02-26T14:13:15.269887Z",
     "shell.execute_reply": "2023-02-26T14:13:15.269084Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.6570,  0.6017, -0.8354],\n",
       "        [-0.3116, -1.0796,  0.7825]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:15.273328Z",
     "iopub.status.busy": "2023-02-26T14:13:15.272876Z",
     "iopub.status.idle": "2023-02-26T14:13:20.493603Z",
     "shell.execute_reply": "2023-02-26T14:13:20.492629Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.1 ns ± 0.829 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:20.497136Z",
     "iopub.status.busy": "2023-02-26T14:13:20.496854Z",
     "iopub.status.idle": "2023-02-26T14:13:20.506480Z",
     "shell.execute_reply": "2023-02-26T14:13:20.505443Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.1637, -0.2761,  0.6698],\n",
       "               [ 0.9810, -0.9415,  0.5328]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:20.509521Z",
     "iopub.status.busy": "2023-02-26T14:13:20.509040Z",
     "iopub.status.idle": "2023-02-26T14:13:25.218016Z",
     "shell.execute_reply": "2023-02-26T14:13:25.217120Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "582 ns ± 6.08 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:25.221686Z",
     "iopub.status.busy": "2023-02-26T14:13:25.221273Z",
     "iopub.status.idle": "2023-02-26T14:13:32.918421Z",
     "shell.execute_reply": "2023-02-26T14:13:32.917424Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "949 ns ± 15.4 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:32.922369Z",
     "iopub.status.busy": "2023-02-26T14:13:32.921721Z",
     "iopub.status.idle": "2023-02-26T14:13:43.025406Z",
     "shell.execute_reply": "2023-02-26T14:13:43.024484Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.5 µs ± 153 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:43.029109Z",
     "iopub.status.busy": "2023-02-26T14:13:43.028637Z",
     "iopub.status.idle": "2023-02-26T14:13:43.032673Z",
     "shell.execute_reply": "2023-02-26T14:13:43.031804Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:43.036347Z",
     "iopub.status.busy": "2023-02-26T14:13:43.035852Z",
     "iopub.status.idle": "2023-02-26T14:13:45.255239Z",
     "shell.execute_reply": "2023-02-26T14:13:45.254363Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "272 µs ± 4.73 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:45.258928Z",
     "iopub.status.busy": "2023-02-26T14:13:45.258373Z",
     "iopub.status.idle": "2023-02-26T14:13:47.354243Z",
     "shell.execute_reply": "2023-02-26T14:13:47.353369Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "255 µs ± 6.36 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:47.358163Z",
     "iopub.status.busy": "2023-02-26T14:13:47.357526Z",
     "iopub.status.idle": "2023-02-26T14:13:47.362229Z",
     "shell.execute_reply": "2023-02-26T14:13:47.361252Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:47.365545Z",
     "iopub.status.busy": "2023-02-26T14:13:47.365260Z",
     "iopub.status.idle": "2023-02-26T14:13:47.374923Z",
     "shell.execute_reply": "2023-02-26T14:13:47.373985Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0210892190>\n",
       "├── 'a' --> tensor([[[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]],\n",
       "│           \n",
       "│                   [[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]],\n",
       "│           \n",
       "│                   [[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]],\n",
       "│           \n",
       "│                   [[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]],\n",
       "│           \n",
       "│                   [[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]],\n",
       "│           \n",
       "│                   [[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]],\n",
       "│           \n",
       "│                   [[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]],\n",
       "│           \n",
       "│                   [[-1.6570,  0.6017, -0.8354],\n",
       "│                    [-0.3116, -1.0796,  0.7825]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f016d186100>\n",
       "    └── 'c' --> tensor([[[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "                \n",
       "                        [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "                \n",
       "                        [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "                \n",
       "                        [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "                \n",
       "                        [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "                \n",
       "                        [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "                \n",
       "                        [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "                \n",
       "                        [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                         [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                         [ 0.8712,  2.0530,  0.3501,  1.5526]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:47.378256Z",
     "iopub.status.busy": "2023-02-26T14:13:47.377975Z",
     "iopub.status.idle": "2023-02-26T14:13:50.796847Z",
     "shell.execute_reply": "2023-02-26T14:13:50.795853Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42 µs ± 916 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:50.800227Z",
     "iopub.status.busy": "2023-02-26T14:13:50.799888Z",
     "iopub.status.idle": "2023-02-26T14:13:50.809140Z",
     "shell.execute_reply": "2023-02-26T14:13:50.808266Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f016655ceb0>\n",
       "├── 'a' --> tensor([[-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825],\n",
       "│                   [-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825],\n",
       "│                   [-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825],\n",
       "│                   [-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825],\n",
       "│                   [-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825],\n",
       "│                   [-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825],\n",
       "│                   [-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825],\n",
       "│                   [-1.6570,  0.6017, -0.8354],\n",
       "│                   [-0.3116, -1.0796,  0.7825]])\n",
       "└── 'x' --> <FastTreeValue 0x7f016655cf70>\n",
       "    └── 'c' --> tensor([[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                        [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                        [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                        [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                        [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                        [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                        [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                        [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                        [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                        [ 0.8712,  2.0530,  0.3501,  1.5526]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:50.812656Z",
     "iopub.status.busy": "2023-02-26T14:13:50.812161Z",
     "iopub.status.idle": "2023-02-26T14:13:53.875981Z",
     "shell.execute_reply": "2023-02-26T14:13:53.874926Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37.6 µs ± 336 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:13:53.879663Z",
     "iopub.status.busy": "2023-02-26T14:13:53.879202Z",
     "iopub.status.idle": "2023-02-26T14:14:00.120211Z",
     "shell.execute_reply": "2023-02-26T14:14:00.118007Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.3 µs ± 1.93 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:14:00.124374Z",
     "iopub.status.busy": "2023-02-26T14:14:00.123825Z",
     "iopub.status.idle": "2023-02-26T14:14:00.135012Z",
     "shell.execute_reply": "2023-02-26T14:14:00.133969Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "              \n",
       "                      [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "              \n",
       "                      [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "              \n",
       "                      [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "              \n",
       "                      [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "              \n",
       "                      [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "              \n",
       "                      [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]],\n",
       "              \n",
       "                      [[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                       [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                       [ 0.8712,  2.0530,  0.3501,  1.5526]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]],\n",
       "       \n",
       "               [[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]],\n",
       "       \n",
       "               [[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]],\n",
       "       \n",
       "               [[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]],\n",
       "       \n",
       "               [[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]],\n",
       "       \n",
       "               [[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]],\n",
       "       \n",
       "               [[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]],\n",
       "       \n",
       "               [[-1.6570,  0.6017, -0.8354],\n",
       "                [-0.3116, -1.0796,  0.7825]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:14:00.138356Z",
     "iopub.status.busy": "2023-02-26T14:14:00.138063Z",
     "iopub.status.idle": "2023-02-26T14:14:08.245610Z",
     "shell.execute_reply": "2023-02-26T14:14:08.244647Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "98.1 µs ± 4.28 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:14:08.249118Z",
     "iopub.status.busy": "2023-02-26T14:14:08.248816Z",
     "iopub.status.idle": "2023-02-26T14:14:08.258820Z",
     "shell.execute_reply": "2023-02-26T14:14:08.257718Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                      [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                      [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                      [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                      [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                      [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                      [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526],\n",
       "                      [ 1.2673,  0.6671, -0.6309, -0.2700],\n",
       "                      [ 0.5626, -1.0116, -1.7509,  0.5799],\n",
       "                      [ 0.8712,  2.0530,  0.3501,  1.5526]]),\n",
       "       ),\n",
       "    a: tensor([[-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825],\n",
       "               [-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825],\n",
       "               [-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825],\n",
       "               [-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825],\n",
       "               [-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825],\n",
       "               [-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825],\n",
       "               [-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825],\n",
       "               [-1.6570,  0.6017, -0.8354],\n",
       "               [-0.3116, -1.0796,  0.7825]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:14:08.262035Z",
     "iopub.status.busy": "2023-02-26T14:14:08.261526Z",
     "iopub.status.idle": "2023-02-26T14:14:21.922004Z",
     "shell.execute_reply": "2023-02-26T14:14:21.921045Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "168 µs ± 3.24 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:14:21.925687Z",
     "iopub.status.busy": "2023-02-26T14:14:21.925265Z",
     "iopub.status.idle": "2023-02-26T14:14:26.363761Z",
     "shell.execute_reply": "2023-02-26T14:14:26.362741Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "546 µs ± 6.37 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
