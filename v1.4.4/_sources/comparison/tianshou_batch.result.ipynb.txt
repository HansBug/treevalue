{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:29.161179Z",
     "iopub.status.busy": "2023-02-26T15:32:29.160612Z",
     "iopub.status.idle": "2023-02-26T15:32:30.080554Z",
     "shell.execute_reply": "2023-02-26T15:32:30.079858Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:30.084007Z",
     "iopub.status.busy": "2023-02-26T15:32:30.083595Z",
     "iopub.status.idle": "2023-02-26T15:32:30.117094Z",
     "shell.execute_reply": "2023-02-26T15:32:30.116456Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:30.120445Z",
     "iopub.status.busy": "2023-02-26T15:32:30.119914Z",
     "iopub.status.idle": "2023-02-26T15:32:30.129526Z",
     "shell.execute_reply": "2023-02-26T15:32:30.128950Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb69438d970>\n",
       "├── 'a' --> tensor([[ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb69438df70>\n",
       "    └── 'c' --> tensor([[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:30.132407Z",
     "iopub.status.busy": "2023-02-26T15:32:30.132066Z",
     "iopub.status.idle": "2023-02-26T15:32:30.137679Z",
     "shell.execute_reply": "2023-02-26T15:32:30.137095Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.1852, -0.8165,  1.7311],\n",
       "        [-0.2185,  0.4917,  1.3075]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:30.140260Z",
     "iopub.status.busy": "2023-02-26T15:32:30.140034Z",
     "iopub.status.idle": "2023-02-26T15:32:34.964311Z",
     "shell.execute_reply": "2023-02-26T15:32:34.963583Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.4 ns ± 0.0686 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:34.967059Z",
     "iopub.status.busy": "2023-02-26T15:32:34.966703Z",
     "iopub.status.idle": "2023-02-26T15:32:34.973384Z",
     "shell.execute_reply": "2023-02-26T15:32:34.972802Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb69438d970>\n",
       "├── 'a' --> tensor([[ 0.2646, -0.4243,  0.8131],\n",
       "│                   [ 1.4082, -0.7723,  0.6814]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb69438df70>\n",
       "    └── 'c' --> tensor([[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:34.976206Z",
     "iopub.status.busy": "2023-02-26T15:32:34.975623Z",
     "iopub.status.idle": "2023-02-26T15:32:39.855240Z",
     "shell.execute_reply": "2023-02-26T15:32:39.854530Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 ns ± 0.0428 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:39.858091Z",
     "iopub.status.busy": "2023-02-26T15:32:39.857735Z",
     "iopub.status.idle": "2023-02-26T15:32:40.191800Z",
     "shell.execute_reply": "2023-02-26T15:32:40.191129Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:40.194868Z",
     "iopub.status.busy": "2023-02-26T15:32:40.194354Z",
     "iopub.status.idle": "2023-02-26T15:32:40.200344Z",
     "shell.execute_reply": "2023-02-26T15:32:40.199793Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:40.203092Z",
     "iopub.status.busy": "2023-02-26T15:32:40.202759Z",
     "iopub.status.idle": "2023-02-26T15:32:40.208449Z",
     "shell.execute_reply": "2023-02-26T15:32:40.207887Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.1852, -0.8165,  1.7311],\n",
       "        [-0.2185,  0.4917,  1.3075]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:40.211043Z",
     "iopub.status.busy": "2023-02-26T15:32:40.210486Z",
     "iopub.status.idle": "2023-02-26T15:32:44.411884Z",
     "shell.execute_reply": "2023-02-26T15:32:44.411136Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.7 ns ± 0.0658 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:44.415141Z",
     "iopub.status.busy": "2023-02-26T15:32:44.414556Z",
     "iopub.status.idle": "2023-02-26T15:32:44.420967Z",
     "shell.execute_reply": "2023-02-26T15:32:44.420394Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7711,  0.4830,  0.0806],\n",
       "               [-1.5910,  0.6893,  0.9972]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:44.423383Z",
     "iopub.status.busy": "2023-02-26T15:32:44.423050Z",
     "iopub.status.idle": "2023-02-26T15:32:48.672366Z",
     "shell.execute_reply": "2023-02-26T15:32:48.671695Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "523 ns ± 0.0857 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:48.675413Z",
     "iopub.status.busy": "2023-02-26T15:32:48.674867Z",
     "iopub.status.idle": "2023-02-26T15:32:55.685181Z",
     "shell.execute_reply": "2023-02-26T15:32:55.684527Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "864 ns ± 0.225 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:32:55.688182Z",
     "iopub.status.busy": "2023-02-26T15:32:55.687682Z",
     "iopub.status.idle": "2023-02-26T15:33:05.094089Z",
     "shell.execute_reply": "2023-02-26T15:33:05.093372Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 40.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:05.097178Z",
     "iopub.status.busy": "2023-02-26T15:33:05.096821Z",
     "iopub.status.idle": "2023-02-26T15:33:05.101267Z",
     "shell.execute_reply": "2023-02-26T15:33:05.100251Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:05.104292Z",
     "iopub.status.busy": "2023-02-26T15:33:05.103783Z",
     "iopub.status.idle": "2023-02-26T15:33:16.303199Z",
     "shell.execute_reply": "2023-02-26T15:33:16.302626Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 339 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:16.306203Z",
     "iopub.status.busy": "2023-02-26T15:33:16.305571Z",
     "iopub.status.idle": "2023-02-26T15:33:27.755401Z",
     "shell.execute_reply": "2023-02-26T15:33:27.754805Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 948 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:27.758908Z",
     "iopub.status.busy": "2023-02-26T15:33:27.758359Z",
     "iopub.status.idle": "2023-02-26T15:33:27.761882Z",
     "shell.execute_reply": "2023-02-26T15:33:27.761251Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:27.764767Z",
     "iopub.status.busy": "2023-02-26T15:33:27.764234Z",
     "iopub.status.idle": "2023-02-26T15:33:27.771328Z",
     "shell.execute_reply": "2023-02-26T15:33:27.770727Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb5e8fe0880>\n",
       "├── 'a' --> tensor([[[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]],\n",
       "│           \n",
       "│                   [[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]],\n",
       "│           \n",
       "│                   [[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]],\n",
       "│           \n",
       "│                   [[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]],\n",
       "│           \n",
       "│                   [[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]],\n",
       "│           \n",
       "│                   [[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]],\n",
       "│           \n",
       "│                   [[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]],\n",
       "│           \n",
       "│                   [[ 0.1852, -0.8165,  1.7311],\n",
       "│                    [-0.2185,  0.4917,  1.3075]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb5e8fe0160>\n",
       "    └── 'c' --> tensor([[[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "                \n",
       "                        [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "                \n",
       "                        [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "                \n",
       "                        [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "                \n",
       "                        [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "                \n",
       "                        [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "                \n",
       "                        [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "                \n",
       "                        [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                         [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                         [ 1.7183,  0.5633,  0.7180, -0.8701]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:27.773998Z",
     "iopub.status.busy": "2023-02-26T15:33:27.773659Z",
     "iopub.status.idle": "2023-02-26T15:33:30.345631Z",
     "shell.execute_reply": "2023-02-26T15:33:30.344879Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.6 µs ± 35.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:30.348613Z",
     "iopub.status.busy": "2023-02-26T15:33:30.348258Z",
     "iopub.status.idle": "2023-02-26T15:33:30.356397Z",
     "shell.execute_reply": "2023-02-26T15:33:30.355807Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb5e8fe0700>\n",
       "├── 'a' --> tensor([[ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075],\n",
       "│                   [ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075],\n",
       "│                   [ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075],\n",
       "│                   [ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075],\n",
       "│                   [ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075],\n",
       "│                   [ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075],\n",
       "│                   [ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075],\n",
       "│                   [ 0.1852, -0.8165,  1.7311],\n",
       "│                   [-0.2185,  0.4917,  1.3075]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb5e8fe0a30>\n",
       "    └── 'c' --> tensor([[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                        [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                        [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                        [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                        [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                        [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                        [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                        [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                        [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                        [ 1.7183,  0.5633,  0.7180, -0.8701]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:30.359297Z",
     "iopub.status.busy": "2023-02-26T15:33:30.358797Z",
     "iopub.status.idle": "2023-02-26T15:33:32.766234Z",
     "shell.execute_reply": "2023-02-26T15:33:32.765233Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.6 µs ± 41.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:32.769281Z",
     "iopub.status.busy": "2023-02-26T15:33:32.768750Z",
     "iopub.status.idle": "2023-02-26T15:33:37.402177Z",
     "shell.execute_reply": "2023-02-26T15:33:37.401395Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57 µs ± 105 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:37.405513Z",
     "iopub.status.busy": "2023-02-26T15:33:37.405003Z",
     "iopub.status.idle": "2023-02-26T15:33:37.412846Z",
     "shell.execute_reply": "2023-02-26T15:33:37.412269Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "              \n",
       "                      [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "              \n",
       "                      [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "              \n",
       "                      [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "              \n",
       "                      [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "              \n",
       "                      [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "              \n",
       "                      [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]],\n",
       "              \n",
       "                      [[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                       [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                       [ 1.7183,  0.5633,  0.7180, -0.8701]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]],\n",
       "       \n",
       "               [[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]],\n",
       "       \n",
       "               [[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]],\n",
       "       \n",
       "               [[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]],\n",
       "       \n",
       "               [[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]],\n",
       "       \n",
       "               [[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]],\n",
       "       \n",
       "               [[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]],\n",
       "       \n",
       "               [[ 0.1852, -0.8165,  1.7311],\n",
       "                [-0.2185,  0.4917,  1.3075]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:37.415127Z",
     "iopub.status.busy": "2023-02-26T15:33:37.414915Z",
     "iopub.status.idle": "2023-02-26T15:33:44.065699Z",
     "shell.execute_reply": "2023-02-26T15:33:44.064959Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81.8 µs ± 89.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:44.068786Z",
     "iopub.status.busy": "2023-02-26T15:33:44.068425Z",
     "iopub.status.idle": "2023-02-26T15:33:44.075760Z",
     "shell.execute_reply": "2023-02-26T15:33:44.075172Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                      [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                      [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                      [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                      [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                      [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                      [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701],\n",
       "                      [-0.8731, -0.0325,  0.0672, -0.2724],\n",
       "                      [ 0.1208,  0.9656, -1.3046,  0.4063],\n",
       "                      [ 1.7183,  0.5633,  0.7180, -0.8701]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075],\n",
       "               [ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075],\n",
       "               [ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075],\n",
       "               [ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075],\n",
       "               [ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075],\n",
       "               [ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075],\n",
       "               [ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075],\n",
       "               [ 0.1852, -0.8165,  1.7311],\n",
       "               [-0.2185,  0.4917,  1.3075]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:44.078225Z",
     "iopub.status.busy": "2023-02-26T15:33:44.078018Z",
     "iopub.status.idle": "2023-02-26T15:33:56.292993Z",
     "shell.execute_reply": "2023-02-26T15:33:56.292348Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150 µs ± 68 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:33:56.296025Z",
     "iopub.status.busy": "2023-02-26T15:33:56.295673Z",
     "iopub.status.idle": "2023-02-26T15:33:58.832898Z",
     "shell.execute_reply": "2023-02-26T15:33:58.832326Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 2.08 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
