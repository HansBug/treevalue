{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:36.797171Z",
     "iopub.status.busy": "2023-03-16T08:13:36.796682Z",
     "iopub.status.idle": "2023-03-16T08:13:38.232009Z",
     "shell.execute_reply": "2023-03-16T08:13:38.231210Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:38.235980Z",
     "iopub.status.busy": "2023-03-16T08:13:38.235512Z",
     "iopub.status.idle": "2023-03-16T08:13:38.264817Z",
     "shell.execute_reply": "2023-03-16T08:13:38.264115Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:38.268453Z",
     "iopub.status.busy": "2023-03-16T08:13:38.267945Z",
     "iopub.status.idle": "2023-03-16T08:13:38.278829Z",
     "shell.execute_reply": "2023-03-16T08:13:38.278165Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f632dfa2df0>\n",
       "├── 'a' --> tensor([[ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856]])\n",
       "└── 'x' --> <FastTreeValue 0x7f632dfa2bb0>\n",
       "    └── 'c' --> tensor([[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:38.281741Z",
     "iopub.status.busy": "2023-03-16T08:13:38.281382Z",
     "iopub.status.idle": "2023-03-16T08:13:38.287357Z",
     "shell.execute_reply": "2023-03-16T08:13:38.286746Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5687,  0.6913,  0.3075],\n",
       "        [-0.7871,  0.7048,  0.5856]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:38.290161Z",
     "iopub.status.busy": "2023-03-16T08:13:38.289812Z",
     "iopub.status.idle": "2023-03-16T08:13:44.819329Z",
     "shell.execute_reply": "2023-03-16T08:13:44.818567Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.9 ns ± 7.33 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:44.823176Z",
     "iopub.status.busy": "2023-03-16T08:13:44.822539Z",
     "iopub.status.idle": "2023-03-16T08:13:44.830274Z",
     "shell.execute_reply": "2023-03-16T08:13:44.829602Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f632dfa2df0>\n",
       "├── 'a' --> tensor([[0.1412, 1.9152, 2.1684],\n",
       "│                   [1.1060, 0.6144, 1.4247]])\n",
       "└── 'x' --> <FastTreeValue 0x7f632dfa2bb0>\n",
       "    └── 'c' --> tensor([[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:44.833370Z",
     "iopub.status.busy": "2023-03-16T08:13:44.832977Z",
     "iopub.status.idle": "2023-03-16T08:13:50.384526Z",
     "shell.execute_reply": "2023-03-16T08:13:50.383718Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.4 ns ± 0.118 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:50.388020Z",
     "iopub.status.busy": "2023-03-16T08:13:50.387336Z",
     "iopub.status.idle": "2023-03-16T08:13:51.053868Z",
     "shell.execute_reply": "2023-03-16T08:13:51.053123Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:51.057305Z",
     "iopub.status.busy": "2023-03-16T08:13:51.056756Z",
     "iopub.status.idle": "2023-03-16T08:13:51.063108Z",
     "shell.execute_reply": "2023-03-16T08:13:51.062376Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:51.066148Z",
     "iopub.status.busy": "2023-03-16T08:13:51.065758Z",
     "iopub.status.idle": "2023-03-16T08:13:51.070983Z",
     "shell.execute_reply": "2023-03-16T08:13:51.070302Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5687,  0.6913,  0.3075],\n",
       "        [-0.7871,  0.7048,  0.5856]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:51.074135Z",
     "iopub.status.busy": "2023-03-16T08:13:51.073581Z",
     "iopub.status.idle": "2023-03-16T08:13:55.846547Z",
     "shell.execute_reply": "2023-03-16T08:13:55.845651Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.8 ns ± 0.0673 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:55.850102Z",
     "iopub.status.busy": "2023-03-16T08:13:55.849677Z",
     "iopub.status.idle": "2023-03-16T08:13:55.856405Z",
     "shell.execute_reply": "2023-03-16T08:13:55.855710Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6865, -1.2531,  0.9640],\n",
       "               [-0.8911, -0.0682, -0.0395]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:55.859123Z",
     "iopub.status.busy": "2023-03-16T08:13:55.858736Z",
     "iopub.status.idle": "2023-03-16T08:13:59.977169Z",
     "shell.execute_reply": "2023-03-16T08:13:59.976291Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "508 ns ± 0.108 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:13:59.980590Z",
     "iopub.status.busy": "2023-03-16T08:13:59.980066Z",
     "iopub.status.idle": "2023-03-16T08:14:06.529725Z",
     "shell.execute_reply": "2023-03-16T08:14:06.528852Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "806 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:06.533573Z",
     "iopub.status.busy": "2023-03-16T08:14:06.533123Z",
     "iopub.status.idle": "2023-03-16T08:14:15.485577Z",
     "shell.execute_reply": "2023-03-16T08:14:15.484715Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 µs ± 38.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:15.489308Z",
     "iopub.status.busy": "2023-03-16T08:14:15.488893Z",
     "iopub.status.idle": "2023-03-16T08:14:15.493289Z",
     "shell.execute_reply": "2023-03-16T08:14:15.492662Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:15.496520Z",
     "iopub.status.busy": "2023-03-16T08:14:15.496079Z",
     "iopub.status.idle": "2023-03-16T08:14:27.378842Z",
     "shell.execute_reply": "2023-03-16T08:14:27.378197Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 1.45 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:27.382046Z",
     "iopub.status.busy": "2023-03-16T08:14:27.381368Z",
     "iopub.status.idle": "2023-03-16T08:14:39.207479Z",
     "shell.execute_reply": "2023-03-16T08:14:39.206810Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 396 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:39.210712Z",
     "iopub.status.busy": "2023-03-16T08:14:39.210163Z",
     "iopub.status.idle": "2023-03-16T08:14:39.213720Z",
     "shell.execute_reply": "2023-03-16T08:14:39.213155Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:39.216430Z",
     "iopub.status.busy": "2023-03-16T08:14:39.215852Z",
     "iopub.status.idle": "2023-03-16T08:14:39.223827Z",
     "shell.execute_reply": "2023-03-16T08:14:39.223106Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f62560f7f40>\n",
       "├── 'a' --> tensor([[[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]],\n",
       "│           \n",
       "│                   [[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]],\n",
       "│           \n",
       "│                   [[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]],\n",
       "│           \n",
       "│                   [[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]],\n",
       "│           \n",
       "│                   [[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]],\n",
       "│           \n",
       "│                   [[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]],\n",
       "│           \n",
       "│                   [[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]],\n",
       "│           \n",
       "│                   [[ 0.5687,  0.6913,  0.3075],\n",
       "│                    [-0.7871,  0.7048,  0.5856]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f632dfa2c70>\n",
       "    └── 'c' --> tensor([[[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "                \n",
       "                        [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "                \n",
       "                        [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "                \n",
       "                        [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "                \n",
       "                        [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "                \n",
       "                        [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "                \n",
       "                        [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "                \n",
       "                        [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                         [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                         [ 2.2541,  1.2886,  1.5385,  0.9631]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:39.226715Z",
     "iopub.status.busy": "2023-03-16T08:14:39.226249Z",
     "iopub.status.idle": "2023-03-16T08:14:41.894890Z",
     "shell.execute_reply": "2023-03-16T08:14:41.894010Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.8 µs ± 75.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:41.898376Z",
     "iopub.status.busy": "2023-03-16T08:14:41.897798Z",
     "iopub.status.idle": "2023-03-16T08:14:41.907529Z",
     "shell.execute_reply": "2023-03-16T08:14:41.906859Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6328f36c40>\n",
       "├── 'a' --> tensor([[ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856],\n",
       "│                   [ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856],\n",
       "│                   [ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856],\n",
       "│                   [ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856],\n",
       "│                   [ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856],\n",
       "│                   [ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856],\n",
       "│                   [ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856],\n",
       "│                   [ 0.5687,  0.6913,  0.3075],\n",
       "│                   [-0.7871,  0.7048,  0.5856]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6328f36e80>\n",
       "    └── 'c' --> tensor([[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                        [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                        [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                        [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                        [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                        [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                        [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                        [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                        [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                        [ 2.2541,  1.2886,  1.5385,  0.9631]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:41.910748Z",
     "iopub.status.busy": "2023-03-16T08:14:41.910368Z",
     "iopub.status.idle": "2023-03-16T08:14:44.385235Z",
     "shell.execute_reply": "2023-03-16T08:14:44.384360Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4 µs ± 48.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:44.389100Z",
     "iopub.status.busy": "2023-03-16T08:14:44.388488Z",
     "iopub.status.idle": "2023-03-16T08:14:49.937537Z",
     "shell.execute_reply": "2023-03-16T08:14:49.936671Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.2 µs ± 61.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:49.940984Z",
     "iopub.status.busy": "2023-03-16T08:14:49.940575Z",
     "iopub.status.idle": "2023-03-16T08:14:49.949731Z",
     "shell.execute_reply": "2023-03-16T08:14:49.949048Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "              \n",
       "                      [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "              \n",
       "                      [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "              \n",
       "                      [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "              \n",
       "                      [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "              \n",
       "                      [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "              \n",
       "                      [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]],\n",
       "              \n",
       "                      [[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                       [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                       [ 2.2541,  1.2886,  1.5385,  0.9631]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]],\n",
       "       \n",
       "               [[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]],\n",
       "       \n",
       "               [[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]],\n",
       "       \n",
       "               [[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]],\n",
       "       \n",
       "               [[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]],\n",
       "       \n",
       "               [[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]],\n",
       "       \n",
       "               [[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]],\n",
       "       \n",
       "               [[ 0.5687,  0.6913,  0.3075],\n",
       "                [-0.7871,  0.7048,  0.5856]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:49.952973Z",
     "iopub.status.busy": "2023-03-16T08:14:49.952580Z",
     "iopub.status.idle": "2023-03-16T08:14:56.277343Z",
     "shell.execute_reply": "2023-03-16T08:14:56.276367Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 µs ± 193 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:56.281111Z",
     "iopub.status.busy": "2023-03-16T08:14:56.280529Z",
     "iopub.status.idle": "2023-03-16T08:14:56.288907Z",
     "shell.execute_reply": "2023-03-16T08:14:56.288269Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                      [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                      [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                      [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                      [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                      [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                      [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631],\n",
       "                      [ 1.5292, -0.1858,  0.2161,  1.1830],\n",
       "                      [ 1.0340,  0.5212,  0.7626, -0.4958],\n",
       "                      [ 2.2541,  1.2886,  1.5385,  0.9631]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856],\n",
       "               [ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856],\n",
       "               [ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856],\n",
       "               [ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856],\n",
       "               [ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856],\n",
       "               [ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856],\n",
       "               [ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856],\n",
       "               [ 0.5687,  0.6913,  0.3075],\n",
       "               [-0.7871,  0.7048,  0.5856]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:14:56.291936Z",
     "iopub.status.busy": "2023-03-16T08:14:56.291458Z",
     "iopub.status.idle": "2023-03-16T08:15:08.217583Z",
     "shell.execute_reply": "2023-03-16T08:15:08.216717Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "147 µs ± 63.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:15:08.221440Z",
     "iopub.status.busy": "2023-03-16T08:15:08.220982Z",
     "iopub.status.idle": "2023-03-16T08:15:11.007506Z",
     "shell.execute_reply": "2023-03-16T08:15:11.006679Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "342 µs ± 462 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
