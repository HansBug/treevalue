{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:03.969895Z",
     "iopub.status.busy": "2023-08-11T09:37:03.969621Z",
     "iopub.status.idle": "2023-08-11T09:37:05.699565Z",
     "shell.execute_reply": "2023-08-11T09:37:05.698534Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:05.704392Z",
     "iopub.status.busy": "2023-08-11T09:37:05.704011Z",
     "iopub.status.idle": "2023-08-11T09:37:05.741733Z",
     "shell.execute_reply": "2023-08-11T09:37:05.740736Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:05.745634Z",
     "iopub.status.busy": "2023-08-11T09:37:05.745390Z",
     "iopub.status.idle": "2023-08-11T09:37:05.758493Z",
     "shell.execute_reply": "2023-08-11T09:37:05.757330Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7effb5e3a280>\n",
       "├── 'a' --> tensor([[ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389]])\n",
       "└── 'x' --> <FastTreeValue 0x7effb5e3af10>\n",
       "    └── 'c' --> tensor([[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:05.763215Z",
     "iopub.status.busy": "2023-08-11T09:37:05.762722Z",
     "iopub.status.idle": "2023-08-11T09:37:05.769375Z",
     "shell.execute_reply": "2023-08-11T09:37:05.768360Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4287, -1.2416,  0.7783],\n",
       "        [-1.0563,  1.7227, -0.5389]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:05.774100Z",
     "iopub.status.busy": "2023-08-11T09:37:05.773585Z",
     "iopub.status.idle": "2023-08-11T09:37:11.856268Z",
     "shell.execute_reply": "2023-08-11T09:37:11.854125Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.5 ns ± 2.33 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:11.861102Z",
     "iopub.status.busy": "2023-08-11T09:37:11.860176Z",
     "iopub.status.idle": "2023-08-11T09:37:11.870500Z",
     "shell.execute_reply": "2023-08-11T09:37:11.869533Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7effb5e3a280>\n",
       "├── 'a' --> tensor([[ 1.2447,  1.1150, -1.8343],\n",
       "│                   [ 0.8144, -0.0576, -1.2549]])\n",
       "└── 'x' --> <FastTreeValue 0x7effb5e3af10>\n",
       "    └── 'c' --> tensor([[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:11.874107Z",
     "iopub.status.busy": "2023-08-11T09:37:11.873838Z",
     "iopub.status.idle": "2023-08-11T09:37:18.772493Z",
     "shell.execute_reply": "2023-08-11T09:37:18.771550Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.3 ns ± 1.05 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:18.777358Z",
     "iopub.status.busy": "2023-08-11T09:37:18.776429Z",
     "iopub.status.idle": "2023-08-11T09:37:19.261460Z",
     "shell.execute_reply": "2023-08-11T09:37:19.260486Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:19.267507Z",
     "iopub.status.busy": "2023-08-11T09:37:19.266540Z",
     "iopub.status.idle": "2023-08-11T09:37:19.275797Z",
     "shell.execute_reply": "2023-08-11T09:37:19.274873Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:19.279198Z",
     "iopub.status.busy": "2023-08-11T09:37:19.278947Z",
     "iopub.status.idle": "2023-08-11T09:37:19.285615Z",
     "shell.execute_reply": "2023-08-11T09:37:19.284674Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4287, -1.2416,  0.7783],\n",
       "        [-1.0563,  1.7227, -0.5389]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:19.289629Z",
     "iopub.status.busy": "2023-08-11T09:37:19.289345Z",
     "iopub.status.idle": "2023-08-11T09:37:25.246621Z",
     "shell.execute_reply": "2023-08-11T09:37:25.245600Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.1 ns ± 2.59 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:25.250777Z",
     "iopub.status.busy": "2023-08-11T09:37:25.250329Z",
     "iopub.status.idle": "2023-08-11T09:37:25.258126Z",
     "shell.execute_reply": "2023-08-11T09:37:25.257106Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4341,  1.6436, -1.0813],\n",
       "               [ 0.7333,  2.5109,  0.0365]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:25.261662Z",
     "iopub.status.busy": "2023-08-11T09:37:25.261121Z",
     "iopub.status.idle": "2023-08-11T09:37:30.577225Z",
     "shell.execute_reply": "2023-08-11T09:37:30.575864Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "656 ns ± 4.68 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:30.582153Z",
     "iopub.status.busy": "2023-08-11T09:37:30.581056Z",
     "iopub.status.idle": "2023-08-11T09:37:39.189421Z",
     "shell.execute_reply": "2023-08-11T09:37:39.187102Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.06 µs ± 22.5 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:39.194063Z",
     "iopub.status.busy": "2023-08-11T09:37:39.193374Z",
     "iopub.status.idle": "2023-08-11T09:37:50.151480Z",
     "shell.execute_reply": "2023-08-11T09:37:50.150602Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.5 µs ± 199 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:50.155546Z",
     "iopub.status.busy": "2023-08-11T09:37:50.155089Z",
     "iopub.status.idle": "2023-08-11T09:37:50.159228Z",
     "shell.execute_reply": "2023-08-11T09:37:50.158401Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:50.163420Z",
     "iopub.status.busy": "2023-08-11T09:37:50.163073Z",
     "iopub.status.idle": "2023-08-11T09:37:52.491166Z",
     "shell.execute_reply": "2023-08-11T09:37:52.490223Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "279 µs ± 19.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:52.495942Z",
     "iopub.status.busy": "2023-08-11T09:37:52.495433Z",
     "iopub.status.idle": "2023-08-11T09:37:54.585735Z",
     "shell.execute_reply": "2023-08-11T09:37:54.584838Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "257 µs ± 9.21 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:54.590629Z",
     "iopub.status.busy": "2023-08-11T09:37:54.589738Z",
     "iopub.status.idle": "2023-08-11T09:37:54.596080Z",
     "shell.execute_reply": "2023-08-11T09:37:54.595050Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:54.599660Z",
     "iopub.status.busy": "2023-08-11T09:37:54.599134Z",
     "iopub.status.idle": "2023-08-11T09:37:54.608749Z",
     "shell.execute_reply": "2023-08-11T09:37:54.607789Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7efee5f7c9d0>\n",
       "├── 'a' --> tensor([[[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]],\n",
       "│           \n",
       "│                   [[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]],\n",
       "│           \n",
       "│                   [[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]],\n",
       "│           \n",
       "│                   [[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]],\n",
       "│           \n",
       "│                   [[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]],\n",
       "│           \n",
       "│                   [[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]],\n",
       "│           \n",
       "│                   [[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]],\n",
       "│           \n",
       "│                   [[ 0.4287, -1.2416,  0.7783],\n",
       "│                    [-1.0563,  1.7227, -0.5389]]])\n",
       "└── 'x' --> <FastTreeValue 0x7efee5f7c790>\n",
       "    └── 'c' --> tensor([[[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "                \n",
       "                        [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "                \n",
       "                        [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "                \n",
       "                        [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "                \n",
       "                        [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "                \n",
       "                        [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "                \n",
       "                        [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "                \n",
       "                        [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                         [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                         [ 0.5415,  0.6472, -0.4065, -0.6815]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:54.612493Z",
     "iopub.status.busy": "2023-08-11T09:37:54.611770Z",
     "iopub.status.idle": "2023-08-11T09:37:58.332461Z",
     "shell.execute_reply": "2023-08-11T09:37:58.331245Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.6 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:58.337380Z",
     "iopub.status.busy": "2023-08-11T09:37:58.336503Z",
     "iopub.status.idle": "2023-08-11T09:37:58.346652Z",
     "shell.execute_reply": "2023-08-11T09:37:58.345674Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7efee5f7cb50>\n",
       "├── 'a' --> tensor([[ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389],\n",
       "│                   [ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389],\n",
       "│                   [ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389],\n",
       "│                   [ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389],\n",
       "│                   [ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389],\n",
       "│                   [ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389],\n",
       "│                   [ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389],\n",
       "│                   [ 0.4287, -1.2416,  0.7783],\n",
       "│                   [-1.0563,  1.7227, -0.5389]])\n",
       "└── 'x' --> <FastTreeValue 0x7efee5f7cfd0>\n",
       "    └── 'c' --> tensor([[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                        [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                        [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                        [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                        [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                        [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                        [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                        [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                        [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                        [ 0.5415,  0.6472, -0.4065, -0.6815]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:37:58.351182Z",
     "iopub.status.busy": "2023-08-11T09:37:58.350368Z",
     "iopub.status.idle": "2023-08-11T09:38:01.805294Z",
     "shell.execute_reply": "2023-08-11T09:38:01.803471Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.7 µs ± 744 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:38:01.809501Z",
     "iopub.status.busy": "2023-08-11T09:38:01.808776Z",
     "iopub.status.idle": "2023-08-11T09:38:09.630836Z",
     "shell.execute_reply": "2023-08-11T09:38:09.629769Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96.7 µs ± 2.62 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:38:09.635295Z",
     "iopub.status.busy": "2023-08-11T09:38:09.634567Z",
     "iopub.status.idle": "2023-08-11T09:38:09.644901Z",
     "shell.execute_reply": "2023-08-11T09:38:09.643796Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]],\n",
       "       \n",
       "               [[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]],\n",
       "       \n",
       "               [[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]],\n",
       "       \n",
       "               [[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]],\n",
       "       \n",
       "               [[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]],\n",
       "       \n",
       "               [[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]],\n",
       "       \n",
       "               [[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]],\n",
       "       \n",
       "               [[ 0.4287, -1.2416,  0.7783],\n",
       "                [-1.0563,  1.7227, -0.5389]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "              \n",
       "                      [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "              \n",
       "                      [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "              \n",
       "                      [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "              \n",
       "                      [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "              \n",
       "                      [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "              \n",
       "                      [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]],\n",
       "              \n",
       "                      [[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                       [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                       [ 0.5415,  0.6472, -0.4065, -0.6815]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:38:09.649305Z",
     "iopub.status.busy": "2023-08-11T09:38:09.648983Z",
     "iopub.status.idle": "2023-08-11T09:38:18.623250Z",
     "shell.execute_reply": "2023-08-11T09:38:18.622356Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "110 µs ± 2.05 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:38:18.627858Z",
     "iopub.status.busy": "2023-08-11T09:38:18.626736Z",
     "iopub.status.idle": "2023-08-11T09:38:18.638234Z",
     "shell.execute_reply": "2023-08-11T09:38:18.637353Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389],\n",
       "               [ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389],\n",
       "               [ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389],\n",
       "               [ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389],\n",
       "               [ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389],\n",
       "               [ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389],\n",
       "               [ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389],\n",
       "               [ 0.4287, -1.2416,  0.7783],\n",
       "               [-1.0563,  1.7227, -0.5389]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                      [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                      [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                      [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                      [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                      [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                      [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815],\n",
       "                      [ 0.3033, -0.2453,  0.2932, -0.1071],\n",
       "                      [ 0.2052,  0.4708,  1.2985, -0.8520],\n",
       "                      [ 0.5415,  0.6472, -0.4065, -0.6815]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:38:18.642954Z",
     "iopub.status.busy": "2023-08-11T09:38:18.642676Z",
     "iopub.status.idle": "2023-08-11T09:38:34.516600Z",
     "shell.execute_reply": "2023-08-11T09:38:34.515456Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "196 µs ± 3.36 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T09:38:34.521848Z",
     "iopub.status.busy": "2023-08-11T09:38:34.521171Z",
     "iopub.status.idle": "2023-08-11T09:38:39.512168Z",
     "shell.execute_reply": "2023-08-11T09:38:39.511241Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "608 µs ± 25.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
