{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:03.923886Z",
     "iopub.status.busy": "2023-04-16T14:31:03.923545Z",
     "iopub.status.idle": "2023-04-16T14:31:05.202182Z",
     "shell.execute_reply": "2023-04-16T14:31:05.201092Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:05.207273Z",
     "iopub.status.busy": "2023-04-16T14:31:05.205876Z",
     "iopub.status.idle": "2023-04-16T14:31:05.234550Z",
     "shell.execute_reply": "2023-04-16T14:31:05.233963Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:05.237534Z",
     "iopub.status.busy": "2023-04-16T14:31:05.237115Z",
     "iopub.status.idle": "2023-04-16T14:31:05.245754Z",
     "shell.execute_reply": "2023-04-16T14:31:05.245145Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbc2ca63790>\n",
       "├── 'a' --> tensor([[ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbc2cacdee0>\n",
       "    └── 'c' --> tensor([[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:05.248571Z",
     "iopub.status.busy": "2023-04-16T14:31:05.248347Z",
     "iopub.status.idle": "2023-04-16T14:31:05.252745Z",
     "shell.execute_reply": "2023-04-16T14:31:05.252121Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.1035,  1.2062,  0.8620],\n",
       "        [ 0.1784,  1.1038, -0.8772]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:05.255721Z",
     "iopub.status.busy": "2023-04-16T14:31:05.255387Z",
     "iopub.status.idle": "2023-04-16T14:31:09.970989Z",
     "shell.execute_reply": "2023-04-16T14:31:09.970410Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.8 ns ± 0.0672 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:09.973999Z",
     "iopub.status.busy": "2023-04-16T14:31:09.973562Z",
     "iopub.status.idle": "2023-04-16T14:31:09.979534Z",
     "shell.execute_reply": "2023-04-16T14:31:09.978882Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbc2ca63790>\n",
       "├── 'a' --> tensor([[ 0.3584,  0.6018,  0.6040],\n",
       "│                   [-0.2479,  1.7502, -0.2814]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbc2cacdee0>\n",
       "    └── 'c' --> tensor([[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:09.982262Z",
     "iopub.status.busy": "2023-04-16T14:31:09.981931Z",
     "iopub.status.idle": "2023-04-16T14:31:15.338072Z",
     "shell.execute_reply": "2023-04-16T14:31:15.337494Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66 ns ± 0.0581 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:15.341471Z",
     "iopub.status.busy": "2023-04-16T14:31:15.340932Z",
     "iopub.status.idle": "2023-04-16T14:31:15.685840Z",
     "shell.execute_reply": "2023-04-16T14:31:15.685200Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:15.689083Z",
     "iopub.status.busy": "2023-04-16T14:31:15.688659Z",
     "iopub.status.idle": "2023-04-16T14:31:15.694022Z",
     "shell.execute_reply": "2023-04-16T14:31:15.693408Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:15.696739Z",
     "iopub.status.busy": "2023-04-16T14:31:15.696409Z",
     "iopub.status.idle": "2023-04-16T14:31:15.700948Z",
     "shell.execute_reply": "2023-04-16T14:31:15.700299Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.1035,  1.2062,  0.8620],\n",
       "        [ 0.1784,  1.1038, -0.8772]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:15.703991Z",
     "iopub.status.busy": "2023-04-16T14:31:15.703428Z",
     "iopub.status.idle": "2023-04-16T14:31:20.532139Z",
     "shell.execute_reply": "2023-04-16T14:31:20.531565Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.4 ns ± 0.0196 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:20.535329Z",
     "iopub.status.busy": "2023-04-16T14:31:20.534984Z",
     "iopub.status.idle": "2023-04-16T14:31:20.540823Z",
     "shell.execute_reply": "2023-04-16T14:31:20.540190Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2930, -1.8480, -0.4335],\n",
       "               [ 0.2767, -1.2644,  1.1554]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:20.543485Z",
     "iopub.status.busy": "2023-04-16T14:31:20.543156Z",
     "iopub.status.idle": "2023-04-16T14:31:24.492962Z",
     "shell.execute_reply": "2023-04-16T14:31:24.492372Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "487 ns ± 0.144 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:24.496136Z",
     "iopub.status.busy": "2023-04-16T14:31:24.495771Z",
     "iopub.status.idle": "2023-04-16T14:31:31.307259Z",
     "shell.execute_reply": "2023-04-16T14:31:31.306668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "839 ns ± 0.0524 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:31.310645Z",
     "iopub.status.busy": "2023-04-16T14:31:31.310119Z",
     "iopub.status.idle": "2023-04-16T14:31:40.528919Z",
     "shell.execute_reply": "2023-04-16T14:31:40.528339Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 15.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:40.532147Z",
     "iopub.status.busy": "2023-04-16T14:31:40.531632Z",
     "iopub.status.idle": "2023-04-16T14:31:40.534752Z",
     "shell.execute_reply": "2023-04-16T14:31:40.534111Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:40.537652Z",
     "iopub.status.busy": "2023-04-16T14:31:40.537323Z",
     "iopub.status.idle": "2023-04-16T14:31:51.933955Z",
     "shell.execute_reply": "2023-04-16T14:31:51.933247Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 637 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:31:51.938452Z",
     "iopub.status.busy": "2023-04-16T14:31:51.937148Z",
     "iopub.status.idle": "2023-04-16T14:32:03.401313Z",
     "shell.execute_reply": "2023-04-16T14:32:03.400612Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 356 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:03.405030Z",
     "iopub.status.busy": "2023-04-16T14:32:03.404797Z",
     "iopub.status.idle": "2023-04-16T14:32:03.409376Z",
     "shell.execute_reply": "2023-04-16T14:32:03.408478Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:03.412500Z",
     "iopub.status.busy": "2023-04-16T14:32:03.412171Z",
     "iopub.status.idle": "2023-04-16T14:32:03.421593Z",
     "shell.execute_reply": "2023-04-16T14:32:03.420655Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbb61027dc0>\n",
       "├── 'a' --> tensor([[[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]],\n",
       "│           \n",
       "│                   [[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]],\n",
       "│           \n",
       "│                   [[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]],\n",
       "│           \n",
       "│                   [[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]],\n",
       "│           \n",
       "│                   [[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]],\n",
       "│           \n",
       "│                   [[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]],\n",
       "│           \n",
       "│                   [[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]],\n",
       "│           \n",
       "│                   [[ 0.1035,  1.2062,  0.8620],\n",
       "│                    [ 0.1784,  1.1038, -0.8772]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbb610279a0>\n",
       "    └── 'c' --> tensor([[[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "                \n",
       "                        [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "                \n",
       "                        [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "                \n",
       "                        [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "                \n",
       "                        [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "                \n",
       "                        [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "                \n",
       "                        [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "                \n",
       "                        [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                         [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                         [ 1.1909,  0.5739, -0.6907,  1.9536]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:03.424549Z",
     "iopub.status.busy": "2023-04-16T14:32:03.424216Z",
     "iopub.status.idle": "2023-04-16T14:32:06.058951Z",
     "shell.execute_reply": "2023-04-16T14:32:06.057821Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 39.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:06.062478Z",
     "iopub.status.busy": "2023-04-16T14:32:06.062115Z",
     "iopub.status.idle": "2023-04-16T14:32:06.071475Z",
     "shell.execute_reply": "2023-04-16T14:32:06.070500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbb610279d0>\n",
       "├── 'a' --> tensor([[ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772],\n",
       "│                   [ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772],\n",
       "│                   [ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772],\n",
       "│                   [ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772],\n",
       "│                   [ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772],\n",
       "│                   [ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772],\n",
       "│                   [ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772],\n",
       "│                   [ 0.1035,  1.2062,  0.8620],\n",
       "│                   [ 0.1784,  1.1038, -0.8772]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbc2ca63460>\n",
       "    └── 'c' --> tensor([[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                        [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                        [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                        [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                        [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                        [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                        [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                        [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                        [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                        [ 1.1909,  0.5739, -0.6907,  1.9536]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:06.074177Z",
     "iopub.status.busy": "2023-04-16T14:32:06.073838Z",
     "iopub.status.idle": "2023-04-16T14:32:08.576577Z",
     "shell.execute_reply": "2023-04-16T14:32:08.575838Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.8 µs ± 39.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:08.579760Z",
     "iopub.status.busy": "2023-04-16T14:32:08.579157Z",
     "iopub.status.idle": "2023-04-16T14:32:14.000144Z",
     "shell.execute_reply": "2023-04-16T14:32:13.999486Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.7 µs ± 52.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:14.003157Z",
     "iopub.status.busy": "2023-04-16T14:32:14.002795Z",
     "iopub.status.idle": "2023-04-16T14:32:14.010185Z",
     "shell.execute_reply": "2023-04-16T14:32:14.009574Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "              \n",
       "                      [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "              \n",
       "                      [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "              \n",
       "                      [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "              \n",
       "                      [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "              \n",
       "                      [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "              \n",
       "                      [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]],\n",
       "              \n",
       "                      [[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                       [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                       [ 1.1909,  0.5739, -0.6907,  1.9536]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]],\n",
       "       \n",
       "               [[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]],\n",
       "       \n",
       "               [[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]],\n",
       "       \n",
       "               [[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]],\n",
       "       \n",
       "               [[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]],\n",
       "       \n",
       "               [[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]],\n",
       "       \n",
       "               [[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]],\n",
       "       \n",
       "               [[ 0.1035,  1.2062,  0.8620],\n",
       "                [ 0.1784,  1.1038, -0.8772]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:14.013139Z",
     "iopub.status.busy": "2023-04-16T14:32:14.012571Z",
     "iopub.status.idle": "2023-04-16T14:32:20.386617Z",
     "shell.execute_reply": "2023-04-16T14:32:20.386048Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.5 µs ± 125 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:20.389697Z",
     "iopub.status.busy": "2023-04-16T14:32:20.389342Z",
     "iopub.status.idle": "2023-04-16T14:32:20.396336Z",
     "shell.execute_reply": "2023-04-16T14:32:20.395712Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                      [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                      [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                      [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                      [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                      [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                      [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536],\n",
       "                      [-1.2846, -1.4154,  0.0169,  0.2447],\n",
       "                      [ 0.8785, -2.0157, -0.2295,  0.8163],\n",
       "                      [ 1.1909,  0.5739, -0.6907,  1.9536]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772],\n",
       "               [ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772],\n",
       "               [ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772],\n",
       "               [ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772],\n",
       "               [ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772],\n",
       "               [ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772],\n",
       "               [ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772],\n",
       "               [ 0.1035,  1.2062,  0.8620],\n",
       "               [ 0.1784,  1.1038, -0.8772]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:20.399005Z",
     "iopub.status.busy": "2023-04-16T14:32:20.398670Z",
     "iopub.status.idle": "2023-04-16T14:32:32.378927Z",
     "shell.execute_reply": "2023-04-16T14:32:32.378239Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148 µs ± 334 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:32:32.382052Z",
     "iopub.status.busy": "2023-04-16T14:32:32.381527Z",
     "iopub.status.idle": "2023-04-16T14:32:34.999748Z",
     "shell.execute_reply": "2023-04-16T14:32:34.999176Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "322 µs ± 12.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
