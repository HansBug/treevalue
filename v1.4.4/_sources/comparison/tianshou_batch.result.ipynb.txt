{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:07.751396Z",
     "iopub.status.busy": "2023-02-27T12:52:07.751187Z",
     "iopub.status.idle": "2023-02-27T12:52:08.654382Z",
     "shell.execute_reply": "2023-02-27T12:52:08.653717Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:08.657746Z",
     "iopub.status.busy": "2023-02-27T12:52:08.657096Z",
     "iopub.status.idle": "2023-02-27T12:52:08.689631Z",
     "shell.execute_reply": "2023-02-27T12:52:08.689048Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:08.692616Z",
     "iopub.status.busy": "2023-02-27T12:52:08.692279Z",
     "iopub.status.idle": "2023-02-27T12:52:08.701529Z",
     "shell.execute_reply": "2023-02-27T12:52:08.700957Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f77ec6d7b80>\n",
       "├── 'a' --> tensor([[-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102]])\n",
       "└── 'x' --> <FastTreeValue 0x7f77ec6d79a0>\n",
       "    └── 'c' --> tensor([[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:08.704265Z",
     "iopub.status.busy": "2023-02-27T12:52:08.703946Z",
     "iopub.status.idle": "2023-02-27T12:52:08.709399Z",
     "shell.execute_reply": "2023-02-27T12:52:08.708841Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1513, -0.3005, -1.0893],\n",
       "        [-1.0130, -0.3672,  0.0102]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:08.712044Z",
     "iopub.status.busy": "2023-02-27T12:52:08.711712Z",
     "iopub.status.idle": "2023-02-27T12:52:14.077085Z",
     "shell.execute_reply": "2023-02-27T12:52:14.076336Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.1 ns ± 0.0463 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:14.080335Z",
     "iopub.status.busy": "2023-02-27T12:52:14.079741Z",
     "iopub.status.idle": "2023-02-27T12:52:14.086422Z",
     "shell.execute_reply": "2023-02-27T12:52:14.085849Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f77ec6d7b80>\n",
       "├── 'a' --> tensor([[ 0.3248, -1.2301, -0.7226],\n",
       "│                   [-1.2188,  2.2803,  2.0032]])\n",
       "└── 'x' --> <FastTreeValue 0x7f77ec6d79a0>\n",
       "    └── 'c' --> tensor([[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:14.089110Z",
     "iopub.status.busy": "2023-02-27T12:52:14.088615Z",
     "iopub.status.idle": "2023-02-27T12:52:19.116505Z",
     "shell.execute_reply": "2023-02-27T12:52:19.115772Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.9 ns ± 0.0838 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:19.119367Z",
     "iopub.status.busy": "2023-02-27T12:52:19.119016Z",
     "iopub.status.idle": "2023-02-27T12:52:19.449606Z",
     "shell.execute_reply": "2023-02-27T12:52:19.448926Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:19.453128Z",
     "iopub.status.busy": "2023-02-27T12:52:19.452578Z",
     "iopub.status.idle": "2023-02-27T12:52:19.458037Z",
     "shell.execute_reply": "2023-02-27T12:52:19.457395Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:19.460614Z",
     "iopub.status.busy": "2023-02-27T12:52:19.460269Z",
     "iopub.status.idle": "2023-02-27T12:52:19.466350Z",
     "shell.execute_reply": "2023-02-27T12:52:19.465762Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1513, -0.3005, -1.0893],\n",
       "        [-1.0130, -0.3672,  0.0102]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:19.469205Z",
     "iopub.status.busy": "2023-02-27T12:52:19.468744Z",
     "iopub.status.idle": "2023-02-27T12:52:23.803093Z",
     "shell.execute_reply": "2023-02-27T12:52:23.802417Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53.4 ns ± 0.0444 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:23.806326Z",
     "iopub.status.busy": "2023-02-27T12:52:23.805740Z",
     "iopub.status.idle": "2023-02-27T12:52:23.812288Z",
     "shell.execute_reply": "2023-02-27T12:52:23.811707Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.2425, -0.7949,  1.0973],\n",
       "               [ 1.4375,  0.0683,  0.0604]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:23.815012Z",
     "iopub.status.busy": "2023-02-27T12:52:23.814685Z",
     "iopub.status.idle": "2023-02-27T12:52:27.687578Z",
     "shell.execute_reply": "2023-02-27T12:52:27.686861Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "477 ns ± 0.124 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:27.690931Z",
     "iopub.status.busy": "2023-02-27T12:52:27.690435Z",
     "iopub.status.idle": "2023-02-27T12:52:34.711057Z",
     "shell.execute_reply": "2023-02-27T12:52:34.710199Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "865 ns ± 4.88 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:34.714342Z",
     "iopub.status.busy": "2023-02-27T12:52:34.713815Z",
     "iopub.status.idle": "2023-02-27T12:52:43.904181Z",
     "shell.execute_reply": "2023-02-27T12:52:43.903352Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 50 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:43.907479Z",
     "iopub.status.busy": "2023-02-27T12:52:43.906956Z",
     "iopub.status.idle": "2023-02-27T12:52:43.910471Z",
     "shell.execute_reply": "2023-02-27T12:52:43.909919Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:43.912965Z",
     "iopub.status.busy": "2023-02-27T12:52:43.912629Z",
     "iopub.status.idle": "2023-02-27T12:52:55.122914Z",
     "shell.execute_reply": "2023-02-27T12:52:55.122335Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 627 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:52:55.127062Z",
     "iopub.status.busy": "2023-02-27T12:52:55.126067Z",
     "iopub.status.idle": "2023-02-27T12:53:06.420613Z",
     "shell.execute_reply": "2023-02-27T12:53:06.420041Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 244 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:06.424370Z",
     "iopub.status.busy": "2023-02-27T12:53:06.423540Z",
     "iopub.status.idle": "2023-02-27T12:53:06.427769Z",
     "shell.execute_reply": "2023-02-27T12:53:06.427187Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:06.430403Z",
     "iopub.status.busy": "2023-02-27T12:53:06.429881Z",
     "iopub.status.idle": "2023-02-27T12:53:06.436921Z",
     "shell.execute_reply": "2023-02-27T12:53:06.436281Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f77424134f0>\n",
       "├── 'a' --> tensor([[[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]],\n",
       "│           \n",
       "│                   [[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]],\n",
       "│           \n",
       "│                   [[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]],\n",
       "│           \n",
       "│                   [[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]],\n",
       "│           \n",
       "│                   [[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]],\n",
       "│           \n",
       "│                   [[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]],\n",
       "│           \n",
       "│                   [[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]],\n",
       "│           \n",
       "│                   [[-0.1513, -0.3005, -1.0893],\n",
       "│                    [-1.0130, -0.3672,  0.0102]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7742413fa0>\n",
       "    └── 'c' --> tensor([[[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "                \n",
       "                        [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "                \n",
       "                        [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "                \n",
       "                        [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "                \n",
       "                        [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "                \n",
       "                        [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "                \n",
       "                        [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "                \n",
       "                        [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                         [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                         [-2.0638, -2.7183,  1.5431,  0.8882]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:06.439286Z",
     "iopub.status.busy": "2023-02-27T12:53:06.438954Z",
     "iopub.status.idle": "2023-02-27T12:53:09.127950Z",
     "shell.execute_reply": "2023-02-27T12:53:09.127219Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.1 µs ± 24.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:09.131246Z",
     "iopub.status.busy": "2023-02-27T12:53:09.130733Z",
     "iopub.status.idle": "2023-02-27T12:53:09.137786Z",
     "shell.execute_reply": "2023-02-27T12:53:09.137160Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7742413fd0>\n",
       "├── 'a' --> tensor([[-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102],\n",
       "│                   [-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102],\n",
       "│                   [-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102],\n",
       "│                   [-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102],\n",
       "│                   [-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102],\n",
       "│                   [-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102],\n",
       "│                   [-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102],\n",
       "│                   [-0.1513, -0.3005, -1.0893],\n",
       "│                   [-1.0130, -0.3672,  0.0102]])\n",
       "└── 'x' --> <FastTreeValue 0x7f774926a970>\n",
       "    └── 'c' --> tensor([[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                        [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                        [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                        [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                        [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                        [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                        [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                        [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                        [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                        [-2.0638, -2.7183,  1.5431,  0.8882]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:09.140206Z",
     "iopub.status.busy": "2023-02-27T12:53:09.139877Z",
     "iopub.status.idle": "2023-02-27T12:53:11.663768Z",
     "shell.execute_reply": "2023-02-27T12:53:11.663031Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.1 µs ± 88 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:11.666730Z",
     "iopub.status.busy": "2023-02-27T12:53:11.666118Z",
     "iopub.status.idle": "2023-02-27T12:53:16.250246Z",
     "shell.execute_reply": "2023-02-27T12:53:16.249583Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.3 µs ± 68.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:16.253024Z",
     "iopub.status.busy": "2023-02-27T12:53:16.252660Z",
     "iopub.status.idle": "2023-02-27T12:53:16.260025Z",
     "shell.execute_reply": "2023-02-27T12:53:16.259396Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]],\n",
       "       \n",
       "               [[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]],\n",
       "       \n",
       "               [[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]],\n",
       "       \n",
       "               [[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]],\n",
       "       \n",
       "               [[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]],\n",
       "       \n",
       "               [[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]],\n",
       "       \n",
       "               [[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]],\n",
       "       \n",
       "               [[-0.1513, -0.3005, -1.0893],\n",
       "                [-1.0130, -0.3672,  0.0102]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "              \n",
       "                      [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "              \n",
       "                      [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "              \n",
       "                      [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "              \n",
       "                      [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "              \n",
       "                      [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "              \n",
       "                      [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]],\n",
       "              \n",
       "                      [[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                       [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                       [-2.0638, -2.7183,  1.5431,  0.8882]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:16.262543Z",
     "iopub.status.busy": "2023-02-27T12:53:16.262197Z",
     "iopub.status.idle": "2023-02-27T12:53:22.662384Z",
     "shell.execute_reply": "2023-02-27T12:53:22.661665Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.8 µs ± 153 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:22.665611Z",
     "iopub.status.busy": "2023-02-27T12:53:22.665090Z",
     "iopub.status.idle": "2023-02-27T12:53:22.672507Z",
     "shell.execute_reply": "2023-02-27T12:53:22.671916Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102],\n",
       "               [-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102],\n",
       "               [-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102],\n",
       "               [-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102],\n",
       "               [-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102],\n",
       "               [-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102],\n",
       "               [-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102],\n",
       "               [-0.1513, -0.3005, -1.0893],\n",
       "               [-1.0130, -0.3672,  0.0102]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                      [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                      [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                      [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                      [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                      [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                      [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882],\n",
       "                      [-0.5801,  0.8463, -0.2808,  0.3825],\n",
       "                      [ 0.1088, -0.9967, -1.6114,  1.3708],\n",
       "                      [-2.0638, -2.7183,  1.5431,  0.8882]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:22.674962Z",
     "iopub.status.busy": "2023-02-27T12:53:22.674620Z",
     "iopub.status.idle": "2023-02-27T12:53:34.392010Z",
     "shell.execute_reply": "2023-02-27T12:53:34.391298Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 292 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:53:34.395279Z",
     "iopub.status.busy": "2023-02-27T12:53:34.394748Z",
     "iopub.status.idle": "2023-02-27T12:53:36.888809Z",
     "shell.execute_reply": "2023-02-27T12:53:36.888121Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "307 µs ± 2.94 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
