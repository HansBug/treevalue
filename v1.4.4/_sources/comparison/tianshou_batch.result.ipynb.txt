{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:20.672781Z",
     "iopub.status.busy": "2023-02-27T11:46:20.672314Z",
     "iopub.status.idle": "2023-02-27T11:46:21.607458Z",
     "shell.execute_reply": "2023-02-27T11:46:21.606780Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:21.610609Z",
     "iopub.status.busy": "2023-02-27T11:46:21.610317Z",
     "iopub.status.idle": "2023-02-27T11:46:21.645641Z",
     "shell.execute_reply": "2023-02-27T11:46:21.644991Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:21.648664Z",
     "iopub.status.busy": "2023-02-27T11:46:21.648318Z",
     "iopub.status.idle": "2023-02-27T11:46:21.657708Z",
     "shell.execute_reply": "2023-02-27T11:46:21.657125Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0b0c579f70>\n",
       "├── 'a' --> tensor([[ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0b0c513130>\n",
       "    └── 'c' --> tensor([[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:21.660660Z",
     "iopub.status.busy": "2023-02-27T11:46:21.660141Z",
     "iopub.status.idle": "2023-02-27T11:46:21.665832Z",
     "shell.execute_reply": "2023-02-27T11:46:21.665272Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5862,  0.4277,  0.2169],\n",
       "        [-0.2527, -1.0134,  2.3659]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:21.668558Z",
     "iopub.status.busy": "2023-02-27T11:46:21.668229Z",
     "iopub.status.idle": "2023-02-27T11:46:27.088531Z",
     "shell.execute_reply": "2023-02-27T11:46:27.087814Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67 ns ± 0.0423 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:27.091306Z",
     "iopub.status.busy": "2023-02-27T11:46:27.090955Z",
     "iopub.status.idle": "2023-02-27T11:46:27.097623Z",
     "shell.execute_reply": "2023-02-27T11:46:27.097025Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0b0c579f70>\n",
       "├── 'a' --> tensor([[-0.3773,  0.4522, -0.0147],\n",
       "│                   [-0.7168,  0.5549,  0.3681]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0b0c513130>\n",
       "    └── 'c' --> tensor([[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:27.100095Z",
     "iopub.status.busy": "2023-02-27T11:46:27.099754Z",
     "iopub.status.idle": "2023-02-27T11:46:32.806609Z",
     "shell.execute_reply": "2023-02-27T11:46:32.805804Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.5 ns ± 0.0587 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:32.809712Z",
     "iopub.status.busy": "2023-02-27T11:46:32.809169Z",
     "iopub.status.idle": "2023-02-27T11:46:33.154194Z",
     "shell.execute_reply": "2023-02-27T11:46:33.153450Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:33.158098Z",
     "iopub.status.busy": "2023-02-27T11:46:33.157298Z",
     "iopub.status.idle": "2023-02-27T11:46:33.163752Z",
     "shell.execute_reply": "2023-02-27T11:46:33.163059Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:33.166418Z",
     "iopub.status.busy": "2023-02-27T11:46:33.166171Z",
     "iopub.status.idle": "2023-02-27T11:46:33.172746Z",
     "shell.execute_reply": "2023-02-27T11:46:33.172137Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5862,  0.4277,  0.2169],\n",
       "        [-0.2527, -1.0134,  2.3659]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:33.175501Z",
     "iopub.status.busy": "2023-02-27T11:46:33.175264Z",
     "iopub.status.idle": "2023-02-27T11:46:37.647111Z",
     "shell.execute_reply": "2023-02-27T11:46:37.646392Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.4 ns ± 0.0215 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:37.650366Z",
     "iopub.status.busy": "2023-02-27T11:46:37.649795Z",
     "iopub.status.idle": "2023-02-27T11:46:37.656270Z",
     "shell.execute_reply": "2023-02-27T11:46:37.655695Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7279, -0.2912, -0.1595],\n",
       "               [-1.4911, -0.5103, -1.6833]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:37.658535Z",
     "iopub.status.busy": "2023-02-27T11:46:37.658334Z",
     "iopub.status.idle": "2023-02-27T11:46:41.570379Z",
     "shell.execute_reply": "2023-02-27T11:46:41.569635Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "481 ns ± 0.274 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:41.573482Z",
     "iopub.status.busy": "2023-02-27T11:46:41.572941Z",
     "iopub.status.idle": "2023-02-27T11:46:48.405904Z",
     "shell.execute_reply": "2023-02-27T11:46:48.405199Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "841 ns ± 0.198 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:48.408917Z",
     "iopub.status.busy": "2023-02-27T11:46:48.408544Z",
     "iopub.status.idle": "2023-02-27T11:46:57.641404Z",
     "shell.execute_reply": "2023-02-27T11:46:57.640606Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 32.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:57.644606Z",
     "iopub.status.busy": "2023-02-27T11:46:57.643978Z",
     "iopub.status.idle": "2023-02-27T11:46:57.647657Z",
     "shell.execute_reply": "2023-02-27T11:46:57.647069Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:46:57.650153Z",
     "iopub.status.busy": "2023-02-27T11:46:57.649818Z",
     "iopub.status.idle": "2023-02-27T11:47:08.779339Z",
     "shell.execute_reply": "2023-02-27T11:47:08.778745Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 442 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:08.783300Z",
     "iopub.status.busy": "2023-02-27T11:47:08.782318Z",
     "iopub.status.idle": "2023-02-27T11:47:20.235697Z",
     "shell.execute_reply": "2023-02-27T11:47:20.235137Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 5.68 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:20.239398Z",
     "iopub.status.busy": "2023-02-27T11:47:20.238871Z",
     "iopub.status.idle": "2023-02-27T11:47:20.243468Z",
     "shell.execute_reply": "2023-02-27T11:47:20.242911Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:20.247416Z",
     "iopub.status.busy": "2023-02-27T11:47:20.246203Z",
     "iopub.status.idle": "2023-02-27T11:47:20.255725Z",
     "shell.execute_reply": "2023-02-27T11:47:20.255164Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0a61218e50>\n",
       "├── 'a' --> tensor([[[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]],\n",
       "│           \n",
       "│                   [[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]],\n",
       "│           \n",
       "│                   [[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]],\n",
       "│           \n",
       "│                   [[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]],\n",
       "│           \n",
       "│                   [[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]],\n",
       "│           \n",
       "│                   [[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]],\n",
       "│           \n",
       "│                   [[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]],\n",
       "│           \n",
       "│                   [[ 0.5862,  0.4277,  0.2169],\n",
       "│                    [-0.2527, -1.0134,  2.3659]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0b0c58df70>\n",
       "    └── 'c' --> tensor([[[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "                \n",
       "                        [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "                \n",
       "                        [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "                \n",
       "                        [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "                \n",
       "                        [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "                \n",
       "                        [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "                \n",
       "                        [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "                \n",
       "                        [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                         [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                         [ 0.3241,  1.5688, -0.6366,  1.2889]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:20.259623Z",
     "iopub.status.busy": "2023-02-27T11:47:20.258428Z",
     "iopub.status.idle": "2023-02-27T11:47:22.848188Z",
     "shell.execute_reply": "2023-02-27T11:47:22.847314Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.9 µs ± 51.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:22.851330Z",
     "iopub.status.busy": "2023-02-27T11:47:22.850863Z",
     "iopub.status.idle": "2023-02-27T11:47:22.858791Z",
     "shell.execute_reply": "2023-02-27T11:47:22.858172Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0a611fca30>\n",
       "├── 'a' --> tensor([[ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659],\n",
       "│                   [ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659],\n",
       "│                   [ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659],\n",
       "│                   [ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659],\n",
       "│                   [ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659],\n",
       "│                   [ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659],\n",
       "│                   [ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659],\n",
       "│                   [ 0.5862,  0.4277,  0.2169],\n",
       "│                   [-0.2527, -1.0134,  2.3659]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0a611fc2b0>\n",
       "    └── 'c' --> tensor([[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                        [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                        [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                        [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                        [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                        [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                        [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                        [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                        [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                        [ 0.3241,  1.5688, -0.6366,  1.2889]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:22.861482Z",
     "iopub.status.busy": "2023-02-27T11:47:22.861134Z",
     "iopub.status.idle": "2023-02-27T11:47:25.279883Z",
     "shell.execute_reply": "2023-02-27T11:47:25.279116Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.7 µs ± 134 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:25.283014Z",
     "iopub.status.busy": "2023-02-27T11:47:25.282439Z",
     "iopub.status.idle": "2023-02-27T11:47:29.904090Z",
     "shell.execute_reply": "2023-02-27T11:47:29.903360Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.7 µs ± 46.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:29.907253Z",
     "iopub.status.busy": "2023-02-27T11:47:29.906898Z",
     "iopub.status.idle": "2023-02-27T11:47:29.914902Z",
     "shell.execute_reply": "2023-02-27T11:47:29.914340Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "              \n",
       "                      [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "              \n",
       "                      [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "              \n",
       "                      [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "              \n",
       "                      [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "              \n",
       "                      [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "              \n",
       "                      [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]],\n",
       "              \n",
       "                      [[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                       [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                       [ 0.3241,  1.5688, -0.6366,  1.2889]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]],\n",
       "       \n",
       "               [[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]],\n",
       "       \n",
       "               [[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]],\n",
       "       \n",
       "               [[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]],\n",
       "       \n",
       "               [[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]],\n",
       "       \n",
       "               [[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]],\n",
       "       \n",
       "               [[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]],\n",
       "       \n",
       "               [[ 0.5862,  0.4277,  0.2169],\n",
       "                [-0.2527, -1.0134,  2.3659]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:29.917737Z",
     "iopub.status.busy": "2023-02-27T11:47:29.917263Z",
     "iopub.status.idle": "2023-02-27T11:47:36.211073Z",
     "shell.execute_reply": "2023-02-27T11:47:36.210323Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.4 µs ± 100 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:36.214165Z",
     "iopub.status.busy": "2023-02-27T11:47:36.213608Z",
     "iopub.status.idle": "2023-02-27T11:47:36.222549Z",
     "shell.execute_reply": "2023-02-27T11:47:36.221940Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                      [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                      [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                      [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                      [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                      [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                      [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889],\n",
       "                      [ 1.2291,  1.2786,  0.3704, -1.8820],\n",
       "                      [ 0.8335,  0.3351, -0.8345, -0.3564],\n",
       "                      [ 0.3241,  1.5688, -0.6366,  1.2889]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659],\n",
       "               [ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659],\n",
       "               [ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659],\n",
       "               [ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659],\n",
       "               [ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659],\n",
       "               [ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659],\n",
       "               [ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659],\n",
       "               [ 0.5862,  0.4277,  0.2169],\n",
       "               [-0.2527, -1.0134,  2.3659]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:36.226854Z",
     "iopub.status.busy": "2023-02-27T11:47:36.225292Z",
     "iopub.status.idle": "2023-02-27T11:47:47.889155Z",
     "shell.execute_reply": "2023-02-27T11:47:47.888369Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 187 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:47:47.892224Z",
     "iopub.status.busy": "2023-02-27T11:47:47.891602Z",
     "iopub.status.idle": "2023-02-27T11:47:50.423528Z",
     "shell.execute_reply": "2023-02-27T11:47:50.422916Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "311 µs ± 8.24 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
