{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:12.531835Z",
     "iopub.status.busy": "2023-02-12T17:28:12.531295Z",
     "iopub.status.idle": "2023-02-12T17:28:13.425718Z",
     "shell.execute_reply": "2023-02-12T17:28:13.425062Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:13.428752Z",
     "iopub.status.busy": "2023-02-12T17:28:13.428459Z",
     "iopub.status.idle": "2023-02-12T17:28:13.460916Z",
     "shell.execute_reply": "2023-02-12T17:28:13.460312Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:13.463757Z",
     "iopub.status.busy": "2023-02-12T17:28:13.463234Z",
     "iopub.status.idle": "2023-02-12T17:28:13.472902Z",
     "shell.execute_reply": "2023-02-12T17:28:13.472309Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0edae08d30>\n",
       "├── 'a' --> tensor([[ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0edae08a30>\n",
       "    └── 'c' --> tensor([[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:13.475416Z",
     "iopub.status.busy": "2023-02-12T17:28:13.475072Z",
     "iopub.status.idle": "2023-02-12T17:28:13.479731Z",
     "shell.execute_reply": "2023-02-12T17:28:13.479123Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3096, -0.9207, -1.7093],\n",
       "        [ 1.9448,  0.3903,  0.2436]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:13.482378Z",
     "iopub.status.busy": "2023-02-12T17:28:13.482038Z",
     "iopub.status.idle": "2023-02-12T17:28:18.672942Z",
     "shell.execute_reply": "2023-02-12T17:28:18.672167Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 ns ± 0.0508 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:18.675775Z",
     "iopub.status.busy": "2023-02-12T17:28:18.675408Z",
     "iopub.status.idle": "2023-02-12T17:28:18.682001Z",
     "shell.execute_reply": "2023-02-12T17:28:18.681326Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0edae08d30>\n",
       "├── 'a' --> tensor([[-1.1852,  0.2157, -0.8025],\n",
       "│                   [-0.0460, -1.1407,  0.0466]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0edae08a30>\n",
       "    └── 'c' --> tensor([[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:18.684653Z",
     "iopub.status.busy": "2023-02-12T17:28:18.684304Z",
     "iopub.status.idle": "2023-02-12T17:28:23.602962Z",
     "shell.execute_reply": "2023-02-12T17:28:23.602252Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.6 ns ± 0.0101 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:23.605975Z",
     "iopub.status.busy": "2023-02-12T17:28:23.605623Z",
     "iopub.status.idle": "2023-02-12T17:28:23.929074Z",
     "shell.execute_reply": "2023-02-12T17:28:23.927397Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:23.932685Z",
     "iopub.status.busy": "2023-02-12T17:28:23.932060Z",
     "iopub.status.idle": "2023-02-12T17:28:23.938716Z",
     "shell.execute_reply": "2023-02-12T17:28:23.937559Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:23.941230Z",
     "iopub.status.busy": "2023-02-12T17:28:23.940882Z",
     "iopub.status.idle": "2023-02-12T17:28:23.946544Z",
     "shell.execute_reply": "2023-02-12T17:28:23.945958Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3096, -0.9207, -1.7093],\n",
       "        [ 1.9448,  0.3903,  0.2436]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:23.949034Z",
     "iopub.status.busy": "2023-02-12T17:28:23.948702Z",
     "iopub.status.idle": "2023-02-12T17:28:28.536296Z",
     "shell.execute_reply": "2023-02-12T17:28:28.535538Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57 ns ± 0.0677 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:28.539069Z",
     "iopub.status.busy": "2023-02-12T17:28:28.538729Z",
     "iopub.status.idle": "2023-02-12T17:28:28.545159Z",
     "shell.execute_reply": "2023-02-12T17:28:28.544582Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0643, -1.0075, -0.3856],\n",
       "               [ 0.6273, -0.0457, -1.2835]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:28.547593Z",
     "iopub.status.busy": "2023-02-12T17:28:28.547246Z",
     "iopub.status.idle": "2023-02-12T17:28:32.412559Z",
     "shell.execute_reply": "2023-02-12T17:28:32.411828Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "476 ns ± 0.137 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:32.415947Z",
     "iopub.status.busy": "2023-02-12T17:28:32.415361Z",
     "iopub.status.idle": "2023-02-12T17:28:39.249206Z",
     "shell.execute_reply": "2023-02-12T17:28:39.247916Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "841 ns ± 0.185 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:39.252004Z",
     "iopub.status.busy": "2023-02-12T17:28:39.251635Z",
     "iopub.status.idle": "2023-02-12T17:28:48.515672Z",
     "shell.execute_reply": "2023-02-12T17:28:48.514909Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 29.8 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:48.518802Z",
     "iopub.status.busy": "2023-02-12T17:28:48.518158Z",
     "iopub.status.idle": "2023-02-12T17:28:48.521845Z",
     "shell.execute_reply": "2023-02-12T17:28:48.521270Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:48.524483Z",
     "iopub.status.busy": "2023-02-12T17:28:48.524149Z",
     "iopub.status.idle": "2023-02-12T17:28:59.729968Z",
     "shell.execute_reply": "2023-02-12T17:28:59.729385Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 5.83 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:28:59.733207Z",
     "iopub.status.busy": "2023-02-12T17:28:59.732755Z",
     "iopub.status.idle": "2023-02-12T17:29:10.931843Z",
     "shell.execute_reply": "2023-02-12T17:29:10.931256Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 274 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:10.935803Z",
     "iopub.status.busy": "2023-02-12T17:29:10.934834Z",
     "iopub.status.idle": "2023-02-12T17:29:10.939227Z",
     "shell.execute_reply": "2023-02-12T17:29:10.938626Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:10.941914Z",
     "iopub.status.busy": "2023-02-12T17:29:10.941425Z",
     "iopub.status.idle": "2023-02-12T17:29:10.948865Z",
     "shell.execute_reply": "2023-02-12T17:29:10.948223Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0eb4284b50>\n",
       "├── 'a' --> tensor([[[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]],\n",
       "│           \n",
       "│                   [[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]],\n",
       "│           \n",
       "│                   [[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]],\n",
       "│           \n",
       "│                   [[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]],\n",
       "│           \n",
       "│                   [[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]],\n",
       "│           \n",
       "│                   [[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]],\n",
       "│           \n",
       "│                   [[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]],\n",
       "│           \n",
       "│                   [[ 0.3096, -0.9207, -1.7093],\n",
       "│                    [ 1.9448,  0.3903,  0.2436]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0eb4284c10>\n",
       "    └── 'c' --> tensor([[[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "                \n",
       "                        [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "                \n",
       "                        [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "                \n",
       "                        [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "                \n",
       "                        [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "                \n",
       "                        [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "                \n",
       "                        [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "                \n",
       "                        [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                         [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                         [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:10.951286Z",
     "iopub.status.busy": "2023-02-12T17:29:10.950951Z",
     "iopub.status.idle": "2023-02-12T17:29:13.570631Z",
     "shell.execute_reply": "2023-02-12T17:29:13.569908Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.2 µs ± 57.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:13.573525Z",
     "iopub.status.busy": "2023-02-12T17:29:13.573179Z",
     "iopub.status.idle": "2023-02-12T17:29:13.581934Z",
     "shell.execute_reply": "2023-02-12T17:29:13.580646Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0ed8d29a60>\n",
       "├── 'a' --> tensor([[ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436],\n",
       "│                   [ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436],\n",
       "│                   [ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436],\n",
       "│                   [ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436],\n",
       "│                   [ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436],\n",
       "│                   [ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436],\n",
       "│                   [ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436],\n",
       "│                   [ 0.3096, -0.9207, -1.7093],\n",
       "│                   [ 1.9448,  0.3903,  0.2436]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0eb428bbe0>\n",
       "    └── 'c' --> tensor([[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                        [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                        [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                        [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                        [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                        [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                        [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                        [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                        [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                        [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:13.584680Z",
     "iopub.status.busy": "2023-02-12T17:29:13.584390Z",
     "iopub.status.idle": "2023-02-12T17:29:16.017866Z",
     "shell.execute_reply": "2023-02-12T17:29:16.017159Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.9 µs ± 51.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:16.021185Z",
     "iopub.status.busy": "2023-02-12T17:29:16.020611Z",
     "iopub.status.idle": "2023-02-12T17:29:20.595060Z",
     "shell.execute_reply": "2023-02-12T17:29:20.594392Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.3 µs ± 177 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:20.598153Z",
     "iopub.status.busy": "2023-02-12T17:29:20.597576Z",
     "iopub.status.idle": "2023-02-12T17:29:20.605597Z",
     "shell.execute_reply": "2023-02-12T17:29:20.605011Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "              \n",
       "                      [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "              \n",
       "                      [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "              \n",
       "                      [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "              \n",
       "                      [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "              \n",
       "                      [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "              \n",
       "                      [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]],\n",
       "              \n",
       "                      [[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                       [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                       [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]],\n",
       "       \n",
       "               [[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]],\n",
       "       \n",
       "               [[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]],\n",
       "       \n",
       "               [[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]],\n",
       "       \n",
       "               [[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]],\n",
       "       \n",
       "               [[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]],\n",
       "       \n",
       "               [[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]],\n",
       "       \n",
       "               [[ 0.3096, -0.9207, -1.7093],\n",
       "                [ 1.9448,  0.3903,  0.2436]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:20.608070Z",
     "iopub.status.busy": "2023-02-12T17:29:20.607732Z",
     "iopub.status.idle": "2023-02-12T17:29:26.984338Z",
     "shell.execute_reply": "2023-02-12T17:29:26.983591Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.5 µs ± 148 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:26.987321Z",
     "iopub.status.busy": "2023-02-12T17:29:26.986746Z",
     "iopub.status.idle": "2023-02-12T17:29:26.994332Z",
     "shell.execute_reply": "2023-02-12T17:29:26.993776Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                      [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                      [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                      [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                      [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                      [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                      [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00],\n",
       "                      [-1.7604e-03, -7.1210e-01,  1.2323e+00,  1.8608e+00],\n",
       "                      [-8.1156e-01,  3.5386e-02,  5.1775e-01, -1.0318e+00],\n",
       "                      [ 4.0308e-01, -5.9097e-02,  1.0404e+00,  1.6814e+00]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436],\n",
       "               [ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436],\n",
       "               [ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436],\n",
       "               [ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436],\n",
       "               [ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436],\n",
       "               [ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436],\n",
       "               [ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436],\n",
       "               [ 0.3096, -0.9207, -1.7093],\n",
       "               [ 1.9448,  0.3903,  0.2436]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:26.996858Z",
     "iopub.status.busy": "2023-02-12T17:29:26.996428Z",
     "iopub.status.idle": "2023-02-12T17:29:38.614698Z",
     "shell.execute_reply": "2023-02-12T17:29:38.613565Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 616 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:29:38.617569Z",
     "iopub.status.busy": "2023-02-12T17:29:38.617215Z",
     "iopub.status.idle": "2023-02-12T17:29:41.170312Z",
     "shell.execute_reply": "2023-02-12T17:29:41.169615Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "314 µs ± 4.25 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
