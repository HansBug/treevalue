{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:31.670233Z",
     "iopub.status.busy": "2023-03-06T17:58:31.669893Z",
     "iopub.status.idle": "2023-03-06T17:58:32.597737Z",
     "shell.execute_reply": "2023-03-06T17:58:32.597042Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:32.601299Z",
     "iopub.status.busy": "2023-03-06T17:58:32.600688Z",
     "iopub.status.idle": "2023-03-06T17:58:32.885277Z",
     "shell.execute_reply": "2023-03-06T17:58:32.884570Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:32.888592Z",
     "iopub.status.busy": "2023-03-06T17:58:32.887978Z",
     "iopub.status.idle": "2023-03-06T17:58:32.897543Z",
     "shell.execute_reply": "2023-03-06T17:58:32.896937Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4768cb0910>\n",
       "├── 'a' --> tensor([[ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4768cb0490>\n",
       "    └── 'c' --> tensor([[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:32.900402Z",
     "iopub.status.busy": "2023-03-06T17:58:32.900055Z",
     "iopub.status.idle": "2023-03-06T17:58:32.906026Z",
     "shell.execute_reply": "2023-03-06T17:58:32.905418Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8514,  1.1174,  2.9507],\n",
       "        [ 0.1847, -0.1599,  0.6873]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:32.908890Z",
     "iopub.status.busy": "2023-03-06T17:58:32.908419Z",
     "iopub.status.idle": "2023-03-06T17:58:37.663648Z",
     "shell.execute_reply": "2023-03-06T17:58:37.662727Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.4 ns ± 0.0845 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:37.666798Z",
     "iopub.status.busy": "2023-03-06T17:58:37.666528Z",
     "iopub.status.idle": "2023-03-06T17:58:37.674407Z",
     "shell.execute_reply": "2023-03-06T17:58:37.673813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4768cb0910>\n",
       "├── 'a' --> tensor([[ 0.1911,  0.3423,  0.3140],\n",
       "│                   [ 0.6817,  0.9405, -0.0683]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4768cb0490>\n",
       "    └── 'c' --> tensor([[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:37.677410Z",
     "iopub.status.busy": "2023-03-06T17:58:37.676918Z",
     "iopub.status.idle": "2023-03-06T17:58:43.181533Z",
     "shell.execute_reply": "2023-03-06T17:58:43.180830Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.9 ns ± 0.0364 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:43.184870Z",
     "iopub.status.busy": "2023-03-06T17:58:43.184332Z",
     "iopub.status.idle": "2023-03-06T17:58:43.520860Z",
     "shell.execute_reply": "2023-03-06T17:58:43.520174Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:43.524518Z",
     "iopub.status.busy": "2023-03-06T17:58:43.523864Z",
     "iopub.status.idle": "2023-03-06T17:58:43.530218Z",
     "shell.execute_reply": "2023-03-06T17:58:43.529609Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:43.533102Z",
     "iopub.status.busy": "2023-03-06T17:58:43.532749Z",
     "iopub.status.idle": "2023-03-06T17:58:43.537781Z",
     "shell.execute_reply": "2023-03-06T17:58:43.537136Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8514,  1.1174,  2.9507],\n",
       "        [ 0.1847, -0.1599,  0.6873]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:43.540819Z",
     "iopub.status.busy": "2023-03-06T17:58:43.540315Z",
     "iopub.status.idle": "2023-03-06T17:58:48.399514Z",
     "shell.execute_reply": "2023-03-06T17:58:48.398846Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.2 ns ± 0.046 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:48.402764Z",
     "iopub.status.busy": "2023-03-06T17:58:48.402142Z",
     "iopub.status.idle": "2023-03-06T17:58:48.408802Z",
     "shell.execute_reply": "2023-03-06T17:58:48.408196Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.8818,  1.3941, -1.7679],\n",
       "               [-0.3585,  0.4254, -0.5029]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:48.411347Z",
     "iopub.status.busy": "2023-03-06T17:58:48.410993Z",
     "iopub.status.idle": "2023-03-06T17:58:52.379692Z",
     "shell.execute_reply": "2023-03-06T17:58:52.378939Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.147 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:52.382726Z",
     "iopub.status.busy": "2023-03-06T17:58:52.382174Z",
     "iopub.status.idle": "2023-03-06T17:58:59.213620Z",
     "shell.execute_reply": "2023-03-06T17:58:59.212865Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "840 ns ± 1.52 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:58:59.216781Z",
     "iopub.status.busy": "2023-03-06T17:58:59.216325Z",
     "iopub.status.idle": "2023-03-06T17:59:08.527708Z",
     "shell.execute_reply": "2023-03-06T17:59:08.526980Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.5 µs ± 34.6 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:08.530914Z",
     "iopub.status.busy": "2023-03-06T17:59:08.530298Z",
     "iopub.status.idle": "2023-03-06T17:59:08.533958Z",
     "shell.execute_reply": "2023-03-06T17:59:08.533356Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:08.536608Z",
     "iopub.status.busy": "2023-03-06T17:59:08.536268Z",
     "iopub.status.idle": "2023-03-06T17:59:19.696500Z",
     "shell.execute_reply": "2023-03-06T17:59:19.695907Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 362 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:19.699856Z",
     "iopub.status.busy": "2023-03-06T17:59:19.699371Z",
     "iopub.status.idle": "2023-03-06T17:59:30.962474Z",
     "shell.execute_reply": "2023-03-06T17:59:30.961871Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 424 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:30.965867Z",
     "iopub.status.busy": "2023-03-06T17:59:30.965262Z",
     "iopub.status.idle": "2023-03-06T17:59:30.969768Z",
     "shell.execute_reply": "2023-03-06T17:59:30.969141Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:30.972460Z",
     "iopub.status.busy": "2023-03-06T17:59:30.972113Z",
     "iopub.status.idle": "2023-03-06T17:59:30.980096Z",
     "shell.execute_reply": "2023-03-06T17:59:30.979511Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f46aeeb3130>\n",
       "├── 'a' --> tensor([[[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]],\n",
       "│           \n",
       "│                   [[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]],\n",
       "│           \n",
       "│                   [[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]],\n",
       "│           \n",
       "│                   [[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]],\n",
       "│           \n",
       "│                   [[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]],\n",
       "│           \n",
       "│                   [[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]],\n",
       "│           \n",
       "│                   [[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]],\n",
       "│           \n",
       "│                   [[ 0.8514,  1.1174,  2.9507],\n",
       "│                    [ 0.1847, -0.1599,  0.6873]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f46c057c310>\n",
       "    └── 'c' --> tensor([[[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "                \n",
       "                        [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "                \n",
       "                        [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "                \n",
       "                        [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "                \n",
       "                        [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "                \n",
       "                        [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "                \n",
       "                        [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "                \n",
       "                        [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                         [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                         [ 0.4835, -1.2793,  1.1690, -0.3093]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:30.982518Z",
     "iopub.status.busy": "2023-03-06T17:59:30.982169Z",
     "iopub.status.idle": "2023-03-06T17:59:33.588897Z",
     "shell.execute_reply": "2023-03-06T17:59:33.588170Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 63.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:33.592186Z",
     "iopub.status.busy": "2023-03-06T17:59:33.591616Z",
     "iopub.status.idle": "2023-03-06T17:59:33.600483Z",
     "shell.execute_reply": "2023-03-06T17:59:33.599897Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f46aeeb3eb0>\n",
       "├── 'a' --> tensor([[ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873],\n",
       "│                   [ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873],\n",
       "│                   [ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873],\n",
       "│                   [ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873],\n",
       "│                   [ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873],\n",
       "│                   [ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873],\n",
       "│                   [ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873],\n",
       "│                   [ 0.8514,  1.1174,  2.9507],\n",
       "│                   [ 0.1847, -0.1599,  0.6873]])\n",
       "└── 'x' --> <FastTreeValue 0x7f46aee97400>\n",
       "    └── 'c' --> tensor([[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                        [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                        [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                        [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                        [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                        [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                        [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                        [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                        [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                        [ 0.4835, -1.2793,  1.1690, -0.3093]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:33.603878Z",
     "iopub.status.busy": "2023-03-06T17:59:33.602839Z",
     "iopub.status.idle": "2023-03-06T17:59:36.039520Z",
     "shell.execute_reply": "2023-03-06T17:59:36.038840Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 µs ± 83.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:36.042576Z",
     "iopub.status.busy": "2023-03-06T17:59:36.042076Z",
     "iopub.status.idle": "2023-03-06T17:59:40.692049Z",
     "shell.execute_reply": "2023-03-06T17:59:40.691327Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.1 µs ± 179 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:40.695178Z",
     "iopub.status.busy": "2023-03-06T17:59:40.694810Z",
     "iopub.status.idle": "2023-03-06T17:59:40.702695Z",
     "shell.execute_reply": "2023-03-06T17:59:40.702022Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "              \n",
       "                      [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "              \n",
       "                      [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "              \n",
       "                      [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "              \n",
       "                      [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "              \n",
       "                      [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "              \n",
       "                      [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]],\n",
       "              \n",
       "                      [[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                       [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                       [ 0.4835, -1.2793,  1.1690, -0.3093]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]],\n",
       "       \n",
       "               [[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]],\n",
       "       \n",
       "               [[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]],\n",
       "       \n",
       "               [[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]],\n",
       "       \n",
       "               [[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]],\n",
       "       \n",
       "               [[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]],\n",
       "       \n",
       "               [[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]],\n",
       "       \n",
       "               [[ 0.8514,  1.1174,  2.9507],\n",
       "                [ 0.1847, -0.1599,  0.6873]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:40.705305Z",
     "iopub.status.busy": "2023-03-06T17:59:40.704958Z",
     "iopub.status.idle": "2023-03-06T17:59:46.999205Z",
     "shell.execute_reply": "2023-03-06T17:59:46.998449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.5 µs ± 176 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:47.002433Z",
     "iopub.status.busy": "2023-03-06T17:59:47.001835Z",
     "iopub.status.idle": "2023-03-06T17:59:47.009467Z",
     "shell.execute_reply": "2023-03-06T17:59:47.008860Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                      [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                      [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                      [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                      [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                      [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                      [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093],\n",
       "                      [ 0.5873, -1.2800,  1.8497,  1.2178],\n",
       "                      [-0.6430, -1.1469,  1.1182, -0.4121],\n",
       "                      [ 0.4835, -1.2793,  1.1690, -0.3093]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873],\n",
       "               [ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873],\n",
       "               [ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873],\n",
       "               [ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873],\n",
       "               [ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873],\n",
       "               [ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873],\n",
       "               [ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873],\n",
       "               [ 0.8514,  1.1174,  2.9507],\n",
       "               [ 0.1847, -0.1599,  0.6873]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:47.011927Z",
     "iopub.status.busy": "2023-03-06T17:59:47.011579Z",
     "iopub.status.idle": "2023-03-06T17:59:58.667025Z",
     "shell.execute_reply": "2023-03-06T17:59:58.666306Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 171 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:59:58.669905Z",
     "iopub.status.busy": "2023-03-06T17:59:58.669545Z",
     "iopub.status.idle": "2023-03-06T18:00:01.206546Z",
     "shell.execute_reply": "2023-03-06T18:00:01.205816Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 2.57 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
