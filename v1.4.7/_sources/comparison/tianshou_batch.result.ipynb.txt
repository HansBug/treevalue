{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:32.835894Z",
     "iopub.status.busy": "2023-08-14T06:46:32.835605Z",
     "iopub.status.idle": "2023-08-14T06:46:34.207829Z",
     "shell.execute_reply": "2023-08-14T06:46:34.207033Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:34.212394Z",
     "iopub.status.busy": "2023-08-14T06:46:34.211825Z",
     "iopub.status.idle": "2023-08-14T06:46:34.534474Z",
     "shell.execute_reply": "2023-08-14T06:46:34.533681Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:34.538588Z",
     "iopub.status.busy": "2023-08-14T06:46:34.538105Z",
     "iopub.status.idle": "2023-08-14T06:46:34.547274Z",
     "shell.execute_reply": "2023-08-14T06:46:34.546557Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1f04859460>\n",
       "├── 'a' --> tensor([[-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1f048591c0>\n",
       "    └── 'c' --> tensor([[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:34.550878Z",
     "iopub.status.busy": "2023-08-14T06:46:34.550442Z",
     "iopub.status.idle": "2023-08-14T06:46:34.555403Z",
     "shell.execute_reply": "2023-08-14T06:46:34.554679Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.7194,  0.6632,  2.0242],\n",
       "        [-0.9415, -0.1848,  1.6534]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:34.559063Z",
     "iopub.status.busy": "2023-08-14T06:46:34.558525Z",
     "iopub.status.idle": "2023-08-14T06:46:40.723467Z",
     "shell.execute_reply": "2023-08-14T06:46:40.722664Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.9 ns ± 0.0459 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:40.726967Z",
     "iopub.status.busy": "2023-08-14T06:46:40.726483Z",
     "iopub.status.idle": "2023-08-14T06:46:40.732917Z",
     "shell.execute_reply": "2023-08-14T06:46:40.732210Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1f04859460>\n",
       "├── 'a' --> tensor([[-0.4120,  0.7070,  0.2828],\n",
       "│                   [-0.8855, -0.2902, -0.0261]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1f048591c0>\n",
       "    └── 'c' --> tensor([[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:40.736137Z",
     "iopub.status.busy": "2023-08-14T06:46:40.735520Z",
     "iopub.status.idle": "2023-08-14T06:46:47.264521Z",
     "shell.execute_reply": "2023-08-14T06:46:47.263855Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.4 ns ± 0.118 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:47.268087Z",
     "iopub.status.busy": "2023-08-14T06:46:47.267602Z",
     "iopub.status.idle": "2023-08-14T06:46:47.643811Z",
     "shell.execute_reply": "2023-08-14T06:46:47.643034Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:47.647960Z",
     "iopub.status.busy": "2023-08-14T06:46:47.647459Z",
     "iopub.status.idle": "2023-08-14T06:46:47.655991Z",
     "shell.execute_reply": "2023-08-14T06:46:47.655337Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:47.659313Z",
     "iopub.status.busy": "2023-08-14T06:46:47.658751Z",
     "iopub.status.idle": "2023-08-14T06:46:47.663819Z",
     "shell.execute_reply": "2023-08-14T06:46:47.663093Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.7194,  0.6632,  2.0242],\n",
       "        [-0.9415, -0.1848,  1.6534]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:47.667556Z",
     "iopub.status.busy": "2023-08-14T06:46:47.666981Z",
     "iopub.status.idle": "2023-08-14T06:46:52.948465Z",
     "shell.execute_reply": "2023-08-14T06:46:52.947719Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65 ns ± 0.14 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:52.951935Z",
     "iopub.status.busy": "2023-08-14T06:46:52.951434Z",
     "iopub.status.idle": "2023-08-14T06:46:52.957768Z",
     "shell.execute_reply": "2023-08-14T06:46:52.957051Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9475,  0.3726, -1.4400],\n",
       "               [-2.6636,  0.5933,  0.7950]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:52.960952Z",
     "iopub.status.busy": "2023-08-14T06:46:52.960496Z",
     "iopub.status.idle": "2023-08-14T06:46:57.629016Z",
     "shell.execute_reply": "2023-08-14T06:46:57.628256Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "575 ns ± 1.77 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:46:57.632786Z",
     "iopub.status.busy": "2023-08-14T06:46:57.632133Z",
     "iopub.status.idle": "2023-08-14T06:47:04.825013Z",
     "shell.execute_reply": "2023-08-14T06:47:04.824252Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "887 ns ± 0.491 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:04.828823Z",
     "iopub.status.busy": "2023-08-14T06:47:04.828134Z",
     "iopub.status.idle": "2023-08-14T06:47:13.901787Z",
     "shell.execute_reply": "2023-08-14T06:47:13.901044Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 30.8 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:13.905518Z",
     "iopub.status.busy": "2023-08-14T06:47:13.905000Z",
     "iopub.status.idle": "2023-08-14T06:47:13.908545Z",
     "shell.execute_reply": "2023-08-14T06:47:13.907805Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:13.912067Z",
     "iopub.status.busy": "2023-08-14T06:47:13.911698Z",
     "iopub.status.idle": "2023-08-14T06:47:25.540731Z",
     "shell.execute_reply": "2023-08-14T06:47:25.539953Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 1.28 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:25.544447Z",
     "iopub.status.busy": "2023-08-14T06:47:25.543858Z",
     "iopub.status.idle": "2023-08-14T06:47:37.291366Z",
     "shell.execute_reply": "2023-08-14T06:47:37.290543Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 878 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:37.294872Z",
     "iopub.status.busy": "2023-08-14T06:47:37.294462Z",
     "iopub.status.idle": "2023-08-14T06:47:37.299510Z",
     "shell.execute_reply": "2023-08-14T06:47:37.298857Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:37.302704Z",
     "iopub.status.busy": "2023-08-14T06:47:37.302088Z",
     "iopub.status.idle": "2023-08-14T06:47:37.309949Z",
     "shell.execute_reply": "2023-08-14T06:47:37.309251Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1e2a42e700>\n",
       "├── 'a' --> tensor([[[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]],\n",
       "│           \n",
       "│                   [[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]],\n",
       "│           \n",
       "│                   [[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]],\n",
       "│           \n",
       "│                   [[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]],\n",
       "│           \n",
       "│                   [[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]],\n",
       "│           \n",
       "│                   [[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]],\n",
       "│           \n",
       "│                   [[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]],\n",
       "│           \n",
       "│                   [[-1.7194,  0.6632,  2.0242],\n",
       "│                    [-0.9415, -0.1848,  1.6534]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1e3202ffd0>\n",
       "    └── 'c' --> tensor([[[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "                \n",
       "                        [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "                \n",
       "                        [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "                \n",
       "                        [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "                \n",
       "                        [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "                \n",
       "                        [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "                \n",
       "                        [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "                \n",
       "                        [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                         [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                         [-0.4614, -2.2736,  1.8402, -1.2693]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:37.313013Z",
     "iopub.status.busy": "2023-08-14T06:47:37.312651Z",
     "iopub.status.idle": "2023-08-14T06:47:40.032856Z",
     "shell.execute_reply": "2023-08-14T06:47:40.032119Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.4 µs ± 24.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:40.036366Z",
     "iopub.status.busy": "2023-08-14T06:47:40.035850Z",
     "iopub.status.idle": "2023-08-14T06:47:40.043809Z",
     "shell.execute_reply": "2023-08-14T06:47:40.043068Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1e2a0a8fd0>\n",
       "├── 'a' --> tensor([[-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534],\n",
       "│                   [-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534],\n",
       "│                   [-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534],\n",
       "│                   [-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534],\n",
       "│                   [-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534],\n",
       "│                   [-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534],\n",
       "│                   [-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534],\n",
       "│                   [-1.7194,  0.6632,  2.0242],\n",
       "│                   [-0.9415, -0.1848,  1.6534]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1f048595b0>\n",
       "    └── 'c' --> tensor([[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                        [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                        [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                        [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                        [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                        [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                        [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                        [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                        [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                        [-0.4614, -2.2736,  1.8402, -1.2693]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:40.047152Z",
     "iopub.status.busy": "2023-08-14T06:47:40.046608Z",
     "iopub.status.idle": "2023-08-14T06:47:42.578960Z",
     "shell.execute_reply": "2023-08-14T06:47:42.578216Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.1 µs ± 64.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:42.583427Z",
     "iopub.status.busy": "2023-08-14T06:47:42.582023Z",
     "iopub.status.idle": "2023-08-14T06:47:48.127110Z",
     "shell.execute_reply": "2023-08-14T06:47:48.126366Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.2 µs ± 97.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:48.131013Z",
     "iopub.status.busy": "2023-08-14T06:47:48.130352Z",
     "iopub.status.idle": "2023-08-14T06:47:48.138724Z",
     "shell.execute_reply": "2023-08-14T06:47:48.138028Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]],\n",
       "       \n",
       "               [[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]],\n",
       "       \n",
       "               [[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]],\n",
       "       \n",
       "               [[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]],\n",
       "       \n",
       "               [[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]],\n",
       "       \n",
       "               [[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]],\n",
       "       \n",
       "               [[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]],\n",
       "       \n",
       "               [[-1.7194,  0.6632,  2.0242],\n",
       "                [-0.9415, -0.1848,  1.6534]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "              \n",
       "                      [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "              \n",
       "                      [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "              \n",
       "                      [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "              \n",
       "                      [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "              \n",
       "                      [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "              \n",
       "                      [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]],\n",
       "              \n",
       "                      [[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                       [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                       [-0.4614, -2.2736,  1.8402, -1.2693]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:48.141883Z",
     "iopub.status.busy": "2023-08-14T06:47:48.141510Z",
     "iopub.status.idle": "2023-08-14T06:47:54.970299Z",
     "shell.execute_reply": "2023-08-14T06:47:54.969400Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.1 µs ± 195 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:54.973907Z",
     "iopub.status.busy": "2023-08-14T06:47:54.973424Z",
     "iopub.status.idle": "2023-08-14T06:47:54.980786Z",
     "shell.execute_reply": "2023-08-14T06:47:54.980090Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534],\n",
       "               [-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534],\n",
       "               [-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534],\n",
       "               [-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534],\n",
       "               [-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534],\n",
       "               [-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534],\n",
       "               [-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534],\n",
       "               [-1.7194,  0.6632,  2.0242],\n",
       "               [-0.9415, -0.1848,  1.6534]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                      [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                      [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                      [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                      [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                      [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                      [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693],\n",
       "                      [ 0.6495,  1.2800,  1.0320, -0.4778],\n",
       "                      [-0.7640, -0.7569, -0.7914, -0.2461],\n",
       "                      [-0.4614, -2.2736,  1.8402, -1.2693]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:47:54.983979Z",
     "iopub.status.busy": "2023-08-14T06:47:54.983429Z",
     "iopub.status.idle": "2023-08-14T06:48:07.516530Z",
     "shell.execute_reply": "2023-08-14T06:48:07.515789Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "154 µs ± 142 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:48:07.520061Z",
     "iopub.status.busy": "2023-08-14T06:48:07.519538Z",
     "iopub.status.idle": "2023-08-14T06:48:10.425731Z",
     "shell.execute_reply": "2023-08-14T06:48:10.424908Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "355 µs ± 3.92 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
