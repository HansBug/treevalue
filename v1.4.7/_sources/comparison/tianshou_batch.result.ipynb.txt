{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:27.115292Z",
     "iopub.status.busy": "2023-08-10T10:38:27.114548Z",
     "iopub.status.idle": "2023-08-10T10:38:29.082265Z",
     "shell.execute_reply": "2023-08-10T10:38:29.081064Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:29.088351Z",
     "iopub.status.busy": "2023-08-10T10:38:29.087866Z",
     "iopub.status.idle": "2023-08-10T10:38:29.553847Z",
     "shell.execute_reply": "2023-08-10T10:38:29.552689Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:29.559203Z",
     "iopub.status.busy": "2023-08-10T10:38:29.558707Z",
     "iopub.status.idle": "2023-08-10T10:38:29.572636Z",
     "shell.execute_reply": "2023-08-10T10:38:29.571503Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f71b8cdb2e0>\n",
       "├── 'a' --> tensor([[ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925]])\n",
       "└── 'x' --> <FastTreeValue 0x7f71b8cdb850>\n",
       "    └── 'c' --> tensor([[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:29.578452Z",
     "iopub.status.busy": "2023-08-10T10:38:29.578053Z",
     "iopub.status.idle": "2023-08-10T10:38:29.586564Z",
     "shell.execute_reply": "2023-08-10T10:38:29.585461Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4121, -0.8137, -1.0268],\n",
       "        [ 1.3375, -0.7847,  1.0925]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:29.592411Z",
     "iopub.status.busy": "2023-08-10T10:38:29.591817Z",
     "iopub.status.idle": "2023-08-10T10:38:35.996363Z",
     "shell.execute_reply": "2023-08-10T10:38:35.994930Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.1 ns ± 1.47 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:36.002263Z",
     "iopub.status.busy": "2023-08-10T10:38:36.001256Z",
     "iopub.status.idle": "2023-08-10T10:38:36.010919Z",
     "shell.execute_reply": "2023-08-10T10:38:36.009385Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f71b8cdb2e0>\n",
       "├── 'a' --> tensor([[ 2.0080, -0.2371,  0.1596],\n",
       "│                   [ 0.2532,  1.6639, -0.5951]])\n",
       "└── 'x' --> <FastTreeValue 0x7f71b8cdb850>\n",
       "    └── 'c' --> tensor([[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:36.018526Z",
     "iopub.status.busy": "2023-08-10T10:38:36.017614Z",
     "iopub.status.idle": "2023-08-10T10:38:42.644570Z",
     "shell.execute_reply": "2023-08-10T10:38:42.643526Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81.7 ns ± 0.714 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:42.649798Z",
     "iopub.status.busy": "2023-08-10T10:38:42.648898Z",
     "iopub.status.idle": "2023-08-10T10:38:43.210769Z",
     "shell.execute_reply": "2023-08-10T10:38:43.209554Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:43.216722Z",
     "iopub.status.busy": "2023-08-10T10:38:43.215953Z",
     "iopub.status.idle": "2023-08-10T10:38:43.230302Z",
     "shell.execute_reply": "2023-08-10T10:38:43.225118Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:43.240964Z",
     "iopub.status.busy": "2023-08-10T10:38:43.240541Z",
     "iopub.status.idle": "2023-08-10T10:38:43.248834Z",
     "shell.execute_reply": "2023-08-10T10:38:43.247583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4121, -0.8137, -1.0268],\n",
       "        [ 1.3375, -0.7847,  1.0925]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:43.254453Z",
     "iopub.status.busy": "2023-08-10T10:38:43.253845Z",
     "iopub.status.idle": "2023-08-10T10:38:49.057693Z",
     "shell.execute_reply": "2023-08-10T10:38:49.055697Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.1 ns ± 0.515 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:49.063110Z",
     "iopub.status.busy": "2023-08-10T10:38:49.062468Z",
     "iopub.status.idle": "2023-08-10T10:38:49.079425Z",
     "shell.execute_reply": "2023-08-10T10:38:49.078241Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.3102,  0.1533, -0.5103],\n",
       "               [-1.9165,  0.6871,  0.8805]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:49.085425Z",
     "iopub.status.busy": "2023-08-10T10:38:49.084664Z",
     "iopub.status.idle": "2023-08-10T10:38:54.447894Z",
     "shell.execute_reply": "2023-08-10T10:38:54.446783Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "661 ns ± 5.62 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:38:54.453649Z",
     "iopub.status.busy": "2023-08-10T10:38:54.452944Z",
     "iopub.status.idle": "2023-08-10T10:39:03.388650Z",
     "shell.execute_reply": "2023-08-10T10:39:03.386186Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1 µs ± 13.3 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:03.394692Z",
     "iopub.status.busy": "2023-08-10T10:39:03.393596Z",
     "iopub.status.idle": "2023-08-10T10:39:15.070544Z",
     "shell.execute_reply": "2023-08-10T10:39:15.069596Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.3 µs ± 123 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:15.075164Z",
     "iopub.status.busy": "2023-08-10T10:39:15.074297Z",
     "iopub.status.idle": "2023-08-10T10:39:15.078777Z",
     "shell.execute_reply": "2023-08-10T10:39:15.077898Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:15.083683Z",
     "iopub.status.busy": "2023-08-10T10:39:15.083069Z",
     "iopub.status.idle": "2023-08-10T10:39:17.389109Z",
     "shell.execute_reply": "2023-08-10T10:39:17.388022Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "284 µs ± 9.08 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:17.394089Z",
     "iopub.status.busy": "2023-08-10T10:39:17.393558Z",
     "iopub.status.idle": "2023-08-10T10:39:19.629517Z",
     "shell.execute_reply": "2023-08-10T10:39:19.628438Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "273 µs ± 10.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:19.634637Z",
     "iopub.status.busy": "2023-08-10T10:39:19.634075Z",
     "iopub.status.idle": "2023-08-10T10:39:19.645058Z",
     "shell.execute_reply": "2023-08-10T10:39:19.643918Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:19.651003Z",
     "iopub.status.busy": "2023-08-10T10:39:19.650114Z",
     "iopub.status.idle": "2023-08-10T10:39:19.665799Z",
     "shell.execute_reply": "2023-08-10T10:39:19.664523Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f70e26c1df0>\n",
       "├── 'a' --> tensor([[[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]],\n",
       "│           \n",
       "│                   [[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]],\n",
       "│           \n",
       "│                   [[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]],\n",
       "│           \n",
       "│                   [[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]],\n",
       "│           \n",
       "│                   [[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]],\n",
       "│           \n",
       "│                   [[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]],\n",
       "│           \n",
       "│                   [[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]],\n",
       "│           \n",
       "│                   [[ 0.4121, -0.8137, -1.0268],\n",
       "│                    [ 1.3375, -0.7847,  1.0925]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f71bcd7c3d0>\n",
       "    └── 'c' --> tensor([[[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "                \n",
       "                        [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "                \n",
       "                        [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "                \n",
       "                        [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "                \n",
       "                        [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "                \n",
       "                        [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "                \n",
       "                        [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "                \n",
       "                        [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                         [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                         [ 0.5578, -0.6303, -1.4303, -1.7862]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:19.670943Z",
     "iopub.status.busy": "2023-08-10T10:39:19.670315Z",
     "iopub.status.idle": "2023-08-10T10:39:23.523625Z",
     "shell.execute_reply": "2023-08-10T10:39:23.521501Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47.3 µs ± 374 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:23.529872Z",
     "iopub.status.busy": "2023-08-10T10:39:23.529457Z",
     "iopub.status.idle": "2023-08-10T10:39:23.540813Z",
     "shell.execute_reply": "2023-08-10T10:39:23.539705Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f71b8d48fa0>\n",
       "├── 'a' --> tensor([[ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925],\n",
       "│                   [ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925],\n",
       "│                   [ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925],\n",
       "│                   [ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925],\n",
       "│                   [ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925],\n",
       "│                   [ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925],\n",
       "│                   [ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925],\n",
       "│                   [ 0.4121, -0.8137, -1.0268],\n",
       "│                   [ 1.3375, -0.7847,  1.0925]])\n",
       "└── 'x' --> <FastTreeValue 0x7f70e295c640>\n",
       "    └── 'c' --> tensor([[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                        [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                        [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                        [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                        [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                        [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                        [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                        [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                        [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                        [ 0.5578, -0.6303, -1.4303, -1.7862]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:23.549180Z",
     "iopub.status.busy": "2023-08-10T10:39:23.547802Z",
     "iopub.status.idle": "2023-08-10T10:39:27.133963Z",
     "shell.execute_reply": "2023-08-10T10:39:27.131702Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43.8 µs ± 777 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:27.139822Z",
     "iopub.status.busy": "2023-08-10T10:39:27.138969Z",
     "iopub.status.idle": "2023-08-10T10:39:34.788177Z",
     "shell.execute_reply": "2023-08-10T10:39:34.787221Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "93.8 µs ± 604 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:34.793157Z",
     "iopub.status.busy": "2023-08-10T10:39:34.792228Z",
     "iopub.status.idle": "2023-08-10T10:39:34.803135Z",
     "shell.execute_reply": "2023-08-10T10:39:34.802053Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "              \n",
       "                      [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "              \n",
       "                      [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "              \n",
       "                      [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "              \n",
       "                      [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "              \n",
       "                      [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "              \n",
       "                      [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]],\n",
       "              \n",
       "                      [[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                       [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                       [ 0.5578, -0.6303, -1.4303, -1.7862]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]],\n",
       "       \n",
       "               [[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]],\n",
       "       \n",
       "               [[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]],\n",
       "       \n",
       "               [[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]],\n",
       "       \n",
       "               [[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]],\n",
       "       \n",
       "               [[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]],\n",
       "       \n",
       "               [[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]],\n",
       "       \n",
       "               [[ 0.4121, -0.8137, -1.0268],\n",
       "                [ 1.3375, -0.7847,  1.0925]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:34.808184Z",
     "iopub.status.busy": "2023-08-10T10:39:34.807496Z",
     "iopub.status.idle": "2023-08-10T10:39:44.043718Z",
     "shell.execute_reply": "2023-08-10T10:39:44.041816Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "114 µs ± 985 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:44.048119Z",
     "iopub.status.busy": "2023-08-10T10:39:44.047782Z",
     "iopub.status.idle": "2023-08-10T10:39:44.059445Z",
     "shell.execute_reply": "2023-08-10T10:39:44.058302Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                      [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                      [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                      [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                      [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                      [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                      [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862],\n",
       "                      [-0.0350, -0.1335, -0.3865, -0.2587],\n",
       "                      [-1.0456, -0.7926, -1.2495, -0.3003],\n",
       "                      [ 0.5578, -0.6303, -1.4303, -1.7862]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925],\n",
       "               [ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925],\n",
       "               [ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925],\n",
       "               [ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925],\n",
       "               [ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925],\n",
       "               [ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925],\n",
       "               [ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925],\n",
       "               [ 0.4121, -0.8137, -1.0268],\n",
       "               [ 1.3375, -0.7847,  1.0925]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:39:44.064169Z",
     "iopub.status.busy": "2023-08-10T10:39:44.063558Z",
     "iopub.status.idle": "2023-08-10T10:40:00.415985Z",
     "shell.execute_reply": "2023-08-10T10:40:00.414891Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "201 µs ± 1.87 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:40:00.420942Z",
     "iopub.status.busy": "2023-08-10T10:40:00.420391Z",
     "iopub.status.idle": "2023-08-10T10:40:05.458862Z",
     "shell.execute_reply": "2023-08-10T10:40:05.457461Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "617 µs ± 22.1 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
