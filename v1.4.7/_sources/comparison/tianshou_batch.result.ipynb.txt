{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:42.298717Z",
     "iopub.status.busy": "2023-08-11T10:02:42.298453Z",
     "iopub.status.idle": "2023-08-11T10:02:44.070828Z",
     "shell.execute_reply": "2023-08-11T10:02:44.069794Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:44.076206Z",
     "iopub.status.busy": "2023-08-11T10:02:44.075723Z",
     "iopub.status.idle": "2023-08-11T10:02:44.494837Z",
     "shell.execute_reply": "2023-08-11T10:02:44.493682Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:44.500304Z",
     "iopub.status.busy": "2023-08-11T10:02:44.499788Z",
     "iopub.status.idle": "2023-08-11T10:02:44.513358Z",
     "shell.execute_reply": "2023-08-11T10:02:44.512366Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb690dfafd0>\n",
       "├── 'a' --> tensor([[-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb690e12e80>\n",
       "    └── 'c' --> tensor([[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:44.518005Z",
     "iopub.status.busy": "2023-08-11T10:02:44.517687Z",
     "iopub.status.idle": "2023-08-11T10:02:44.525104Z",
     "shell.execute_reply": "2023-08-11T10:02:44.524134Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9242,  0.6839, -0.9048],\n",
       "        [ 0.8493,  0.5953,  1.4561]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:44.529468Z",
     "iopub.status.busy": "2023-08-11T10:02:44.529151Z",
     "iopub.status.idle": "2023-08-11T10:02:50.555145Z",
     "shell.execute_reply": "2023-08-11T10:02:50.554043Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.3 ns ± 1.84 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:50.559532Z",
     "iopub.status.busy": "2023-08-11T10:02:50.558742Z",
     "iopub.status.idle": "2023-08-11T10:02:50.567548Z",
     "shell.execute_reply": "2023-08-11T10:02:50.566583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb690dfafd0>\n",
       "├── 'a' --> tensor([[0.4780, 1.1582, 0.5800],\n",
       "│                   [0.0551, 1.1295, 1.0384]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb690e12e80>\n",
       "    └── 'c' --> tensor([[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:50.571465Z",
     "iopub.status.busy": "2023-08-11T10:02:50.570945Z",
     "iopub.status.idle": "2023-08-11T10:02:57.360937Z",
     "shell.execute_reply": "2023-08-11T10:02:57.360009Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.5 ns ± 1.22 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:57.366939Z",
     "iopub.status.busy": "2023-08-11T10:02:57.364989Z",
     "iopub.status.idle": "2023-08-11T10:02:57.864752Z",
     "shell.execute_reply": "2023-08-11T10:02:57.863583Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:57.869320Z",
     "iopub.status.busy": "2023-08-11T10:02:57.868916Z",
     "iopub.status.idle": "2023-08-11T10:02:57.877174Z",
     "shell.execute_reply": "2023-08-11T10:02:57.876081Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:57.881028Z",
     "iopub.status.busy": "2023-08-11T10:02:57.880462Z",
     "iopub.status.idle": "2023-08-11T10:02:57.887444Z",
     "shell.execute_reply": "2023-08-11T10:02:57.886518Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9242,  0.6839, -0.9048],\n",
       "        [ 0.8493,  0.5953,  1.4561]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:02:57.892192Z",
     "iopub.status.busy": "2023-08-11T10:02:57.891661Z",
     "iopub.status.idle": "2023-08-11T10:03:03.921440Z",
     "shell.execute_reply": "2023-08-11T10:03:03.920467Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.7 ns ± 1.86 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:03.925087Z",
     "iopub.status.busy": "2023-08-11T10:03:03.924825Z",
     "iopub.status.idle": "2023-08-11T10:03:03.935387Z",
     "shell.execute_reply": "2023-08-11T10:03:03.934559Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.1644, -0.0450, -0.8340],\n",
       "               [ 0.6624, -0.1127,  0.6565]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:03.938967Z",
     "iopub.status.busy": "2023-08-11T10:03:03.938541Z",
     "iopub.status.idle": "2023-08-11T10:03:09.124169Z",
     "shell.execute_reply": "2023-08-11T10:03:09.123130Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "638 ns ± 7.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:09.129667Z",
     "iopub.status.busy": "2023-08-11T10:03:09.127985Z",
     "iopub.status.idle": "2023-08-11T10:03:17.601004Z",
     "shell.execute_reply": "2023-08-11T10:03:17.600051Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.04 µs ± 17.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:17.606310Z",
     "iopub.status.busy": "2023-08-11T10:03:17.605677Z",
     "iopub.status.idle": "2023-08-11T10:03:28.768561Z",
     "shell.execute_reply": "2023-08-11T10:03:28.767229Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.8 µs ± 214 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:28.773585Z",
     "iopub.status.busy": "2023-08-11T10:03:28.773253Z",
     "iopub.status.idle": "2023-08-11T10:03:28.779687Z",
     "shell.execute_reply": "2023-08-11T10:03:28.778630Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:28.783559Z",
     "iopub.status.busy": "2023-08-11T10:03:28.783263Z",
     "iopub.status.idle": "2023-08-11T10:03:31.113522Z",
     "shell.execute_reply": "2023-08-11T10:03:31.112320Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "287 µs ± 17.1 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:31.117878Z",
     "iopub.status.busy": "2023-08-11T10:03:31.117096Z",
     "iopub.status.idle": "2023-08-11T10:03:33.313651Z",
     "shell.execute_reply": "2023-08-11T10:03:33.312606Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "268 µs ± 5.51 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:33.317880Z",
     "iopub.status.busy": "2023-08-11T10:03:33.317437Z",
     "iopub.status.idle": "2023-08-11T10:03:33.321899Z",
     "shell.execute_reply": "2023-08-11T10:03:33.321139Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:33.325569Z",
     "iopub.status.busy": "2023-08-11T10:03:33.325064Z",
     "iopub.status.idle": "2023-08-11T10:03:33.335122Z",
     "shell.execute_reply": "2023-08-11T10:03:33.334270Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb5b65d0970>\n",
       "├── 'a' --> tensor([[[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]],\n",
       "│           \n",
       "│                   [[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]],\n",
       "│           \n",
       "│                   [[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]],\n",
       "│           \n",
       "│                   [[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]],\n",
       "│           \n",
       "│                   [[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]],\n",
       "│           \n",
       "│                   [[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]],\n",
       "│           \n",
       "│                   [[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]],\n",
       "│           \n",
       "│                   [[-0.9242,  0.6839, -0.9048],\n",
       "│                    [ 0.8493,  0.5953,  1.4561]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb5b65d0820>\n",
       "    └── 'c' --> tensor([[[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "                \n",
       "                        [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "                \n",
       "                        [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "                \n",
       "                        [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "                \n",
       "                        [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "                \n",
       "                        [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "                \n",
       "                        [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "                \n",
       "                        [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                         [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                         [-0.8930,  0.0404, -0.5812,  0.4177]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:33.338745Z",
     "iopub.status.busy": "2023-08-11T10:03:33.337926Z",
     "iopub.status.idle": "2023-08-11T10:03:37.156796Z",
     "shell.execute_reply": "2023-08-11T10:03:37.155665Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:37.161538Z",
     "iopub.status.busy": "2023-08-11T10:03:37.160710Z",
     "iopub.status.idle": "2023-08-11T10:03:37.171204Z",
     "shell.execute_reply": "2023-08-11T10:03:37.170172Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb68cd197c0>\n",
       "├── 'a' --> tensor([[-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561],\n",
       "│                   [-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561],\n",
       "│                   [-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561],\n",
       "│                   [-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561],\n",
       "│                   [-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561],\n",
       "│                   [-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561],\n",
       "│                   [-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561],\n",
       "│                   [-0.9242,  0.6839, -0.9048],\n",
       "│                   [ 0.8493,  0.5953,  1.4561]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb68cd195b0>\n",
       "    └── 'c' --> tensor([[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                        [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                        [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                        [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                        [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                        [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                        [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                        [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                        [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                        [-0.8930,  0.0404, -0.5812,  0.4177]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:37.175344Z",
     "iopub.status.busy": "2023-08-11T10:03:37.175070Z",
     "iopub.status.idle": "2023-08-11T10:03:40.584995Z",
     "shell.execute_reply": "2023-08-11T10:03:40.582777Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.1 µs ± 906 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:40.588926Z",
     "iopub.status.busy": "2023-08-11T10:03:40.588467Z",
     "iopub.status.idle": "2023-08-11T10:03:48.138290Z",
     "shell.execute_reply": "2023-08-11T10:03:48.137256Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "93.1 µs ± 2.66 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:48.143274Z",
     "iopub.status.busy": "2023-08-11T10:03:48.142529Z",
     "iopub.status.idle": "2023-08-11T10:03:48.154646Z",
     "shell.execute_reply": "2023-08-11T10:03:48.153464Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]],\n",
       "       \n",
       "               [[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]],\n",
       "       \n",
       "               [[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]],\n",
       "       \n",
       "               [[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]],\n",
       "       \n",
       "               [[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]],\n",
       "       \n",
       "               [[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]],\n",
       "       \n",
       "               [[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]],\n",
       "       \n",
       "               [[-0.9242,  0.6839, -0.9048],\n",
       "                [ 0.8493,  0.5953,  1.4561]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "              \n",
       "                      [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "              \n",
       "                      [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "              \n",
       "                      [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "              \n",
       "                      [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "              \n",
       "                      [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "              \n",
       "                      [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]],\n",
       "              \n",
       "                      [[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                       [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                       [-0.8930,  0.0404, -0.5812,  0.4177]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:48.158992Z",
     "iopub.status.busy": "2023-08-11T10:03:48.158698Z",
     "iopub.status.idle": "2023-08-11T10:03:56.896866Z",
     "shell.execute_reply": "2023-08-11T10:03:56.894966Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "107 µs ± 1.39 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:56.900756Z",
     "iopub.status.busy": "2023-08-11T10:03:56.900467Z",
     "iopub.status.idle": "2023-08-11T10:03:56.910044Z",
     "shell.execute_reply": "2023-08-11T10:03:56.908704Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561],\n",
       "               [-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561],\n",
       "               [-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561],\n",
       "               [-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561],\n",
       "               [-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561],\n",
       "               [-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561],\n",
       "               [-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561],\n",
       "               [-0.9242,  0.6839, -0.9048],\n",
       "               [ 0.8493,  0.5953,  1.4561]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                      [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                      [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                      [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                      [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                      [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                      [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177],\n",
       "                      [-1.2699, -0.2150, -0.9804,  0.9702],\n",
       "                      [-0.5845, -1.4494, -0.5616, -1.8622],\n",
       "                      [-0.8930,  0.0404, -0.5812,  0.4177]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:03:56.913958Z",
     "iopub.status.busy": "2023-08-11T10:03:56.913662Z",
     "iopub.status.idle": "2023-08-11T10:04:12.791502Z",
     "shell.execute_reply": "2023-08-11T10:04:12.790637Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "196 µs ± 3.7 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T10:04:12.796201Z",
     "iopub.status.busy": "2023-08-11T10:04:12.795281Z",
     "iopub.status.idle": "2023-08-11T10:04:17.866238Z",
     "shell.execute_reply": "2023-08-11T10:04:17.865193Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "625 µs ± 37.8 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
