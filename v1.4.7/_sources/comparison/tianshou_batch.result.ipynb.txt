{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:11.568063Z",
     "iopub.status.busy": "2023-03-16T09:11:11.567829Z",
     "iopub.status.idle": "2023-03-16T09:11:12.912527Z",
     "shell.execute_reply": "2023-03-16T09:11:12.911872Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:12.915763Z",
     "iopub.status.busy": "2023-03-16T09:11:12.915330Z",
     "iopub.status.idle": "2023-03-16T09:11:13.194013Z",
     "shell.execute_reply": "2023-03-16T09:11:13.193355Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:13.197478Z",
     "iopub.status.busy": "2023-03-16T09:11:13.196888Z",
     "iopub.status.idle": "2023-03-16T09:11:13.207878Z",
     "shell.execute_reply": "2023-03-16T09:11:13.207273Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f65b46b08e0>\n",
       "├── 'a' --> tensor([[-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945]])\n",
       "└── 'x' --> <FastTreeValue 0x7f65b46b0850>\n",
       "    └── 'c' --> tensor([[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:13.211381Z",
     "iopub.status.busy": "2023-03-16T09:11:13.210334Z",
     "iopub.status.idle": "2023-03-16T09:11:13.216559Z",
     "shell.execute_reply": "2023-03-16T09:11:13.215917Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.3814,  0.5596,  1.5354],\n",
       "        [-0.7550,  0.6917,  0.4945]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:13.219477Z",
     "iopub.status.busy": "2023-03-16T09:11:13.218975Z",
     "iopub.status.idle": "2023-03-16T09:11:17.937979Z",
     "shell.execute_reply": "2023-03-16T09:11:17.937323Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.2 ns ± 0.088 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:17.941097Z",
     "iopub.status.busy": "2023-03-16T09:11:17.940563Z",
     "iopub.status.idle": "2023-03-16T09:11:17.947712Z",
     "shell.execute_reply": "2023-03-16T09:11:17.947139Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f65b46b08e0>\n",
       "├── 'a' --> tensor([[-0.0277,  0.7613, -0.2700],\n",
       "│                   [ 0.1224, -0.0369,  1.8407]])\n",
       "└── 'x' --> <FastTreeValue 0x7f65b46b0850>\n",
       "    └── 'c' --> tensor([[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:17.950317Z",
     "iopub.status.busy": "2023-03-16T09:11:17.949867Z",
     "iopub.status.idle": "2023-03-16T09:11:22.608378Z",
     "shell.execute_reply": "2023-03-16T09:11:22.607681Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.3 ns ± 0.0112 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:22.611621Z",
     "iopub.status.busy": "2023-03-16T09:11:22.611110Z",
     "iopub.status.idle": "2023-03-16T09:11:22.971487Z",
     "shell.execute_reply": "2023-03-16T09:11:22.970714Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:22.974866Z",
     "iopub.status.busy": "2023-03-16T09:11:22.974187Z",
     "iopub.status.idle": "2023-03-16T09:11:22.980453Z",
     "shell.execute_reply": "2023-03-16T09:11:22.979892Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:22.983101Z",
     "iopub.status.busy": "2023-03-16T09:11:22.982736Z",
     "iopub.status.idle": "2023-03-16T09:11:22.988367Z",
     "shell.execute_reply": "2023-03-16T09:11:22.987790Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.3814,  0.5596,  1.5354],\n",
       "        [-0.7550,  0.6917,  0.4945]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:22.990836Z",
     "iopub.status.busy": "2023-03-16T09:11:22.990513Z",
     "iopub.status.idle": "2023-03-16T09:11:27.547863Z",
     "shell.execute_reply": "2023-03-16T09:11:27.547125Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.3 ns ± 0.0286 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:27.550606Z",
     "iopub.status.busy": "2023-03-16T09:11:27.550242Z",
     "iopub.status.idle": "2023-03-16T09:11:27.556003Z",
     "shell.execute_reply": "2023-03-16T09:11:27.555387Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5198,  1.7505, -0.5258],\n",
       "               [ 1.1804,  0.4560,  1.3045]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:27.558461Z",
     "iopub.status.busy": "2023-03-16T09:11:27.558119Z",
     "iopub.status.idle": "2023-03-16T09:11:31.433508Z",
     "shell.execute_reply": "2023-03-16T09:11:31.432790Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "477 ns ± 0.0893 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:31.436897Z",
     "iopub.status.busy": "2023-03-16T09:11:31.436277Z",
     "iopub.status.idle": "2023-03-16T09:11:38.197556Z",
     "shell.execute_reply": "2023-03-16T09:11:38.196797Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "833 ns ± 0.6 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:38.200792Z",
     "iopub.status.busy": "2023-03-16T09:11:38.200276Z",
     "iopub.status.idle": "2023-03-16T09:11:47.405198Z",
     "shell.execute_reply": "2023-03-16T09:11:47.404497Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 59.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:47.408262Z",
     "iopub.status.busy": "2023-03-16T09:11:47.407914Z",
     "iopub.status.idle": "2023-03-16T09:11:47.411828Z",
     "shell.execute_reply": "2023-03-16T09:11:47.411255Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:47.414469Z",
     "iopub.status.busy": "2023-03-16T09:11:47.414148Z",
     "iopub.status.idle": "2023-03-16T09:11:58.597866Z",
     "shell.execute_reply": "2023-03-16T09:11:58.597291Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 1.22 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:11:58.601830Z",
     "iopub.status.busy": "2023-03-16T09:11:58.600634Z",
     "iopub.status.idle": "2023-03-16T09:12:09.781161Z",
     "shell.execute_reply": "2023-03-16T09:12:09.780582Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 349 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:09.784497Z",
     "iopub.status.busy": "2023-03-16T09:12:09.784237Z",
     "iopub.status.idle": "2023-03-16T09:12:09.788358Z",
     "shell.execute_reply": "2023-03-16T09:12:09.787743Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:09.790994Z",
     "iopub.status.busy": "2023-03-16T09:12:09.790778Z",
     "iopub.status.idle": "2023-03-16T09:12:09.798169Z",
     "shell.execute_reply": "2023-03-16T09:12:09.797494Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f64de85ea30>\n",
       "├── 'a' --> tensor([[[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]],\n",
       "│           \n",
       "│                   [[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]],\n",
       "│           \n",
       "│                   [[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]],\n",
       "│           \n",
       "│                   [[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]],\n",
       "│           \n",
       "│                   [[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]],\n",
       "│           \n",
       "│                   [[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]],\n",
       "│           \n",
       "│                   [[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]],\n",
       "│           \n",
       "│                   [[-1.3814,  0.5596,  1.5354],\n",
       "│                    [-0.7550,  0.6917,  0.4945]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f65b46b9340>\n",
       "    └── 'c' --> tensor([[[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "                \n",
       "                        [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "                \n",
       "                        [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "                \n",
       "                        [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "                \n",
       "                        [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "                \n",
       "                        [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "                \n",
       "                        [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "                \n",
       "                        [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                         [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                         [-0.3385, -1.0567,  1.9264, -0.1123]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:09.800802Z",
     "iopub.status.busy": "2023-03-16T09:12:09.800424Z",
     "iopub.status.idle": "2023-03-16T09:12:12.512255Z",
     "shell.execute_reply": "2023-03-16T09:12:12.511550Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.4 µs ± 82.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:12.515163Z",
     "iopub.status.busy": "2023-03-16T09:12:12.514606Z",
     "iopub.status.idle": "2023-03-16T09:12:12.522946Z",
     "shell.execute_reply": "2023-03-16T09:12:12.522376Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f65b6738e20>\n",
       "├── 'a' --> tensor([[-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945],\n",
       "│                   [-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945],\n",
       "│                   [-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945],\n",
       "│                   [-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945],\n",
       "│                   [-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945],\n",
       "│                   [-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945],\n",
       "│                   [-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945],\n",
       "│                   [-1.3814,  0.5596,  1.5354],\n",
       "│                   [-0.7550,  0.6917,  0.4945]])\n",
       "└── 'x' --> <FastTreeValue 0x7f64de800f40>\n",
       "    └── 'c' --> tensor([[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                        [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                        [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                        [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                        [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                        [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                        [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                        [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                        [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                        [-0.3385, -1.0567,  1.9264, -0.1123]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:12.525746Z",
     "iopub.status.busy": "2023-03-16T09:12:12.525272Z",
     "iopub.status.idle": "2023-03-16T09:12:15.079622Z",
     "shell.execute_reply": "2023-03-16T09:12:15.078917Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 54.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:15.082862Z",
     "iopub.status.busy": "2023-03-16T09:12:15.082274Z",
     "iopub.status.idle": "2023-03-16T09:12:20.477914Z",
     "shell.execute_reply": "2023-03-16T09:12:20.477199Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.3 µs ± 71.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:20.480869Z",
     "iopub.status.busy": "2023-03-16T09:12:20.480424Z",
     "iopub.status.idle": "2023-03-16T09:12:20.488612Z",
     "shell.execute_reply": "2023-03-16T09:12:20.488013Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]],\n",
       "       \n",
       "               [[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]],\n",
       "       \n",
       "               [[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]],\n",
       "       \n",
       "               [[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]],\n",
       "       \n",
       "               [[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]],\n",
       "       \n",
       "               [[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]],\n",
       "       \n",
       "               [[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]],\n",
       "       \n",
       "               [[-1.3814,  0.5596,  1.5354],\n",
       "                [-0.7550,  0.6917,  0.4945]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "              \n",
       "                      [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "              \n",
       "                      [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "              \n",
       "                      [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "              \n",
       "                      [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "              \n",
       "                      [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "              \n",
       "                      [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]],\n",
       "              \n",
       "                      [[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                       [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                       [-0.3385, -1.0567,  1.9264, -0.1123]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:20.491667Z",
     "iopub.status.busy": "2023-03-16T09:12:20.491165Z",
     "iopub.status.idle": "2023-03-16T09:12:26.953336Z",
     "shell.execute_reply": "2023-03-16T09:12:26.952634Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.5 µs ± 282 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:26.956275Z",
     "iopub.status.busy": "2023-03-16T09:12:26.955929Z",
     "iopub.status.idle": "2023-03-16T09:12:26.963938Z",
     "shell.execute_reply": "2023-03-16T09:12:26.963329Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945],\n",
       "               [-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945],\n",
       "               [-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945],\n",
       "               [-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945],\n",
       "               [-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945],\n",
       "               [-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945],\n",
       "               [-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945],\n",
       "               [-1.3814,  0.5596,  1.5354],\n",
       "               [-0.7550,  0.6917,  0.4945]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                      [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                      [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                      [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                      [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                      [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                      [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123],\n",
       "                      [-0.3397,  0.2504, -1.0620, -0.4884],\n",
       "                      [ 0.9202,  0.7651,  0.0106, -0.3524],\n",
       "                      [-0.3385, -1.0567,  1.9264, -0.1123]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:26.966718Z",
     "iopub.status.busy": "2023-03-16T09:12:26.966387Z",
     "iopub.status.idle": "2023-03-16T09:12:39.055772Z",
     "shell.execute_reply": "2023-03-16T09:12:39.055050Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "149 µs ± 409 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T09:12:39.059059Z",
     "iopub.status.busy": "2023-03-16T09:12:39.058685Z",
     "iopub.status.idle": "2023-03-16T09:12:41.674180Z",
     "shell.execute_reply": "2023-03-16T09:12:41.673483Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "322 µs ± 2.27 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
