{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:14.554677Z",
     "iopub.status.busy": "2023-03-06T17:05:14.554456Z",
     "iopub.status.idle": "2023-03-06T17:05:15.479041Z",
     "shell.execute_reply": "2023-03-06T17:05:15.478366Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:15.482417Z",
     "iopub.status.busy": "2023-03-06T17:05:15.481917Z",
     "iopub.status.idle": "2023-03-06T17:05:15.763960Z",
     "shell.execute_reply": "2023-03-06T17:05:15.763277Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:15.767220Z",
     "iopub.status.busy": "2023-03-06T17:05:15.766617Z",
     "iopub.status.idle": "2023-03-06T17:05:15.776105Z",
     "shell.execute_reply": "2023-03-06T17:05:15.775514Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fceace67940>\n",
       "├── 'a' --> tensor([[-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674]])\n",
       "└── 'x' --> <FastTreeValue 0x7fceace67970>\n",
       "    └── 'c' --> tensor([[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:15.778894Z",
     "iopub.status.busy": "2023-03-06T17:05:15.778567Z",
     "iopub.status.idle": "2023-03-06T17:05:15.783291Z",
     "shell.execute_reply": "2023-03-06T17:05:15.782653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.2236, -0.3754,  1.0938],\n",
       "        [-0.7477,  0.2203,  0.1674]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:15.785799Z",
     "iopub.status.busy": "2023-03-06T17:05:15.785459Z",
     "iopub.status.idle": "2023-03-06T17:05:20.734180Z",
     "shell.execute_reply": "2023-03-06T17:05:20.733243Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.1 ns ± 0.0615 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:20.737256Z",
     "iopub.status.busy": "2023-03-06T17:05:20.736985Z",
     "iopub.status.idle": "2023-03-06T17:05:20.743992Z",
     "shell.execute_reply": "2023-03-06T17:05:20.743392Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fceace67940>\n",
       "├── 'a' --> tensor([[ 0.8476, -1.5400,  0.0920],\n",
       "│                   [ 1.1420,  0.4127, -0.1798]])\n",
       "└── 'x' --> <FastTreeValue 0x7fceace67970>\n",
       "    └── 'c' --> tensor([[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:20.746419Z",
     "iopub.status.busy": "2023-03-06T17:05:20.746076Z",
     "iopub.status.idle": "2023-03-06T17:05:25.951327Z",
     "shell.execute_reply": "2023-03-06T17:05:25.950599Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64 ns ± 0.839 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:25.954427Z",
     "iopub.status.busy": "2023-03-06T17:05:25.953863Z",
     "iopub.status.idle": "2023-03-06T17:05:26.286523Z",
     "shell.execute_reply": "2023-03-06T17:05:26.285840Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:26.289740Z",
     "iopub.status.busy": "2023-03-06T17:05:26.289285Z",
     "iopub.status.idle": "2023-03-06T17:05:26.294735Z",
     "shell.execute_reply": "2023-03-06T17:05:26.294082Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:26.297656Z",
     "iopub.status.busy": "2023-03-06T17:05:26.297172Z",
     "iopub.status.idle": "2023-03-06T17:05:26.303344Z",
     "shell.execute_reply": "2023-03-06T17:05:26.302767Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.2236, -0.3754,  1.0938],\n",
       "        [-0.7477,  0.2203,  0.1674]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:26.306057Z",
     "iopub.status.busy": "2023-03-06T17:05:26.305468Z",
     "iopub.status.idle": "2023-03-06T17:05:30.711074Z",
     "shell.execute_reply": "2023-03-06T17:05:30.710385Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54.1 ns ± 0.0689 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:30.714872Z",
     "iopub.status.busy": "2023-03-06T17:05:30.713789Z",
     "iopub.status.idle": "2023-03-06T17:05:30.721271Z",
     "shell.execute_reply": "2023-03-06T17:05:30.720668Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.4093, -0.2254, -1.1991],\n",
       "               [ 1.8167,  0.7183, -0.9221]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:30.723781Z",
     "iopub.status.busy": "2023-03-06T17:05:30.723431Z",
     "iopub.status.idle": "2023-03-06T17:05:34.769708Z",
     "shell.execute_reply": "2023-03-06T17:05:34.768980Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "498 ns ± 0.189 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:34.772885Z",
     "iopub.status.busy": "2023-03-06T17:05:34.772302Z",
     "iopub.status.idle": "2023-03-06T17:05:41.622937Z",
     "shell.execute_reply": "2023-03-06T17:05:41.622213Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "843 ns ± 8.4 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:41.626318Z",
     "iopub.status.busy": "2023-03-06T17:05:41.625798Z",
     "iopub.status.idle": "2023-03-06T17:05:50.797640Z",
     "shell.execute_reply": "2023-03-06T17:05:50.796886Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 50.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:50.800916Z",
     "iopub.status.busy": "2023-03-06T17:05:50.800355Z",
     "iopub.status.idle": "2023-03-06T17:05:50.804381Z",
     "shell.execute_reply": "2023-03-06T17:05:50.803786Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:05:50.806852Z",
     "iopub.status.busy": "2023-03-06T17:05:50.806502Z",
     "iopub.status.idle": "2023-03-06T17:06:01.712472Z",
     "shell.execute_reply": "2023-03-06T17:06:01.711896Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "134 µs ± 415 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:01.715920Z",
     "iopub.status.busy": "2023-03-06T17:06:01.714882Z",
     "iopub.status.idle": "2023-03-06T17:06:12.818699Z",
     "shell.execute_reply": "2023-03-06T17:06:12.818094Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 985 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:12.821673Z",
     "iopub.status.busy": "2023-03-06T17:06:12.821219Z",
     "iopub.status.idle": "2023-03-06T17:06:12.824446Z",
     "shell.execute_reply": "2023-03-06T17:06:12.823921Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:12.826906Z",
     "iopub.status.busy": "2023-03-06T17:06:12.826478Z",
     "iopub.status.idle": "2023-03-06T17:06:12.833361Z",
     "shell.execute_reply": "2023-03-06T17:06:12.832843Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcdf80fbf70>\n",
       "├── 'a' --> tensor([[[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]],\n",
       "│           \n",
       "│                   [[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]],\n",
       "│           \n",
       "│                   [[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]],\n",
       "│           \n",
       "│                   [[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]],\n",
       "│           \n",
       "│                   [[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]],\n",
       "│           \n",
       "│                   [[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]],\n",
       "│           \n",
       "│                   [[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]],\n",
       "│           \n",
       "│                   [[-1.2236, -0.3754,  1.0938],\n",
       "│                    [-0.7477,  0.2203,  0.1674]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcdf80fbf40>\n",
       "    └── 'c' --> tensor([[[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "                \n",
       "                        [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "                \n",
       "                        [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "                \n",
       "                        [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "                \n",
       "                        [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "                \n",
       "                        [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "                \n",
       "                        [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "                \n",
       "                        [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                         [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                         [-0.2726, -0.8543,  1.0800,  0.9843]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:12.835751Z",
     "iopub.status.busy": "2023-03-06T17:06:12.835347Z",
     "iopub.status.idle": "2023-03-06T17:06:15.447002Z",
     "shell.execute_reply": "2023-03-06T17:06:15.446285Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 42.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:15.450021Z",
     "iopub.status.busy": "2023-03-06T17:06:15.449469Z",
     "iopub.status.idle": "2023-03-06T17:06:15.456632Z",
     "shell.execute_reply": "2023-03-06T17:06:15.456000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fce8431f730>\n",
       "├── 'a' --> tensor([[-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674],\n",
       "│                   [-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674],\n",
       "│                   [-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674],\n",
       "│                   [-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674],\n",
       "│                   [-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674],\n",
       "│                   [-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674],\n",
       "│                   [-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674],\n",
       "│                   [-1.2236, -0.3754,  1.0938],\n",
       "│                   [-0.7477,  0.2203,  0.1674]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcdf87834f0>\n",
       "    └── 'c' --> tensor([[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                        [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                        [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                        [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                        [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                        [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                        [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                        [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                        [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                        [-0.2726, -0.8543,  1.0800,  0.9843]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:15.459094Z",
     "iopub.status.busy": "2023-03-06T17:06:15.458760Z",
     "iopub.status.idle": "2023-03-06T17:06:17.936921Z",
     "shell.execute_reply": "2023-03-06T17:06:17.936107Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.5 µs ± 50.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:17.939924Z",
     "iopub.status.busy": "2023-03-06T17:06:17.939387Z",
     "iopub.status.idle": "2023-03-06T17:06:22.599175Z",
     "shell.execute_reply": "2023-03-06T17:06:22.598427Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.3 µs ± 67.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:22.602352Z",
     "iopub.status.busy": "2023-03-06T17:06:22.601989Z",
     "iopub.status.idle": "2023-03-06T17:06:22.610278Z",
     "shell.execute_reply": "2023-03-06T17:06:22.609684Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "              \n",
       "                      [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "              \n",
       "                      [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "              \n",
       "                      [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "              \n",
       "                      [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "              \n",
       "                      [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "              \n",
       "                      [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]],\n",
       "              \n",
       "                      [[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                       [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                       [-0.2726, -0.8543,  1.0800,  0.9843]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]],\n",
       "       \n",
       "               [[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]],\n",
       "       \n",
       "               [[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]],\n",
       "       \n",
       "               [[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]],\n",
       "       \n",
       "               [[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]],\n",
       "       \n",
       "               [[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]],\n",
       "       \n",
       "               [[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]],\n",
       "       \n",
       "               [[-1.2236, -0.3754,  1.0938],\n",
       "                [-0.7477,  0.2203,  0.1674]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:22.613021Z",
     "iopub.status.busy": "2023-03-06T17:06:22.612660Z",
     "iopub.status.idle": "2023-03-06T17:06:28.999546Z",
     "shell.execute_reply": "2023-03-06T17:06:28.998819Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.7 µs ± 270 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:29.002368Z",
     "iopub.status.busy": "2023-03-06T17:06:29.002009Z",
     "iopub.status.idle": "2023-03-06T17:06:29.009425Z",
     "shell.execute_reply": "2023-03-06T17:06:29.008844Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                      [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                      [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                      [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                      [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                      [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                      [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843],\n",
       "                      [ 0.3964,  0.3505, -0.8725,  1.5340],\n",
       "                      [-0.9456,  0.8700, -0.8099, -0.0242],\n",
       "                      [-0.2726, -0.8543,  1.0800,  0.9843]]),\n",
       "       ),\n",
       "    a: tensor([[-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674],\n",
       "               [-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674],\n",
       "               [-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674],\n",
       "               [-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674],\n",
       "               [-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674],\n",
       "               [-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674],\n",
       "               [-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674],\n",
       "               [-1.2236, -0.3754,  1.0938],\n",
       "               [-0.7477,  0.2203,  0.1674]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:29.011922Z",
     "iopub.status.busy": "2023-03-06T17:06:29.011596Z",
     "iopub.status.idle": "2023-03-06T17:06:40.365177Z",
     "shell.execute_reply": "2023-03-06T17:06:40.364436Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 221 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:06:40.368480Z",
     "iopub.status.busy": "2023-03-06T17:06:40.367965Z",
     "iopub.status.idle": "2023-03-06T17:06:42.870941Z",
     "shell.execute_reply": "2023-03-06T17:06:42.870215Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "308 µs ± 1.71 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
