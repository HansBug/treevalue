{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:28.931849Z",
     "iopub.status.busy": "2024-10-16T13:04:28.931645Z",
     "iopub.status.idle": "2024-10-16T13:04:30.142606Z",
     "shell.execute_reply": "2024-10-16T13:04:30.141871Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:30.145406Z",
     "iopub.status.busy": "2024-10-16T13:04:30.145138Z",
     "iopub.status.idle": "2024-10-16T13:04:30.470864Z",
     "shell.execute_reply": "2024-10-16T13:04:30.470159Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/tmpoqasdag5/fbb7ad1854f8455286e2cedd40b3312212c7f17a/treevalue/tree/integration/torch.py:18: FutureWarning: `torch.utils._pytree._register_pytree_node` is deprecated. Please use `torch.utils._pytree.register_pytree_node` instead.\n",
      "  register_for_torch(TreeValue)\n",
      "/tmp/tmpoqasdag5/fbb7ad1854f8455286e2cedd40b3312212c7f17a/treevalue/tree/integration/torch.py:19: FutureWarning: `torch.utils._pytree._register_pytree_node` is deprecated. Please use `torch.utils._pytree.register_pytree_node` instead.\n",
      "  register_for_torch(FastTreeValue)\n"
     ]
    }
   ],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:30.473136Z",
     "iopub.status.busy": "2024-10-16T13:04:30.472869Z",
     "iopub.status.idle": "2024-10-16T13:04:30.481639Z",
     "shell.execute_reply": "2024-10-16T13:04:30.480997Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8fecfed4c0>\n",
       "├── 'a' --> tensor([[-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8fecfedfa0>\n",
       "    └── 'c' --> tensor([[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:30.483719Z",
     "iopub.status.busy": "2024-10-16T13:04:30.483515Z",
     "iopub.status.idle": "2024-10-16T13:04:30.488061Z",
     "shell.execute_reply": "2024-10-16T13:04:30.487378Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9624,  0.8154,  0.0285],\n",
       "        [ 1.8705,  0.2981, -0.9581]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:30.490092Z",
     "iopub.status.busy": "2024-10-16T13:04:30.489724Z",
     "iopub.status.idle": "2024-10-16T13:04:34.385158Z",
     "shell.execute_reply": "2024-10-16T13:04:34.384486Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48 ns ± 0.182 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:34.387288Z",
     "iopub.status.busy": "2024-10-16T13:04:34.387079Z",
     "iopub.status.idle": "2024-10-16T13:04:34.393110Z",
     "shell.execute_reply": "2024-10-16T13:04:34.392546Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8fecfed4c0>\n",
       "├── 'a' --> tensor([[ 0.6973,  0.3593,  2.5663],\n",
       "│                   [-0.9195, -0.8220, -0.0599]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8fecfedfa0>\n",
       "    └── 'c' --> tensor([[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:34.394958Z",
     "iopub.status.busy": "2024-10-16T13:04:34.394763Z",
     "iopub.status.idle": "2024-10-16T13:04:38.565562Z",
     "shell.execute_reply": "2024-10-16T13:04:38.564900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.7 ns ± 0.219 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:38.567696Z",
     "iopub.status.busy": "2024-10-16T13:04:38.567481Z",
     "iopub.status.idle": "2024-10-16T13:04:38.888332Z",
     "shell.execute_reply": "2024-10-16T13:04:38.887639Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:38.891117Z",
     "iopub.status.busy": "2024-10-16T13:04:38.890555Z",
     "iopub.status.idle": "2024-10-16T13:04:38.895882Z",
     "shell.execute_reply": "2024-10-16T13:04:38.895175Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:38.897857Z",
     "iopub.status.busy": "2024-10-16T13:04:38.897477Z",
     "iopub.status.idle": "2024-10-16T13:04:38.902097Z",
     "shell.execute_reply": "2024-10-16T13:04:38.901462Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9624,  0.8154,  0.0285],\n",
       "        [ 1.8705,  0.2981, -0.9581]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:38.904108Z",
     "iopub.status.busy": "2024-10-16T13:04:38.903761Z",
     "iopub.status.idle": "2024-10-16T13:04:42.305049Z",
     "shell.execute_reply": "2024-10-16T13:04:42.304369Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41.9 ns ± 0.553 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:42.307419Z",
     "iopub.status.busy": "2024-10-16T13:04:42.306922Z",
     "iopub.status.idle": "2024-10-16T13:04:42.312787Z",
     "shell.execute_reply": "2024-10-16T13:04:42.312113Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6658,  1.1796, -2.7990],\n",
       "               [ 0.1809, -0.4904, -1.4357]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:42.314897Z",
     "iopub.status.busy": "2024-10-16T13:04:42.314534Z",
     "iopub.status.idle": "2024-10-16T13:04:45.208124Z",
     "shell.execute_reply": "2024-10-16T13:04:45.207350Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "355 ns ± 0.433 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:45.210638Z",
     "iopub.status.busy": "2024-10-16T13:04:45.210221Z",
     "iopub.status.idle": "2024-10-16T13:04:50.280843Z",
     "shell.execute_reply": "2024-10-16T13:04:50.280114Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "624 ns ± 4.76 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:50.283201Z",
     "iopub.status.busy": "2024-10-16T13:04:50.282785Z",
     "iopub.status.idle": "2024-10-16T13:04:57.159378Z",
     "shell.execute_reply": "2024-10-16T13:04:57.158712Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.46 µs ± 22.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:57.161711Z",
     "iopub.status.busy": "2024-10-16T13:04:57.161295Z",
     "iopub.status.idle": "2024-10-16T13:04:57.164362Z",
     "shell.execute_reply": "2024-10-16T13:04:57.163810Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:04:57.166414Z",
     "iopub.status.busy": "2024-10-16T13:04:57.166026Z",
     "iopub.status.idle": "2024-10-16T13:05:07.586751Z",
     "shell.execute_reply": "2024-10-16T13:05:07.586008Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "128 µs ± 634 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:07.589486Z",
     "iopub.status.busy": "2024-10-16T13:05:07.588916Z",
     "iopub.status.idle": "2024-10-16T13:05:17.898836Z",
     "shell.execute_reply": "2024-10-16T13:05:17.898064Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "127 µs ± 1.12 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:17.901621Z",
     "iopub.status.busy": "2024-10-16T13:05:17.901115Z",
     "iopub.status.idle": "2024-10-16T13:05:17.904941Z",
     "shell.execute_reply": "2024-10-16T13:05:17.904358Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:17.906994Z",
     "iopub.status.busy": "2024-10-16T13:05:17.906585Z",
     "iopub.status.idle": "2024-10-16T13:05:17.913704Z",
     "shell.execute_reply": "2024-10-16T13:05:17.913035Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8f059378e0>\n",
       "├── 'a' --> tensor([[[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]],\n",
       "│           \n",
       "│                   [[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]],\n",
       "│           \n",
       "│                   [[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]],\n",
       "│           \n",
       "│                   [[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]],\n",
       "│           \n",
       "│                   [[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]],\n",
       "│           \n",
       "│                   [[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]],\n",
       "│           \n",
       "│                   [[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]],\n",
       "│           \n",
       "│                   [[-0.9624,  0.8154,  0.0285],\n",
       "│                    [ 1.8705,  0.2981, -0.9581]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8fecff3100>\n",
       "    └── 'c' --> tensor([[[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "                \n",
       "                        [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "                \n",
       "                        [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "                \n",
       "                        [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "                \n",
       "                        [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "                \n",
       "                        [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "                \n",
       "                        [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "                \n",
       "                        [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                         [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                         [-0.2541, -0.9803, -0.1087, -0.1179]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:17.915832Z",
     "iopub.status.busy": "2024-10-16T13:05:17.915446Z",
     "iopub.status.idle": "2024-10-16T13:05:19.843567Z",
     "shell.execute_reply": "2024-10-16T13:05:19.842809Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23.6 µs ± 300 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:19.845850Z",
     "iopub.status.busy": "2024-10-16T13:05:19.845476Z",
     "iopub.status.idle": "2024-10-16T13:05:19.852239Z",
     "shell.execute_reply": "2024-10-16T13:05:19.851612Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8efd42e880>\n",
       "├── 'a' --> tensor([[-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581],\n",
       "│                   [-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581],\n",
       "│                   [-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581],\n",
       "│                   [-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581],\n",
       "│                   [-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581],\n",
       "│                   [-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581],\n",
       "│                   [-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581],\n",
       "│                   [-0.9624,  0.8154,  0.0285],\n",
       "│                   [ 1.8705,  0.2981, -0.9581]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8ff4424d90>\n",
       "    └── 'c' --> tensor([[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                        [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                        [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                        [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                        [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                        [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                        [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                        [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                        [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                        [-0.2541, -0.9803, -0.1087, -0.1179]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:19.854252Z",
     "iopub.status.busy": "2024-10-16T13:05:19.853890Z",
     "iopub.status.idle": "2024-10-16T13:05:21.661980Z",
     "shell.execute_reply": "2024-10-16T13:05:21.661216Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22.2 µs ± 250 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:21.664337Z",
     "iopub.status.busy": "2024-10-16T13:05:21.664106Z",
     "iopub.status.idle": "2024-10-16T13:05:25.799122Z",
     "shell.execute_reply": "2024-10-16T13:05:25.798452Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50.9 µs ± 381 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:25.801360Z",
     "iopub.status.busy": "2024-10-16T13:05:25.801142Z",
     "iopub.status.idle": "2024-10-16T13:05:25.808143Z",
     "shell.execute_reply": "2024-10-16T13:05:25.807484Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]],\n",
       "       \n",
       "               [[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]],\n",
       "       \n",
       "               [[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]],\n",
       "       \n",
       "               [[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]],\n",
       "       \n",
       "               [[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]],\n",
       "       \n",
       "               [[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]],\n",
       "       \n",
       "               [[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]],\n",
       "       \n",
       "               [[-0.9624,  0.8154,  0.0285],\n",
       "                [ 1.8705,  0.2981, -0.9581]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "              \n",
       "                      [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "              \n",
       "                      [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "              \n",
       "                      [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "              \n",
       "                      [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "              \n",
       "                      [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "              \n",
       "                      [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]],\n",
       "              \n",
       "                      [[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                       [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                       [-0.2541, -0.9803, -0.1087, -0.1179]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:25.810270Z",
     "iopub.status.busy": "2024-10-16T13:05:25.809871Z",
     "iopub.status.idle": "2024-10-16T13:05:30.889683Z",
     "shell.execute_reply": "2024-10-16T13:05:30.888932Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.5 µs ± 513 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:30.892116Z",
     "iopub.status.busy": "2024-10-16T13:05:30.891667Z",
     "iopub.status.idle": "2024-10-16T13:05:30.898223Z",
     "shell.execute_reply": "2024-10-16T13:05:30.897529Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581],\n",
       "               [-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581],\n",
       "               [-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581],\n",
       "               [-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581],\n",
       "               [-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581],\n",
       "               [-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581],\n",
       "               [-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581],\n",
       "               [-0.9624,  0.8154,  0.0285],\n",
       "               [ 1.8705,  0.2981, -0.9581]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                      [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                      [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                      [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                      [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                      [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                      [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179],\n",
       "                      [-1.6102,  0.4350,  0.7629,  0.2790],\n",
       "                      [ 0.7358,  0.7413,  0.7137, -0.8552],\n",
       "                      [-0.2541, -0.9803, -0.1087, -0.1179]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:30.900661Z",
     "iopub.status.busy": "2024-10-16T13:05:30.900296Z",
     "iopub.status.idle": "2024-10-16T13:05:40.440205Z",
     "shell.execute_reply": "2024-10-16T13:05:40.439565Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "117 µs ± 724 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:05:40.442453Z",
     "iopub.status.busy": "2024-10-16T13:05:40.442054Z",
     "iopub.status.idle": "2024-10-16T13:05:42.682005Z",
     "shell.execute_reply": "2024-10-16T13:05:42.681263Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "275 µs ± 1.13 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
