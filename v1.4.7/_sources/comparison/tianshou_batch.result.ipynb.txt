{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:09.888176Z",
     "iopub.status.busy": "2023-05-26T09:17:09.887710Z",
     "iopub.status.idle": "2023-05-26T09:17:11.228280Z",
     "shell.execute_reply": "2023-05-26T09:17:11.227374Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:11.232600Z",
     "iopub.status.busy": "2023-05-26T09:17:11.232281Z",
     "iopub.status.idle": "2023-05-26T09:17:11.518163Z",
     "shell.execute_reply": "2023-05-26T09:17:11.517401Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:11.522119Z",
     "iopub.status.busy": "2023-05-26T09:17:11.521811Z",
     "iopub.status.idle": "2023-05-26T09:17:11.530473Z",
     "shell.execute_reply": "2023-05-26T09:17:11.529797Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f87cc0b2790>\n",
       "├── 'a' --> tensor([[-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455]])\n",
       "└── 'x' --> <FastTreeValue 0x7f87cc0b2c10>\n",
       "    └── 'c' --> tensor([[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:11.534361Z",
     "iopub.status.busy": "2023-05-26T09:17:11.533918Z",
     "iopub.status.idle": "2023-05-26T09:17:11.538890Z",
     "shell.execute_reply": "2023-05-26T09:17:11.538222Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.9763, -0.7025, -0.0647],\n",
       "        [ 0.1640, -2.2171,  1.2455]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:11.542375Z",
     "iopub.status.busy": "2023-05-26T09:17:11.542012Z",
     "iopub.status.idle": "2023-05-26T09:17:16.782294Z",
     "shell.execute_reply": "2023-05-26T09:17:16.781562Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.5 ns ± 0.039 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:16.785613Z",
     "iopub.status.busy": "2023-05-26T09:17:16.785124Z",
     "iopub.status.idle": "2023-05-26T09:17:16.791495Z",
     "shell.execute_reply": "2023-05-26T09:17:16.790764Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f87cc0b2790>\n",
       "├── 'a' --> tensor([[-1.9562,  0.8086, -0.3263],\n",
       "│                   [ 0.5208,  0.0637, -2.1270]])\n",
       "└── 'x' --> <FastTreeValue 0x7f87cc0b2c10>\n",
       "    └── 'c' --> tensor([[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:16.794793Z",
     "iopub.status.busy": "2023-05-26T09:17:16.794335Z",
     "iopub.status.idle": "2023-05-26T09:17:22.143653Z",
     "shell.execute_reply": "2023-05-26T09:17:22.142791Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.9 ns ± 0.073 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:22.147415Z",
     "iopub.status.busy": "2023-05-26T09:17:22.147008Z",
     "iopub.status.idle": "2023-05-26T09:17:22.523326Z",
     "shell.execute_reply": "2023-05-26T09:17:22.522560Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:22.527519Z",
     "iopub.status.busy": "2023-05-26T09:17:22.526991Z",
     "iopub.status.idle": "2023-05-26T09:17:22.533062Z",
     "shell.execute_reply": "2023-05-26T09:17:22.532361Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:22.536045Z",
     "iopub.status.busy": "2023-05-26T09:17:22.535658Z",
     "iopub.status.idle": "2023-05-26T09:17:22.540715Z",
     "shell.execute_reply": "2023-05-26T09:17:22.540014Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.9763, -0.7025, -0.0647],\n",
       "        [ 0.1640, -2.2171,  1.2455]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:22.543953Z",
     "iopub.status.busy": "2023-05-26T09:17:22.543574Z",
     "iopub.status.idle": "2023-05-26T09:17:27.459297Z",
     "shell.execute_reply": "2023-05-26T09:17:27.458617Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.5 ns ± 0.0475 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:27.462699Z",
     "iopub.status.busy": "2023-05-26T09:17:27.462194Z",
     "iopub.status.idle": "2023-05-26T09:17:27.468611Z",
     "shell.execute_reply": "2023-05-26T09:17:27.467841Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6666, -1.0509,  0.3607],\n",
       "               [ 0.2411, -0.9985,  0.3430]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:27.471787Z",
     "iopub.status.busy": "2023-05-26T09:17:27.471313Z",
     "iopub.status.idle": "2023-05-26T09:17:31.479244Z",
     "shell.execute_reply": "2023-05-26T09:17:31.478461Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492 ns ± 0.193 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:31.483054Z",
     "iopub.status.busy": "2023-05-26T09:17:31.482547Z",
     "iopub.status.idle": "2023-05-26T09:17:38.135145Z",
     "shell.execute_reply": "2023-05-26T09:17:38.134412Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "821 ns ± 2.72 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:38.139013Z",
     "iopub.status.busy": "2023-05-26T09:17:38.138355Z",
     "iopub.status.idle": "2023-05-26T09:17:46.892471Z",
     "shell.execute_reply": "2023-05-26T09:17:46.891077Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.8 µs ± 26.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:46.896212Z",
     "iopub.status.busy": "2023-05-26T09:17:46.895613Z",
     "iopub.status.idle": "2023-05-26T09:17:46.899003Z",
     "shell.execute_reply": "2023-05-26T09:17:46.898299Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:46.902253Z",
     "iopub.status.busy": "2023-05-26T09:17:46.901886Z",
     "iopub.status.idle": "2023-05-26T09:17:58.703325Z",
     "shell.execute_reply": "2023-05-26T09:17:58.702703Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 448 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:17:58.706644Z",
     "iopub.status.busy": "2023-05-26T09:17:58.706240Z",
     "iopub.status.idle": "2023-05-26T09:18:10.415547Z",
     "shell.execute_reply": "2023-05-26T09:18:10.414886Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 808 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:10.419058Z",
     "iopub.status.busy": "2023-05-26T09:18:10.418559Z",
     "iopub.status.idle": "2023-05-26T09:18:10.422288Z",
     "shell.execute_reply": "2023-05-26T09:18:10.421566Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:10.425342Z",
     "iopub.status.busy": "2023-05-26T09:18:10.425113Z",
     "iopub.status.idle": "2023-05-26T09:18:10.432867Z",
     "shell.execute_reply": "2023-05-26T09:18:10.432161Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f86f4ede1c0>\n",
       "├── 'a' --> tensor([[[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]],\n",
       "│           \n",
       "│                   [[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]],\n",
       "│           \n",
       "│                   [[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]],\n",
       "│           \n",
       "│                   [[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]],\n",
       "│           \n",
       "│                   [[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]],\n",
       "│           \n",
       "│                   [[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]],\n",
       "│           \n",
       "│                   [[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]],\n",
       "│           \n",
       "│                   [[-1.9763, -0.7025, -0.0647],\n",
       "│                    [ 0.1640, -2.2171,  1.2455]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f86f4e66880>\n",
       "    └── 'c' --> tensor([[[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "                \n",
       "                        [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "                \n",
       "                        [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "                \n",
       "                        [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "                \n",
       "                        [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "                \n",
       "                        [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "                \n",
       "                        [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "                \n",
       "                        [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                         [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                         [ 1.3134, -0.2001,  0.6286,  0.6438]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:10.435742Z",
     "iopub.status.busy": "2023-05-26T09:18:10.435380Z",
     "iopub.status.idle": "2023-05-26T09:18:13.134999Z",
     "shell.execute_reply": "2023-05-26T09:18:13.134342Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.2 µs ± 60.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:13.138541Z",
     "iopub.status.busy": "2023-05-26T09:18:13.137824Z",
     "iopub.status.idle": "2023-05-26T09:18:13.145839Z",
     "shell.execute_reply": "2023-05-26T09:18:13.145116Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f87cc0a92b0>\n",
       "├── 'a' --> tensor([[-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455],\n",
       "│                   [-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455],\n",
       "│                   [-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455],\n",
       "│                   [-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455],\n",
       "│                   [-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455],\n",
       "│                   [-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455],\n",
       "│                   [-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455],\n",
       "│                   [-1.9763, -0.7025, -0.0647],\n",
       "│                   [ 0.1640, -2.2171,  1.2455]])\n",
       "└── 'x' --> <FastTreeValue 0x7f87cc097bb0>\n",
       "    └── 'c' --> tensor([[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                        [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                        [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                        [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                        [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                        [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                        [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                        [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                        [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                        [ 1.3134, -0.2001,  0.6286,  0.6438]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:13.148983Z",
     "iopub.status.busy": "2023-05-26T09:18:13.148506Z",
     "iopub.status.idle": "2023-05-26T09:18:15.660335Z",
     "shell.execute_reply": "2023-05-26T09:18:15.659571Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.9 µs ± 71.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:15.664075Z",
     "iopub.status.busy": "2023-05-26T09:18:15.663614Z",
     "iopub.status.idle": "2023-05-26T09:18:21.201798Z",
     "shell.execute_reply": "2023-05-26T09:18:21.201081Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.1 µs ± 95.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:21.206161Z",
     "iopub.status.busy": "2023-05-26T09:18:21.205531Z",
     "iopub.status.idle": "2023-05-26T09:18:21.214601Z",
     "shell.execute_reply": "2023-05-26T09:18:21.213965Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "              \n",
       "                      [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "              \n",
       "                      [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "              \n",
       "                      [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "              \n",
       "                      [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "              \n",
       "                      [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "              \n",
       "                      [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]],\n",
       "              \n",
       "                      [[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                       [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                       [ 1.3134, -0.2001,  0.6286,  0.6438]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]],\n",
       "       \n",
       "               [[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]],\n",
       "       \n",
       "               [[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]],\n",
       "       \n",
       "               [[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]],\n",
       "       \n",
       "               [[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]],\n",
       "       \n",
       "               [[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]],\n",
       "       \n",
       "               [[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]],\n",
       "       \n",
       "               [[-1.9763, -0.7025, -0.0647],\n",
       "                [ 0.1640, -2.2171,  1.2455]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:21.217857Z",
     "iopub.status.busy": "2023-05-26T09:18:21.217299Z",
     "iopub.status.idle": "2023-05-26T09:18:27.579636Z",
     "shell.execute_reply": "2023-05-26T09:18:27.578919Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 128 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:27.583248Z",
     "iopub.status.busy": "2023-05-26T09:18:27.582828Z",
     "iopub.status.idle": "2023-05-26T09:18:27.590275Z",
     "shell.execute_reply": "2023-05-26T09:18:27.589562Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                      [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                      [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                      [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                      [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                      [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                      [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438],\n",
       "                      [-0.5888,  1.1582,  0.3789, -0.2426],\n",
       "                      [ 0.0538,  1.1635,  0.1997,  1.1018],\n",
       "                      [ 1.3134, -0.2001,  0.6286,  0.6438]]),\n",
       "       ),\n",
       "    a: tensor([[-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455],\n",
       "               [-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455],\n",
       "               [-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455],\n",
       "               [-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455],\n",
       "               [-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455],\n",
       "               [-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455],\n",
       "               [-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455],\n",
       "               [-1.9763, -0.7025, -0.0647],\n",
       "               [ 0.1640, -2.2171,  1.2455]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:27.593379Z",
     "iopub.status.busy": "2023-05-26T09:18:27.592931Z",
     "iopub.status.idle": "2023-05-26T09:18:39.487397Z",
     "shell.execute_reply": "2023-05-26T09:18:39.486676Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 289 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:18:39.491039Z",
     "iopub.status.busy": "2023-05-26T09:18:39.490524Z",
     "iopub.status.idle": "2023-05-26T09:18:42.284677Z",
     "shell.execute_reply": "2023-05-26T09:18:42.283488Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "343 µs ± 3.59 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
