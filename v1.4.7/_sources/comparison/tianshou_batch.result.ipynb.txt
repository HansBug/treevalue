{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:34.661644Z",
     "iopub.status.busy": "2023-03-06T19:28:34.661184Z",
     "iopub.status.idle": "2023-03-06T19:28:36.015351Z",
     "shell.execute_reply": "2023-03-06T19:28:36.014255Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:36.020735Z",
     "iopub.status.busy": "2023-03-06T19:28:36.019864Z",
     "iopub.status.idle": "2023-03-06T19:28:36.438691Z",
     "shell.execute_reply": "2023-03-06T19:28:36.437603Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:36.448006Z",
     "iopub.status.busy": "2023-03-06T19:28:36.447609Z",
     "iopub.status.idle": "2023-03-06T19:28:36.460032Z",
     "shell.execute_reply": "2023-03-06T19:28:36.459029Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f63ee5f2af0>\n",
       "├── 'a' --> tensor([[ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641]])\n",
       "└── 'x' --> <FastTreeValue 0x7f63ee5f2c40>\n",
       "    └── 'c' --> tensor([[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:36.463864Z",
     "iopub.status.busy": "2023-03-06T19:28:36.463543Z",
     "iopub.status.idle": "2023-03-06T19:28:36.470720Z",
     "shell.execute_reply": "2023-03-06T19:28:36.469653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0362,  0.7877,  0.3742],\n",
       "        [-1.3599, -0.2740, -0.8641]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:36.474363Z",
     "iopub.status.busy": "2023-03-06T19:28:36.474060Z",
     "iopub.status.idle": "2023-03-06T19:28:43.061228Z",
     "shell.execute_reply": "2023-03-06T19:28:43.060079Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.9 ns ± 1.4 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:43.066523Z",
     "iopub.status.busy": "2023-03-06T19:28:43.065252Z",
     "iopub.status.idle": "2023-03-06T19:28:43.077558Z",
     "shell.execute_reply": "2023-03-06T19:28:43.075962Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f63ee5f2af0>\n",
       "├── 'a' --> tensor([[-0.6274,  0.0171, -0.7900],\n",
       "│                   [ 1.0699, -1.1873,  1.7127]])\n",
       "└── 'x' --> <FastTreeValue 0x7f63ee5f2c40>\n",
       "    └── 'c' --> tensor([[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:43.082156Z",
     "iopub.status.busy": "2023-03-06T19:28:43.081528Z",
     "iopub.status.idle": "2023-03-06T19:28:49.417073Z",
     "shell.execute_reply": "2023-03-06T19:28:49.416051Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78 ns ± 1.85 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:49.421697Z",
     "iopub.status.busy": "2023-03-06T19:28:49.421114Z",
     "iopub.status.idle": "2023-03-06T19:28:49.922547Z",
     "shell.execute_reply": "2023-03-06T19:28:49.921336Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:49.926775Z",
     "iopub.status.busy": "2023-03-06T19:28:49.926339Z",
     "iopub.status.idle": "2023-03-06T19:28:49.935702Z",
     "shell.execute_reply": "2023-03-06T19:28:49.934780Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:49.939512Z",
     "iopub.status.busy": "2023-03-06T19:28:49.939043Z",
     "iopub.status.idle": "2023-03-06T19:28:49.945705Z",
     "shell.execute_reply": "2023-03-06T19:28:49.944721Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0362,  0.7877,  0.3742],\n",
       "        [-1.3599, -0.2740, -0.8641]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:49.950019Z",
     "iopub.status.busy": "2023-03-06T19:28:49.949029Z",
     "iopub.status.idle": "2023-03-06T19:28:55.325417Z",
     "shell.execute_reply": "2023-03-06T19:28:55.323566Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.8 ns ± 1.67 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:55.331692Z",
     "iopub.status.busy": "2023-03-06T19:28:55.330483Z",
     "iopub.status.idle": "2023-03-06T19:28:55.340958Z",
     "shell.execute_reply": "2023-03-06T19:28:55.339483Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0953,  1.1360, -3.1538],\n",
       "               [-1.4025, -0.3368,  1.1049]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:28:55.345018Z",
     "iopub.status.busy": "2023-03-06T19:28:55.344695Z",
     "iopub.status.idle": "2023-03-06T19:29:00.707318Z",
     "shell.execute_reply": "2023-03-06T19:29:00.705912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "658 ns ± 13.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:00.711466Z",
     "iopub.status.busy": "2023-03-06T19:29:00.710936Z",
     "iopub.status.idle": "2023-03-06T19:29:09.565023Z",
     "shell.execute_reply": "2023-03-06T19:29:09.563958Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1 µs ± 16.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:09.569469Z",
     "iopub.status.busy": "2023-03-06T19:29:09.569177Z",
     "iopub.status.idle": "2023-03-06T19:29:21.000602Z",
     "shell.execute_reply": "2023-03-06T19:29:20.999010Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14 µs ± 132 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:21.004913Z",
     "iopub.status.busy": "2023-03-06T19:29:21.004574Z",
     "iopub.status.idle": "2023-03-06T19:29:21.010760Z",
     "shell.execute_reply": "2023-03-06T19:29:21.009537Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:21.014676Z",
     "iopub.status.busy": "2023-03-06T19:29:21.014208Z",
     "iopub.status.idle": "2023-03-06T19:29:23.385941Z",
     "shell.execute_reply": "2023-03-06T19:29:23.385131Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "289 µs ± 9.33 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:23.389689Z",
     "iopub.status.busy": "2023-03-06T19:29:23.389140Z",
     "iopub.status.idle": "2023-03-06T19:29:25.624066Z",
     "shell.execute_reply": "2023-03-06T19:29:25.623086Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "273 µs ± 8.87 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:25.627985Z",
     "iopub.status.busy": "2023-03-06T19:29:25.627679Z",
     "iopub.status.idle": "2023-03-06T19:29:25.632258Z",
     "shell.execute_reply": "2023-03-06T19:29:25.631212Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:25.636510Z",
     "iopub.status.busy": "2023-03-06T19:29:25.635486Z",
     "iopub.status.idle": "2023-03-06T19:29:25.645487Z",
     "shell.execute_reply": "2023-03-06T19:29:25.644742Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f63ec55be50>\n",
       "├── 'a' --> tensor([[[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]],\n",
       "│           \n",
       "│                   [[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]],\n",
       "│           \n",
       "│                   [[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]],\n",
       "│           \n",
       "│                   [[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]],\n",
       "│           \n",
       "│                   [[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]],\n",
       "│           \n",
       "│                   [[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]],\n",
       "│           \n",
       "│                   [[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]],\n",
       "│           \n",
       "│                   [[ 0.0362,  0.7877,  0.3742],\n",
       "│                    [-1.3599, -0.2740, -0.8641]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6334defbb0>\n",
       "    └── 'c' --> tensor([[[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "                \n",
       "                        [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "                \n",
       "                        [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "                \n",
       "                        [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "                \n",
       "                        [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "                \n",
       "                        [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "                \n",
       "                        [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "                \n",
       "                        [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                         [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                         [ 0.5657,  0.0971,  0.3643,  0.8631]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:25.649075Z",
     "iopub.status.busy": "2023-03-06T19:29:25.648211Z",
     "iopub.status.idle": "2023-03-06T19:29:29.403102Z",
     "shell.execute_reply": "2023-03-06T19:29:29.402064Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46.1 µs ± 494 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:29.407660Z",
     "iopub.status.busy": "2023-03-06T19:29:29.407102Z",
     "iopub.status.idle": "2023-03-06T19:29:29.418530Z",
     "shell.execute_reply": "2023-03-06T19:29:29.417708Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f63347eb0d0>\n",
       "├── 'a' --> tensor([[ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641],\n",
       "│                   [ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641],\n",
       "│                   [ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641],\n",
       "│                   [ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641],\n",
       "│                   [ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641],\n",
       "│                   [ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641],\n",
       "│                   [ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641],\n",
       "│                   [ 0.0362,  0.7877,  0.3742],\n",
       "│                   [-1.3599, -0.2740, -0.8641]])\n",
       "└── 'x' --> <FastTreeValue 0x7f63c808fc40>\n",
       "    └── 'c' --> tensor([[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                        [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                        [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                        [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                        [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                        [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                        [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                        [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                        [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                        [ 0.5657,  0.0971,  0.3643,  0.8631]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:29.422570Z",
     "iopub.status.busy": "2023-03-06T19:29:29.422191Z",
     "iopub.status.idle": "2023-03-06T19:29:33.132144Z",
     "shell.execute_reply": "2023-03-06T19:29:33.131056Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.2 µs ± 2.05 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:33.136350Z",
     "iopub.status.busy": "2023-03-06T19:29:33.135817Z",
     "iopub.status.idle": "2023-03-06T19:29:40.249480Z",
     "shell.execute_reply": "2023-03-06T19:29:40.248436Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88.1 µs ± 2.67 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:40.253763Z",
     "iopub.status.busy": "2023-03-06T19:29:40.252917Z",
     "iopub.status.idle": "2023-03-06T19:29:40.264526Z",
     "shell.execute_reply": "2023-03-06T19:29:40.263528Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "              \n",
       "                      [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "              \n",
       "                      [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "              \n",
       "                      [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "              \n",
       "                      [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "              \n",
       "                      [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "              \n",
       "                      [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]],\n",
       "              \n",
       "                      [[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                       [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                       [ 0.5657,  0.0971,  0.3643,  0.8631]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]],\n",
       "       \n",
       "               [[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]],\n",
       "       \n",
       "               [[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]],\n",
       "       \n",
       "               [[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]],\n",
       "       \n",
       "               [[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]],\n",
       "       \n",
       "               [[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]],\n",
       "       \n",
       "               [[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]],\n",
       "       \n",
       "               [[ 0.0362,  0.7877,  0.3742],\n",
       "                [-1.3599, -0.2740, -0.8641]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:40.268835Z",
     "iopub.status.busy": "2023-03-06T19:29:40.268167Z",
     "iopub.status.idle": "2023-03-06T19:29:48.810866Z",
     "shell.execute_reply": "2023-03-06T19:29:48.809871Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "105 µs ± 634 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:48.814381Z",
     "iopub.status.busy": "2023-03-06T19:29:48.814104Z",
     "iopub.status.idle": "2023-03-06T19:29:48.823934Z",
     "shell.execute_reply": "2023-03-06T19:29:48.823035Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                      [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                      [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                      [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                      [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                      [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                      [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631],\n",
       "                      [-0.1183, -0.0937,  0.7459, -0.9591],\n",
       "                      [ 0.4845, -0.2345, -0.5621, -0.9387],\n",
       "                      [ 0.5657,  0.0971,  0.3643,  0.8631]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641],\n",
       "               [ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641],\n",
       "               [ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641],\n",
       "               [ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641],\n",
       "               [ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641],\n",
       "               [ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641],\n",
       "               [ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641],\n",
       "               [ 0.0362,  0.7877,  0.3742],\n",
       "               [-1.3599, -0.2740, -0.8641]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:29:48.827723Z",
     "iopub.status.busy": "2023-03-06T19:29:48.827002Z",
     "iopub.status.idle": "2023-03-06T19:30:04.193690Z",
     "shell.execute_reply": "2023-03-06T19:30:04.192636Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "190 µs ± 3.14 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:30:04.197840Z",
     "iopub.status.busy": "2023-03-06T19:30:04.197084Z",
     "iopub.status.idle": "2023-03-06T19:30:09.246711Z",
     "shell.execute_reply": "2023-03-06T19:30:09.245688Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "619 µs ± 28 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
