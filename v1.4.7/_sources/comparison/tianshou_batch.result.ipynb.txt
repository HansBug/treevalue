{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:15.857285Z",
     "iopub.status.busy": "2023-08-10T12:53:15.856346Z",
     "iopub.status.idle": "2023-08-10T12:53:17.937986Z",
     "shell.execute_reply": "2023-08-10T12:53:17.936787Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:17.943397Z",
     "iopub.status.busy": "2023-08-10T12:53:17.942647Z",
     "iopub.status.idle": "2023-08-10T12:53:18.417505Z",
     "shell.execute_reply": "2023-08-10T12:53:18.416272Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:18.423697Z",
     "iopub.status.busy": "2023-08-10T12:53:18.422293Z",
     "iopub.status.idle": "2023-08-10T12:53:18.444412Z",
     "shell.execute_reply": "2023-08-10T12:53:18.443121Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd3e0e3c370>\n",
       "├── 'a' --> tensor([[-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd3e0e3c1f0>\n",
       "    └── 'c' --> tensor([[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:18.451277Z",
     "iopub.status.busy": "2023-08-10T12:53:18.450789Z",
     "iopub.status.idle": "2023-08-10T12:53:18.458687Z",
     "shell.execute_reply": "2023-08-10T12:53:18.457580Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.6375, -0.4596,  0.2620],\n",
       "        [ 1.3218, -1.1779, -0.1000]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:18.464833Z",
     "iopub.status.busy": "2023-08-10T12:53:18.464203Z",
     "iopub.status.idle": "2023-08-10T12:53:25.548598Z",
     "shell.execute_reply": "2023-08-10T12:53:25.547487Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "87.1 ns ± 0.918 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:25.556867Z",
     "iopub.status.busy": "2023-08-10T12:53:25.556092Z",
     "iopub.status.idle": "2023-08-10T12:53:25.567872Z",
     "shell.execute_reply": "2023-08-10T12:53:25.566226Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd3e0e3c370>\n",
       "├── 'a' --> tensor([[ 1.6424,  0.9024, -1.6975],\n",
       "│                   [-0.0903, -1.8080, -0.4248]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd3e0e3c1f0>\n",
       "    └── 'c' --> tensor([[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:25.573446Z",
     "iopub.status.busy": "2023-08-10T12:53:25.573073Z",
     "iopub.status.idle": "2023-08-10T12:53:32.895990Z",
     "shell.execute_reply": "2023-08-10T12:53:32.895043Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.1 ns ± 1.09 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:32.900680Z",
     "iopub.status.busy": "2023-08-10T12:53:32.900017Z",
     "iopub.status.idle": "2023-08-10T12:53:33.455479Z",
     "shell.execute_reply": "2023-08-10T12:53:33.454306Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:33.460502Z",
     "iopub.status.busy": "2023-08-10T12:53:33.459978Z",
     "iopub.status.idle": "2023-08-10T12:53:33.469121Z",
     "shell.execute_reply": "2023-08-10T12:53:33.468007Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:33.474860Z",
     "iopub.status.busy": "2023-08-10T12:53:33.474197Z",
     "iopub.status.idle": "2023-08-10T12:53:33.483504Z",
     "shell.execute_reply": "2023-08-10T12:53:33.481290Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.6375, -0.4596,  0.2620],\n",
       "        [ 1.3218, -1.1779, -0.1000]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:33.490458Z",
     "iopub.status.busy": "2023-08-10T12:53:33.490062Z",
     "iopub.status.idle": "2023-08-10T12:53:39.375827Z",
     "shell.execute_reply": "2023-08-10T12:53:39.374887Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.6 ns ± 1.05 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:39.380191Z",
     "iopub.status.busy": "2023-08-10T12:53:39.379826Z",
     "iopub.status.idle": "2023-08-10T12:53:39.390676Z",
     "shell.execute_reply": "2023-08-10T12:53:39.389552Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2187,  0.6368,  0.7257],\n",
       "               [ 0.4634,  0.2157,  0.5299]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:39.395135Z",
     "iopub.status.busy": "2023-08-10T12:53:39.394734Z",
     "iopub.status.idle": "2023-08-10T12:53:44.982052Z",
     "shell.execute_reply": "2023-08-10T12:53:44.980222Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "689 ns ± 5.85 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:44.987511Z",
     "iopub.status.busy": "2023-08-10T12:53:44.986846Z",
     "iopub.status.idle": "2023-08-10T12:53:53.848973Z",
     "shell.execute_reply": "2023-08-10T12:53:53.847887Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.09 µs ± 13.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:53:53.853883Z",
     "iopub.status.busy": "2023-08-10T12:53:53.853283Z",
     "iopub.status.idle": "2023-08-10T12:54:05.005767Z",
     "shell.execute_reply": "2023-08-10T12:54:05.003367Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.7 µs ± 98.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:05.012048Z",
     "iopub.status.busy": "2023-08-10T12:54:05.011621Z",
     "iopub.status.idle": "2023-08-10T12:54:05.017945Z",
     "shell.execute_reply": "2023-08-10T12:54:05.016863Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:05.023028Z",
     "iopub.status.busy": "2023-08-10T12:54:05.022327Z",
     "iopub.status.idle": "2023-08-10T12:54:07.444983Z",
     "shell.execute_reply": "2023-08-10T12:54:07.443843Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "298 µs ± 19.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:07.449756Z",
     "iopub.status.busy": "2023-08-10T12:54:07.449375Z",
     "iopub.status.idle": "2023-08-10T12:54:09.845367Z",
     "shell.execute_reply": "2023-08-10T12:54:09.844238Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "294 µs ± 27.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:09.850405Z",
     "iopub.status.busy": "2023-08-10T12:54:09.849473Z",
     "iopub.status.idle": "2023-08-10T12:54:09.854743Z",
     "shell.execute_reply": "2023-08-10T12:54:09.853643Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:09.860080Z",
     "iopub.status.busy": "2023-08-10T12:54:09.859411Z",
     "iopub.status.idle": "2023-08-10T12:54:09.873566Z",
     "shell.execute_reply": "2023-08-10T12:54:09.871579Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd3e3eba520>\n",
       "├── 'a' --> tensor([[[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]],\n",
       "│           \n",
       "│                   [[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]],\n",
       "│           \n",
       "│                   [[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]],\n",
       "│           \n",
       "│                   [[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]],\n",
       "│           \n",
       "│                   [[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]],\n",
       "│           \n",
       "│                   [[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]],\n",
       "│           \n",
       "│                   [[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]],\n",
       "│           \n",
       "│                   [[-0.6375, -0.4596,  0.2620],\n",
       "│                    [ 1.3218, -1.1779, -0.1000]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd309749820>\n",
       "    └── 'c' --> tensor([[[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "                \n",
       "                        [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "                \n",
       "                        [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "                \n",
       "                        [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "                \n",
       "                        [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "                \n",
       "                        [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "                \n",
       "                        [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "                \n",
       "                        [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                         [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                         [ 0.0688, -1.4137,  2.6128,  0.1790]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:09.878097Z",
     "iopub.status.busy": "2023-08-10T12:54:09.877721Z",
     "iopub.status.idle": "2023-08-10T12:54:13.937508Z",
     "shell.execute_reply": "2023-08-10T12:54:13.935535Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50 µs ± 1.08 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:13.941860Z",
     "iopub.status.busy": "2023-08-10T12:54:13.941499Z",
     "iopub.status.idle": "2023-08-10T12:54:13.953189Z",
     "shell.execute_reply": "2023-08-10T12:54:13.952124Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd3e0ddc5e0>\n",
       "├── 'a' --> tensor([[-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000],\n",
       "│                   [-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000],\n",
       "│                   [-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000],\n",
       "│                   [-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000],\n",
       "│                   [-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000],\n",
       "│                   [-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000],\n",
       "│                   [-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000],\n",
       "│                   [-0.6375, -0.4596,  0.2620],\n",
       "│                   [ 1.3218, -1.1779, -0.1000]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd309749a00>\n",
       "    └── 'c' --> tensor([[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                        [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                        [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                        [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                        [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                        [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                        [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                        [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                        [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                        [ 0.0688, -1.4137,  2.6128,  0.1790]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:13.959517Z",
     "iopub.status.busy": "2023-08-10T12:54:13.959016Z",
     "iopub.status.idle": "2023-08-10T12:54:18.032941Z",
     "shell.execute_reply": "2023-08-10T12:54:18.032003Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50.6 µs ± 4.23 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:18.037462Z",
     "iopub.status.busy": "2023-08-10T12:54:18.036884Z",
     "iopub.status.idle": "2023-08-10T12:54:26.300814Z",
     "shell.execute_reply": "2023-08-10T12:54:26.298606Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "102 µs ± 2.61 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:26.305759Z",
     "iopub.status.busy": "2023-08-10T12:54:26.305361Z",
     "iopub.status.idle": "2023-08-10T12:54:26.337290Z",
     "shell.execute_reply": "2023-08-10T12:54:26.327460Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "              \n",
       "                      [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "              \n",
       "                      [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "              \n",
       "                      [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "              \n",
       "                      [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "              \n",
       "                      [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "              \n",
       "                      [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]],\n",
       "              \n",
       "                      [[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                       [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                       [ 0.0688, -1.4137,  2.6128,  0.1790]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]],\n",
       "       \n",
       "               [[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]],\n",
       "       \n",
       "               [[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]],\n",
       "       \n",
       "               [[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]],\n",
       "       \n",
       "               [[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]],\n",
       "       \n",
       "               [[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]],\n",
       "       \n",
       "               [[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]],\n",
       "       \n",
       "               [[-0.6375, -0.4596,  0.2620],\n",
       "                [ 1.3218, -1.1779, -0.1000]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:26.344087Z",
     "iopub.status.busy": "2023-08-10T12:54:26.343279Z",
     "iopub.status.idle": "2023-08-10T12:54:36.010294Z",
     "shell.execute_reply": "2023-08-10T12:54:36.009295Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "119 µs ± 2.87 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:36.015702Z",
     "iopub.status.busy": "2023-08-10T12:54:36.014834Z",
     "iopub.status.idle": "2023-08-10T12:54:36.027044Z",
     "shell.execute_reply": "2023-08-10T12:54:36.025520Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                      [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                      [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                      [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                      [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                      [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                      [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790],\n",
       "                      [-0.9147, -0.8003,  0.6437, -1.1510],\n",
       "                      [-0.2098,  0.9564, -1.6851,  0.4313],\n",
       "                      [ 0.0688, -1.4137,  2.6128,  0.1790]]),\n",
       "       ),\n",
       "    a: tensor([[-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000],\n",
       "               [-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000],\n",
       "               [-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000],\n",
       "               [-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000],\n",
       "               [-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000],\n",
       "               [-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000],\n",
       "               [-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000],\n",
       "               [-0.6375, -0.4596,  0.2620],\n",
       "               [ 1.3218, -1.1779, -0.1000]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:36.037550Z",
     "iopub.status.busy": "2023-08-10T12:54:36.037132Z",
     "iopub.status.idle": "2023-08-10T12:54:37.775703Z",
     "shell.execute_reply": "2023-08-10T12:54:37.774752Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "210 µs ± 5.22 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T12:54:37.780449Z",
     "iopub.status.busy": "2023-08-10T12:54:37.779604Z",
     "iopub.status.idle": "2023-08-10T12:54:43.865276Z",
     "shell.execute_reply": "2023-08-10T12:54:43.861755Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "768 µs ± 94 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
