{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:42.991927Z",
     "iopub.status.busy": "2023-08-10T09:59:42.991644Z",
     "iopub.status.idle": "2023-08-10T09:59:44.667510Z",
     "shell.execute_reply": "2023-08-10T09:59:44.666133Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:44.672663Z",
     "iopub.status.busy": "2023-08-10T09:59:44.672092Z",
     "iopub.status.idle": "2023-08-10T09:59:45.054927Z",
     "shell.execute_reply": "2023-08-10T09:59:45.053910Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:45.059576Z",
     "iopub.status.busy": "2023-08-10T09:59:45.058977Z",
     "iopub.status.idle": "2023-08-10T09:59:45.070167Z",
     "shell.execute_reply": "2023-08-10T09:59:45.069318Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff09b4fc640>\n",
       "├── 'a' --> tensor([[ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff09b4fc310>\n",
       "    └── 'c' --> tensor([[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:45.074423Z",
     "iopub.status.busy": "2023-08-10T09:59:45.074139Z",
     "iopub.status.idle": "2023-08-10T09:59:45.080170Z",
     "shell.execute_reply": "2023-08-10T09:59:45.079302Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7829,  0.6646, -1.7867],\n",
       "        [-0.5245,  0.0034,  0.7927]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:45.084604Z",
     "iopub.status.busy": "2023-08-10T09:59:45.084084Z",
     "iopub.status.idle": "2023-08-10T09:59:52.045083Z",
     "shell.execute_reply": "2023-08-10T09:59:52.043900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.7 ns ± 0.354 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:52.049998Z",
     "iopub.status.busy": "2023-08-10T09:59:52.049400Z",
     "iopub.status.idle": "2023-08-10T09:59:52.057268Z",
     "shell.execute_reply": "2023-08-10T09:59:52.056385Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff09b4fc640>\n",
       "├── 'a' --> tensor([[-0.5010,  1.1006,  0.4434],\n",
       "│                   [-0.1253, -0.0088, -1.8695]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff09b4fc310>\n",
       "    └── 'c' --> tensor([[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:52.061687Z",
     "iopub.status.busy": "2023-08-10T09:59:52.060917Z",
     "iopub.status.idle": "2023-08-10T09:59:58.998276Z",
     "shell.execute_reply": "2023-08-10T09:59:58.997022Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.4 ns ± 0.365 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:59.003121Z",
     "iopub.status.busy": "2023-08-10T09:59:59.002644Z",
     "iopub.status.idle": "2023-08-10T09:59:59.454140Z",
     "shell.execute_reply": "2023-08-10T09:59:59.452864Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:59.459520Z",
     "iopub.status.busy": "2023-08-10T09:59:59.458866Z",
     "iopub.status.idle": "2023-08-10T09:59:59.465891Z",
     "shell.execute_reply": "2023-08-10T09:59:59.465068Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:59.469590Z",
     "iopub.status.busy": "2023-08-10T09:59:59.469096Z",
     "iopub.status.idle": "2023-08-10T09:59:59.474782Z",
     "shell.execute_reply": "2023-08-10T09:59:59.473982Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7829,  0.6646, -1.7867],\n",
       "        [-0.5245,  0.0034,  0.7927]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:59:59.478975Z",
     "iopub.status.busy": "2023-08-10T09:59:59.478458Z",
     "iopub.status.idle": "2023-08-10T10:00:05.619876Z",
     "shell.execute_reply": "2023-08-10T10:00:05.618912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.6 ns ± 0.412 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:05.625977Z",
     "iopub.status.busy": "2023-08-10T10:00:05.625461Z",
     "iopub.status.idle": "2023-08-10T10:00:05.633111Z",
     "shell.execute_reply": "2023-08-10T10:00:05.632239Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2014, -0.4798, -1.6550],\n",
       "               [-0.5861,  0.6366, -1.3671]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:05.637286Z",
     "iopub.status.busy": "2023-08-10T10:00:05.636546Z",
     "iopub.status.idle": "2023-08-10T10:00:10.861940Z",
     "shell.execute_reply": "2023-08-10T10:00:10.860683Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "644 ns ± 6.56 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:10.867203Z",
     "iopub.status.busy": "2023-08-10T10:00:10.866242Z",
     "iopub.status.idle": "2023-08-10T10:00:19.270483Z",
     "shell.execute_reply": "2023-08-10T10:00:19.269409Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.03 µs ± 10.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:19.275642Z",
     "iopub.status.busy": "2023-08-10T10:00:19.274764Z",
     "iopub.status.idle": "2023-08-10T10:00:29.218077Z",
     "shell.execute_reply": "2023-08-10T10:00:29.216977Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.2 µs ± 68.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:29.222342Z",
     "iopub.status.busy": "2023-08-10T10:00:29.221757Z",
     "iopub.status.idle": "2023-08-10T10:00:29.225722Z",
     "shell.execute_reply": "2023-08-10T10:00:29.224824Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:29.230347Z",
     "iopub.status.busy": "2023-08-10T10:00:29.229653Z",
     "iopub.status.idle": "2023-08-10T10:00:42.811764Z",
     "shell.execute_reply": "2023-08-10T10:00:42.810743Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 823 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:42.816092Z",
     "iopub.status.busy": "2023-08-10T10:00:42.815362Z",
     "iopub.status.idle": "2023-08-10T10:00:56.386303Z",
     "shell.execute_reply": "2023-08-10T10:00:56.385563Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 1.51 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:56.390309Z",
     "iopub.status.busy": "2023-08-10T10:00:56.390002Z",
     "iopub.status.idle": "2023-08-10T10:00:56.395407Z",
     "shell.execute_reply": "2023-08-10T10:00:56.394630Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:56.399358Z",
     "iopub.status.busy": "2023-08-10T10:00:56.398638Z",
     "iopub.status.idle": "2023-08-10T10:00:56.410554Z",
     "shell.execute_reply": "2023-08-10T10:00:56.409857Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fefc0d1de50>\n",
       "├── 'a' --> tensor([[[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]],\n",
       "│           \n",
       "│                   [[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]],\n",
       "│           \n",
       "│                   [[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]],\n",
       "│           \n",
       "│                   [[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]],\n",
       "│           \n",
       "│                   [[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]],\n",
       "│           \n",
       "│                   [[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]],\n",
       "│           \n",
       "│                   [[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]],\n",
       "│           \n",
       "│                   [[ 0.7829,  0.6646, -1.7867],\n",
       "│                    [-0.5245,  0.0034,  0.7927]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fefc0d1de80>\n",
       "    └── 'c' --> tensor([[[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "                \n",
       "                        [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "                \n",
       "                        [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "                \n",
       "                        [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "                \n",
       "                        [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "                \n",
       "                        [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "                \n",
       "                        [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "                \n",
       "                        [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                         [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                         [-0.6988,  0.1330, -1.0434, -0.0484]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:56.414223Z",
     "iopub.status.busy": "2023-08-10T10:00:56.413656Z",
     "iopub.status.idle": "2023-08-10T10:00:59.509204Z",
     "shell.execute_reply": "2023-08-10T10:00:59.507962Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38 µs ± 238 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:59.514518Z",
     "iopub.status.busy": "2023-08-10T10:00:59.513495Z",
     "iopub.status.idle": "2023-08-10T10:00:59.524645Z",
     "shell.execute_reply": "2023-08-10T10:00:59.523872Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff098481460>\n",
       "├── 'a' --> tensor([[ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927],\n",
       "│                   [ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927],\n",
       "│                   [ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927],\n",
       "│                   [ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927],\n",
       "│                   [ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927],\n",
       "│                   [ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927],\n",
       "│                   [ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927],\n",
       "│                   [ 0.7829,  0.6646, -1.7867],\n",
       "│                   [-0.5245,  0.0034,  0.7927]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff0984812e0>\n",
       "    └── 'c' --> tensor([[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                        [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                        [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                        [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                        [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                        [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                        [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                        [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                        [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                        [-0.6988,  0.1330, -1.0434, -0.0484]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:00:59.528561Z",
     "iopub.status.busy": "2023-08-10T10:00:59.528007Z",
     "iopub.status.idle": "2023-08-10T10:01:02.411015Z",
     "shell.execute_reply": "2023-08-10T10:01:02.410054Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35.4 µs ± 136 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:01:02.414955Z",
     "iopub.status.busy": "2023-08-10T10:01:02.414362Z",
     "iopub.status.idle": "2023-08-10T10:01:08.649607Z",
     "shell.execute_reply": "2023-08-10T10:01:08.648844Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.8 µs ± 207 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:01:08.653973Z",
     "iopub.status.busy": "2023-08-10T10:01:08.653071Z",
     "iopub.status.idle": "2023-08-10T10:01:08.662776Z",
     "shell.execute_reply": "2023-08-10T10:01:08.661938Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]],\n",
       "       \n",
       "               [[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]],\n",
       "       \n",
       "               [[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]],\n",
       "       \n",
       "               [[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]],\n",
       "       \n",
       "               [[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]],\n",
       "       \n",
       "               [[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]],\n",
       "       \n",
       "               [[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]],\n",
       "       \n",
       "               [[ 0.7829,  0.6646, -1.7867],\n",
       "                [-0.5245,  0.0034,  0.7927]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "              \n",
       "                      [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "              \n",
       "                      [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "              \n",
       "                      [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "              \n",
       "                      [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "              \n",
       "                      [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "              \n",
       "                      [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]],\n",
       "              \n",
       "                      [[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                       [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                       [-0.6988,  0.1330, -1.0434, -0.0484]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:01:08.666701Z",
     "iopub.status.busy": "2023-08-10T10:01:08.666261Z",
     "iopub.status.idle": "2023-08-10T10:01:16.584831Z",
     "shell.execute_reply": "2023-08-10T10:01:16.583988Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96.9 µs ± 713 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:01:16.588997Z",
     "iopub.status.busy": "2023-08-10T10:01:16.588401Z",
     "iopub.status.idle": "2023-08-10T10:01:16.597006Z",
     "shell.execute_reply": "2023-08-10T10:01:16.596223Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927],\n",
       "               [ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927],\n",
       "               [ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927],\n",
       "               [ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927],\n",
       "               [ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927],\n",
       "               [ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927],\n",
       "               [ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927],\n",
       "               [ 0.7829,  0.6646, -1.7867],\n",
       "               [-0.5245,  0.0034,  0.7927]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                      [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                      [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                      [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                      [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                      [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                      [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484],\n",
       "                      [ 0.1074, -0.9879, -1.6188, -1.0963],\n",
       "                      [-0.2740, -0.0236,  0.7456,  0.7840],\n",
       "                      [-0.6988,  0.1330, -1.0434, -0.0484]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:01:16.601169Z",
     "iopub.status.busy": "2023-08-10T10:01:16.600432Z",
     "iopub.status.idle": "2023-08-10T10:01:30.912128Z",
     "shell.execute_reply": "2023-08-10T10:01:30.909621Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "176 µs ± 586 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T10:01:30.916809Z",
     "iopub.status.busy": "2023-08-10T10:01:30.916494Z",
     "iopub.status.idle": "2023-08-10T10:01:34.222439Z",
     "shell.execute_reply": "2023-08-10T10:01:34.221622Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "406 µs ± 9.79 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
