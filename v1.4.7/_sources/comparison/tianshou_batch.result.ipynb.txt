{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:07.816951Z",
     "iopub.status.busy": "2023-05-26T07:24:07.816541Z",
     "iopub.status.idle": "2023-05-26T07:24:09.096452Z",
     "shell.execute_reply": "2023-05-26T07:24:09.095774Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:09.100120Z",
     "iopub.status.busy": "2023-05-26T07:24:09.099604Z",
     "iopub.status.idle": "2023-05-26T07:24:09.381002Z",
     "shell.execute_reply": "2023-05-26T07:24:09.380315Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:09.384757Z",
     "iopub.status.busy": "2023-05-26T07:24:09.384140Z",
     "iopub.status.idle": "2023-05-26T07:24:09.392793Z",
     "shell.execute_reply": "2023-05-26T07:24:09.392155Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb9c82bc580>\n",
       "├── 'a' --> tensor([[ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb9c82bc040>\n",
       "    └── 'c' --> tensor([[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:09.396793Z",
     "iopub.status.busy": "2023-05-26T07:24:09.396363Z",
     "iopub.status.idle": "2023-05-26T07:24:09.401047Z",
     "shell.execute_reply": "2023-05-26T07:24:09.400425Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.2853, -0.6322, -0.6709],\n",
       "        [-0.6807, -0.1294, -0.2628]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:09.404174Z",
     "iopub.status.busy": "2023-05-26T07:24:09.403963Z",
     "iopub.status.idle": "2023-05-26T07:24:14.270618Z",
     "shell.execute_reply": "2023-05-26T07:24:14.270006Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.5 ns ± 0.0342 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:14.273756Z",
     "iopub.status.busy": "2023-05-26T07:24:14.273152Z",
     "iopub.status.idle": "2023-05-26T07:24:14.279398Z",
     "shell.execute_reply": "2023-05-26T07:24:14.278725Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb9c82bc580>\n",
       "├── 'a' --> tensor([[ 0.2159,  0.4805,  0.9980],\n",
       "│                   [-1.2481,  0.7542,  1.4866]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb9c82bc040>\n",
       "    └── 'c' --> tensor([[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:14.282167Z",
     "iopub.status.busy": "2023-05-26T07:24:14.281828Z",
     "iopub.status.idle": "2023-05-26T07:24:19.119010Z",
     "shell.execute_reply": "2023-05-26T07:24:19.118391Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59 ns ± 0.0702 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:19.122298Z",
     "iopub.status.busy": "2023-05-26T07:24:19.121937Z",
     "iopub.status.idle": "2023-05-26T07:24:19.466550Z",
     "shell.execute_reply": "2023-05-26T07:24:19.465855Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:19.470206Z",
     "iopub.status.busy": "2023-05-26T07:24:19.469455Z",
     "iopub.status.idle": "2023-05-26T07:24:19.475255Z",
     "shell.execute_reply": "2023-05-26T07:24:19.474583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:19.478062Z",
     "iopub.status.busy": "2023-05-26T07:24:19.477706Z",
     "iopub.status.idle": "2023-05-26T07:24:19.482562Z",
     "shell.execute_reply": "2023-05-26T07:24:19.481931Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.2853, -0.6322, -0.6709],\n",
       "        [-0.6807, -0.1294, -0.2628]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:19.485405Z",
     "iopub.status.busy": "2023-05-26T07:24:19.485051Z",
     "iopub.status.idle": "2023-05-26T07:24:23.917080Z",
     "shell.execute_reply": "2023-05-26T07:24:23.916487Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54.5 ns ± 0.024 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:23.920326Z",
     "iopub.status.busy": "2023-05-26T07:24:23.919741Z",
     "iopub.status.idle": "2023-05-26T07:24:23.925715Z",
     "shell.execute_reply": "2023-05-26T07:24:23.925056Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3147,  1.5186, -0.9530],\n",
       "               [-2.0315, -0.9509,  0.6998]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:23.928590Z",
     "iopub.status.busy": "2023-05-26T07:24:23.928220Z",
     "iopub.status.idle": "2023-05-26T07:24:27.860291Z",
     "shell.execute_reply": "2023-05-26T07:24:27.859687Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "484 ns ± 0.223 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:27.863569Z",
     "iopub.status.busy": "2023-05-26T07:24:27.862986Z",
     "iopub.status.idle": "2023-05-26T07:24:34.602912Z",
     "shell.execute_reply": "2023-05-26T07:24:34.601819Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "830 ns ± 0.104 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:34.606035Z",
     "iopub.status.busy": "2023-05-26T07:24:34.605626Z",
     "iopub.status.idle": "2023-05-26T07:24:44.011818Z",
     "shell.execute_reply": "2023-05-26T07:24:44.011238Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 34.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:44.015089Z",
     "iopub.status.busy": "2023-05-26T07:24:44.014615Z",
     "iopub.status.idle": "2023-05-26T07:24:44.018123Z",
     "shell.execute_reply": "2023-05-26T07:24:44.017456Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:44.021232Z",
     "iopub.status.busy": "2023-05-26T07:24:44.020609Z",
     "iopub.status.idle": "2023-05-26T07:24:55.384800Z",
     "shell.execute_reply": "2023-05-26T07:24:55.384098Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 328 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:55.388466Z",
     "iopub.status.busy": "2023-05-26T07:24:55.388220Z",
     "iopub.status.idle": "2023-05-26T07:25:06.990993Z",
     "shell.execute_reply": "2023-05-26T07:25:06.990287Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 561 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:06.994485Z",
     "iopub.status.busy": "2023-05-26T07:25:06.994246Z",
     "iopub.status.idle": "2023-05-26T07:25:06.999043Z",
     "shell.execute_reply": "2023-05-26T07:25:06.998429Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:07.002129Z",
     "iopub.status.busy": "2023-05-26T07:25:07.001819Z",
     "iopub.status.idle": "2023-05-26T07:25:07.011739Z",
     "shell.execute_reply": "2023-05-26T07:25:07.011134Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8edfe8c10>\n",
       "├── 'a' --> tensor([[[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]],\n",
       "│           \n",
       "│                   [[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]],\n",
       "│           \n",
       "│                   [[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]],\n",
       "│           \n",
       "│                   [[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]],\n",
       "│           \n",
       "│                   [[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]],\n",
       "│           \n",
       "│                   [[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]],\n",
       "│           \n",
       "│                   [[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]],\n",
       "│           \n",
       "│                   [[ 1.2853, -0.6322, -0.6709],\n",
       "│                    [-0.6807, -0.1294, -0.2628]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb9c422d760>\n",
       "    └── 'c' --> tensor([[[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "                \n",
       "                        [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "                \n",
       "                        [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "                \n",
       "                        [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "                \n",
       "                        [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "                \n",
       "                        [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "                \n",
       "                        [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "                \n",
       "                        [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                         [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                         [ 2.1034,  0.2395,  1.0267,  0.6992]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:07.015020Z",
     "iopub.status.busy": "2023-05-26T07:25:07.014606Z",
     "iopub.status.idle": "2023-05-26T07:25:09.804167Z",
     "shell.execute_reply": "2023-05-26T07:25:09.803447Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34.3 µs ± 52.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:09.807473Z",
     "iopub.status.busy": "2023-05-26T07:25:09.807237Z",
     "iopub.status.idle": "2023-05-26T07:25:09.816483Z",
     "shell.execute_reply": "2023-05-26T07:25:09.815879Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8edfe89a0>\n",
       "├── 'a' --> tensor([[ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628],\n",
       "│                   [ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628],\n",
       "│                   [ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628],\n",
       "│                   [ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628],\n",
       "│                   [ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628],\n",
       "│                   [ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628],\n",
       "│                   [ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628],\n",
       "│                   [ 1.2853, -0.6322, -0.6709],\n",
       "│                   [-0.6807, -0.1294, -0.2628]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8edfe8cd0>\n",
       "    └── 'c' --> tensor([[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                        [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                        [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                        [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                        [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                        [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                        [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                        [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                        [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                        [ 2.1034,  0.2395,  1.0267,  0.6992]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:09.819732Z",
     "iopub.status.busy": "2023-05-26T07:25:09.819247Z",
     "iopub.status.idle": "2023-05-26T07:25:12.420744Z",
     "shell.execute_reply": "2023-05-26T07:25:12.420147Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 79.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:12.423965Z",
     "iopub.status.busy": "2023-05-26T07:25:12.423524Z",
     "iopub.status.idle": "2023-05-26T07:25:18.192399Z",
     "shell.execute_reply": "2023-05-26T07:25:18.191314Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.9 µs ± 135 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:18.195605Z",
     "iopub.status.busy": "2023-05-26T07:25:18.195237Z",
     "iopub.status.idle": "2023-05-26T07:25:18.203639Z",
     "shell.execute_reply": "2023-05-26T07:25:18.203041Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]],\n",
       "       \n",
       "               [[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]],\n",
       "       \n",
       "               [[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]],\n",
       "       \n",
       "               [[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]],\n",
       "       \n",
       "               [[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]],\n",
       "       \n",
       "               [[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]],\n",
       "       \n",
       "               [[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]],\n",
       "       \n",
       "               [[ 1.2853, -0.6322, -0.6709],\n",
       "                [-0.6807, -0.1294, -0.2628]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "              \n",
       "                      [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "              \n",
       "                      [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "              \n",
       "                      [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "              \n",
       "                      [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "              \n",
       "                      [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "              \n",
       "                      [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]],\n",
       "              \n",
       "                      [[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                       [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                       [ 2.1034,  0.2395,  1.0267,  0.6992]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:18.207012Z",
     "iopub.status.busy": "2023-05-26T07:25:18.206492Z",
     "iopub.status.idle": "2023-05-26T07:25:24.735016Z",
     "shell.execute_reply": "2023-05-26T07:25:24.733945Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.3 µs ± 315 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:24.738646Z",
     "iopub.status.busy": "2023-05-26T07:25:24.738250Z",
     "iopub.status.idle": "2023-05-26T07:25:24.745426Z",
     "shell.execute_reply": "2023-05-26T07:25:24.744769Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628],\n",
       "               [ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628],\n",
       "               [ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628],\n",
       "               [ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628],\n",
       "               [ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628],\n",
       "               [ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628],\n",
       "               [ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628],\n",
       "               [ 1.2853, -0.6322, -0.6709],\n",
       "               [-0.6807, -0.1294, -0.2628]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                      [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                      [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                      [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                      [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                      [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                      [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992],\n",
       "                      [-0.0800,  0.3897, -0.3020, -2.0715],\n",
       "                      [-0.6960, -2.1471, -0.2288, -0.1620],\n",
       "                      [ 2.1034,  0.2395,  1.0267,  0.6992]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:24.748255Z",
     "iopub.status.busy": "2023-05-26T07:25:24.747889Z",
     "iopub.status.idle": "2023-05-26T07:25:36.667459Z",
     "shell.execute_reply": "2023-05-26T07:25:36.666858Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "147 µs ± 199 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:25:36.670560Z",
     "iopub.status.busy": "2023-05-26T07:25:36.670102Z",
     "iopub.status.idle": "2023-05-26T07:25:39.373344Z",
     "shell.execute_reply": "2023-05-26T07:25:39.372780Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "332 µs ± 1.83 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
