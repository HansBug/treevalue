{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:36.164057Z",
     "iopub.status.busy": "2023-04-16T14:52:36.163689Z",
     "iopub.status.idle": "2023-04-16T14:52:37.438253Z",
     "shell.execute_reply": "2023-04-16T14:52:37.436947Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:37.442471Z",
     "iopub.status.busy": "2023-04-16T14:52:37.441882Z",
     "iopub.status.idle": "2023-04-16T14:52:37.712037Z",
     "shell.execute_reply": "2023-04-16T14:52:37.710680Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:37.715355Z",
     "iopub.status.busy": "2023-04-16T14:52:37.714777Z",
     "iopub.status.idle": "2023-04-16T14:52:37.725042Z",
     "shell.execute_reply": "2023-04-16T14:52:37.724444Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcda4ba39d0>\n",
       "├── 'a' --> tensor([[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcda4b940a0>\n",
       "    └── 'c' --> tensor([[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:37.727728Z",
     "iopub.status.busy": "2023-04-16T14:52:37.727380Z",
     "iopub.status.idle": "2023-04-16T14:52:37.731973Z",
     "shell.execute_reply": "2023-04-16T14:52:37.731362Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "        [ 8.3979e-04, -3.0638e-01,  1.9751e+00]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:37.734982Z",
     "iopub.status.busy": "2023-04-16T14:52:37.734647Z",
     "iopub.status.idle": "2023-04-16T14:52:42.685621Z",
     "shell.execute_reply": "2023-04-16T14:52:42.684883Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.3 ns ± 0.081 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:42.688828Z",
     "iopub.status.busy": "2023-04-16T14:52:42.688457Z",
     "iopub.status.idle": "2023-04-16T14:52:42.694571Z",
     "shell.execute_reply": "2023-04-16T14:52:42.693933Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcda4ba39d0>\n",
       "├── 'a' --> tensor([[-1.2255,  0.2507,  0.3863],\n",
       "│                   [-1.8010, -0.6577, -2.3442]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcda4b940a0>\n",
       "    └── 'c' --> tensor([[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:42.697304Z",
     "iopub.status.busy": "2023-04-16T14:52:42.696969Z",
     "iopub.status.idle": "2023-04-16T14:52:48.335819Z",
     "shell.execute_reply": "2023-04-16T14:52:48.335238Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70 ns ± 0.0677 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:48.339200Z",
     "iopub.status.busy": "2023-04-16T14:52:48.338661Z",
     "iopub.status.idle": "2023-04-16T14:52:48.680766Z",
     "shell.execute_reply": "2023-04-16T14:52:48.680084Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:48.684217Z",
     "iopub.status.busy": "2023-04-16T14:52:48.683698Z",
     "iopub.status.idle": "2023-04-16T14:52:48.689098Z",
     "shell.execute_reply": "2023-04-16T14:52:48.688477Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:48.691789Z",
     "iopub.status.busy": "2023-04-16T14:52:48.691444Z",
     "iopub.status.idle": "2023-04-16T14:52:48.696113Z",
     "shell.execute_reply": "2023-04-16T14:52:48.695504Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "        [ 8.3979e-04, -3.0638e-01,  1.9751e+00]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:48.699052Z",
     "iopub.status.busy": "2023-04-16T14:52:48.698501Z",
     "iopub.status.idle": "2023-04-16T14:52:53.970525Z",
     "shell.execute_reply": "2023-04-16T14:52:53.969948Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.1 ns ± 0.00612 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:53.973948Z",
     "iopub.status.busy": "2023-04-16T14:52:53.973339Z",
     "iopub.status.idle": "2023-04-16T14:52:53.979101Z",
     "shell.execute_reply": "2023-04-16T14:52:53.978469Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9364,  1.6890, -0.8428],\n",
       "               [-0.4768,  0.5121, -0.0124]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:53.981742Z",
     "iopub.status.busy": "2023-04-16T14:52:53.981409Z",
     "iopub.status.idle": "2023-04-16T14:52:57.957870Z",
     "shell.execute_reply": "2023-04-16T14:52:57.957263Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "489 ns ± 0.126 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:52:57.961228Z",
     "iopub.status.busy": "2023-04-16T14:52:57.960707Z",
     "iopub.status.idle": "2023-04-16T14:53:04.891817Z",
     "shell.execute_reply": "2023-04-16T14:53:04.891074Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "850 ns ± 6.74 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:04.894959Z",
     "iopub.status.busy": "2023-04-16T14:53:04.894581Z",
     "iopub.status.idle": "2023-04-16T14:53:14.103170Z",
     "shell.execute_reply": "2023-04-16T14:53:14.102197Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 48.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:14.106693Z",
     "iopub.status.busy": "2023-04-16T14:53:14.106338Z",
     "iopub.status.idle": "2023-04-16T14:53:14.110647Z",
     "shell.execute_reply": "2023-04-16T14:53:14.110053Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:14.113330Z",
     "iopub.status.busy": "2023-04-16T14:53:14.113109Z",
     "iopub.status.idle": "2023-04-16T14:53:25.247986Z",
     "shell.execute_reply": "2023-04-16T14:53:25.247439Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 716 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:25.250994Z",
     "iopub.status.busy": "2023-04-16T14:53:25.250634Z",
     "iopub.status.idle": "2023-04-16T14:53:36.615722Z",
     "shell.execute_reply": "2023-04-16T14:53:36.615165Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 1.03 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:36.621736Z",
     "iopub.status.busy": "2023-04-16T14:53:36.621384Z",
     "iopub.status.idle": "2023-04-16T14:53:36.624394Z",
     "shell.execute_reply": "2023-04-16T14:53:36.623865Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:36.626984Z",
     "iopub.status.busy": "2023-04-16T14:53:36.626635Z",
     "iopub.status.idle": "2023-04-16T14:53:36.633564Z",
     "shell.execute_reply": "2023-04-16T14:53:36.632893Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcda4ba3c10>\n",
       "├── 'a' --> tensor([[[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "│           \n",
       "│                   [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "│           \n",
       "│                   [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "│           \n",
       "│                   [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "│           \n",
       "│                   [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "│           \n",
       "│                   [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "│           \n",
       "│                   [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "│           \n",
       "│                   [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                    [ 8.3979e-04, -3.0638e-01,  1.9751e+00]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcda4ba3760>\n",
       "    └── 'c' --> tensor([[[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "                \n",
       "                        [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "                \n",
       "                        [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "                \n",
       "                        [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "                \n",
       "                        [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "                \n",
       "                        [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "                \n",
       "                        [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "                \n",
       "                        [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                         [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                         [ 1.0342,  1.1773, -1.3727, -2.7357]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:36.636265Z",
     "iopub.status.busy": "2023-04-16T14:53:36.635928Z",
     "iopub.status.idle": "2023-04-16T14:53:39.271209Z",
     "shell.execute_reply": "2023-04-16T14:53:39.270466Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 63.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:39.274860Z",
     "iopub.status.busy": "2023-04-16T14:53:39.274625Z",
     "iopub.status.idle": "2023-04-16T14:53:39.281697Z",
     "shell.execute_reply": "2023-04-16T14:53:39.281077Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcd7c3e2070>\n",
       "├── 'a' --> tensor([[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "│                   [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "│                   [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "│                   [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "│                   [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "│                   [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "│                   [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "│                   [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "│                   [ 8.3979e-04, -3.0638e-01,  1.9751e+00]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcda4b60bb0>\n",
       "    └── 'c' --> tensor([[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                        [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                        [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                        [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                        [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                        [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                        [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                        [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                        [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                        [ 1.0342,  1.1773, -1.3727, -2.7357]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:39.284949Z",
     "iopub.status.busy": "2023-04-16T14:53:39.284731Z",
     "iopub.status.idle": "2023-04-16T14:53:41.768782Z",
     "shell.execute_reply": "2023-04-16T14:53:41.768035Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.6 µs ± 126 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:41.771888Z",
     "iopub.status.busy": "2023-04-16T14:53:41.771519Z",
     "iopub.status.idle": "2023-04-16T14:53:47.244573Z",
     "shell.execute_reply": "2023-04-16T14:53:47.243984Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.4 µs ± 96.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:47.247832Z",
     "iopub.status.busy": "2023-04-16T14:53:47.247309Z",
     "iopub.status.idle": "2023-04-16T14:53:47.254664Z",
     "shell.execute_reply": "2023-04-16T14:53:47.254033Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "              \n",
       "                      [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "              \n",
       "                      [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "              \n",
       "                      [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "              \n",
       "                      [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "              \n",
       "                      [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "              \n",
       "                      [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]],\n",
       "              \n",
       "                      [[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                       [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                       [ 1.0342,  1.1773, -1.3727, -2.7357]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "       \n",
       "               [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "       \n",
       "               [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "       \n",
       "               [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "       \n",
       "               [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "       \n",
       "               [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "       \n",
       "               [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]],\n",
       "       \n",
       "               [[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "                [ 8.3979e-04, -3.0638e-01,  1.9751e+00]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:47.257288Z",
     "iopub.status.busy": "2023-04-16T14:53:47.256955Z",
     "iopub.status.idle": "2023-04-16T14:53:53.598619Z",
     "shell.execute_reply": "2023-04-16T14:53:53.597642Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.1 µs ± 248 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:53.602093Z",
     "iopub.status.busy": "2023-04-16T14:53:53.601526Z",
     "iopub.status.idle": "2023-04-16T14:53:53.610010Z",
     "shell.execute_reply": "2023-04-16T14:53:53.609057Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                      [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                      [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                      [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                      [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                      [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                      [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357],\n",
       "                      [ 0.2729, -0.0326,  0.4505, -0.8749],\n",
       "                      [ 1.6364, -0.2678,  0.6793, -0.4835],\n",
       "                      [ 1.0342,  1.1773, -1.3727, -2.7357]]),\n",
       "       ),\n",
       "    a: tensor([[ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "               [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "               [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "               [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "               [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "               [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "               [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00],\n",
       "               [ 6.4564e-01,  7.4692e-01,  2.7670e+00],\n",
       "               [ 8.3979e-04, -3.0638e-01,  1.9751e+00]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:53:53.612681Z",
     "iopub.status.busy": "2023-04-16T14:53:53.612329Z",
     "iopub.status.idle": "2023-04-16T14:54:05.468356Z",
     "shell.execute_reply": "2023-04-16T14:54:05.467642Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 178 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:54:05.471860Z",
     "iopub.status.busy": "2023-04-16T14:54:05.471296Z",
     "iopub.status.idle": "2023-04-16T14:54:08.009663Z",
     "shell.execute_reply": "2023-04-16T14:54:08.008957Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 3.62 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
