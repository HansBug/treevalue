{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:31.357974Z",
     "iopub.status.busy": "2023-05-26T05:37:31.357718Z",
     "iopub.status.idle": "2023-05-26T05:37:32.710029Z",
     "shell.execute_reply": "2023-05-26T05:37:32.709261Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:32.714221Z",
     "iopub.status.busy": "2023-05-26T05:37:32.713896Z",
     "iopub.status.idle": "2023-05-26T05:37:33.001306Z",
     "shell.execute_reply": "2023-05-26T05:37:33.000520Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:33.005307Z",
     "iopub.status.busy": "2023-05-26T05:37:33.004984Z",
     "iopub.status.idle": "2023-05-26T05:37:33.015981Z",
     "shell.execute_reply": "2023-05-26T05:37:33.015353Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc4949337c0>\n",
       "├── 'a' --> tensor([[ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc4949336a0>\n",
       "    └── 'c' --> tensor([[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:33.018992Z",
     "iopub.status.busy": "2023-05-26T05:37:33.018599Z",
     "iopub.status.idle": "2023-05-26T05:37:33.023758Z",
     "shell.execute_reply": "2023-05-26T05:37:33.023074Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3894, -2.4347, -0.6965],\n",
       "        [-0.4570, -0.9840,  0.0544]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:33.027035Z",
     "iopub.status.busy": "2023-05-26T05:37:33.026654Z",
     "iopub.status.idle": "2023-05-26T05:37:38.208345Z",
     "shell.execute_reply": "2023-05-26T05:37:38.206497Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 ns ± 0.0762 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:38.211922Z",
     "iopub.status.busy": "2023-05-26T05:37:38.211585Z",
     "iopub.status.idle": "2023-05-26T05:37:38.218331Z",
     "shell.execute_reply": "2023-05-26T05:37:38.217635Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc4949337c0>\n",
       "├── 'a' --> tensor([[-0.5429,  0.1682,  0.4332],\n",
       "│                   [-0.3199, -1.3713,  0.0855]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc4949336a0>\n",
       "    └── 'c' --> tensor([[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:38.221780Z",
     "iopub.status.busy": "2023-05-26T05:37:38.221248Z",
     "iopub.status.idle": "2023-05-26T05:37:43.600518Z",
     "shell.execute_reply": "2023-05-26T05:37:43.599769Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.2 ns ± 0.0408 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:43.604349Z",
     "iopub.status.busy": "2023-05-26T05:37:43.603725Z",
     "iopub.status.idle": "2023-05-26T05:37:43.974015Z",
     "shell.execute_reply": "2023-05-26T05:37:43.973229Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:43.977829Z",
     "iopub.status.busy": "2023-05-26T05:37:43.977312Z",
     "iopub.status.idle": "2023-05-26T05:37:43.983404Z",
     "shell.execute_reply": "2023-05-26T05:37:43.982701Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:43.986381Z",
     "iopub.status.busy": "2023-05-26T05:37:43.985950Z",
     "iopub.status.idle": "2023-05-26T05:37:43.990951Z",
     "shell.execute_reply": "2023-05-26T05:37:43.990246Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3894, -2.4347, -0.6965],\n",
       "        [-0.4570, -0.9840,  0.0544]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:43.994155Z",
     "iopub.status.busy": "2023-05-26T05:37:43.993641Z",
     "iopub.status.idle": "2023-05-26T05:37:48.757751Z",
     "shell.execute_reply": "2023-05-26T05:37:48.756821Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.7 ns ± 0.0264 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:48.761369Z",
     "iopub.status.busy": "2023-05-26T05:37:48.761112Z",
     "iopub.status.idle": "2023-05-26T05:37:48.767542Z",
     "shell.execute_reply": "2023-05-26T05:37:48.766817Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5327,  0.6855, -1.4066],\n",
       "               [ 2.1498, -0.1980,  0.3233]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:48.770609Z",
     "iopub.status.busy": "2023-05-26T05:37:48.770287Z",
     "iopub.status.idle": "2023-05-26T05:37:52.719621Z",
     "shell.execute_reply": "2023-05-26T05:37:52.718891Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "486 ns ± 0.058 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:52.723589Z",
     "iopub.status.busy": "2023-05-26T05:37:52.722931Z",
     "iopub.status.idle": "2023-05-26T05:37:59.333957Z",
     "shell.execute_reply": "2023-05-26T05:37:59.333276Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "814 ns ± 0.219 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:37:59.337815Z",
     "iopub.status.busy": "2023-05-26T05:37:59.337084Z",
     "iopub.status.idle": "2023-05-26T05:38:08.081945Z",
     "shell.execute_reply": "2023-05-26T05:38:08.081225Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.8 µs ± 24.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:08.085643Z",
     "iopub.status.busy": "2023-05-26T05:38:08.085202Z",
     "iopub.status.idle": "2023-05-26T05:38:08.088766Z",
     "shell.execute_reply": "2023-05-26T05:38:08.088047Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:08.092224Z",
     "iopub.status.busy": "2023-05-26T05:38:08.091686Z",
     "iopub.status.idle": "2023-05-26T05:38:19.747679Z",
     "shell.execute_reply": "2023-05-26T05:38:19.746325Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 167 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:19.750936Z",
     "iopub.status.busy": "2023-05-26T05:38:19.750676Z",
     "iopub.status.idle": "2023-05-26T05:38:31.291889Z",
     "shell.execute_reply": "2023-05-26T05:38:31.291061Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 1.6 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:31.296365Z",
     "iopub.status.busy": "2023-05-26T05:38:31.295715Z",
     "iopub.status.idle": "2023-05-26T05:38:31.301225Z",
     "shell.execute_reply": "2023-05-26T05:38:31.300589Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:31.305051Z",
     "iopub.status.busy": "2023-05-26T05:38:31.304661Z",
     "iopub.status.idle": "2023-05-26T05:38:31.313250Z",
     "shell.execute_reply": "2023-05-26T05:38:31.312471Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc494933dc0>\n",
       "├── 'a' --> tensor([[[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]],\n",
       "│           \n",
       "│                   [[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]],\n",
       "│           \n",
       "│                   [[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]],\n",
       "│           \n",
       "│                   [[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]],\n",
       "│           \n",
       "│                   [[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]],\n",
       "│           \n",
       "│                   [[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]],\n",
       "│           \n",
       "│                   [[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]],\n",
       "│           \n",
       "│                   [[ 1.3894, -2.4347, -0.6965],\n",
       "│                    [-0.4570, -0.9840,  0.0544]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc494933cd0>\n",
       "    └── 'c' --> tensor([[[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "                \n",
       "                        [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "                \n",
       "                        [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "                \n",
       "                        [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "                \n",
       "                        [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "                \n",
       "                        [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "                \n",
       "                        [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "                \n",
       "                        [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                         [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                         [ 0.3316,  2.7164, -0.0161, -0.2422]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:31.316335Z",
     "iopub.status.busy": "2023-05-26T05:38:31.316083Z",
     "iopub.status.idle": "2023-05-26T05:38:33.943736Z",
     "shell.execute_reply": "2023-05-26T05:38:33.942979Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.3 µs ± 64.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:33.947313Z",
     "iopub.status.busy": "2023-05-26T05:38:33.946601Z",
     "iopub.status.idle": "2023-05-26T05:38:33.954554Z",
     "shell.execute_reply": "2023-05-26T05:38:33.953792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc3bc70eeb0>\n",
       "├── 'a' --> tensor([[ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544],\n",
       "│                   [ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544],\n",
       "│                   [ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544],\n",
       "│                   [ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544],\n",
       "│                   [ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544],\n",
       "│                   [ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544],\n",
       "│                   [ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544],\n",
       "│                   [ 1.3894, -2.4347, -0.6965],\n",
       "│                   [-0.4570, -0.9840,  0.0544]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc3bc70ef40>\n",
       "    └── 'c' --> tensor([[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                        [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                        [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                        [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                        [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                        [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                        [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                        [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                        [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                        [ 0.3316,  2.7164, -0.0161, -0.2422]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:33.957673Z",
     "iopub.status.busy": "2023-05-26T05:38:33.957208Z",
     "iopub.status.idle": "2023-05-26T05:38:36.413359Z",
     "shell.execute_reply": "2023-05-26T05:38:36.412607Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.2 µs ± 33.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:36.417085Z",
     "iopub.status.busy": "2023-05-26T05:38:36.416523Z",
     "iopub.status.idle": "2023-05-26T05:38:41.841377Z",
     "shell.execute_reply": "2023-05-26T05:38:41.840654Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.7 µs ± 131 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:41.845109Z",
     "iopub.status.busy": "2023-05-26T05:38:41.844570Z",
     "iopub.status.idle": "2023-05-26T05:38:41.852656Z",
     "shell.execute_reply": "2023-05-26T05:38:41.851930Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "              \n",
       "                      [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "              \n",
       "                      [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "              \n",
       "                      [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "              \n",
       "                      [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "              \n",
       "                      [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "              \n",
       "                      [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]],\n",
       "              \n",
       "                      [[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                       [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                       [ 0.3316,  2.7164, -0.0161, -0.2422]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]],\n",
       "       \n",
       "               [[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]],\n",
       "       \n",
       "               [[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]],\n",
       "       \n",
       "               [[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]],\n",
       "       \n",
       "               [[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]],\n",
       "       \n",
       "               [[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]],\n",
       "       \n",
       "               [[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]],\n",
       "       \n",
       "               [[ 1.3894, -2.4347, -0.6965],\n",
       "                [-0.4570, -0.9840,  0.0544]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:41.855749Z",
     "iopub.status.busy": "2023-05-26T05:38:41.855300Z",
     "iopub.status.idle": "2023-05-26T05:38:48.213639Z",
     "shell.execute_reply": "2023-05-26T05:38:48.212913Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 342 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:48.217084Z",
     "iopub.status.busy": "2023-05-26T05:38:48.216648Z",
     "iopub.status.idle": "2023-05-26T05:38:48.224501Z",
     "shell.execute_reply": "2023-05-26T05:38:48.223770Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                      [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                      [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                      [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                      [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                      [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                      [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422],\n",
       "                      [ 1.0421,  0.2409,  1.1599,  0.7950],\n",
       "                      [ 1.5254, -0.6909, -0.1304,  1.7306],\n",
       "                      [ 0.3316,  2.7164, -0.0161, -0.2422]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544],\n",
       "               [ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544],\n",
       "               [ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544],\n",
       "               [ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544],\n",
       "               [ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544],\n",
       "               [ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544],\n",
       "               [ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544],\n",
       "               [ 1.3894, -2.4347, -0.6965],\n",
       "               [-0.4570, -0.9840,  0.0544]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:38:48.227596Z",
     "iopub.status.busy": "2023-05-26T05:38:48.227220Z",
     "iopub.status.idle": "2023-05-26T05:39:00.168706Z",
     "shell.execute_reply": "2023-05-26T05:39:00.168062Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "147 µs ± 285 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T05:39:00.172018Z",
     "iopub.status.busy": "2023-05-26T05:39:00.171522Z",
     "iopub.status.idle": "2023-05-26T05:39:03.133044Z",
     "shell.execute_reply": "2023-05-26T05:39:03.132244Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "367 µs ± 67.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
