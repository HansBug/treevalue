{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:02.395188Z",
     "iopub.status.busy": "2023-10-20T09:12:02.394344Z",
     "iopub.status.idle": "2023-10-20T09:12:04.691191Z",
     "shell.execute_reply": "2023-10-20T09:12:04.689931Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:04.697916Z",
     "iopub.status.busy": "2023-10-20T09:12:04.696830Z",
     "iopub.status.idle": "2023-10-20T09:12:05.136815Z",
     "shell.execute_reply": "2023-10-20T09:12:05.135598Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:05.142663Z",
     "iopub.status.busy": "2023-10-20T09:12:05.141745Z",
     "iopub.status.idle": "2023-10-20T09:12:05.156116Z",
     "shell.execute_reply": "2023-10-20T09:12:05.155234Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f76a4c22af0>\n",
       "├── 'a' --> tensor([[-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154]])\n",
       "└── 'x' --> <FastTreeValue 0x7f76a5c87df0>\n",
       "    └── 'c' --> tensor([[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:05.160314Z",
     "iopub.status.busy": "2023-10-20T09:12:05.159927Z",
     "iopub.status.idle": "2023-10-20T09:12:05.166240Z",
     "shell.execute_reply": "2023-10-20T09:12:05.165548Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4956, -0.7713,  1.2544],\n",
       "        [ 0.0810, -0.6108,  0.5154]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:05.171026Z",
     "iopub.status.busy": "2023-10-20T09:12:05.170219Z",
     "iopub.status.idle": "2023-10-20T09:12:12.514677Z",
     "shell.execute_reply": "2023-10-20T09:12:12.513685Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.4 ns ± 0.0607 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:12.520547Z",
     "iopub.status.busy": "2023-10-20T09:12:12.519941Z",
     "iopub.status.idle": "2023-10-20T09:12:12.531901Z",
     "shell.execute_reply": "2023-10-20T09:12:12.531073Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f76a4c22af0>\n",
       "├── 'a' --> tensor([[ 0.3970,  0.4543, -0.5377],\n",
       "│                   [-0.2230,  1.1254,  2.5987]])\n",
       "└── 'x' --> <FastTreeValue 0x7f76a5c87df0>\n",
       "    └── 'c' --> tensor([[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:12.536572Z",
     "iopub.status.busy": "2023-10-20T09:12:12.535705Z",
     "iopub.status.idle": "2023-10-20T09:12:20.750697Z",
     "shell.execute_reply": "2023-10-20T09:12:20.749473Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "101 ns ± 1.96 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:20.756221Z",
     "iopub.status.busy": "2023-10-20T09:12:20.755563Z",
     "iopub.status.idle": "2023-10-20T09:12:21.410005Z",
     "shell.execute_reply": "2023-10-20T09:12:21.407166Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:21.422821Z",
     "iopub.status.busy": "2023-10-20T09:12:21.419978Z",
     "iopub.status.idle": "2023-10-20T09:12:21.433548Z",
     "shell.execute_reply": "2023-10-20T09:12:21.432407Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:21.438652Z",
     "iopub.status.busy": "2023-10-20T09:12:21.437817Z",
     "iopub.status.idle": "2023-10-20T09:12:21.446868Z",
     "shell.execute_reply": "2023-10-20T09:12:21.445822Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4956, -0.7713,  1.2544],\n",
       "        [ 0.0810, -0.6108,  0.5154]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:21.452169Z",
     "iopub.status.busy": "2023-10-20T09:12:21.451288Z",
     "iopub.status.idle": "2023-10-20T09:12:27.999753Z",
     "shell.execute_reply": "2023-10-20T09:12:27.998778Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.6 ns ± 1.23 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:28.004279Z",
     "iopub.status.busy": "2023-10-20T09:12:28.003932Z",
     "iopub.status.idle": "2023-10-20T09:12:28.014005Z",
     "shell.execute_reply": "2023-10-20T09:12:28.013124Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4826, -0.5862,  1.4000],\n",
       "               [ 0.4979, -0.8709, -0.6002]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:28.020182Z",
     "iopub.status.busy": "2023-10-20T09:12:28.018715Z",
     "iopub.status.idle": "2023-10-20T09:12:33.397266Z",
     "shell.execute_reply": "2023-10-20T09:12:33.396268Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "658 ns ± 1.45 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:33.402090Z",
     "iopub.status.busy": "2023-10-20T09:12:33.401244Z",
     "iopub.status.idle": "2023-10-20T09:12:41.981862Z",
     "shell.execute_reply": "2023-10-20T09:12:41.980758Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.06 µs ± 19.3 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:41.986921Z",
     "iopub.status.busy": "2023-10-20T09:12:41.986293Z",
     "iopub.status.idle": "2023-10-20T09:12:52.148039Z",
     "shell.execute_reply": "2023-10-20T09:12:52.146935Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.5 µs ± 15.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:52.153263Z",
     "iopub.status.busy": "2023-10-20T09:12:52.152447Z",
     "iopub.status.idle": "2023-10-20T09:12:52.157761Z",
     "shell.execute_reply": "2023-10-20T09:12:52.156988Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:52.161704Z",
     "iopub.status.busy": "2023-10-20T09:12:52.161157Z",
     "iopub.status.idle": "2023-10-20T09:12:53.764650Z",
     "shell.execute_reply": "2023-10-20T09:12:53.763522Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "195 µs ± 19.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:53.770202Z",
     "iopub.status.busy": "2023-10-20T09:12:53.769301Z",
     "iopub.status.idle": "2023-10-20T09:12:55.486459Z",
     "shell.execute_reply": "2023-10-20T09:12:55.485386Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "211 µs ± 11.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:55.491254Z",
     "iopub.status.busy": "2023-10-20T09:12:55.490667Z",
     "iopub.status.idle": "2023-10-20T09:12:55.496114Z",
     "shell.execute_reply": "2023-10-20T09:12:55.495112Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:55.500532Z",
     "iopub.status.busy": "2023-10-20T09:12:55.500220Z",
     "iopub.status.idle": "2023-10-20T09:12:55.512421Z",
     "shell.execute_reply": "2023-10-20T09:12:55.511583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f75bb2caa90>\n",
       "├── 'a' --> tensor([[[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]],\n",
       "│           \n",
       "│                   [[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]],\n",
       "│           \n",
       "│                   [[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]],\n",
       "│           \n",
       "│                   [[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]],\n",
       "│           \n",
       "│                   [[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]],\n",
       "│           \n",
       "│                   [[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]],\n",
       "│           \n",
       "│                   [[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]],\n",
       "│           \n",
       "│                   [[-0.4956, -0.7713,  1.2544],\n",
       "│                    [ 0.0810, -0.6108,  0.5154]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f75bb2ca8b0>\n",
       "    └── 'c' --> tensor([[[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "                \n",
       "                        [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "                \n",
       "                        [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "                \n",
       "                        [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "                \n",
       "                        [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "                \n",
       "                        [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "                \n",
       "                        [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "                \n",
       "                        [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                         [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                         [ 0.0756, -0.0610,  0.0466,  0.0403]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:55.516521Z",
     "iopub.status.busy": "2023-10-20T09:12:55.515975Z",
     "iopub.status.idle": "2023-10-20T09:12:58.740079Z",
     "shell.execute_reply": "2023-10-20T09:12:58.739027Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39.3 µs ± 159 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:58.746163Z",
     "iopub.status.busy": "2023-10-20T09:12:58.744218Z",
     "iopub.status.idle": "2023-10-20T09:12:58.758400Z",
     "shell.execute_reply": "2023-10-20T09:12:58.757530Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f75bb2caaf0>\n",
       "├── 'a' --> tensor([[-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154],\n",
       "│                   [-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154],\n",
       "│                   [-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154],\n",
       "│                   [-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154],\n",
       "│                   [-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154],\n",
       "│                   [-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154],\n",
       "│                   [-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154],\n",
       "│                   [-0.4956, -0.7713,  1.2544],\n",
       "│                   [ 0.0810, -0.6108,  0.5154]])\n",
       "└── 'x' --> <FastTreeValue 0x7f75bb2cac10>\n",
       "    └── 'c' --> tensor([[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                        [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                        [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                        [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                        [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                        [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                        [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                        [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                        [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                        [ 0.0756, -0.0610,  0.0466,  0.0403]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:12:58.762808Z",
     "iopub.status.busy": "2023-10-20T09:12:58.762133Z",
     "iopub.status.idle": "2023-10-20T09:13:01.838107Z",
     "shell.execute_reply": "2023-10-20T09:13:01.836713Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37.9 µs ± 1.98 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:13:01.843249Z",
     "iopub.status.busy": "2023-10-20T09:13:01.842657Z",
     "iopub.status.idle": "2023-10-20T09:13:08.809968Z",
     "shell.execute_reply": "2023-10-20T09:13:08.808376Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "87.2 µs ± 4.8 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:13:08.816063Z",
     "iopub.status.busy": "2023-10-20T09:13:08.815430Z",
     "iopub.status.idle": "2023-10-20T09:13:08.830599Z",
     "shell.execute_reply": "2023-10-20T09:13:08.829565Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "              \n",
       "                      [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "              \n",
       "                      [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "              \n",
       "                      [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "              \n",
       "                      [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "              \n",
       "                      [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "              \n",
       "                      [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]],\n",
       "              \n",
       "                      [[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                       [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                       [ 0.0756, -0.0610,  0.0466,  0.0403]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]],\n",
       "       \n",
       "               [[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]],\n",
       "       \n",
       "               [[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]],\n",
       "       \n",
       "               [[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]],\n",
       "       \n",
       "               [[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]],\n",
       "       \n",
       "               [[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]],\n",
       "       \n",
       "               [[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]],\n",
       "       \n",
       "               [[-0.4956, -0.7713,  1.2544],\n",
       "                [ 0.0810, -0.6108,  0.5154]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:13:08.836036Z",
     "iopub.status.busy": "2023-10-20T09:13:08.835071Z",
     "iopub.status.idle": "2023-10-20T09:13:17.026781Z",
     "shell.execute_reply": "2023-10-20T09:13:17.025128Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "98.9 µs ± 240 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:13:17.032965Z",
     "iopub.status.busy": "2023-10-20T09:13:17.032275Z",
     "iopub.status.idle": "2023-10-20T09:13:17.045870Z",
     "shell.execute_reply": "2023-10-20T09:13:17.045028Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                      [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                      [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                      [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                      [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                      [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                      [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403],\n",
       "                      [ 0.7582, -0.6045, -0.5322,  1.0866],\n",
       "                      [ 0.6540,  0.6687, -1.3448, -1.5811],\n",
       "                      [ 0.0756, -0.0610,  0.0466,  0.0403]]),\n",
       "       ),\n",
       "    a: tensor([[-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154],\n",
       "               [-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154],\n",
       "               [-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154],\n",
       "               [-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154],\n",
       "               [-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154],\n",
       "               [-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154],\n",
       "               [-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154],\n",
       "               [-0.4956, -0.7713,  1.2544],\n",
       "               [ 0.0810, -0.6108,  0.5154]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:13:17.050355Z",
     "iopub.status.busy": "2023-10-20T09:13:17.049717Z",
     "iopub.status.idle": "2023-10-20T09:13:31.772466Z",
     "shell.execute_reply": "2023-10-20T09:13:31.771108Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "181 µs ± 182 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T09:13:31.779129Z",
     "iopub.status.busy": "2023-10-20T09:13:31.778177Z",
     "iopub.status.idle": "2023-10-20T09:13:35.701583Z",
     "shell.execute_reply": "2023-10-20T09:13:35.700696Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "475 µs ± 17.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
