{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:08.249906Z",
     "iopub.status.busy": "2023-02-27T12:11:08.249598Z",
     "iopub.status.idle": "2023-02-27T12:11:09.310657Z",
     "shell.execute_reply": "2023-02-27T12:11:09.309808Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:09.314856Z",
     "iopub.status.busy": "2023-02-27T12:11:09.314358Z",
     "iopub.status.idle": "2023-02-27T12:11:09.626033Z",
     "shell.execute_reply": "2023-02-27T12:11:09.625170Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:09.630607Z",
     "iopub.status.busy": "2023-02-27T12:11:09.629782Z",
     "iopub.status.idle": "2023-02-27T12:11:09.642527Z",
     "shell.execute_reply": "2023-02-27T12:11:09.641838Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f84c8bfaeb0>\n",
       "├── 'a' --> tensor([[ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566]])\n",
       "└── 'x' --> <FastTreeValue 0x7f84c8bfadc0>\n",
       "    └── 'c' --> tensor([[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:09.646003Z",
     "iopub.status.busy": "2023-02-27T12:11:09.645474Z",
     "iopub.status.idle": "2023-02-27T12:11:09.652905Z",
     "shell.execute_reply": "2023-02-27T12:11:09.652215Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4661,  0.4314, -0.5292],\n",
       "        [ 0.2036, -0.5788,  1.3566]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:09.657075Z",
     "iopub.status.busy": "2023-02-27T12:11:09.655782Z",
     "iopub.status.idle": "2023-02-27T12:11:14.888287Z",
     "shell.execute_reply": "2023-02-27T12:11:14.887376Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.4 ns ± 0.0575 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:14.892208Z",
     "iopub.status.busy": "2023-02-27T12:11:14.891517Z",
     "iopub.status.idle": "2023-02-27T12:11:14.899476Z",
     "shell.execute_reply": "2023-02-27T12:11:14.898767Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f84c8bfaeb0>\n",
       "├── 'a' --> tensor([[ 0.1921,  1.0337, -0.2224],\n",
       "│                   [ 0.4762, -0.5636, -0.2172]])\n",
       "└── 'x' --> <FastTreeValue 0x7f84c8bfadc0>\n",
       "    └── 'c' --> tensor([[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:14.902873Z",
     "iopub.status.busy": "2023-02-27T12:11:14.902224Z",
     "iopub.status.idle": "2023-02-27T12:11:20.374091Z",
     "shell.execute_reply": "2023-02-27T12:11:20.373141Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.4 ns ± 0.0287 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:20.378018Z",
     "iopub.status.busy": "2023-02-27T12:11:20.377456Z",
     "iopub.status.idle": "2023-02-27T12:11:20.782818Z",
     "shell.execute_reply": "2023-02-27T12:11:20.781911Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:20.787154Z",
     "iopub.status.busy": "2023-02-27T12:11:20.786528Z",
     "iopub.status.idle": "2023-02-27T12:11:20.792996Z",
     "shell.execute_reply": "2023-02-27T12:11:20.792280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:20.796039Z",
     "iopub.status.busy": "2023-02-27T12:11:20.795636Z",
     "iopub.status.idle": "2023-02-27T12:11:20.801023Z",
     "shell.execute_reply": "2023-02-27T12:11:20.800296Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4661,  0.4314, -0.5292],\n",
       "        [ 0.2036, -0.5788,  1.3566]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:20.803959Z",
     "iopub.status.busy": "2023-02-27T12:11:20.803498Z",
     "iopub.status.idle": "2023-02-27T12:11:25.729441Z",
     "shell.execute_reply": "2023-02-27T12:11:25.728276Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.6 ns ± 0.0498 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:25.733182Z",
     "iopub.status.busy": "2023-02-27T12:11:25.732695Z",
     "iopub.status.idle": "2023-02-27T12:11:25.741606Z",
     "shell.execute_reply": "2023-02-27T12:11:25.740861Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.7910,  0.3611,  0.1427],\n",
       "               [ 0.3189, -0.4867,  1.4846]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:25.745031Z",
     "iopub.status.busy": "2023-02-27T12:11:25.744438Z",
     "iopub.status.idle": "2023-02-27T12:11:29.838842Z",
     "shell.execute_reply": "2023-02-27T12:11:29.837895Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "504 ns ± 1.82 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:29.842845Z",
     "iopub.status.busy": "2023-02-27T12:11:29.842341Z",
     "iopub.status.idle": "2023-02-27T12:11:36.817147Z",
     "shell.execute_reply": "2023-02-27T12:11:36.816221Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "858 ns ± 1.13 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:36.821026Z",
     "iopub.status.busy": "2023-02-27T12:11:36.820352Z",
     "iopub.status.idle": "2023-02-27T12:11:45.508992Z",
     "shell.execute_reply": "2023-02-27T12:11:45.508075Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 12.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:45.512496Z",
     "iopub.status.busy": "2023-02-27T12:11:45.512050Z",
     "iopub.status.idle": "2023-02-27T12:11:45.517334Z",
     "shell.execute_reply": "2023-02-27T12:11:45.516631Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:45.520588Z",
     "iopub.status.busy": "2023-02-27T12:11:45.520076Z",
     "iopub.status.idle": "2023-02-27T12:11:57.437255Z",
     "shell.execute_reply": "2023-02-27T12:11:57.436597Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "147 µs ± 1.05 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:11:57.440370Z",
     "iopub.status.busy": "2023-02-27T12:11:57.439909Z",
     "iopub.status.idle": "2023-02-27T12:12:09.148684Z",
     "shell.execute_reply": "2023-02-27T12:12:09.147836Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 1.39 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:09.152499Z",
     "iopub.status.busy": "2023-02-27T12:12:09.152026Z",
     "iopub.status.idle": "2023-02-27T12:12:09.156683Z",
     "shell.execute_reply": "2023-02-27T12:12:09.155872Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:09.160262Z",
     "iopub.status.busy": "2023-02-27T12:12:09.159627Z",
     "iopub.status.idle": "2023-02-27T12:12:09.168767Z",
     "shell.execute_reply": "2023-02-27T12:12:09.168034Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f84a00a4520>\n",
       "├── 'a' --> tensor([[[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]],\n",
       "│           \n",
       "│                   [[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]],\n",
       "│           \n",
       "│                   [[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]],\n",
       "│           \n",
       "│                   [[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]],\n",
       "│           \n",
       "│                   [[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]],\n",
       "│           \n",
       "│                   [[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]],\n",
       "│           \n",
       "│                   [[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]],\n",
       "│           \n",
       "│                   [[ 0.4661,  0.4314, -0.5292],\n",
       "│                    [ 0.2036, -0.5788,  1.3566]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f84a018cfd0>\n",
       "    └── 'c' --> tensor([[[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "                \n",
       "                        [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "                \n",
       "                        [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "                \n",
       "                        [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "                \n",
       "                        [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "                \n",
       "                        [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "                \n",
       "                        [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "                \n",
       "                        [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                         [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                         [ 1.2703, -1.4458, -0.0149, -0.2297]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:09.172358Z",
     "iopub.status.busy": "2023-02-27T12:12:09.171734Z",
     "iopub.status.idle": "2023-02-27T12:12:11.869344Z",
     "shell.execute_reply": "2023-02-27T12:12:11.868313Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.1 µs ± 188 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:11.873038Z",
     "iopub.status.busy": "2023-02-27T12:12:11.872546Z",
     "iopub.status.idle": "2023-02-27T12:12:11.880911Z",
     "shell.execute_reply": "2023-02-27T12:12:11.880150Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8411e6e2e0>\n",
       "├── 'a' --> tensor([[ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566],\n",
       "│                   [ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566],\n",
       "│                   [ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566],\n",
       "│                   [ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566],\n",
       "│                   [ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566],\n",
       "│                   [ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566],\n",
       "│                   [ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566],\n",
       "│                   [ 0.4661,  0.4314, -0.5292],\n",
       "│                   [ 0.2036, -0.5788,  1.3566]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8411e6e730>\n",
       "    └── 'c' --> tensor([[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                        [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                        [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                        [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                        [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                        [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                        [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                        [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                        [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                        [ 1.2703, -1.4458, -0.0149, -0.2297]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:11.884252Z",
     "iopub.status.busy": "2023-02-27T12:12:11.883710Z",
     "iopub.status.idle": "2023-02-27T12:12:14.395268Z",
     "shell.execute_reply": "2023-02-27T12:12:14.394311Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.9 µs ± 48.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:14.398847Z",
     "iopub.status.busy": "2023-02-27T12:12:14.398297Z",
     "iopub.status.idle": "2023-02-27T12:12:18.983952Z",
     "shell.execute_reply": "2023-02-27T12:12:18.983019Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.4 µs ± 213 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:18.988223Z",
     "iopub.status.busy": "2023-02-27T12:12:18.987529Z",
     "iopub.status.idle": "2023-02-27T12:12:18.996351Z",
     "shell.execute_reply": "2023-02-27T12:12:18.995551Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]],\n",
       "       \n",
       "               [[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]],\n",
       "       \n",
       "               [[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]],\n",
       "       \n",
       "               [[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]],\n",
       "       \n",
       "               [[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]],\n",
       "       \n",
       "               [[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]],\n",
       "       \n",
       "               [[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]],\n",
       "       \n",
       "               [[ 0.4661,  0.4314, -0.5292],\n",
       "                [ 0.2036, -0.5788,  1.3566]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "              \n",
       "                      [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "              \n",
       "                      [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "              \n",
       "                      [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "              \n",
       "                      [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "              \n",
       "                      [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "              \n",
       "                      [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]],\n",
       "              \n",
       "                      [[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                       [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                       [ 1.2703, -1.4458, -0.0149, -0.2297]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:18.999712Z",
     "iopub.status.busy": "2023-02-27T12:12:18.999245Z",
     "iopub.status.idle": "2023-02-27T12:12:25.339695Z",
     "shell.execute_reply": "2023-02-27T12:12:25.338779Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.9 µs ± 295 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:25.343166Z",
     "iopub.status.busy": "2023-02-27T12:12:25.342670Z",
     "iopub.status.idle": "2023-02-27T12:12:25.350989Z",
     "shell.execute_reply": "2023-02-27T12:12:25.350274Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566],\n",
       "               [ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566],\n",
       "               [ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566],\n",
       "               [ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566],\n",
       "               [ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566],\n",
       "               [ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566],\n",
       "               [ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566],\n",
       "               [ 0.4661,  0.4314, -0.5292],\n",
       "               [ 0.2036, -0.5788,  1.3566]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                      [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                      [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                      [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                      [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                      [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                      [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297],\n",
       "                      [ 0.2624,  0.5311,  0.0712, -1.0866],\n",
       "                      [ 0.2159, -0.1493, -1.3037, -0.6723],\n",
       "                      [ 1.2703, -1.4458, -0.0149, -0.2297]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:25.354656Z",
     "iopub.status.busy": "2023-02-27T12:12:25.353957Z",
     "iopub.status.idle": "2023-02-27T12:12:36.993608Z",
     "shell.execute_reply": "2023-02-27T12:12:36.992666Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 428 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:12:36.997289Z",
     "iopub.status.busy": "2023-02-27T12:12:36.996624Z",
     "iopub.status.idle": "2023-02-27T12:12:39.724148Z",
     "shell.execute_reply": "2023-02-27T12:12:39.723027Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "335 µs ± 1.01 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
