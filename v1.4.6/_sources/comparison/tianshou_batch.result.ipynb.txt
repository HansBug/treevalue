{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:21.332193Z",
     "iopub.status.busy": "2023-08-11T04:30:21.331636Z",
     "iopub.status.idle": "2023-08-11T04:30:22.829739Z",
     "shell.execute_reply": "2023-08-11T04:30:22.828827Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:22.834981Z",
     "iopub.status.busy": "2023-08-11T04:30:22.834396Z",
     "iopub.status.idle": "2023-08-11T04:30:23.184713Z",
     "shell.execute_reply": "2023-08-11T04:30:23.183824Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:23.189344Z",
     "iopub.status.busy": "2023-08-11T04:30:23.188741Z",
     "iopub.status.idle": "2023-08-11T04:30:23.198772Z",
     "shell.execute_reply": "2023-08-11T04:30:23.198132Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6fd29d7400>\n",
       "├── 'a' --> tensor([[-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6fd2a3ae20>\n",
       "    └── 'c' --> tensor([[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:23.202485Z",
     "iopub.status.busy": "2023-08-11T04:30:23.201931Z",
     "iopub.status.idle": "2023-08-11T04:30:23.207756Z",
     "shell.execute_reply": "2023-08-11T04:30:23.206969Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.2561,  1.6080, -0.2397],\n",
       "        [ 0.2446,  1.6167,  1.0824]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:23.212031Z",
     "iopub.status.busy": "2023-08-11T04:30:23.211471Z",
     "iopub.status.idle": "2023-08-11T04:30:29.037465Z",
     "shell.execute_reply": "2023-08-11T04:30:29.036465Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.7 ns ± 0.0964 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:29.042157Z",
     "iopub.status.busy": "2023-08-11T04:30:29.041559Z",
     "iopub.status.idle": "2023-08-11T04:30:29.048881Z",
     "shell.execute_reply": "2023-08-11T04:30:29.048063Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6fd29d7400>\n",
       "├── 'a' --> tensor([[-1.5874,  1.5187,  0.7893],\n",
       "│                   [-1.1386,  0.5283, -0.1752]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6fd2a3ae20>\n",
       "    └── 'c' --> tensor([[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:29.052503Z",
     "iopub.status.busy": "2023-08-11T04:30:29.051951Z",
     "iopub.status.idle": "2023-08-11T04:30:34.866852Z",
     "shell.execute_reply": "2023-08-11T04:30:34.866009Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.6 ns ± 0.041 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:34.871039Z",
     "iopub.status.busy": "2023-08-11T04:30:34.870422Z",
     "iopub.status.idle": "2023-08-11T04:30:35.279525Z",
     "shell.execute_reply": "2023-08-11T04:30:35.278699Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:35.283990Z",
     "iopub.status.busy": "2023-08-11T04:30:35.283412Z",
     "iopub.status.idle": "2023-08-11T04:30:35.289726Z",
     "shell.execute_reply": "2023-08-11T04:30:35.289101Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:35.296413Z",
     "iopub.status.busy": "2023-08-11T04:30:35.295980Z",
     "iopub.status.idle": "2023-08-11T04:30:35.301387Z",
     "shell.execute_reply": "2023-08-11T04:30:35.300767Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.2561,  1.6080, -0.2397],\n",
       "        [ 0.2446,  1.6167,  1.0824]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:35.304604Z",
     "iopub.status.busy": "2023-08-11T04:30:35.304131Z",
     "iopub.status.idle": "2023-08-11T04:30:40.531815Z",
     "shell.execute_reply": "2023-08-11T04:30:40.531064Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.4 ns ± 0.0946 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:40.535535Z",
     "iopub.status.busy": "2023-08-11T04:30:40.535107Z",
     "iopub.status.idle": "2023-08-11T04:30:40.544742Z",
     "shell.execute_reply": "2023-08-11T04:30:40.544049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0095, -0.2527,  0.0777],\n",
       "               [-0.7498, -1.6789,  0.6341]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:40.548609Z",
     "iopub.status.busy": "2023-08-11T04:30:40.548163Z",
     "iopub.status.idle": "2023-08-11T04:30:45.023402Z",
     "shell.execute_reply": "2023-08-11T04:30:45.021819Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "551 ns ± 2.22 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:45.027039Z",
     "iopub.status.busy": "2023-08-11T04:30:45.026609Z",
     "iopub.status.idle": "2023-08-11T04:30:52.258198Z",
     "shell.execute_reply": "2023-08-11T04:30:52.257432Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "891 ns ± 1.53 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:30:52.261939Z",
     "iopub.status.busy": "2023-08-11T04:30:52.261423Z",
     "iopub.status.idle": "2023-08-11T04:31:01.675970Z",
     "shell.execute_reply": "2023-08-11T04:31:01.675217Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 30.8 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:01.679840Z",
     "iopub.status.busy": "2023-08-11T04:31:01.679270Z",
     "iopub.status.idle": "2023-08-11T04:31:01.683071Z",
     "shell.execute_reply": "2023-08-11T04:31:01.682237Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:01.687289Z",
     "iopub.status.busy": "2023-08-11T04:31:01.686539Z",
     "iopub.status.idle": "2023-08-11T04:31:13.481665Z",
     "shell.execute_reply": "2023-08-11T04:31:13.480981Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 1.26 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:13.485641Z",
     "iopub.status.busy": "2023-08-11T04:31:13.485070Z",
     "iopub.status.idle": "2023-08-11T04:31:25.330991Z",
     "shell.execute_reply": "2023-08-11T04:31:25.330143Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 934 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:25.334686Z",
     "iopub.status.busy": "2023-08-11T04:31:25.334399Z",
     "iopub.status.idle": "2023-08-11T04:31:25.338112Z",
     "shell.execute_reply": "2023-08-11T04:31:25.337319Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:25.341786Z",
     "iopub.status.busy": "2023-08-11T04:31:25.341534Z",
     "iopub.status.idle": "2023-08-11T04:31:25.349437Z",
     "shell.execute_reply": "2023-08-11T04:31:25.348666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6ef82a9970>\n",
       "├── 'a' --> tensor([[[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]],\n",
       "│           \n",
       "│                   [[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]],\n",
       "│           \n",
       "│                   [[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]],\n",
       "│           \n",
       "│                   [[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]],\n",
       "│           \n",
       "│                   [[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]],\n",
       "│           \n",
       "│                   [[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]],\n",
       "│           \n",
       "│                   [[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]],\n",
       "│           \n",
       "│                   [[-1.2561,  1.6080, -0.2397],\n",
       "│                    [ 0.2446,  1.6167,  1.0824]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6fd2a52a90>\n",
       "    └── 'c' --> tensor([[[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "                \n",
       "                        [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "                \n",
       "                        [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "                \n",
       "                        [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "                \n",
       "                        [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "                \n",
       "                        [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "                \n",
       "                        [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "                \n",
       "                        [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                         [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                         [-0.0930, -0.2499, -0.3876,  0.2008]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:25.352855Z",
     "iopub.status.busy": "2023-08-11T04:31:25.352604Z",
     "iopub.status.idle": "2023-08-11T04:31:28.051631Z",
     "shell.execute_reply": "2023-08-11T04:31:28.049919Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.2 µs ± 29.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:28.055971Z",
     "iopub.status.busy": "2023-08-11T04:31:28.055477Z",
     "iopub.status.idle": "2023-08-11T04:31:28.065718Z",
     "shell.execute_reply": "2023-08-11T04:31:28.064843Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6f001e29a0>\n",
       "├── 'a' --> tensor([[-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824],\n",
       "│                   [-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824],\n",
       "│                   [-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824],\n",
       "│                   [-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824],\n",
       "│                   [-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824],\n",
       "│                   [-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824],\n",
       "│                   [-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824],\n",
       "│                   [-1.2561,  1.6080, -0.2397],\n",
       "│                   [ 0.2446,  1.6167,  1.0824]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6f001e2fa0>\n",
       "    └── 'c' --> tensor([[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                        [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                        [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                        [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                        [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                        [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                        [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                        [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                        [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                        [-0.0930, -0.2499, -0.3876,  0.2008]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:28.069883Z",
     "iopub.status.busy": "2023-08-11T04:31:28.069305Z",
     "iopub.status.idle": "2023-08-11T04:31:30.627255Z",
     "shell.execute_reply": "2023-08-11T04:31:30.626486Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 50.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:30.631015Z",
     "iopub.status.busy": "2023-08-11T04:31:30.630477Z",
     "iopub.status.idle": "2023-08-11T04:31:36.160980Z",
     "shell.execute_reply": "2023-08-11T04:31:36.159855Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68 µs ± 597 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:36.165359Z",
     "iopub.status.busy": "2023-08-11T04:31:36.164797Z",
     "iopub.status.idle": "2023-08-11T04:31:36.174248Z",
     "shell.execute_reply": "2023-08-11T04:31:36.173377Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]],\n",
       "       \n",
       "               [[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]],\n",
       "       \n",
       "               [[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]],\n",
       "       \n",
       "               [[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]],\n",
       "       \n",
       "               [[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]],\n",
       "       \n",
       "               [[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]],\n",
       "       \n",
       "               [[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]],\n",
       "       \n",
       "               [[-1.2561,  1.6080, -0.2397],\n",
       "                [ 0.2446,  1.6167,  1.0824]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "              \n",
       "                      [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "              \n",
       "                      [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "              \n",
       "                      [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "              \n",
       "                      [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "              \n",
       "                      [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "              \n",
       "                      [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]],\n",
       "              \n",
       "                      [[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                       [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                       [-0.0930, -0.2499, -0.3876,  0.2008]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:36.178270Z",
     "iopub.status.busy": "2023-08-11T04:31:36.177687Z",
     "iopub.status.idle": "2023-08-11T04:31:42.977687Z",
     "shell.execute_reply": "2023-08-11T04:31:42.976951Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.7 µs ± 221 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:42.981006Z",
     "iopub.status.busy": "2023-08-11T04:31:42.980551Z",
     "iopub.status.idle": "2023-08-11T04:31:42.988410Z",
     "shell.execute_reply": "2023-08-11T04:31:42.987625Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824],\n",
       "               [-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824],\n",
       "               [-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824],\n",
       "               [-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824],\n",
       "               [-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824],\n",
       "               [-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824],\n",
       "               [-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824],\n",
       "               [-1.2561,  1.6080, -0.2397],\n",
       "               [ 0.2446,  1.6167,  1.0824]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                      [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                      [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                      [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                      [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                      [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                      [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008],\n",
       "                      [ 0.7229, -0.7421,  1.7529,  1.1602],\n",
       "                      [ 0.2453, -0.0814,  0.6416, -1.5886],\n",
       "                      [-0.0930, -0.2499, -0.3876,  0.2008]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:42.992135Z",
     "iopub.status.busy": "2023-08-11T04:31:42.991431Z",
     "iopub.status.idle": "2023-08-11T04:31:57.323358Z",
     "shell.execute_reply": "2023-08-11T04:31:57.321549Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "177 µs ± 470 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:31:57.327150Z",
     "iopub.status.busy": "2023-08-11T04:31:57.326733Z",
     "iopub.status.idle": "2023-08-11T04:32:00.134244Z",
     "shell.execute_reply": "2023-08-11T04:32:00.133568Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "345 µs ± 5.58 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
