{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:29:56.514060Z",
     "iopub.status.busy": "2023-10-22T15:29:56.513610Z",
     "iopub.status.idle": "2023-10-22T15:29:58.133184Z",
     "shell.execute_reply": "2023-10-22T15:29:58.132351Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:29:58.138035Z",
     "iopub.status.busy": "2023-10-22T15:29:58.137161Z",
     "iopub.status.idle": "2023-10-22T15:29:58.470582Z",
     "shell.execute_reply": "2023-10-22T15:29:58.469779Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:29:58.474791Z",
     "iopub.status.busy": "2023-10-22T15:29:58.474054Z",
     "iopub.status.idle": "2023-10-22T15:29:58.486344Z",
     "shell.execute_reply": "2023-10-22T15:29:58.485646Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f91304a1af0>\n",
       "├── 'a' --> tensor([[-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255]])\n",
       "└── 'x' --> <FastTreeValue 0x7f91304a1400>\n",
       "    └── 'c' --> tensor([[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:29:58.489778Z",
     "iopub.status.busy": "2023-10-22T15:29:58.489212Z",
     "iopub.status.idle": "2023-10-22T15:29:58.496508Z",
     "shell.execute_reply": "2023-10-22T15:29:58.495878Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0451, -1.3092,  0.2996],\n",
       "        [-0.5193,  0.3001, -0.3255]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:29:58.499844Z",
     "iopub.status.busy": "2023-10-22T15:29:58.499270Z",
     "iopub.status.idle": "2023-10-22T15:30:04.656432Z",
     "shell.execute_reply": "2023-10-22T15:30:04.655495Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.8 ns ± 0.0465 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:04.660626Z",
     "iopub.status.busy": "2023-10-22T15:30:04.659875Z",
     "iopub.status.idle": "2023-10-22T15:30:04.667682Z",
     "shell.execute_reply": "2023-10-22T15:30:04.667061Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f91304a1af0>\n",
       "├── 'a' --> tensor([[-0.3947, -0.7862,  0.7363],\n",
       "│                   [ 0.6211, -0.8427,  0.0144]])\n",
       "└── 'x' --> <FastTreeValue 0x7f91304a1400>\n",
       "    └── 'c' --> tensor([[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:04.670836Z",
     "iopub.status.busy": "2023-10-22T15:30:04.670399Z",
     "iopub.status.idle": "2023-10-22T15:30:11.794323Z",
     "shell.execute_reply": "2023-10-22T15:30:11.793488Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "87.8 ns ± 0.0855 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:11.798128Z",
     "iopub.status.busy": "2023-10-22T15:30:11.797597Z",
     "iopub.status.idle": "2023-10-22T15:30:12.215501Z",
     "shell.execute_reply": "2023-10-22T15:30:12.214700Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:12.219483Z",
     "iopub.status.busy": "2023-10-22T15:30:12.218951Z",
     "iopub.status.idle": "2023-10-22T15:30:12.227574Z",
     "shell.execute_reply": "2023-10-22T15:30:12.226959Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:12.230688Z",
     "iopub.status.busy": "2023-10-22T15:30:12.230245Z",
     "iopub.status.idle": "2023-10-22T15:30:12.237557Z",
     "shell.execute_reply": "2023-10-22T15:30:12.236944Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0451, -1.3092,  0.2996],\n",
       "        [-0.5193,  0.3001, -0.3255]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:12.240348Z",
     "iopub.status.busy": "2023-10-22T15:30:12.240116Z",
     "iopub.status.idle": "2023-10-22T15:30:17.610437Z",
     "shell.execute_reply": "2023-10-22T15:30:17.609577Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.1 ns ± 0.108 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:17.614396Z",
     "iopub.status.busy": "2023-10-22T15:30:17.613878Z",
     "iopub.status.idle": "2023-10-22T15:30:17.624947Z",
     "shell.execute_reply": "2023-10-22T15:30:17.624297Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.0279,  0.5048, -0.8348],\n",
       "               [-0.9516,  0.8101,  0.8461]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:17.628437Z",
     "iopub.status.busy": "2023-10-22T15:30:17.627972Z",
     "iopub.status.idle": "2023-10-22T15:30:22.061774Z",
     "shell.execute_reply": "2023-10-22T15:30:22.060892Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "545 ns ± 0.0921 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:22.065787Z",
     "iopub.status.busy": "2023-10-22T15:30:22.065349Z",
     "iopub.status.idle": "2023-10-22T15:30:29.228059Z",
     "shell.execute_reply": "2023-10-22T15:30:29.227135Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "883 ns ± 6.59 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:29.232060Z",
     "iopub.status.busy": "2023-10-22T15:30:29.231454Z",
     "iopub.status.idle": "2023-10-22T15:30:38.298405Z",
     "shell.execute_reply": "2023-10-22T15:30:38.297513Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.1 µs ± 36.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:38.302428Z",
     "iopub.status.busy": "2023-10-22T15:30:38.301922Z",
     "iopub.status.idle": "2023-10-22T15:30:38.306348Z",
     "shell.execute_reply": "2023-10-22T15:30:38.305652Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:38.309682Z",
     "iopub.status.busy": "2023-10-22T15:30:38.309228Z",
     "iopub.status.idle": "2023-10-22T15:30:50.497508Z",
     "shell.execute_reply": "2023-10-22T15:30:50.496860Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150 µs ± 1.54 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:30:50.500935Z",
     "iopub.status.busy": "2023-10-22T15:30:50.500655Z",
     "iopub.status.idle": "2023-10-22T15:31:02.740679Z",
     "shell.execute_reply": "2023-10-22T15:31:02.739958Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "151 µs ± 1.67 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:02.744472Z",
     "iopub.status.busy": "2023-10-22T15:31:02.743949Z",
     "iopub.status.idle": "2023-10-22T15:31:02.747741Z",
     "shell.execute_reply": "2023-10-22T15:31:02.747034Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:02.751379Z",
     "iopub.status.busy": "2023-10-22T15:31:02.750823Z",
     "iopub.status.idle": "2023-10-22T15:31:02.761041Z",
     "shell.execute_reply": "2023-10-22T15:31:02.760412Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f905a24ddc0>\n",
       "├── 'a' --> tensor([[[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]],\n",
       "│           \n",
       "│                   [[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]],\n",
       "│           \n",
       "│                   [[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]],\n",
       "│           \n",
       "│                   [[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]],\n",
       "│           \n",
       "│                   [[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]],\n",
       "│           \n",
       "│                   [[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]],\n",
       "│           \n",
       "│                   [[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]],\n",
       "│           \n",
       "│                   [[-1.0451, -1.3092,  0.2996],\n",
       "│                    [-0.5193,  0.3001, -0.3255]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f904f31e520>\n",
       "    └── 'c' --> tensor([[[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "                \n",
       "                        [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "                \n",
       "                        [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "                \n",
       "                        [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "                \n",
       "                        [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "                \n",
       "                        [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "                \n",
       "                        [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "                \n",
       "                        [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                         [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                         [ 0.7453,  0.0114,  0.5084,  0.7695]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:02.764123Z",
     "iopub.status.busy": "2023-10-22T15:31:02.763684Z",
     "iopub.status.idle": "2023-10-22T15:31:05.538464Z",
     "shell.execute_reply": "2023-10-22T15:31:05.537588Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34.1 µs ± 41.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:05.542297Z",
     "iopub.status.busy": "2023-10-22T15:31:05.541779Z",
     "iopub.status.idle": "2023-10-22T15:31:05.551071Z",
     "shell.execute_reply": "2023-10-22T15:31:05.550427Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9046bd4c40>\n",
       "├── 'a' --> tensor([[-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255],\n",
       "│                   [-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255],\n",
       "│                   [-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255],\n",
       "│                   [-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255],\n",
       "│                   [-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255],\n",
       "│                   [-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255],\n",
       "│                   [-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255],\n",
       "│                   [-1.0451, -1.3092,  0.2996],\n",
       "│                   [-0.5193,  0.3001, -0.3255]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9046bd4e50>\n",
       "    └── 'c' --> tensor([[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                        [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                        [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                        [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                        [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                        [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                        [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                        [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                        [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                        [ 0.7453,  0.0114,  0.5084,  0.7695]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:05.554358Z",
     "iopub.status.busy": "2023-10-22T15:31:05.553789Z",
     "iopub.status.idle": "2023-10-22T15:31:08.194432Z",
     "shell.execute_reply": "2023-10-22T15:31:08.193501Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 103 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:08.198347Z",
     "iopub.status.busy": "2023-10-22T15:31:08.197872Z",
     "iopub.status.idle": "2023-10-22T15:31:13.537004Z",
     "shell.execute_reply": "2023-10-22T15:31:13.536061Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.7 µs ± 175 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:13.541968Z",
     "iopub.status.busy": "2023-10-22T15:31:13.540407Z",
     "iopub.status.idle": "2023-10-22T15:31:13.550345Z",
     "shell.execute_reply": "2023-10-22T15:31:13.549649Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]],\n",
       "       \n",
       "               [[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]],\n",
       "       \n",
       "               [[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]],\n",
       "       \n",
       "               [[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]],\n",
       "       \n",
       "               [[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]],\n",
       "       \n",
       "               [[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]],\n",
       "       \n",
       "               [[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]],\n",
       "       \n",
       "               [[-1.0451, -1.3092,  0.2996],\n",
       "                [-0.5193,  0.3001, -0.3255]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "              \n",
       "                      [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "              \n",
       "                      [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "              \n",
       "                      [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "              \n",
       "                      [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "              \n",
       "                      [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "              \n",
       "                      [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]],\n",
       "              \n",
       "                      [[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                       [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                       [ 0.7453,  0.0114,  0.5084,  0.7695]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:13.553652Z",
     "iopub.status.busy": "2023-10-22T15:31:13.553192Z",
     "iopub.status.idle": "2023-10-22T15:31:20.400328Z",
     "shell.execute_reply": "2023-10-22T15:31:20.399412Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.3 µs ± 176 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:20.404108Z",
     "iopub.status.busy": "2023-10-22T15:31:20.403496Z",
     "iopub.status.idle": "2023-10-22T15:31:20.412161Z",
     "shell.execute_reply": "2023-10-22T15:31:20.411539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255],\n",
       "               [-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255],\n",
       "               [-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255],\n",
       "               [-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255],\n",
       "               [-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255],\n",
       "               [-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255],\n",
       "               [-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255],\n",
       "               [-1.0451, -1.3092,  0.2996],\n",
       "               [-0.5193,  0.3001, -0.3255]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                      [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                      [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                      [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                      [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                      [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                      [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695],\n",
       "                      [ 0.4786, -0.7946,  0.4894,  0.2897],\n",
       "                      [-0.8938, -0.8693,  0.6544,  0.5854],\n",
       "                      [ 0.7453,  0.0114,  0.5084,  0.7695]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:20.415377Z",
     "iopub.status.busy": "2023-10-22T15:31:20.414926Z",
     "iopub.status.idle": "2023-10-22T15:31:32.923852Z",
     "shell.execute_reply": "2023-10-22T15:31:32.922961Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "154 µs ± 247 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T15:31:32.927407Z",
     "iopub.status.busy": "2023-10-22T15:31:32.926907Z",
     "iopub.status.idle": "2023-10-22T15:31:35.994657Z",
     "shell.execute_reply": "2023-10-22T15:31:35.993831Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "376 µs ± 5.51 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
