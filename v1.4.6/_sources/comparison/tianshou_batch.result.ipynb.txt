{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:12:53.329479Z",
     "iopub.status.busy": "2023-02-28T04:12:53.329202Z",
     "iopub.status.idle": "2023-02-28T04:12:54.320204Z",
     "shell.execute_reply": "2023-02-28T04:12:54.319393Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:12:54.324194Z",
     "iopub.status.busy": "2023-02-28T04:12:54.323715Z",
     "iopub.status.idle": "2023-02-28T04:12:54.621612Z",
     "shell.execute_reply": "2023-02-28T04:12:54.620826Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:12:54.625746Z",
     "iopub.status.busy": "2023-02-28T04:12:54.625046Z",
     "iopub.status.idle": "2023-02-28T04:12:54.636177Z",
     "shell.execute_reply": "2023-02-28T04:12:54.635545Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f39f0b00ee0>\n",
       "├── 'a' --> tensor([[-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3a1c23ceb0>\n",
       "    └── 'c' --> tensor([[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:12:54.640102Z",
     "iopub.status.busy": "2023-02-28T04:12:54.638889Z",
     "iopub.status.idle": "2023-02-28T04:12:54.645477Z",
     "shell.execute_reply": "2023-02-28T04:12:54.644804Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0329,  0.1333,  0.4975],\n",
       "        [ 0.7507,  1.2132, -1.4840]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:12:54.648546Z",
     "iopub.status.busy": "2023-02-28T04:12:54.647999Z",
     "iopub.status.idle": "2023-02-28T04:12:59.943799Z",
     "shell.execute_reply": "2023-02-28T04:12:59.942936Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.2 ns ± 0.0793 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:12:59.947197Z",
     "iopub.status.busy": "2023-02-28T04:12:59.946806Z",
     "iopub.status.idle": "2023-02-28T04:12:59.953349Z",
     "shell.execute_reply": "2023-02-28T04:12:59.952662Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f39f0b00ee0>\n",
       "├── 'a' --> tensor([[-0.1366, -1.2310,  2.2573],\n",
       "│                   [ 0.2923,  1.3259, -1.2469]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3a1c23ceb0>\n",
       "    └── 'c' --> tensor([[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:12:59.956582Z",
     "iopub.status.busy": "2023-02-28T04:12:59.955961Z",
     "iopub.status.idle": "2023-02-28T04:13:05.521483Z",
     "shell.execute_reply": "2023-02-28T04:13:05.520644Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.4 ns ± 0.0856 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:05.524728Z",
     "iopub.status.busy": "2023-02-28T04:13:05.524338Z",
     "iopub.status.idle": "2023-02-28T04:13:05.890372Z",
     "shell.execute_reply": "2023-02-28T04:13:05.889602Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:05.893871Z",
     "iopub.status.busy": "2023-02-28T04:13:05.893334Z",
     "iopub.status.idle": "2023-02-28T04:13:05.900124Z",
     "shell.execute_reply": "2023-02-28T04:13:05.899493Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:05.903201Z",
     "iopub.status.busy": "2023-02-28T04:13:05.902776Z",
     "iopub.status.idle": "2023-02-28T04:13:05.907637Z",
     "shell.execute_reply": "2023-02-28T04:13:05.906977Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0329,  0.1333,  0.4975],\n",
       "        [ 0.7507,  1.2132, -1.4840]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:05.910415Z",
     "iopub.status.busy": "2023-02-28T04:13:05.909862Z",
     "iopub.status.idle": "2023-02-28T04:13:10.602276Z",
     "shell.execute_reply": "2023-02-28T04:13:10.601431Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.8 ns ± 0.143 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:10.605580Z",
     "iopub.status.busy": "2023-02-28T04:13:10.605108Z",
     "iopub.status.idle": "2023-02-28T04:13:10.611168Z",
     "shell.execute_reply": "2023-02-28T04:13:10.610496Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.4597, -0.2352,  0.9328],\n",
       "               [-0.3720, -1.0745, -0.5017]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:10.613845Z",
     "iopub.status.busy": "2023-02-28T04:13:10.613480Z",
     "iopub.status.idle": "2023-02-28T04:13:14.644583Z",
     "shell.execute_reply": "2023-02-28T04:13:14.643753Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "495 ns ± 0.155 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:14.648070Z",
     "iopub.status.busy": "2023-02-28T04:13:14.647485Z",
     "iopub.status.idle": "2023-02-28T04:13:21.254153Z",
     "shell.execute_reply": "2023-02-28T04:13:21.253275Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "814 ns ± 0.053 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:21.258754Z",
     "iopub.status.busy": "2023-02-28T04:13:21.257447Z",
     "iopub.status.idle": "2023-02-28T04:13:30.020956Z",
     "shell.execute_reply": "2023-02-28T04:13:30.020079Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.8 µs ± 19.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:30.024789Z",
     "iopub.status.busy": "2023-02-28T04:13:30.024195Z",
     "iopub.status.idle": "2023-02-28T04:13:30.028118Z",
     "shell.execute_reply": "2023-02-28T04:13:30.027458Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:30.031096Z",
     "iopub.status.busy": "2023-02-28T04:13:30.030643Z",
     "iopub.status.idle": "2023-02-28T04:13:41.782109Z",
     "shell.execute_reply": "2023-02-28T04:13:41.781384Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 473 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:41.785684Z",
     "iopub.status.busy": "2023-02-28T04:13:41.785081Z",
     "iopub.status.idle": "2023-02-28T04:13:53.443434Z",
     "shell.execute_reply": "2023-02-28T04:13:53.442794Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 277 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:53.446400Z",
     "iopub.status.busy": "2023-02-28T04:13:53.445979Z",
     "iopub.status.idle": "2023-02-28T04:13:53.449639Z",
     "shell.execute_reply": "2023-02-28T04:13:53.449073Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:53.452421Z",
     "iopub.status.busy": "2023-02-28T04:13:53.451722Z",
     "iopub.status.idle": "2023-02-28T04:13:53.459165Z",
     "shell.execute_reply": "2023-02-28T04:13:53.458612Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3964525df0>\n",
       "├── 'a' --> tensor([[[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]],\n",
       "│           \n",
       "│                   [[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]],\n",
       "│           \n",
       "│                   [[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]],\n",
       "│           \n",
       "│                   [[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]],\n",
       "│           \n",
       "│                   [[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]],\n",
       "│           \n",
       "│                   [[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]],\n",
       "│           \n",
       "│                   [[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]],\n",
       "│           \n",
       "│                   [[-2.0329,  0.1333,  0.4975],\n",
       "│                    [ 0.7507,  1.2132, -1.4840]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f39645259a0>\n",
       "    └── 'c' --> tensor([[[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "                \n",
       "                        [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "                \n",
       "                        [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "                \n",
       "                        [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "                \n",
       "                        [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "                \n",
       "                        [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "                \n",
       "                        [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "                \n",
       "                        [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                         [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                         [-0.0078,  0.1313,  2.0593, -1.1287]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:53.461884Z",
     "iopub.status.busy": "2023-02-28T04:13:53.461215Z",
     "iopub.status.idle": "2023-02-28T04:13:56.108433Z",
     "shell.execute_reply": "2023-02-28T04:13:56.107550Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.5 µs ± 30 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:56.111743Z",
     "iopub.status.busy": "2023-02-28T04:13:56.111366Z",
     "iopub.status.idle": "2023-02-28T04:13:56.119648Z",
     "shell.execute_reply": "2023-02-28T04:13:56.119037Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3964525fa0>\n",
       "├── 'a' --> tensor([[-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840],\n",
       "│                   [-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840],\n",
       "│                   [-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840],\n",
       "│                   [-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840],\n",
       "│                   [-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840],\n",
       "│                   [-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840],\n",
       "│                   [-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840],\n",
       "│                   [-2.0329,  0.1333,  0.4975],\n",
       "│                   [ 0.7507,  1.2132, -1.4840]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3a1c23ce50>\n",
       "    └── 'c' --> tensor([[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                        [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                        [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                        [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                        [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                        [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                        [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                        [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                        [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                        [-0.0078,  0.1313,  2.0593, -1.1287]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:56.122508Z",
     "iopub.status.busy": "2023-02-28T04:13:56.122152Z",
     "iopub.status.idle": "2023-02-28T04:13:58.595285Z",
     "shell.execute_reply": "2023-02-28T04:13:58.594422Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4 µs ± 39.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:13:58.599157Z",
     "iopub.status.busy": "2023-02-28T04:13:58.598547Z",
     "iopub.status.idle": "2023-02-28T04:14:03.246300Z",
     "shell.execute_reply": "2023-02-28T04:14:03.245435Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.1 µs ± 161 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:14:03.250297Z",
     "iopub.status.busy": "2023-02-28T04:14:03.249659Z",
     "iopub.status.idle": "2023-02-28T04:14:03.258901Z",
     "shell.execute_reply": "2023-02-28T04:14:03.258223Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]],\n",
       "       \n",
       "               [[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]],\n",
       "       \n",
       "               [[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]],\n",
       "       \n",
       "               [[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]],\n",
       "       \n",
       "               [[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]],\n",
       "       \n",
       "               [[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]],\n",
       "       \n",
       "               [[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]],\n",
       "       \n",
       "               [[-2.0329,  0.1333,  0.4975],\n",
       "                [ 0.7507,  1.2132, -1.4840]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "              \n",
       "                      [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "              \n",
       "                      [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "              \n",
       "                      [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "              \n",
       "                      [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "              \n",
       "                      [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "              \n",
       "                      [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]],\n",
       "              \n",
       "                      [[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                       [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                       [-0.0078,  0.1313,  2.0593, -1.1287]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:14:03.261881Z",
     "iopub.status.busy": "2023-02-28T04:14:03.261397Z",
     "iopub.status.idle": "2023-02-28T04:14:09.683759Z",
     "shell.execute_reply": "2023-02-28T04:14:09.682887Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.1 µs ± 85.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:14:09.687303Z",
     "iopub.status.busy": "2023-02-28T04:14:09.686897Z",
     "iopub.status.idle": "2023-02-28T04:14:09.695055Z",
     "shell.execute_reply": "2023-02-28T04:14:09.694438Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840],\n",
       "               [-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840],\n",
       "               [-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840],\n",
       "               [-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840],\n",
       "               [-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840],\n",
       "               [-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840],\n",
       "               [-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840],\n",
       "               [-2.0329,  0.1333,  0.4975],\n",
       "               [ 0.7507,  1.2132, -1.4840]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                      [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                      [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                      [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                      [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                      [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                      [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287],\n",
       "                      [ 0.3988,  0.1613,  0.9986,  0.7053],\n",
       "                      [-2.2428, -0.4986, -1.6626, -0.1351],\n",
       "                      [-0.0078,  0.1313,  2.0593, -1.1287]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:14:09.697991Z",
     "iopub.status.busy": "2023-02-28T04:14:09.697615Z",
     "iopub.status.idle": "2023-02-28T04:14:21.238575Z",
     "shell.execute_reply": "2023-02-28T04:14:21.237715Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 274 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T04:14:21.241780Z",
     "iopub.status.busy": "2023-02-28T04:14:21.241278Z",
     "iopub.status.idle": "2023-02-28T04:14:23.952604Z",
     "shell.execute_reply": "2023-02-28T04:14:23.951968Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "333 µs ± 1.47 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
