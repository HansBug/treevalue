{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:48:46.675168Z",
     "iopub.status.busy": "2023-08-10T09:48:46.674515Z",
     "iopub.status.idle": "2023-08-10T09:48:48.416574Z",
     "shell.execute_reply": "2023-08-10T09:48:48.415638Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:48:48.421530Z",
     "iopub.status.busy": "2023-08-10T09:48:48.420925Z",
     "iopub.status.idle": "2023-08-10T09:48:48.814360Z",
     "shell.execute_reply": "2023-08-10T09:48:48.813024Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:48:48.820585Z",
     "iopub.status.busy": "2023-08-10T09:48:48.820164Z",
     "iopub.status.idle": "2023-08-10T09:48:48.831172Z",
     "shell.execute_reply": "2023-08-10T09:48:48.830309Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faf1cfee580>\n",
       "├── 'a' --> tensor([[ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922]])\n",
       "└── 'x' --> <FastTreeValue 0x7faf1cfee6a0>\n",
       "    └── 'c' --> tensor([[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:48:48.835700Z",
     "iopub.status.busy": "2023-08-10T09:48:48.835126Z",
     "iopub.status.idle": "2023-08-10T09:48:48.841290Z",
     "shell.execute_reply": "2023-08-10T09:48:48.840460Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3460, -0.7432,  2.1855],\n",
       "        [ 0.5057, -1.7111, -0.3922]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:48:48.845912Z",
     "iopub.status.busy": "2023-08-10T09:48:48.845167Z",
     "iopub.status.idle": "2023-08-10T09:48:55.913677Z",
     "shell.execute_reply": "2023-08-10T09:48:55.912626Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "86.9 ns ± 0.384 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:48:55.918028Z",
     "iopub.status.busy": "2023-08-10T09:48:55.917355Z",
     "iopub.status.idle": "2023-08-10T09:48:55.926665Z",
     "shell.execute_reply": "2023-08-10T09:48:55.925932Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faf1cfee580>\n",
       "├── 'a' --> tensor([[-0.6503,  0.5648, -1.2979],\n",
       "│                   [-0.0724, -1.0422,  2.2782]])\n",
       "└── 'x' --> <FastTreeValue 0x7faf1cfee6a0>\n",
       "    └── 'c' --> tensor([[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:48:55.930648Z",
     "iopub.status.busy": "2023-08-10T09:48:55.930107Z",
     "iopub.status.idle": "2023-08-10T09:49:02.958006Z",
     "shell.execute_reply": "2023-08-10T09:49:02.957211Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "86.5 ns ± 0.565 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:02.962114Z",
     "iopub.status.busy": "2023-08-10T09:49:02.961320Z",
     "iopub.status.idle": "2023-08-10T09:49:03.426247Z",
     "shell.execute_reply": "2023-08-10T09:49:03.424897Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:03.431207Z",
     "iopub.status.busy": "2023-08-10T09:49:03.430454Z",
     "iopub.status.idle": "2023-08-10T09:49:03.439034Z",
     "shell.execute_reply": "2023-08-10T09:49:03.438173Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:03.443069Z",
     "iopub.status.busy": "2023-08-10T09:49:03.442367Z",
     "iopub.status.idle": "2023-08-10T09:49:03.448769Z",
     "shell.execute_reply": "2023-08-10T09:49:03.447827Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3460, -0.7432,  2.1855],\n",
       "        [ 0.5057, -1.7111, -0.3922]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:03.453211Z",
     "iopub.status.busy": "2023-08-10T09:49:03.452546Z",
     "iopub.status.idle": "2023-08-10T09:49:09.681592Z",
     "shell.execute_reply": "2023-08-10T09:49:09.680831Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.6 ns ± 0.489 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:09.685386Z",
     "iopub.status.busy": "2023-08-10T09:49:09.684809Z",
     "iopub.status.idle": "2023-08-10T09:49:09.692139Z",
     "shell.execute_reply": "2023-08-10T09:49:09.691287Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5720, -1.2810, -0.4466],\n",
       "               [ 0.5968, -0.9732,  0.0433]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:09.696019Z",
     "iopub.status.busy": "2023-08-10T09:49:09.695470Z",
     "iopub.status.idle": "2023-08-10T09:49:15.001372Z",
     "shell.execute_reply": "2023-08-10T09:49:14.999990Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "653 ns ± 4.37 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:15.006489Z",
     "iopub.status.busy": "2023-08-10T09:49:15.005753Z",
     "iopub.status.idle": "2023-08-10T09:49:24.210596Z",
     "shell.execute_reply": "2023-08-10T09:49:24.208214Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.14 µs ± 4.32 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:24.214969Z",
     "iopub.status.busy": "2023-08-10T09:49:24.214151Z",
     "iopub.status.idle": "2023-08-10T09:49:34.522195Z",
     "shell.execute_reply": "2023-08-10T09:49:34.520625Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.7 µs ± 202 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:34.527630Z",
     "iopub.status.busy": "2023-08-10T09:49:34.526564Z",
     "iopub.status.idle": "2023-08-10T09:49:34.531140Z",
     "shell.execute_reply": "2023-08-10T09:49:34.530306Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:34.535257Z",
     "iopub.status.busy": "2023-08-10T09:49:34.534489Z",
     "iopub.status.idle": "2023-08-10T09:49:48.401329Z",
     "shell.execute_reply": "2023-08-10T09:49:48.400351Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "171 µs ± 1.64 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:49:48.405699Z",
     "iopub.status.busy": "2023-08-10T09:49:48.404920Z",
     "iopub.status.idle": "2023-08-10T09:50:02.263882Z",
     "shell.execute_reply": "2023-08-10T09:50:02.262918Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "171 µs ± 2.33 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:02.268043Z",
     "iopub.status.busy": "2023-08-10T09:50:02.267724Z",
     "iopub.status.idle": "2023-08-10T09:50:02.273023Z",
     "shell.execute_reply": "2023-08-10T09:50:02.272216Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:02.277201Z",
     "iopub.status.busy": "2023-08-10T09:50:02.276512Z",
     "iopub.status.idle": "2023-08-10T09:50:02.286995Z",
     "shell.execute_reply": "2023-08-10T09:50:02.286257Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faf30017670>\n",
       "├── 'a' --> tensor([[[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]],\n",
       "│           \n",
       "│                   [[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]],\n",
       "│           \n",
       "│                   [[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]],\n",
       "│           \n",
       "│                   [[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]],\n",
       "│           \n",
       "│                   [[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]],\n",
       "│           \n",
       "│                   [[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]],\n",
       "│           \n",
       "│                   [[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]],\n",
       "│           \n",
       "│                   [[ 1.3460, -0.7432,  2.1855],\n",
       "│                    [ 0.5057, -1.7111, -0.3922]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fae5599b610>\n",
       "    └── 'c' --> tensor([[[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "                \n",
       "                        [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "                \n",
       "                        [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "                \n",
       "                        [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "                \n",
       "                        [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "                \n",
       "                        [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "                \n",
       "                        [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "                \n",
       "                        [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                         [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                         [ 0.0157, -1.6163, -0.5815,  1.0017]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:02.290494Z",
     "iopub.status.busy": "2023-08-10T09:50:02.290036Z",
     "iopub.status.idle": "2023-08-10T09:50:05.494491Z",
     "shell.execute_reply": "2023-08-10T09:50:05.493686Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39.5 µs ± 304 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:05.498209Z",
     "iopub.status.busy": "2023-08-10T09:50:05.497742Z",
     "iopub.status.idle": "2023-08-10T09:50:05.511205Z",
     "shell.execute_reply": "2023-08-10T09:50:05.510192Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fae68691d30>\n",
       "├── 'a' --> tensor([[ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922],\n",
       "│                   [ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922],\n",
       "│                   [ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922],\n",
       "│                   [ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922],\n",
       "│                   [ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922],\n",
       "│                   [ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922],\n",
       "│                   [ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922],\n",
       "│                   [ 1.3460, -0.7432,  2.1855],\n",
       "│                   [ 0.5057, -1.7111, -0.3922]])\n",
       "└── 'x' --> <FastTreeValue 0x7fae68585190>\n",
       "    └── 'c' --> tensor([[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                        [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                        [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                        [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                        [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                        [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                        [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                        [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                        [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                        [ 0.0157, -1.6163, -0.5815,  1.0017]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:05.515552Z",
     "iopub.status.busy": "2023-08-10T09:50:05.514932Z",
     "iopub.status.idle": "2023-08-10T09:50:08.492711Z",
     "shell.execute_reply": "2023-08-10T09:50:08.491469Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.6 µs ± 75.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:08.498526Z",
     "iopub.status.busy": "2023-08-10T09:50:08.497714Z",
     "iopub.status.idle": "2023-08-10T09:50:14.861078Z",
     "shell.execute_reply": "2023-08-10T09:50:14.859224Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.1 µs ± 284 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:14.865049Z",
     "iopub.status.busy": "2023-08-10T09:50:14.864565Z",
     "iopub.status.idle": "2023-08-10T09:50:14.875428Z",
     "shell.execute_reply": "2023-08-10T09:50:14.874422Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "              \n",
       "                      [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "              \n",
       "                      [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "              \n",
       "                      [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "              \n",
       "                      [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "              \n",
       "                      [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "              \n",
       "                      [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]],\n",
       "              \n",
       "                      [[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                       [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                       [ 0.0157, -1.6163, -0.5815,  1.0017]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]],\n",
       "       \n",
       "               [[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]],\n",
       "       \n",
       "               [[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]],\n",
       "       \n",
       "               [[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]],\n",
       "       \n",
       "               [[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]],\n",
       "       \n",
       "               [[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]],\n",
       "       \n",
       "               [[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]],\n",
       "       \n",
       "               [[ 1.3460, -0.7432,  2.1855],\n",
       "                [ 0.5057, -1.7111, -0.3922]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:14.880597Z",
     "iopub.status.busy": "2023-08-10T09:50:14.880016Z",
     "iopub.status.idle": "2023-08-10T09:50:22.820554Z",
     "shell.execute_reply": "2023-08-10T09:50:22.819559Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "97.7 µs ± 412 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:22.825310Z",
     "iopub.status.busy": "2023-08-10T09:50:22.824756Z",
     "iopub.status.idle": "2023-08-10T09:50:22.835100Z",
     "shell.execute_reply": "2023-08-10T09:50:22.834234Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                      [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                      [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                      [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                      [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                      [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                      [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017],\n",
       "                      [-0.5216, -1.0532, -1.8612,  1.2526],\n",
       "                      [ 0.5619, -1.6461,  0.9980, -0.1697],\n",
       "                      [ 0.0157, -1.6163, -0.5815,  1.0017]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922],\n",
       "               [ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922],\n",
       "               [ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922],\n",
       "               [ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922],\n",
       "               [ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922],\n",
       "               [ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922],\n",
       "               [ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922],\n",
       "               [ 1.3460, -0.7432,  2.1855],\n",
       "               [ 0.5057, -1.7111, -0.3922]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:22.839010Z",
     "iopub.status.busy": "2023-08-10T09:50:22.838542Z",
     "iopub.status.idle": "2023-08-10T09:50:38.558337Z",
     "shell.execute_reply": "2023-08-10T09:50:38.556329Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "193 µs ± 1.61 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T09:50:38.562531Z",
     "iopub.status.busy": "2023-08-10T09:50:38.562238Z",
     "iopub.status.idle": "2023-08-10T09:50:41.978407Z",
     "shell.execute_reply": "2023-08-10T09:50:41.977126Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "419 µs ± 8.35 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
