{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:26:58.044087Z",
     "iopub.status.busy": "2023-03-16T08:26:58.043652Z",
     "iopub.status.idle": "2023-03-16T08:26:59.460105Z",
     "shell.execute_reply": "2023-03-16T08:26:59.459300Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:26:59.464235Z",
     "iopub.status.busy": "2023-03-16T08:26:59.463647Z",
     "iopub.status.idle": "2023-03-16T08:26:59.750225Z",
     "shell.execute_reply": "2023-03-16T08:26:59.749446Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:26:59.754522Z",
     "iopub.status.busy": "2023-03-16T08:26:59.753676Z",
     "iopub.status.idle": "2023-03-16T08:26:59.763810Z",
     "shell.execute_reply": "2023-03-16T08:26:59.763084Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb659b22bb0>\n",
       "├── 'a' --> tensor([[ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb659b22f70>\n",
       "    └── 'c' --> tensor([[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:26:59.766807Z",
     "iopub.status.busy": "2023-03-16T08:26:59.766352Z",
     "iopub.status.idle": "2023-03-16T08:26:59.771422Z",
     "shell.execute_reply": "2023-03-16T08:26:59.770714Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5489,  0.1182,  0.7261],\n",
       "        [-1.4199, -3.3119,  2.1527]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:26:59.774101Z",
     "iopub.status.busy": "2023-03-16T08:26:59.773657Z",
     "iopub.status.idle": "2023-03-16T08:27:04.980254Z",
     "shell.execute_reply": "2023-03-16T08:27:04.979459Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.1 ns ± 0.0595 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:04.983839Z",
     "iopub.status.busy": "2023-03-16T08:27:04.983167Z",
     "iopub.status.idle": "2023-03-16T08:27:04.989812Z",
     "shell.execute_reply": "2023-03-16T08:27:04.989102Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb659b22bb0>\n",
       "├── 'a' --> tensor([[ 0.3653,  0.4530,  0.2797],\n",
       "│                   [-1.2025,  0.2704,  0.6294]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb659b22f70>\n",
       "    └── 'c' --> tensor([[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:04.992819Z",
     "iopub.status.busy": "2023-03-16T08:27:04.992359Z",
     "iopub.status.idle": "2023-03-16T08:27:10.590855Z",
     "shell.execute_reply": "2023-03-16T08:27:10.589954Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.9 ns ± 0.0812 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:10.594555Z",
     "iopub.status.busy": "2023-03-16T08:27:10.594106Z",
     "iopub.status.idle": "2023-03-16T08:27:10.980595Z",
     "shell.execute_reply": "2023-03-16T08:27:10.979748Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:10.984649Z",
     "iopub.status.busy": "2023-03-16T08:27:10.983985Z",
     "iopub.status.idle": "2023-03-16T08:27:10.990171Z",
     "shell.execute_reply": "2023-03-16T08:27:10.989480Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:10.992849Z",
     "iopub.status.busy": "2023-03-16T08:27:10.992474Z",
     "iopub.status.idle": "2023-03-16T08:27:10.997554Z",
     "shell.execute_reply": "2023-03-16T08:27:10.996863Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5489,  0.1182,  0.7261],\n",
       "        [-1.4199, -3.3119,  2.1527]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:11.000224Z",
     "iopub.status.busy": "2023-03-16T08:27:10.999857Z",
     "iopub.status.idle": "2023-03-16T08:27:16.102302Z",
     "shell.execute_reply": "2023-03-16T08:27:16.101409Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.4 ns ± 0.0127 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:16.105628Z",
     "iopub.status.busy": "2023-03-16T08:27:16.105168Z",
     "iopub.status.idle": "2023-03-16T08:27:16.112078Z",
     "shell.execute_reply": "2023-03-16T08:27:16.111443Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8133,  0.9091, -0.6794],\n",
       "               [-1.1370, -0.5532,  0.9804]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:16.114992Z",
     "iopub.status.busy": "2023-03-16T08:27:16.114648Z",
     "iopub.status.idle": "2023-03-16T08:27:20.123228Z",
     "shell.execute_reply": "2023-03-16T08:27:20.122328Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492 ns ± 0.161 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:20.127067Z",
     "iopub.status.busy": "2023-03-16T08:27:20.126549Z",
     "iopub.status.idle": "2023-03-16T08:27:26.664171Z",
     "shell.execute_reply": "2023-03-16T08:27:26.663291Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "805 ns ± 0.439 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:26.667701Z",
     "iopub.status.busy": "2023-03-16T08:27:26.667303Z",
     "iopub.status.idle": "2023-03-16T08:27:35.609038Z",
     "shell.execute_reply": "2023-03-16T08:27:35.608210Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 µs ± 18.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:35.612672Z",
     "iopub.status.busy": "2023-03-16T08:27:35.612191Z",
     "iopub.status.idle": "2023-03-16T08:27:35.616473Z",
     "shell.execute_reply": "2023-03-16T08:27:35.615832Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:35.619337Z",
     "iopub.status.busy": "2023-03-16T08:27:35.618989Z",
     "iopub.status.idle": "2023-03-16T08:27:47.203282Z",
     "shell.execute_reply": "2023-03-16T08:27:47.202445Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 526 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:47.207003Z",
     "iopub.status.busy": "2023-03-16T08:27:47.206412Z",
     "iopub.status.idle": "2023-03-16T08:27:58.788239Z",
     "shell.execute_reply": "2023-03-16T08:27:58.787580Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 330 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:58.791500Z",
     "iopub.status.busy": "2023-03-16T08:27:58.791010Z",
     "iopub.status.idle": "2023-03-16T08:27:58.794654Z",
     "shell.execute_reply": "2023-03-16T08:27:58.794060Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:58.797210Z",
     "iopub.status.busy": "2023-03-16T08:27:58.796753Z",
     "iopub.status.idle": "2023-03-16T08:27:58.804124Z",
     "shell.execute_reply": "2023-03-16T08:27:58.803554Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb657b11c40>\n",
       "├── 'a' --> tensor([[[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]],\n",
       "│           \n",
       "│                   [[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]],\n",
       "│           \n",
       "│                   [[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]],\n",
       "│           \n",
       "│                   [[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]],\n",
       "│           \n",
       "│                   [[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]],\n",
       "│           \n",
       "│                   [[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]],\n",
       "│           \n",
       "│                   [[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]],\n",
       "│           \n",
       "│                   [[ 0.5489,  0.1182,  0.7261],\n",
       "│                    [-1.4199, -3.3119,  2.1527]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb657b11e50>\n",
       "    └── 'c' --> tensor([[[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                         [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                         [-1.3395,  0.8177, -0.3104, -1.1202]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:27:58.806741Z",
     "iopub.status.busy": "2023-03-16T08:27:58.806274Z",
     "iopub.status.idle": "2023-03-16T08:28:01.462552Z",
     "shell.execute_reply": "2023-03-16T08:28:01.461697Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.7 µs ± 42.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:01.465905Z",
     "iopub.status.busy": "2023-03-16T08:28:01.465401Z",
     "iopub.status.idle": "2023-03-16T08:28:01.474525Z",
     "shell.execute_reply": "2023-03-16T08:28:01.473869Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb581c06670>\n",
       "├── 'a' --> tensor([[ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527],\n",
       "│                   [ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527],\n",
       "│                   [ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527],\n",
       "│                   [ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527],\n",
       "│                   [ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527],\n",
       "│                   [ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527],\n",
       "│                   [ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527],\n",
       "│                   [ 0.5489,  0.1182,  0.7261],\n",
       "│                   [-1.4199, -3.3119,  2.1527]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb581c06220>\n",
       "    └── 'c' --> tensor([[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                        [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                        [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                        [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                        [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                        [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                        [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                        [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                        [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                        [-1.3395,  0.8177, -0.3104, -1.1202]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:01.477539Z",
     "iopub.status.busy": "2023-03-16T08:28:01.477171Z",
     "iopub.status.idle": "2023-03-16T08:28:03.993445Z",
     "shell.execute_reply": "2023-03-16T08:28:03.992508Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.9 µs ± 57.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:03.997173Z",
     "iopub.status.busy": "2023-03-16T08:28:03.996671Z",
     "iopub.status.idle": "2023-03-16T08:28:09.386252Z",
     "shell.execute_reply": "2023-03-16T08:28:09.385368Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.3 µs ± 45.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:09.389569Z",
     "iopub.status.busy": "2023-03-16T08:28:09.389163Z",
     "iopub.status.idle": "2023-03-16T08:28:09.397120Z",
     "shell.execute_reply": "2023-03-16T08:28:09.396427Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                       [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                       [-1.3395,  0.8177, -0.3104, -1.1202]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]],\n",
       "       \n",
       "               [[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]],\n",
       "       \n",
       "               [[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]],\n",
       "       \n",
       "               [[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]],\n",
       "       \n",
       "               [[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]],\n",
       "       \n",
       "               [[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]],\n",
       "       \n",
       "               [[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]],\n",
       "       \n",
       "               [[ 0.5489,  0.1182,  0.7261],\n",
       "                [-1.4199, -3.3119,  2.1527]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:09.400297Z",
     "iopub.status.busy": "2023-03-16T08:28:09.399938Z",
     "iopub.status.idle": "2023-03-16T08:28:15.778795Z",
     "shell.execute_reply": "2023-03-16T08:28:15.777903Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.5 µs ± 695 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:15.782094Z",
     "iopub.status.busy": "2023-03-16T08:28:15.781679Z",
     "iopub.status.idle": "2023-03-16T08:28:15.789858Z",
     "shell.execute_reply": "2023-03-16T08:28:15.789223Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                      [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                      [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                      [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                      [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                      [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                      [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202],\n",
       "                      [ 0.2640, -0.4119,  0.1489,  0.0122],\n",
       "                      [ 0.2020, -0.1225,  0.0267,  0.0761],\n",
       "                      [-1.3395,  0.8177, -0.3104, -1.1202]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527],\n",
       "               [ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527],\n",
       "               [ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527],\n",
       "               [ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527],\n",
       "               [ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527],\n",
       "               [ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527],\n",
       "               [ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527],\n",
       "               [ 0.5489,  0.1182,  0.7261],\n",
       "               [-1.4199, -3.3119,  2.1527]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:15.792826Z",
     "iopub.status.busy": "2023-03-16T08:28:15.792463Z",
     "iopub.status.idle": "2023-03-16T08:28:27.695490Z",
     "shell.execute_reply": "2023-03-16T08:28:27.694609Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 357 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:28:27.699489Z",
     "iopub.status.busy": "2023-03-16T08:28:27.698879Z",
     "iopub.status.idle": "2023-03-16T08:28:30.447872Z",
     "shell.execute_reply": "2023-03-16T08:28:30.447230Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "338 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
