{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:04.737675Z",
     "iopub.status.busy": "2023-08-14T06:37:04.737211Z",
     "iopub.status.idle": "2023-08-14T06:37:06.140312Z",
     "shell.execute_reply": "2023-08-14T06:37:06.139477Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:06.145064Z",
     "iopub.status.busy": "2023-08-14T06:37:06.144568Z",
     "iopub.status.idle": "2023-08-14T06:37:06.468094Z",
     "shell.execute_reply": "2023-08-14T06:37:06.467286Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:06.471871Z",
     "iopub.status.busy": "2023-08-14T06:37:06.471553Z",
     "iopub.status.idle": "2023-08-14T06:37:06.482597Z",
     "shell.execute_reply": "2023-08-14T06:37:06.481950Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0e2417a880>\n",
       "├── 'a' --> tensor([[-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0e2417aac0>\n",
       "    └── 'c' --> tensor([[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:06.486138Z",
     "iopub.status.busy": "2023-08-14T06:37:06.485555Z",
     "iopub.status.idle": "2023-08-14T06:37:06.492421Z",
     "shell.execute_reply": "2023-08-14T06:37:06.491801Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4724,  2.1265, -0.4180],\n",
       "        [ 0.0832, -1.8861, -0.1513]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:06.495659Z",
     "iopub.status.busy": "2023-08-14T06:37:06.495275Z",
     "iopub.status.idle": "2023-08-14T06:37:12.349069Z",
     "shell.execute_reply": "2023-08-14T06:37:12.348269Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.1 ns ± 0.04 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:12.353430Z",
     "iopub.status.busy": "2023-08-14T06:37:12.352853Z",
     "iopub.status.idle": "2023-08-14T06:37:12.361006Z",
     "shell.execute_reply": "2023-08-14T06:37:12.360373Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0e2417a880>\n",
       "├── 'a' --> tensor([[ 0.3149,  0.7455, -0.3079],\n",
       "│                   [ 0.0750,  1.0286,  0.5498]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0e2417aac0>\n",
       "    └── 'c' --> tensor([[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:12.364360Z",
     "iopub.status.busy": "2023-08-14T06:37:12.363985Z",
     "iopub.status.idle": "2023-08-14T06:37:18.161376Z",
     "shell.execute_reply": "2023-08-14T06:37:18.159925Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.4 ns ± 0.141 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:18.164889Z",
     "iopub.status.busy": "2023-08-14T06:37:18.164475Z",
     "iopub.status.idle": "2023-08-14T06:37:18.545032Z",
     "shell.execute_reply": "2023-08-14T06:37:18.544262Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:18.548855Z",
     "iopub.status.busy": "2023-08-14T06:37:18.548343Z",
     "iopub.status.idle": "2023-08-14T06:37:18.555482Z",
     "shell.execute_reply": "2023-08-14T06:37:18.554837Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:18.558780Z",
     "iopub.status.busy": "2023-08-14T06:37:18.558327Z",
     "iopub.status.idle": "2023-08-14T06:37:18.564751Z",
     "shell.execute_reply": "2023-08-14T06:37:18.564051Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4724,  2.1265, -0.4180],\n",
       "        [ 0.0832, -1.8861, -0.1513]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:18.567846Z",
     "iopub.status.busy": "2023-08-14T06:37:18.567485Z",
     "iopub.status.idle": "2023-08-14T06:37:23.834537Z",
     "shell.execute_reply": "2023-08-14T06:37:23.833824Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.7 ns ± 0.147 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:23.837923Z",
     "iopub.status.busy": "2023-08-14T06:37:23.837434Z",
     "iopub.status.idle": "2023-08-14T06:37:23.843821Z",
     "shell.execute_reply": "2023-08-14T06:37:23.843065Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5740,  0.0468,  0.1646],\n",
       "               [ 0.2981,  0.5067, -1.0830]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:23.846976Z",
     "iopub.status.busy": "2023-08-14T06:37:23.846595Z",
     "iopub.status.idle": "2023-08-14T06:37:28.219513Z",
     "shell.execute_reply": "2023-08-14T06:37:28.218730Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "538 ns ± 0.262 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:28.223503Z",
     "iopub.status.busy": "2023-08-14T06:37:28.222741Z",
     "iopub.status.idle": "2023-08-14T06:37:35.582819Z",
     "shell.execute_reply": "2023-08-14T06:37:35.582076Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "906 ns ± 0.859 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:35.586674Z",
     "iopub.status.busy": "2023-08-14T06:37:35.585999Z",
     "iopub.status.idle": "2023-08-14T06:37:44.655719Z",
     "shell.execute_reply": "2023-08-14T06:37:44.654854Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 23.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:44.659655Z",
     "iopub.status.busy": "2023-08-14T06:37:44.659016Z",
     "iopub.status.idle": "2023-08-14T06:37:44.663854Z",
     "shell.execute_reply": "2023-08-14T06:37:44.663168Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:44.666902Z",
     "iopub.status.busy": "2023-08-14T06:37:44.666528Z",
     "iopub.status.idle": "2023-08-14T06:37:56.737391Z",
     "shell.execute_reply": "2023-08-14T06:37:56.736713Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "149 µs ± 7.92 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:37:56.740699Z",
     "iopub.status.busy": "2023-08-14T06:37:56.740189Z",
     "iopub.status.idle": "2023-08-14T06:38:08.544365Z",
     "shell.execute_reply": "2023-08-14T06:38:08.543708Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 1.02 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:08.547717Z",
     "iopub.status.busy": "2023-08-14T06:38:08.547182Z",
     "iopub.status.idle": "2023-08-14T06:38:08.550825Z",
     "shell.execute_reply": "2023-08-14T06:38:08.550258Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:08.553873Z",
     "iopub.status.busy": "2023-08-14T06:38:08.553216Z",
     "iopub.status.idle": "2023-08-14T06:38:08.560884Z",
     "shell.execute_reply": "2023-08-14T06:38:08.560322Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0d499beb80>\n",
       "├── 'a' --> tensor([[[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]],\n",
       "│           \n",
       "│                   [[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]],\n",
       "│           \n",
       "│                   [[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]],\n",
       "│           \n",
       "│                   [[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]],\n",
       "│           \n",
       "│                   [[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]],\n",
       "│           \n",
       "│                   [[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]],\n",
       "│           \n",
       "│                   [[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]],\n",
       "│           \n",
       "│                   [[-0.4724,  2.1265, -0.4180],\n",
       "│                    [ 0.0832, -1.8861, -0.1513]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0d499beb50>\n",
       "    └── 'c' --> tensor([[[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "                \n",
       "                        [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "                \n",
       "                        [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "                \n",
       "                        [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "                \n",
       "                        [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "                \n",
       "                        [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "                \n",
       "                        [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "                \n",
       "                        [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                         [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                         [-1.1872, -0.0038, -1.9956,  0.6355]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:08.563897Z",
     "iopub.status.busy": "2023-08-14T06:38:08.563223Z",
     "iopub.status.idle": "2023-08-14T06:38:11.246645Z",
     "shell.execute_reply": "2023-08-14T06:38:11.245984Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33 µs ± 104 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:11.250193Z",
     "iopub.status.busy": "2023-08-14T06:38:11.249550Z",
     "iopub.status.idle": "2023-08-14T06:38:11.257406Z",
     "shell.execute_reply": "2023-08-14T06:38:11.256700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0d5c7060a0>\n",
       "├── 'a' --> tensor([[-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513],\n",
       "│                   [-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513],\n",
       "│                   [-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513],\n",
       "│                   [-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513],\n",
       "│                   [-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513],\n",
       "│                   [-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513],\n",
       "│                   [-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513],\n",
       "│                   [-0.4724,  2.1265, -0.4180],\n",
       "│                   [ 0.0832, -1.8861, -0.1513]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0e2413e0a0>\n",
       "    └── 'c' --> tensor([[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                        [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                        [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                        [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                        [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                        [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                        [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                        [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                        [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                        [-1.1872, -0.0038, -1.9956,  0.6355]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:11.260509Z",
     "iopub.status.busy": "2023-08-14T06:38:11.260139Z",
     "iopub.status.idle": "2023-08-14T06:38:13.767361Z",
     "shell.execute_reply": "2023-08-14T06:38:13.766591Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.8 µs ± 45 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:13.770866Z",
     "iopub.status.busy": "2023-08-14T06:38:13.770343Z",
     "iopub.status.idle": "2023-08-14T06:38:19.408597Z",
     "shell.execute_reply": "2023-08-14T06:38:19.407862Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.4 µs ± 177 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:19.412350Z",
     "iopub.status.busy": "2023-08-14T06:38:19.411712Z",
     "iopub.status.idle": "2023-08-14T06:38:19.419629Z",
     "shell.execute_reply": "2023-08-14T06:38:19.418904Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "              \n",
       "                      [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "              \n",
       "                      [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "              \n",
       "                      [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "              \n",
       "                      [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "              \n",
       "                      [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "              \n",
       "                      [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]],\n",
       "              \n",
       "                      [[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                       [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                       [-1.1872, -0.0038, -1.9956,  0.6355]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]],\n",
       "       \n",
       "               [[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]],\n",
       "       \n",
       "               [[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]],\n",
       "       \n",
       "               [[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]],\n",
       "       \n",
       "               [[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]],\n",
       "       \n",
       "               [[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]],\n",
       "       \n",
       "               [[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]],\n",
       "       \n",
       "               [[-0.4724,  2.1265, -0.4180],\n",
       "                [ 0.0832, -1.8861, -0.1513]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:19.422916Z",
     "iopub.status.busy": "2023-08-14T06:38:19.422376Z",
     "iopub.status.idle": "2023-08-14T06:38:26.239640Z",
     "shell.execute_reply": "2023-08-14T06:38:26.238874Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84 µs ± 150 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:26.243204Z",
     "iopub.status.busy": "2023-08-14T06:38:26.242783Z",
     "iopub.status.idle": "2023-08-14T06:38:26.251935Z",
     "shell.execute_reply": "2023-08-14T06:38:26.251207Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                      [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                      [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                      [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                      [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                      [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                      [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355],\n",
       "                      [-0.5386, -0.4743, -0.0267, -0.2617],\n",
       "                      [ 1.0280,  0.7239, -0.5424, -1.1147],\n",
       "                      [-1.1872, -0.0038, -1.9956,  0.6355]]),\n",
       "       ),\n",
       "    a: tensor([[-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513],\n",
       "               [-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513],\n",
       "               [-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513],\n",
       "               [-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513],\n",
       "               [-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513],\n",
       "               [-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513],\n",
       "               [-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513],\n",
       "               [-0.4724,  2.1265, -0.4180],\n",
       "               [ 0.0832, -1.8861, -0.1513]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:26.255110Z",
     "iopub.status.busy": "2023-08-14T06:38:26.254655Z",
     "iopub.status.idle": "2023-08-14T06:38:40.432119Z",
     "shell.execute_reply": "2023-08-14T06:38:40.431372Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175 µs ± 628 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T06:38:40.435587Z",
     "iopub.status.busy": "2023-08-14T06:38:40.435059Z",
     "iopub.status.idle": "2023-08-14T06:38:43.251866Z",
     "shell.execute_reply": "2023-08-14T06:38:43.251197Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "344 µs ± 4.68 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
