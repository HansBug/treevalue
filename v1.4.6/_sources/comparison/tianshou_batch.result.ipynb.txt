{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:27.555030Z",
     "iopub.status.busy": "2023-05-26T06:00:27.554578Z",
     "iopub.status.idle": "2023-05-26T06:00:28.898284Z",
     "shell.execute_reply": "2023-05-26T06:00:28.897508Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:28.903085Z",
     "iopub.status.busy": "2023-05-26T06:00:28.902522Z",
     "iopub.status.idle": "2023-05-26T06:00:29.189479Z",
     "shell.execute_reply": "2023-05-26T06:00:29.188701Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:29.193550Z",
     "iopub.status.busy": "2023-05-26T06:00:29.193005Z",
     "iopub.status.idle": "2023-05-26T06:00:29.203910Z",
     "shell.execute_reply": "2023-05-26T06:00:29.203308Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f49215c1ac0>\n",
       "├── 'a' --> tensor([[-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366]])\n",
       "└── 'x' --> <FastTreeValue 0x7f49215bb040>\n",
       "    └── 'c' --> tensor([[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:29.206938Z",
     "iopub.status.busy": "2023-05-26T06:00:29.206568Z",
     "iopub.status.idle": "2023-05-26T06:00:29.211466Z",
     "shell.execute_reply": "2023-05-26T06:00:29.210786Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.6427, -2.0310,  0.5896],\n",
       "        [ 0.2927,  0.2713, -0.1366]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:29.215023Z",
     "iopub.status.busy": "2023-05-26T06:00:29.214656Z",
     "iopub.status.idle": "2023-05-26T06:00:34.432011Z",
     "shell.execute_reply": "2023-05-26T06:00:34.430407Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.2 ns ± 0.132 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:34.435543Z",
     "iopub.status.busy": "2023-05-26T06:00:34.435061Z",
     "iopub.status.idle": "2023-05-26T06:00:34.441592Z",
     "shell.execute_reply": "2023-05-26T06:00:34.440863Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f49215c1ac0>\n",
       "├── 'a' --> tensor([[-1.3795,  0.8906, -0.2354],\n",
       "│                   [ 0.3014, -1.1846,  0.4469]])\n",
       "└── 'x' --> <FastTreeValue 0x7f49215bb040>\n",
       "    └── 'c' --> tensor([[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:34.444517Z",
     "iopub.status.busy": "2023-05-26T06:00:34.444145Z",
     "iopub.status.idle": "2023-05-26T06:00:39.935466Z",
     "shell.execute_reply": "2023-05-26T06:00:39.934698Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.7 ns ± 0.0288 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:39.939022Z",
     "iopub.status.busy": "2023-05-26T06:00:39.938618Z",
     "iopub.status.idle": "2023-05-26T06:00:40.300097Z",
     "shell.execute_reply": "2023-05-26T06:00:40.299340Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:40.304059Z",
     "iopub.status.busy": "2023-05-26T06:00:40.303554Z",
     "iopub.status.idle": "2023-05-26T06:00:40.309491Z",
     "shell.execute_reply": "2023-05-26T06:00:40.308770Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:40.312495Z",
     "iopub.status.busy": "2023-05-26T06:00:40.312068Z",
     "iopub.status.idle": "2023-05-26T06:00:40.316991Z",
     "shell.execute_reply": "2023-05-26T06:00:40.316306Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.6427, -2.0310,  0.5896],\n",
       "        [ 0.2927,  0.2713, -0.1366]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:40.320161Z",
     "iopub.status.busy": "2023-05-26T06:00:40.319798Z",
     "iopub.status.idle": "2023-05-26T06:00:45.101698Z",
     "shell.execute_reply": "2023-05-26T06:00:45.100930Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.1 ns ± 0.0884 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:45.105464Z",
     "iopub.status.busy": "2023-05-26T06:00:45.104841Z",
     "iopub.status.idle": "2023-05-26T06:00:45.111982Z",
     "shell.execute_reply": "2023-05-26T06:00:45.111337Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2513,  1.7064,  0.6916],\n",
       "               [-0.1499, -0.5197,  0.2334]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:45.115205Z",
     "iopub.status.busy": "2023-05-26T06:00:45.114659Z",
     "iopub.status.idle": "2023-05-26T06:00:49.149422Z",
     "shell.execute_reply": "2023-05-26T06:00:49.148639Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "497 ns ± 0.174 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:49.153410Z",
     "iopub.status.busy": "2023-05-26T06:00:49.152817Z",
     "iopub.status.idle": "2023-05-26T06:00:55.789535Z",
     "shell.execute_reply": "2023-05-26T06:00:55.788774Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "817 ns ± 0.88 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:00:55.793463Z",
     "iopub.status.busy": "2023-05-26T06:00:55.792803Z",
     "iopub.status.idle": "2023-05-26T06:01:04.433443Z",
     "shell.execute_reply": "2023-05-26T06:01:04.432676Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.6 µs ± 38.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:04.437015Z",
     "iopub.status.busy": "2023-05-26T06:01:04.436610Z",
     "iopub.status.idle": "2023-05-26T06:01:04.440185Z",
     "shell.execute_reply": "2023-05-26T06:01:04.439426Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:04.443562Z",
     "iopub.status.busy": "2023-05-26T06:01:04.443017Z",
     "iopub.status.idle": "2023-05-26T06:01:16.173133Z",
     "shell.execute_reply": "2023-05-26T06:01:16.172493Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 581 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:16.176489Z",
     "iopub.status.busy": "2023-05-26T06:01:16.176090Z",
     "iopub.status.idle": "2023-05-26T06:01:27.724109Z",
     "shell.execute_reply": "2023-05-26T06:01:27.723317Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 538 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:27.728151Z",
     "iopub.status.busy": "2023-05-26T06:01:27.727666Z",
     "iopub.status.idle": "2023-05-26T06:01:27.732626Z",
     "shell.execute_reply": "2023-05-26T06:01:27.731997Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:27.735399Z",
     "iopub.status.busy": "2023-05-26T06:01:27.735179Z",
     "iopub.status.idle": "2023-05-26T06:01:27.744090Z",
     "shell.execute_reply": "2023-05-26T06:01:27.743479Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f49215c1040>\n",
       "├── 'a' --> tensor([[[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]],\n",
       "│           \n",
       "│                   [[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]],\n",
       "│           \n",
       "│                   [[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]],\n",
       "│           \n",
       "│                   [[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]],\n",
       "│           \n",
       "│                   [[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]],\n",
       "│           \n",
       "│                   [[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]],\n",
       "│           \n",
       "│                   [[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]],\n",
       "│           \n",
       "│                   [[-0.6427, -2.0310,  0.5896],\n",
       "│                    [ 0.2927,  0.2713, -0.1366]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f491c52b7c0>\n",
       "    └── 'c' --> tensor([[[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "                \n",
       "                        [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "                \n",
       "                        [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "                \n",
       "                        [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "                \n",
       "                        [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "                \n",
       "                        [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "                \n",
       "                        [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "                \n",
       "                        [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                         [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                         [ 1.1061, -0.3053,  0.3426,  2.3018]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:27.746874Z",
     "iopub.status.busy": "2023-05-26T06:01:27.746647Z",
     "iopub.status.idle": "2023-05-26T06:01:30.417106Z",
     "shell.execute_reply": "2023-05-26T06:01:30.416366Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.8 µs ± 132 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:30.420909Z",
     "iopub.status.busy": "2023-05-26T06:01:30.420252Z",
     "iopub.status.idle": "2023-05-26T06:01:30.428346Z",
     "shell.execute_reply": "2023-05-26T06:01:30.427632Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f49215c1700>\n",
       "├── 'a' --> tensor([[-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366],\n",
       "│                   [-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366],\n",
       "│                   [-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366],\n",
       "│                   [-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366],\n",
       "│                   [-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366],\n",
       "│                   [-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366],\n",
       "│                   [-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366],\n",
       "│                   [-0.6427, -2.0310,  0.5896],\n",
       "│                   [ 0.2927,  0.2713, -0.1366]])\n",
       "└── 'x' --> <FastTreeValue 0x7f48598bcca0>\n",
       "    └── 'c' --> tensor([[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                        [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                        [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                        [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                        [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                        [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                        [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                        [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                        [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                        [ 1.1061, -0.3053,  0.3426,  2.3018]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:30.431391Z",
     "iopub.status.busy": "2023-05-26T06:01:30.430923Z",
     "iopub.status.idle": "2023-05-26T06:01:32.952982Z",
     "shell.execute_reply": "2023-05-26T06:01:32.952326Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31 µs ± 65 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:32.956459Z",
     "iopub.status.busy": "2023-05-26T06:01:32.955841Z",
     "iopub.status.idle": "2023-05-26T06:01:38.392412Z",
     "shell.execute_reply": "2023-05-26T06:01:38.391673Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.9 µs ± 64.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:38.396129Z",
     "iopub.status.busy": "2023-05-26T06:01:38.395689Z",
     "iopub.status.idle": "2023-05-26T06:01:38.403758Z",
     "shell.execute_reply": "2023-05-26T06:01:38.403044Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "              \n",
       "                      [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "              \n",
       "                      [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "              \n",
       "                      [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "              \n",
       "                      [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "              \n",
       "                      [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "              \n",
       "                      [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]],\n",
       "              \n",
       "                      [[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                       [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                       [ 1.1061, -0.3053,  0.3426,  2.3018]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]],\n",
       "       \n",
       "               [[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]],\n",
       "       \n",
       "               [[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]],\n",
       "       \n",
       "               [[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]],\n",
       "       \n",
       "               [[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]],\n",
       "       \n",
       "               [[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]],\n",
       "       \n",
       "               [[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]],\n",
       "       \n",
       "               [[-0.6427, -2.0310,  0.5896],\n",
       "                [ 0.2927,  0.2713, -0.1366]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:38.406778Z",
     "iopub.status.busy": "2023-05-26T06:01:38.406397Z",
     "iopub.status.idle": "2023-05-26T06:01:44.775956Z",
     "shell.execute_reply": "2023-05-26T06:01:44.775216Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 193 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:44.779624Z",
     "iopub.status.busy": "2023-05-26T06:01:44.779140Z",
     "iopub.status.idle": "2023-05-26T06:01:44.786627Z",
     "shell.execute_reply": "2023-05-26T06:01:44.785660Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                      [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                      [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                      [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                      [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                      [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                      [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018],\n",
       "                      [-1.1254,  0.3551,  1.3531, -0.6645],\n",
       "                      [ 1.8228, -0.3782,  1.5026, -0.0754],\n",
       "                      [ 1.1061, -0.3053,  0.3426,  2.3018]]),\n",
       "       ),\n",
       "    a: tensor([[-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366],\n",
       "               [-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366],\n",
       "               [-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366],\n",
       "               [-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366],\n",
       "               [-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366],\n",
       "               [-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366],\n",
       "               [-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366],\n",
       "               [-0.6427, -2.0310,  0.5896],\n",
       "               [ 0.2927,  0.2713, -0.1366]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:44.789800Z",
     "iopub.status.busy": "2023-05-26T06:01:44.789350Z",
     "iopub.status.idle": "2023-05-26T06:01:56.611344Z",
     "shell.execute_reply": "2023-05-26T06:01:56.610607Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 276 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:01:56.615123Z",
     "iopub.status.busy": "2023-05-26T06:01:56.614599Z",
     "iopub.status.idle": "2023-05-26T06:01:59.374912Z",
     "shell.execute_reply": "2023-05-26T06:01:59.374225Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "338 µs ± 327 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
