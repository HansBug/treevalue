{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:29.828786Z",
     "iopub.status.busy": "2023-10-20T07:59:29.828395Z",
     "iopub.status.idle": "2023-10-20T07:59:31.285576Z",
     "shell.execute_reply": "2023-10-20T07:59:31.284888Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:31.290213Z",
     "iopub.status.busy": "2023-10-20T07:59:31.288788Z",
     "iopub.status.idle": "2023-10-20T07:59:31.594806Z",
     "shell.execute_reply": "2023-10-20T07:59:31.593346Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:31.598245Z",
     "iopub.status.busy": "2023-10-20T07:59:31.597630Z",
     "iopub.status.idle": "2023-10-20T07:59:31.608867Z",
     "shell.execute_reply": "2023-10-20T07:59:31.608214Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff04cc1c070>\n",
       "├── 'a' --> tensor([[ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff04cc5da00>\n",
       "    └── 'c' --> tensor([[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:31.611858Z",
     "iopub.status.busy": "2023-10-20T07:59:31.611316Z",
     "iopub.status.idle": "2023-10-20T07:59:31.615901Z",
     "shell.execute_reply": "2023-10-20T07:59:31.615265Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8201,  0.3666,  0.8445],\n",
       "        [-0.5510, -1.1752, -0.8170]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:31.618876Z",
     "iopub.status.busy": "2023-10-20T07:59:31.618348Z",
     "iopub.status.idle": "2023-10-20T07:59:36.853429Z",
     "shell.execute_reply": "2023-10-20T07:59:36.852278Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 ns ± 0.268 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:36.856697Z",
     "iopub.status.busy": "2023-10-20T07:59:36.856088Z",
     "iopub.status.idle": "2023-10-20T07:59:36.862620Z",
     "shell.execute_reply": "2023-10-20T07:59:36.861985Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff04cc1c070>\n",
       "├── 'a' --> tensor([[ 2.9355, -0.6397,  0.6268],\n",
       "│                   [-1.2321, -1.1942,  1.5732]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff04cc5da00>\n",
       "    └── 'c' --> tensor([[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:36.865583Z",
     "iopub.status.busy": "2023-10-20T07:59:36.865153Z",
     "iopub.status.idle": "2023-10-20T07:59:42.020855Z",
     "shell.execute_reply": "2023-10-20T07:59:42.020262Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.5 ns ± 0.0668 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:42.024045Z",
     "iopub.status.busy": "2023-10-20T07:59:42.023491Z",
     "iopub.status.idle": "2023-10-20T07:59:42.388875Z",
     "shell.execute_reply": "2023-10-20T07:59:42.388191Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:42.392549Z",
     "iopub.status.busy": "2023-10-20T07:59:42.391795Z",
     "iopub.status.idle": "2023-10-20T07:59:42.398516Z",
     "shell.execute_reply": "2023-10-20T07:59:42.397907Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:42.401296Z",
     "iopub.status.busy": "2023-10-20T07:59:42.400947Z",
     "iopub.status.idle": "2023-10-20T07:59:42.406074Z",
     "shell.execute_reply": "2023-10-20T07:59:42.405034Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8201,  0.3666,  0.8445],\n",
       "        [-0.5510, -1.1752, -0.8170]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:42.408843Z",
     "iopub.status.busy": "2023-10-20T07:59:42.408637Z",
     "iopub.status.idle": "2023-10-20T07:59:46.814632Z",
     "shell.execute_reply": "2023-10-20T07:59:46.813927Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54.2 ns ± 0.053 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:46.818184Z",
     "iopub.status.busy": "2023-10-20T07:59:46.817601Z",
     "iopub.status.idle": "2023-10-20T07:59:46.823467Z",
     "shell.execute_reply": "2023-10-20T07:59:46.822813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.1359,  0.8283, -0.5382],\n",
       "               [-0.9880, -0.7601,  1.8791]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:46.826377Z",
     "iopub.status.busy": "2023-10-20T07:59:46.825952Z",
     "iopub.status.idle": "2023-10-20T07:59:50.828753Z",
     "shell.execute_reply": "2023-10-20T07:59:50.828051Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "493 ns ± 0.123 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:50.833032Z",
     "iopub.status.busy": "2023-10-20T07:59:50.831734Z",
     "iopub.status.idle": "2023-10-20T07:59:57.646763Z",
     "shell.execute_reply": "2023-10-20T07:59:57.646107Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "838 ns ± 13.5 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T07:59:57.650247Z",
     "iopub.status.busy": "2023-10-20T07:59:57.649676Z",
     "iopub.status.idle": "2023-10-20T08:00:06.816022Z",
     "shell.execute_reply": "2023-10-20T08:00:06.815330Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 51.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:06.819359Z",
     "iopub.status.busy": "2023-10-20T08:00:06.818907Z",
     "iopub.status.idle": "2023-10-20T08:00:06.823131Z",
     "shell.execute_reply": "2023-10-20T08:00:06.822557Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:06.826302Z",
     "iopub.status.busy": "2023-10-20T08:00:06.825690Z",
     "iopub.status.idle": "2023-10-20T08:00:18.379681Z",
     "shell.execute_reply": "2023-10-20T08:00:18.379078Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 1.36 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:18.383311Z",
     "iopub.status.busy": "2023-10-20T08:00:18.382691Z",
     "iopub.status.idle": "2023-10-20T08:00:30.056952Z",
     "shell.execute_reply": "2023-10-20T08:00:30.056391Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 702 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:30.061855Z",
     "iopub.status.busy": "2023-10-20T08:00:30.060454Z",
     "iopub.status.idle": "2023-10-20T08:00:30.065459Z",
     "shell.execute_reply": "2023-10-20T08:00:30.064927Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:30.068451Z",
     "iopub.status.busy": "2023-10-20T08:00:30.068223Z",
     "iopub.status.idle": "2023-10-20T08:00:30.076547Z",
     "shell.execute_reply": "2023-10-20T08:00:30.075947Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fef6335ec10>\n",
       "├── 'a' --> tensor([[[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]],\n",
       "│           \n",
       "│                   [[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]],\n",
       "│           \n",
       "│                   [[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]],\n",
       "│           \n",
       "│                   [[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]],\n",
       "│           \n",
       "│                   [[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]],\n",
       "│           \n",
       "│                   [[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]],\n",
       "│           \n",
       "│                   [[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]],\n",
       "│           \n",
       "│                   [[ 0.8201,  0.3666,  0.8445],\n",
       "│                    [-0.5510, -1.1752, -0.8170]]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff04cc5d970>\n",
       "    └── 'c' --> tensor([[[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "                \n",
       "                        [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "                \n",
       "                        [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "                \n",
       "                        [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "                \n",
       "                        [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "                \n",
       "                        [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "                \n",
       "                        [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "                \n",
       "                        [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                         [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                         [-1.1393,  0.5521,  0.2966,  0.5511]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:30.079571Z",
     "iopub.status.busy": "2023-10-20T08:00:30.078986Z",
     "iopub.status.idle": "2023-10-20T08:00:32.778938Z",
     "shell.execute_reply": "2023-10-20T08:00:32.778284Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.2 µs ± 76.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:32.782067Z",
     "iopub.status.busy": "2023-10-20T08:00:32.781613Z",
     "iopub.status.idle": "2023-10-20T08:00:32.790067Z",
     "shell.execute_reply": "2023-10-20T08:00:32.789488Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fef6335ed30>\n",
       "├── 'a' --> tensor([[ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170],\n",
       "│                   [ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170],\n",
       "│                   [ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170],\n",
       "│                   [ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170],\n",
       "│                   [ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170],\n",
       "│                   [ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170],\n",
       "│                   [ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170],\n",
       "│                   [ 0.8201,  0.3666,  0.8445],\n",
       "│                   [-0.5510, -1.1752, -0.8170]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff04cc632e0>\n",
       "    └── 'c' --> tensor([[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                        [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                        [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                        [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                        [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                        [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                        [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                        [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                        [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                        [-1.1393,  0.5521,  0.2966,  0.5511]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:32.792965Z",
     "iopub.status.busy": "2023-10-20T08:00:32.792438Z",
     "iopub.status.idle": "2023-10-20T08:00:35.325558Z",
     "shell.execute_reply": "2023-10-20T08:00:35.324896Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.1 µs ± 27.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:35.328753Z",
     "iopub.status.busy": "2023-10-20T08:00:35.328295Z",
     "iopub.status.idle": "2023-10-20T08:00:40.888378Z",
     "shell.execute_reply": "2023-10-20T08:00:40.887730Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.4 µs ± 144 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:40.891666Z",
     "iopub.status.busy": "2023-10-20T08:00:40.891207Z",
     "iopub.status.idle": "2023-10-20T08:00:40.899744Z",
     "shell.execute_reply": "2023-10-20T08:00:40.898969Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]],\n",
       "       \n",
       "               [[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]],\n",
       "       \n",
       "               [[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]],\n",
       "       \n",
       "               [[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]],\n",
       "       \n",
       "               [[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]],\n",
       "       \n",
       "               [[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]],\n",
       "       \n",
       "               [[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]],\n",
       "       \n",
       "               [[ 0.8201,  0.3666,  0.8445],\n",
       "                [-0.5510, -1.1752, -0.8170]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "              \n",
       "                      [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "              \n",
       "                      [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "              \n",
       "                      [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "              \n",
       "                      [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "              \n",
       "                      [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "              \n",
       "                      [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]],\n",
       "              \n",
       "                      [[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                       [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                       [-1.1393,  0.5521,  0.2966,  0.5511]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:40.902518Z",
     "iopub.status.busy": "2023-10-20T08:00:40.902093Z",
     "iopub.status.idle": "2023-10-20T08:00:47.391792Z",
     "shell.execute_reply": "2023-10-20T08:00:47.391125Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.9 µs ± 185 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:47.395135Z",
     "iopub.status.busy": "2023-10-20T08:00:47.394687Z",
     "iopub.status.idle": "2023-10-20T08:00:47.402621Z",
     "shell.execute_reply": "2023-10-20T08:00:47.402027Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170],\n",
       "               [ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170],\n",
       "               [ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170],\n",
       "               [ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170],\n",
       "               [ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170],\n",
       "               [ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170],\n",
       "               [ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170],\n",
       "               [ 0.8201,  0.3666,  0.8445],\n",
       "               [-0.5510, -1.1752, -0.8170]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                      [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                      [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                      [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                      [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                      [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                      [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511],\n",
       "                      [-0.5979,  0.0751,  0.4851,  0.0678],\n",
       "                      [-1.0033, -1.4178, -0.3906, -0.9145],\n",
       "                      [-1.1393,  0.5521,  0.2966,  0.5511]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:47.405354Z",
     "iopub.status.busy": "2023-10-20T08:00:47.405134Z",
     "iopub.status.idle": "2023-10-20T08:00:59.613744Z",
     "shell.execute_reply": "2023-10-20T08:00:59.613092Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150 µs ± 1.44 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:00:59.617120Z",
     "iopub.status.busy": "2023-10-20T08:00:59.616670Z",
     "iopub.status.idle": "2023-10-20T08:01:02.526917Z",
     "shell.execute_reply": "2023-10-20T08:01:02.526344Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "358 µs ± 4.47 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
