{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:57:47.978122Z",
     "iopub.status.busy": "2023-10-20T05:57:47.977191Z",
     "iopub.status.idle": "2023-10-20T05:57:49.836167Z",
     "shell.execute_reply": "2023-10-20T05:57:49.834836Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:57:49.840749Z",
     "iopub.status.busy": "2023-10-20T05:57:49.840143Z",
     "iopub.status.idle": "2023-10-20T05:57:50.223878Z",
     "shell.execute_reply": "2023-10-20T05:57:50.222565Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:57:50.228397Z",
     "iopub.status.busy": "2023-10-20T05:57:50.227578Z",
     "iopub.status.idle": "2023-10-20T05:57:50.240502Z",
     "shell.execute_reply": "2023-10-20T05:57:50.239777Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f98645210d0>\n",
       "├── 'a' --> tensor([[-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9864521a30>\n",
       "    └── 'c' --> tensor([[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:57:50.244137Z",
     "iopub.status.busy": "2023-10-20T05:57:50.243863Z",
     "iopub.status.idle": "2023-10-20T05:57:50.252407Z",
     "shell.execute_reply": "2023-10-20T05:57:50.251688Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.6242, -0.1806, -0.5731],\n",
       "        [ 0.2112, -0.0425, -2.4086]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:57:50.255893Z",
     "iopub.status.busy": "2023-10-20T05:57:50.255368Z",
     "iopub.status.idle": "2023-10-20T05:57:58.265659Z",
     "shell.execute_reply": "2023-10-20T05:57:58.264326Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "98.7 ns ± 0.0809 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:57:58.270382Z",
     "iopub.status.busy": "2023-10-20T05:57:58.269584Z",
     "iopub.status.idle": "2023-10-20T05:57:58.281402Z",
     "shell.execute_reply": "2023-10-20T05:57:58.280508Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f98645210d0>\n",
       "├── 'a' --> tensor([[ 0.5328,  0.2767, -0.2272],\n",
       "│                   [ 0.7736, -0.6992, -2.0014]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9864521a30>\n",
       "    └── 'c' --> tensor([[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:57:58.285594Z",
     "iopub.status.busy": "2023-10-20T05:57:58.285047Z",
     "iopub.status.idle": "2023-10-20T05:58:06.670681Z",
     "shell.execute_reply": "2023-10-20T05:58:06.669433Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "103 ns ± 0.132 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:06.675550Z",
     "iopub.status.busy": "2023-10-20T05:58:06.675003Z",
     "iopub.status.idle": "2023-10-20T05:58:07.144534Z",
     "shell.execute_reply": "2023-10-20T05:58:07.143645Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:07.148930Z",
     "iopub.status.busy": "2023-10-20T05:58:07.148243Z",
     "iopub.status.idle": "2023-10-20T05:58:07.158266Z",
     "shell.execute_reply": "2023-10-20T05:58:07.157521Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:07.162147Z",
     "iopub.status.busy": "2023-10-20T05:58:07.161620Z",
     "iopub.status.idle": "2023-10-20T05:58:07.167593Z",
     "shell.execute_reply": "2023-10-20T05:58:07.166792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.6242, -0.1806, -0.5731],\n",
       "        [ 0.2112, -0.0425, -2.4086]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:07.171988Z",
     "iopub.status.busy": "2023-10-20T05:58:07.171457Z",
     "iopub.status.idle": "2023-10-20T05:58:13.638530Z",
     "shell.execute_reply": "2023-10-20T05:58:13.637575Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.6 ns ± 0.0716 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:13.642537Z",
     "iopub.status.busy": "2023-10-20T05:58:13.642062Z",
     "iopub.status.idle": "2023-10-20T05:58:13.652375Z",
     "shell.execute_reply": "2023-10-20T05:58:13.651609Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9105, -1.2043,  0.2100],\n",
       "               [ 0.5418,  0.3174,  0.1394]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:13.656010Z",
     "iopub.status.busy": "2023-10-20T05:58:13.655483Z",
     "iopub.status.idle": "2023-10-20T05:58:19.021121Z",
     "shell.execute_reply": "2023-10-20T05:58:19.019860Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "661 ns ± 0.977 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:19.026253Z",
     "iopub.status.busy": "2023-10-20T05:58:19.025484Z",
     "iopub.status.idle": "2023-10-20T05:58:27.676399Z",
     "shell.execute_reply": "2023-10-20T05:58:27.675293Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.06 µs ± 4.05 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:27.680917Z",
     "iopub.status.busy": "2023-10-20T05:58:27.680200Z",
     "iopub.status.idle": "2023-10-20T05:58:37.918493Z",
     "shell.execute_reply": "2023-10-20T05:58:37.917544Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.6 µs ± 25.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:37.923177Z",
     "iopub.status.busy": "2023-10-20T05:58:37.922412Z",
     "iopub.status.idle": "2023-10-20T05:58:37.927289Z",
     "shell.execute_reply": "2023-10-20T05:58:37.926430Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:37.931191Z",
     "iopub.status.busy": "2023-10-20T05:58:37.930517Z",
     "iopub.status.idle": "2023-10-20T05:58:52.106208Z",
     "shell.execute_reply": "2023-10-20T05:58:52.105449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "174 µs ± 571 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:58:52.110166Z",
     "iopub.status.busy": "2023-10-20T05:58:52.109641Z",
     "iopub.status.idle": "2023-10-20T05:59:06.308792Z",
     "shell.execute_reply": "2023-10-20T05:59:06.308038Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175 µs ± 994 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:06.312652Z",
     "iopub.status.busy": "2023-10-20T05:59:06.312348Z",
     "iopub.status.idle": "2023-10-20T05:59:06.317815Z",
     "shell.execute_reply": "2023-10-20T05:59:06.317066Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:06.321369Z",
     "iopub.status.busy": "2023-10-20T05:59:06.320812Z",
     "iopub.status.idle": "2023-10-20T05:59:06.329768Z",
     "shell.execute_reply": "2023-10-20T05:59:06.328972Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f977ac0ce50>\n",
       "├── 'a' --> tensor([[[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]],\n",
       "│           \n",
       "│                   [[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]],\n",
       "│           \n",
       "│                   [[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]],\n",
       "│           \n",
       "│                   [[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]],\n",
       "│           \n",
       "│                   [[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]],\n",
       "│           \n",
       "│                   [[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]],\n",
       "│           \n",
       "│                   [[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]],\n",
       "│           \n",
       "│                   [[-0.6242, -0.1806, -0.5731],\n",
       "│                    [ 0.2112, -0.0425, -2.4086]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f977ac0ce20>\n",
       "    └── 'c' --> tensor([[[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "                \n",
       "                        [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "                \n",
       "                        [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "                \n",
       "                        [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "                \n",
       "                        [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "                \n",
       "                        [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "                \n",
       "                        [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "                \n",
       "                        [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                         [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                         [-0.3501,  1.7121, -0.4480, -3.2059]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:06.333340Z",
     "iopub.status.busy": "2023-10-20T05:59:06.332803Z",
     "iopub.status.idle": "2023-10-20T05:59:09.541402Z",
     "shell.execute_reply": "2023-10-20T05:59:09.540634Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39.5 µs ± 148 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:09.545875Z",
     "iopub.status.busy": "2023-10-20T05:59:09.545182Z",
     "iopub.status.idle": "2023-10-20T05:59:09.555677Z",
     "shell.execute_reply": "2023-10-20T05:59:09.554943Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f977ac0cac0>\n",
       "├── 'a' --> tensor([[-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086],\n",
       "│                   [-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086],\n",
       "│                   [-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086],\n",
       "│                   [-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086],\n",
       "│                   [-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086],\n",
       "│                   [-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086],\n",
       "│                   [-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086],\n",
       "│                   [-0.6242, -0.1806, -0.5731],\n",
       "│                   [ 0.2112, -0.0425, -2.4086]])\n",
       "└── 'x' --> <FastTreeValue 0x7f977ac0c760>\n",
       "    └── 'c' --> tensor([[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                        [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                        [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                        [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                        [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                        [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                        [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                        [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                        [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                        [-0.3501,  1.7121, -0.4480, -3.2059]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:09.559252Z",
     "iopub.status.busy": "2023-10-20T05:59:09.558724Z",
     "iopub.status.idle": "2023-10-20T05:59:12.623750Z",
     "shell.execute_reply": "2023-10-20T05:59:12.623001Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37.6 µs ± 516 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:12.628472Z",
     "iopub.status.busy": "2023-10-20T05:59:12.627823Z",
     "iopub.status.idle": "2023-10-20T05:59:18.727613Z",
     "shell.execute_reply": "2023-10-20T05:59:18.726696Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.1 µs ± 39.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:18.731972Z",
     "iopub.status.busy": "2023-10-20T05:59:18.731415Z",
     "iopub.status.idle": "2023-10-20T05:59:18.742833Z",
     "shell.execute_reply": "2023-10-20T05:59:18.742029Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "              \n",
       "                      [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "              \n",
       "                      [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "              \n",
       "                      [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "              \n",
       "                      [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "              \n",
       "                      [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "              \n",
       "                      [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]],\n",
       "              \n",
       "                      [[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                       [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                       [-0.3501,  1.7121, -0.4480, -3.2059]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]],\n",
       "       \n",
       "               [[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]],\n",
       "       \n",
       "               [[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]],\n",
       "       \n",
       "               [[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]],\n",
       "       \n",
       "               [[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]],\n",
       "       \n",
       "               [[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]],\n",
       "       \n",
       "               [[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]],\n",
       "       \n",
       "               [[-0.6242, -0.1806, -0.5731],\n",
       "                [ 0.2112, -0.0425, -2.4086]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:18.746857Z",
     "iopub.status.busy": "2023-10-20T05:59:18.746178Z",
     "iopub.status.idle": "2023-10-20T05:59:26.769775Z",
     "shell.execute_reply": "2023-10-20T05:59:26.768738Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "98.8 µs ± 206 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:26.773778Z",
     "iopub.status.busy": "2023-10-20T05:59:26.773323Z",
     "iopub.status.idle": "2023-10-20T05:59:26.781965Z",
     "shell.execute_reply": "2023-10-20T05:59:26.781136Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                      [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                      [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                      [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                      [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                      [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                      [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059],\n",
       "                      [-0.0767,  0.6759,  2.2328, -0.8306],\n",
       "                      [ 0.3424, -2.7923, -0.1039,  2.1747],\n",
       "                      [-0.3501,  1.7121, -0.4480, -3.2059]]),\n",
       "       ),\n",
       "    a: tensor([[-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086],\n",
       "               [-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086],\n",
       "               [-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086],\n",
       "               [-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086],\n",
       "               [-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086],\n",
       "               [-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086],\n",
       "               [-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086],\n",
       "               [-0.6242, -0.1806, -0.5731],\n",
       "               [ 0.2112, -0.0425, -2.4086]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:26.786046Z",
     "iopub.status.busy": "2023-10-20T05:59:26.785342Z",
     "iopub.status.idle": "2023-10-20T05:59:41.717915Z",
     "shell.execute_reply": "2023-10-20T05:59:41.716912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "183 µs ± 416 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T05:59:41.721993Z",
     "iopub.status.busy": "2023-10-20T05:59:41.721686Z",
     "iopub.status.idle": "2023-10-20T05:59:45.517653Z",
     "shell.execute_reply": "2023-10-20T05:59:45.516720Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "467 µs ± 16.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
