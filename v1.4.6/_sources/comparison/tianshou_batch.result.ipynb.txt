{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:37.289716Z",
     "iopub.status.busy": "2023-08-14T05:43:37.289272Z",
     "iopub.status.idle": "2023-08-14T05:43:38.668607Z",
     "shell.execute_reply": "2023-08-14T05:43:38.667295Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:38.673716Z",
     "iopub.status.busy": "2023-08-14T05:43:38.673194Z",
     "iopub.status.idle": "2023-08-14T05:43:38.995192Z",
     "shell.execute_reply": "2023-08-14T05:43:38.993409Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:38.999322Z",
     "iopub.status.busy": "2023-08-14T05:43:38.998829Z",
     "iopub.status.idle": "2023-08-14T05:43:39.010321Z",
     "shell.execute_reply": "2023-08-14T05:43:39.009312Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd67a098310>\n",
       "├── 'a' --> tensor([[ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd67a0984f0>\n",
       "    └── 'c' --> tensor([[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:39.013531Z",
     "iopub.status.busy": "2023-08-14T05:43:39.013155Z",
     "iopub.status.idle": "2023-08-14T05:43:39.018499Z",
     "shell.execute_reply": "2023-08-14T05:43:39.017573Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5215, -0.6379, -0.8217],\n",
       "        [-0.8984, -1.5763,  0.2984]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:39.022257Z",
     "iopub.status.busy": "2023-08-14T05:43:39.021888Z",
     "iopub.status.idle": "2023-08-14T05:43:45.202672Z",
     "shell.execute_reply": "2023-08-14T05:43:45.200860Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.1 ns ± 0.101 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:45.206767Z",
     "iopub.status.busy": "2023-08-14T05:43:45.206100Z",
     "iopub.status.idle": "2023-08-14T05:43:45.214810Z",
     "shell.execute_reply": "2023-08-14T05:43:45.213563Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd67a098310>\n",
       "├── 'a' --> tensor([[ 0.9403,  1.5654,  0.6152],\n",
       "│                   [ 1.4549,  1.1133, -0.5273]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd67a0984f0>\n",
       "    └── 'c' --> tensor([[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:45.218101Z",
     "iopub.status.busy": "2023-08-14T05:43:45.217675Z",
     "iopub.status.idle": "2023-08-14T05:43:51.368855Z",
     "shell.execute_reply": "2023-08-14T05:43:51.368057Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.8 ns ± 0.145 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:51.372573Z",
     "iopub.status.busy": "2023-08-14T05:43:51.372051Z",
     "iopub.status.idle": "2023-08-14T05:43:51.757324Z",
     "shell.execute_reply": "2023-08-14T05:43:51.756231Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:51.761705Z",
     "iopub.status.busy": "2023-08-14T05:43:51.761169Z",
     "iopub.status.idle": "2023-08-14T05:43:51.767551Z",
     "shell.execute_reply": "2023-08-14T05:43:51.766814Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:51.770933Z",
     "iopub.status.busy": "2023-08-14T05:43:51.770485Z",
     "iopub.status.idle": "2023-08-14T05:43:51.775512Z",
     "shell.execute_reply": "2023-08-14T05:43:51.774813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5215, -0.6379, -0.8217],\n",
       "        [-0.8984, -1.5763,  0.2984]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:51.779073Z",
     "iopub.status.busy": "2023-08-14T05:43:51.778635Z",
     "iopub.status.idle": "2023-08-14T05:43:57.048659Z",
     "shell.execute_reply": "2023-08-14T05:43:57.047881Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.8 ns ± 0.113 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:57.052426Z",
     "iopub.status.busy": "2023-08-14T05:43:57.051900Z",
     "iopub.status.idle": "2023-08-14T05:43:57.058407Z",
     "shell.execute_reply": "2023-08-14T05:43:57.057682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7236, -0.8091, -0.2612],\n",
       "               [ 2.0061,  1.3694,  0.0269]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:43:57.061510Z",
     "iopub.status.busy": "2023-08-14T05:43:57.061135Z",
     "iopub.status.idle": "2023-08-14T05:44:01.448977Z",
     "shell.execute_reply": "2023-08-14T05:44:01.448184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "540 ns ± 0.0433 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:01.452753Z",
     "iopub.status.busy": "2023-08-14T05:44:01.452243Z",
     "iopub.status.idle": "2023-08-14T05:44:08.558517Z",
     "shell.execute_reply": "2023-08-14T05:44:08.557189Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "875 ns ± 0.629 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:08.561747Z",
     "iopub.status.busy": "2023-08-14T05:44:08.561481Z",
     "iopub.status.idle": "2023-08-14T05:44:17.786738Z",
     "shell.execute_reply": "2023-08-14T05:44:17.785186Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 18.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:17.790547Z",
     "iopub.status.busy": "2023-08-14T05:44:17.790025Z",
     "iopub.status.idle": "2023-08-14T05:44:17.793505Z",
     "shell.execute_reply": "2023-08-14T05:44:17.792782Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:17.796871Z",
     "iopub.status.busy": "2023-08-14T05:44:17.796495Z",
     "iopub.status.idle": "2023-08-14T05:44:29.269775Z",
     "shell.execute_reply": "2023-08-14T05:44:29.268962Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 699 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:29.273466Z",
     "iopub.status.busy": "2023-08-14T05:44:29.273215Z",
     "iopub.status.idle": "2023-08-14T05:44:40.980945Z",
     "shell.execute_reply": "2023-08-14T05:44:40.980249Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 1.79 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:40.984372Z",
     "iopub.status.busy": "2023-08-14T05:44:40.983849Z",
     "iopub.status.idle": "2023-08-14T05:44:40.987859Z",
     "shell.execute_reply": "2023-08-14T05:44:40.987012Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:40.990937Z",
     "iopub.status.busy": "2023-08-14T05:44:40.990276Z",
     "iopub.status.idle": "2023-08-14T05:44:40.997952Z",
     "shell.execute_reply": "2023-08-14T05:44:40.997392Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd59f93edf0>\n",
       "├── 'a' --> tensor([[[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]],\n",
       "│           \n",
       "│                   [[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]],\n",
       "│           \n",
       "│                   [[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]],\n",
       "│           \n",
       "│                   [[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]],\n",
       "│           \n",
       "│                   [[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]],\n",
       "│           \n",
       "│                   [[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]],\n",
       "│           \n",
       "│                   [[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]],\n",
       "│           \n",
       "│                   [[ 0.5215, -0.6379, -0.8217],\n",
       "│                    [-0.8984, -1.5763,  0.2984]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd59f93ed60>\n",
       "    └── 'c' --> tensor([[[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "                \n",
       "                        [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "                \n",
       "                        [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "                \n",
       "                        [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "                \n",
       "                        [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "                \n",
       "                        [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "                \n",
       "                        [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "                \n",
       "                        [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                         [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                         [-3.1092,  0.6917,  0.7271,  1.2998]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:41.000963Z",
     "iopub.status.busy": "2023-08-14T05:44:41.000289Z",
     "iopub.status.idle": "2023-08-14T05:44:43.647906Z",
     "shell.execute_reply": "2023-08-14T05:44:43.646405Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.5 µs ± 63.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:43.651457Z",
     "iopub.status.busy": "2023-08-14T05:44:43.650952Z",
     "iopub.status.idle": "2023-08-14T05:44:43.659726Z",
     "shell.execute_reply": "2023-08-14T05:44:43.659073Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd67801bb20>\n",
       "├── 'a' --> tensor([[ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984],\n",
       "│                   [ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984],\n",
       "│                   [ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984],\n",
       "│                   [ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984],\n",
       "│                   [ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984],\n",
       "│                   [ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984],\n",
       "│                   [ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984],\n",
       "│                   [ 0.5215, -0.6379, -0.8217],\n",
       "│                   [-0.8984, -1.5763,  0.2984]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd67801b640>\n",
       "    └── 'c' --> tensor([[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                        [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                        [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                        [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                        [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                        [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                        [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                        [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                        [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                        [-3.1092,  0.6917,  0.7271,  1.2998]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:43.662736Z",
     "iopub.status.busy": "2023-08-14T05:44:43.662365Z",
     "iopub.status.idle": "2023-08-14T05:44:46.196242Z",
     "shell.execute_reply": "2023-08-14T05:44:46.195532Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.2 µs ± 74.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:46.199741Z",
     "iopub.status.busy": "2023-08-14T05:44:46.199241Z",
     "iopub.status.idle": "2023-08-14T05:44:51.728000Z",
     "shell.execute_reply": "2023-08-14T05:44:51.727246Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68 µs ± 49.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:51.731646Z",
     "iopub.status.busy": "2023-08-14T05:44:51.731141Z",
     "iopub.status.idle": "2023-08-14T05:44:51.739122Z",
     "shell.execute_reply": "2023-08-14T05:44:51.738391Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]],\n",
       "       \n",
       "               [[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]],\n",
       "       \n",
       "               [[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]],\n",
       "       \n",
       "               [[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]],\n",
       "       \n",
       "               [[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]],\n",
       "       \n",
       "               [[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]],\n",
       "       \n",
       "               [[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]],\n",
       "       \n",
       "               [[ 0.5215, -0.6379, -0.8217],\n",
       "                [-0.8984, -1.5763,  0.2984]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "              \n",
       "                      [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "              \n",
       "                      [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "              \n",
       "                      [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "              \n",
       "                      [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "              \n",
       "                      [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "              \n",
       "                      [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]],\n",
       "              \n",
       "                      [[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                       [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                       [-3.1092,  0.6917,  0.7271,  1.2998]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:51.742240Z",
     "iopub.status.busy": "2023-08-14T05:44:51.741860Z",
     "iopub.status.idle": "2023-08-14T05:44:58.522949Z",
     "shell.execute_reply": "2023-08-14T05:44:58.522188Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.6 µs ± 231 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:58.526549Z",
     "iopub.status.busy": "2023-08-14T05:44:58.526038Z",
     "iopub.status.idle": "2023-08-14T05:44:58.533572Z",
     "shell.execute_reply": "2023-08-14T05:44:58.532847Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984],\n",
       "               [ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984],\n",
       "               [ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984],\n",
       "               [ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984],\n",
       "               [ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984],\n",
       "               [ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984],\n",
       "               [ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984],\n",
       "               [ 0.5215, -0.6379, -0.8217],\n",
       "               [-0.8984, -1.5763,  0.2984]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                      [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                      [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                      [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                      [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                      [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                      [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998],\n",
       "                      [ 1.3138,  0.5870, -0.9488, -0.8583],\n",
       "                      [-0.2697,  0.5055,  0.9971, -1.7500],\n",
       "                      [-3.1092,  0.6917,  0.7271,  1.2998]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:58.536864Z",
     "iopub.status.busy": "2023-08-14T05:44:58.536389Z",
     "iopub.status.idle": "2023-08-14T05:44:59.932848Z",
     "shell.execute_reply": "2023-08-14T05:44:59.932070Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "166 µs ± 1.98 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-14T05:44:59.936454Z",
     "iopub.status.busy": "2023-08-14T05:44:59.935905Z",
     "iopub.status.idle": "2023-08-14T05:45:02.782722Z",
     "shell.execute_reply": "2023-08-14T05:45:02.781879Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "351 µs ± 6.88 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
