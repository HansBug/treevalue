{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:10.803090Z",
     "iopub.status.busy": "2023-02-27T11:03:10.802868Z",
     "iopub.status.idle": "2023-02-27T11:03:11.703287Z",
     "shell.execute_reply": "2023-02-27T11:03:11.702656Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:11.706620Z",
     "iopub.status.busy": "2023-02-27T11:03:11.706015Z",
     "iopub.status.idle": "2023-02-27T11:03:11.981083Z",
     "shell.execute_reply": "2023-02-27T11:03:11.980393Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:11.984634Z",
     "iopub.status.busy": "2023-02-27T11:03:11.984044Z",
     "iopub.status.idle": "2023-02-27T11:03:11.993537Z",
     "shell.execute_reply": "2023-02-27T11:03:11.992934Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff1d41a1df0>\n",
       "├── 'a' --> tensor([[ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff1d41a1f10>\n",
       "    └── 'c' --> tensor([[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:11.996441Z",
     "iopub.status.busy": "2023-02-27T11:03:11.995946Z",
     "iopub.status.idle": "2023-02-27T11:03:12.001784Z",
     "shell.execute_reply": "2023-02-27T11:03:12.001228Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.5005, -0.0279,  1.2275],\n",
       "        [ 0.1263, -0.7852, -0.7400]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:12.004523Z",
     "iopub.status.busy": "2023-02-27T11:03:12.004047Z",
     "iopub.status.idle": "2023-02-27T11:03:16.768325Z",
     "shell.execute_reply": "2023-02-27T11:03:16.767358Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.7 ns ± 0.0611 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:16.771273Z",
     "iopub.status.busy": "2023-02-27T11:03:16.770919Z",
     "iopub.status.idle": "2023-02-27T11:03:16.777558Z",
     "shell.execute_reply": "2023-02-27T11:03:16.776991Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff1d41a1df0>\n",
       "├── 'a' --> tensor([[-0.4757,  0.0644, -1.1868],\n",
       "│                   [ 0.0038, -0.2724, -1.3462]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff1d41a1f10>\n",
       "    └── 'c' --> tensor([[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:16.780395Z",
     "iopub.status.busy": "2023-02-27T11:03:16.779806Z",
     "iopub.status.idle": "2023-02-27T11:03:21.746803Z",
     "shell.execute_reply": "2023-02-27T11:03:21.746053Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.3 ns ± 0.0222 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:21.749943Z",
     "iopub.status.busy": "2023-02-27T11:03:21.749349Z",
     "iopub.status.idle": "2023-02-27T11:03:22.073933Z",
     "shell.execute_reply": "2023-02-27T11:03:22.072875Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:22.077574Z",
     "iopub.status.busy": "2023-02-27T11:03:22.076910Z",
     "iopub.status.idle": "2023-02-27T11:03:22.083779Z",
     "shell.execute_reply": "2023-02-27T11:03:22.083217Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:22.086688Z",
     "iopub.status.busy": "2023-02-27T11:03:22.086135Z",
     "iopub.status.idle": "2023-02-27T11:03:22.092679Z",
     "shell.execute_reply": "2023-02-27T11:03:22.091698Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.5005, -0.0279,  1.2275],\n",
       "        [ 0.1263, -0.7852, -0.7400]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:22.095428Z",
     "iopub.status.busy": "2023-02-27T11:03:22.095093Z",
     "iopub.status.idle": "2023-02-27T11:03:26.638812Z",
     "shell.execute_reply": "2023-02-27T11:03:26.637845Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.7 ns ± 0.0956 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:26.641951Z",
     "iopub.status.busy": "2023-02-27T11:03:26.641428Z",
     "iopub.status.idle": "2023-02-27T11:03:26.648326Z",
     "shell.execute_reply": "2023-02-27T11:03:26.647273Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2656,  1.5160,  1.1012],\n",
       "               [-2.3341, -2.5560, -0.7017]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:26.650628Z",
     "iopub.status.busy": "2023-02-27T11:03:26.650411Z",
     "iopub.status.idle": "2023-02-27T11:03:30.554899Z",
     "shell.execute_reply": "2023-02-27T11:03:30.554191Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "480 ns ± 0.0953 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:30.557813Z",
     "iopub.status.busy": "2023-02-27T11:03:30.557454Z",
     "iopub.status.idle": "2023-02-27T11:03:38.378039Z",
     "shell.execute_reply": "2023-02-27T11:03:38.377306Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "962 ns ± 8.43 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:38.381306Z",
     "iopub.status.busy": "2023-02-27T11:03:38.380900Z",
     "iopub.status.idle": "2023-02-27T11:03:47.587648Z",
     "shell.execute_reply": "2023-02-27T11:03:47.586633Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 18 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:47.590704Z",
     "iopub.status.busy": "2023-02-27T11:03:47.590349Z",
     "iopub.status.idle": "2023-02-27T11:03:47.594343Z",
     "shell.execute_reply": "2023-02-27T11:03:47.593759Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:47.596824Z",
     "iopub.status.busy": "2023-02-27T11:03:47.596479Z",
     "iopub.status.idle": "2023-02-27T11:03:58.896361Z",
     "shell.execute_reply": "2023-02-27T11:03:58.895791Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 652 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:03:58.899273Z",
     "iopub.status.busy": "2023-02-27T11:03:58.899021Z",
     "iopub.status.idle": "2023-02-27T11:04:10.407300Z",
     "shell.execute_reply": "2023-02-27T11:04:10.406735Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 1.25 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:10.410704Z",
     "iopub.status.busy": "2023-02-27T11:04:10.409688Z",
     "iopub.status.idle": "2023-02-27T11:04:10.414017Z",
     "shell.execute_reply": "2023-02-27T11:04:10.413496Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:10.417624Z",
     "iopub.status.busy": "2023-02-27T11:04:10.416673Z",
     "iopub.status.idle": "2023-02-27T11:04:10.425408Z",
     "shell.execute_reply": "2023-02-27T11:04:10.424875Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff11d4ac820>\n",
       "├── 'a' --> tensor([[[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]],\n",
       "│           \n",
       "│                   [[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]],\n",
       "│           \n",
       "│                   [[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]],\n",
       "│           \n",
       "│                   [[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]],\n",
       "│           \n",
       "│                   [[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]],\n",
       "│           \n",
       "│                   [[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]],\n",
       "│           \n",
       "│                   [[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]],\n",
       "│           \n",
       "│                   [[ 1.5005, -0.0279,  1.2275],\n",
       "│                    [ 0.1263, -0.7852, -0.7400]]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff11d4acc10>\n",
       "    └── 'c' --> tensor([[[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "                \n",
       "                        [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "                \n",
       "                        [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "                \n",
       "                        [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "                \n",
       "                        [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "                \n",
       "                        [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "                \n",
       "                        [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "                \n",
       "                        [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                         [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                         [-0.2434, -0.7556,  1.7643, -2.6533]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:10.428874Z",
     "iopub.status.busy": "2023-02-27T11:04:10.427939Z",
     "iopub.status.idle": "2023-02-27T11:04:12.999848Z",
     "shell.execute_reply": "2023-02-27T11:04:12.999189Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.6 µs ± 49.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:13.003144Z",
     "iopub.status.busy": "2023-02-27T11:04:13.002488Z",
     "iopub.status.idle": "2023-02-27T11:04:13.010969Z",
     "shell.execute_reply": "2023-02-27T11:04:13.009843Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff11d4ac8b0>\n",
       "├── 'a' --> tensor([[ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400],\n",
       "│                   [ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400],\n",
       "│                   [ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400],\n",
       "│                   [ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400],\n",
       "│                   [ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400],\n",
       "│                   [ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400],\n",
       "│                   [ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400],\n",
       "│                   [ 1.5005, -0.0279,  1.2275],\n",
       "│                   [ 0.1263, -0.7852, -0.7400]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff11d4ac730>\n",
       "    └── 'c' --> tensor([[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                        [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                        [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                        [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                        [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                        [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                        [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                        [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                        [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                        [-0.2434, -0.7556,  1.7643, -2.6533]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:13.013447Z",
     "iopub.status.busy": "2023-02-27T11:04:13.013126Z",
     "iopub.status.idle": "2023-02-27T11:04:15.425579Z",
     "shell.execute_reply": "2023-02-27T11:04:15.424822Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.7 µs ± 84 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:15.428335Z",
     "iopub.status.busy": "2023-02-27T11:04:15.427970Z",
     "iopub.status.idle": "2023-02-27T11:04:20.349989Z",
     "shell.execute_reply": "2023-02-27T11:04:20.349266Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.6 µs ± 164 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:20.352726Z",
     "iopub.status.busy": "2023-02-27T11:04:20.352336Z",
     "iopub.status.idle": "2023-02-27T11:04:20.360345Z",
     "shell.execute_reply": "2023-02-27T11:04:20.359758Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "              \n",
       "                      [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "              \n",
       "                      [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "              \n",
       "                      [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "              \n",
       "                      [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "              \n",
       "                      [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "              \n",
       "                      [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]],\n",
       "              \n",
       "                      [[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                       [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                       [-0.2434, -0.7556,  1.7643, -2.6533]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]],\n",
       "       \n",
       "               [[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]],\n",
       "       \n",
       "               [[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]],\n",
       "       \n",
       "               [[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]],\n",
       "       \n",
       "               [[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]],\n",
       "       \n",
       "               [[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]],\n",
       "       \n",
       "               [[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]],\n",
       "       \n",
       "               [[ 1.5005, -0.0279,  1.2275],\n",
       "                [ 0.1263, -0.7852, -0.7400]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:20.362865Z",
     "iopub.status.busy": "2023-02-27T11:04:20.362510Z",
     "iopub.status.idle": "2023-02-27T11:04:26.683177Z",
     "shell.execute_reply": "2023-02-27T11:04:26.681573Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 µs ± 141 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:26.686210Z",
     "iopub.status.busy": "2023-02-27T11:04:26.685716Z",
     "iopub.status.idle": "2023-02-27T11:04:26.693171Z",
     "shell.execute_reply": "2023-02-27T11:04:26.692584Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                      [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                      [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                      [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                      [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                      [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                      [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533],\n",
       "                      [-0.3935,  0.1973, -1.9234,  0.9019],\n",
       "                      [-0.1539,  0.1133,  2.0211, -1.1916],\n",
       "                      [-0.2434, -0.7556,  1.7643, -2.6533]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400],\n",
       "               [ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400],\n",
       "               [ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400],\n",
       "               [ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400],\n",
       "               [ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400],\n",
       "               [ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400],\n",
       "               [ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400],\n",
       "               [ 1.5005, -0.0279,  1.2275],\n",
       "               [ 0.1263, -0.7852, -0.7400]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:26.695889Z",
     "iopub.status.busy": "2023-02-27T11:04:26.695563Z",
     "iopub.status.idle": "2023-02-27T11:04:38.418308Z",
     "shell.execute_reply": "2023-02-27T11:04:38.417614Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 207 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:38.421512Z",
     "iopub.status.busy": "2023-02-27T11:04:38.421134Z",
     "iopub.status.idle": "2023-02-27T11:04:40.957192Z",
     "shell.execute_reply": "2023-02-27T11:04:40.956462Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 1.89 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
