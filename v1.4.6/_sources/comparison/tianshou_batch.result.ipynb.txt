{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:32.532049Z",
     "iopub.status.busy": "2023-05-26T07:15:32.531636Z",
     "iopub.status.idle": "2023-05-26T07:15:33.826679Z",
     "shell.execute_reply": "2023-05-26T07:15:33.825984Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:33.830540Z",
     "iopub.status.busy": "2023-05-26T07:15:33.830014Z",
     "iopub.status.idle": "2023-05-26T07:15:34.110070Z",
     "shell.execute_reply": "2023-05-26T07:15:34.109384Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:34.113993Z",
     "iopub.status.busy": "2023-05-26T07:15:34.113252Z",
     "iopub.status.idle": "2023-05-26T07:15:34.122529Z",
     "shell.execute_reply": "2023-05-26T07:15:34.121864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa7e66c1ca0>\n",
       "├── 'a' --> tensor([[-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa7e462a2b0>\n",
       "    └── 'c' --> tensor([[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:34.126614Z",
     "iopub.status.busy": "2023-05-26T07:15:34.126068Z",
     "iopub.status.idle": "2023-05-26T07:15:34.130863Z",
     "shell.execute_reply": "2023-05-26T07:15:34.130202Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0730, -1.0968,  1.9922],\n",
       "        [-0.6148, -1.3081, -1.6231]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:34.133566Z",
     "iopub.status.busy": "2023-05-26T07:15:34.133228Z",
     "iopub.status.idle": "2023-05-26T07:15:39.498523Z",
     "shell.execute_reply": "2023-05-26T07:15:39.497776Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66 ns ± 0.041 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:39.501876Z",
     "iopub.status.busy": "2023-05-26T07:15:39.501506Z",
     "iopub.status.idle": "2023-05-26T07:15:39.507662Z",
     "shell.execute_reply": "2023-05-26T07:15:39.507009Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa7e66c1ca0>\n",
       "├── 'a' --> tensor([[-1.5753,  0.3139, -0.5082],\n",
       "│                   [-0.8841,  1.7201,  0.2743]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa7e462a2b0>\n",
       "    └── 'c' --> tensor([[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:39.510365Z",
     "iopub.status.busy": "2023-05-26T07:15:39.510023Z",
     "iopub.status.idle": "2023-05-26T07:15:45.048112Z",
     "shell.execute_reply": "2023-05-26T07:15:45.047045Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.1 ns ± 0.029 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:45.051452Z",
     "iopub.status.busy": "2023-05-26T07:15:45.050915Z",
     "iopub.status.idle": "2023-05-26T07:15:45.396011Z",
     "shell.execute_reply": "2023-05-26T07:15:45.395289Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:45.400025Z",
     "iopub.status.busy": "2023-05-26T07:15:45.399352Z",
     "iopub.status.idle": "2023-05-26T07:15:45.406720Z",
     "shell.execute_reply": "2023-05-26T07:15:45.406114Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:45.409983Z",
     "iopub.status.busy": "2023-05-26T07:15:45.409621Z",
     "iopub.status.idle": "2023-05-26T07:15:45.416134Z",
     "shell.execute_reply": "2023-05-26T07:15:45.415539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0730, -1.0968,  1.9922],\n",
       "        [-0.6148, -1.3081, -1.6231]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:45.419466Z",
     "iopub.status.busy": "2023-05-26T07:15:45.418965Z",
     "iopub.status.idle": "2023-05-26T07:15:50.305582Z",
     "shell.execute_reply": "2023-05-26T07:15:50.304893Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.6 ns ± 0.0349 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:50.308878Z",
     "iopub.status.busy": "2023-05-26T07:15:50.308309Z",
     "iopub.status.idle": "2023-05-26T07:15:50.316271Z",
     "shell.execute_reply": "2023-05-26T07:15:50.315602Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5066,  0.2011,  0.0824],\n",
       "               [-1.3101,  0.3871, -0.2955]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:50.319205Z",
     "iopub.status.busy": "2023-05-26T07:15:50.318988Z",
     "iopub.status.idle": "2023-05-26T07:15:54.238336Z",
     "shell.execute_reply": "2023-05-26T07:15:54.237649Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "482 ns ± 0.256 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:15:54.242020Z",
     "iopub.status.busy": "2023-05-26T07:15:54.241474Z",
     "iopub.status.idle": "2023-05-26T07:16:01.081404Z",
     "shell.execute_reply": "2023-05-26T07:16:01.080649Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "843 ns ± 0.135 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:01.084821Z",
     "iopub.status.busy": "2023-05-26T07:16:01.084429Z",
     "iopub.status.idle": "2023-05-26T07:16:10.218785Z",
     "shell.execute_reply": "2023-05-26T07:16:10.218196Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 7.79 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:10.222099Z",
     "iopub.status.busy": "2023-05-26T07:16:10.221441Z",
     "iopub.status.idle": "2023-05-26T07:16:10.224815Z",
     "shell.execute_reply": "2023-05-26T07:16:10.224171Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:10.227580Z",
     "iopub.status.busy": "2023-05-26T07:16:10.227232Z",
     "iopub.status.idle": "2023-05-26T07:16:21.435913Z",
     "shell.execute_reply": "2023-05-26T07:16:21.435318Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 605 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:21.439058Z",
     "iopub.status.busy": "2023-05-26T07:16:21.438787Z",
     "iopub.status.idle": "2023-05-26T07:16:32.817893Z",
     "shell.execute_reply": "2023-05-26T07:16:32.817324Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 370 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:32.821282Z",
     "iopub.status.busy": "2023-05-26T07:16:32.821019Z",
     "iopub.status.idle": "2023-05-26T07:16:32.824947Z",
     "shell.execute_reply": "2023-05-26T07:16:32.824430Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:32.827772Z",
     "iopub.status.busy": "2023-05-26T07:16:32.827206Z",
     "iopub.status.idle": "2023-05-26T07:16:32.834790Z",
     "shell.execute_reply": "2023-05-26T07:16:32.834131Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa70c3fa8b0>\n",
       "├── 'a' --> tensor([[[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]],\n",
       "│           \n",
       "│                   [[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]],\n",
       "│           \n",
       "│                   [[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]],\n",
       "│           \n",
       "│                   [[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]],\n",
       "│           \n",
       "│                   [[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]],\n",
       "│           \n",
       "│                   [[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]],\n",
       "│           \n",
       "│                   [[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]],\n",
       "│           \n",
       "│                   [[-2.0730, -1.0968,  1.9922],\n",
       "│                    [-0.6148, -1.3081, -1.6231]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa70c3fa7c0>\n",
       "    └── 'c' --> tensor([[[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "                \n",
       "                        [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "                \n",
       "                        [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "                \n",
       "                        [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "                \n",
       "                        [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "                \n",
       "                        [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "                \n",
       "                        [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "                \n",
       "                        [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                         [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                         [-1.0667,  0.2462,  0.4483,  0.3852]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:32.837531Z",
     "iopub.status.busy": "2023-05-26T07:16:32.837310Z",
     "iopub.status.idle": "2023-05-26T07:16:35.474981Z",
     "shell.execute_reply": "2023-05-26T07:16:35.474373Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 45.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:35.478273Z",
     "iopub.status.busy": "2023-05-26T07:16:35.477726Z",
     "iopub.status.idle": "2023-05-26T07:16:35.485328Z",
     "shell.execute_reply": "2023-05-26T07:16:35.484666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa714274c70>\n",
       "├── 'a' --> tensor([[-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231],\n",
       "│                   [-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231],\n",
       "│                   [-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231],\n",
       "│                   [-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231],\n",
       "│                   [-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231],\n",
       "│                   [-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231],\n",
       "│                   [-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231],\n",
       "│                   [-2.0730, -1.0968,  1.9922],\n",
       "│                   [-0.6148, -1.3081, -1.6231]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa7142dcfa0>\n",
       "    └── 'c' --> tensor([[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                        [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                        [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                        [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                        [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                        [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                        [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                        [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                        [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                        [-1.0667,  0.2462,  0.4483,  0.3852]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:35.488251Z",
     "iopub.status.busy": "2023-05-26T07:16:35.487906Z",
     "iopub.status.idle": "2023-05-26T07:16:37.970018Z",
     "shell.execute_reply": "2023-05-26T07:16:37.969280Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.5 µs ± 38.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:37.973066Z",
     "iopub.status.busy": "2023-05-26T07:16:37.972700Z",
     "iopub.status.idle": "2023-05-26T07:16:43.635220Z",
     "shell.execute_reply": "2023-05-26T07:16:43.634527Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.6 µs ± 49.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:43.638635Z",
     "iopub.status.busy": "2023-05-26T07:16:43.638087Z",
     "iopub.status.idle": "2023-05-26T07:16:43.645617Z",
     "shell.execute_reply": "2023-05-26T07:16:43.644962Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "              \n",
       "                      [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "              \n",
       "                      [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "              \n",
       "                      [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "              \n",
       "                      [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "              \n",
       "                      [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "              \n",
       "                      [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]],\n",
       "              \n",
       "                      [[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                       [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                       [-1.0667,  0.2462,  0.4483,  0.3852]]]),\n",
       "       ),\n",
       "    a: tensor([[[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]],\n",
       "       \n",
       "               [[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]],\n",
       "       \n",
       "               [[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]],\n",
       "       \n",
       "               [[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]],\n",
       "       \n",
       "               [[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]],\n",
       "       \n",
       "               [[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]],\n",
       "       \n",
       "               [[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]],\n",
       "       \n",
       "               [[-2.0730, -1.0968,  1.9922],\n",
       "                [-0.6148, -1.3081, -1.6231]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:43.648536Z",
     "iopub.status.busy": "2023-05-26T07:16:43.648022Z",
     "iopub.status.idle": "2023-05-26T07:16:50.101168Z",
     "shell.execute_reply": "2023-05-26T07:16:50.100586Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.5 µs ± 169 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:50.104149Z",
     "iopub.status.busy": "2023-05-26T07:16:50.103701Z",
     "iopub.status.idle": "2023-05-26T07:16:50.110754Z",
     "shell.execute_reply": "2023-05-26T07:16:50.110108Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                      [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                      [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                      [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                      [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                      [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                      [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852],\n",
       "                      [-0.2482,  0.6803, -1.2051,  0.6468],\n",
       "                      [ 0.3537,  0.5891, -0.3867, -0.4435],\n",
       "                      [-1.0667,  0.2462,  0.4483,  0.3852]]),\n",
       "       ),\n",
       "    a: tensor([[-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231],\n",
       "               [-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231],\n",
       "               [-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231],\n",
       "               [-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231],\n",
       "               [-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231],\n",
       "               [-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231],\n",
       "               [-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231],\n",
       "               [-2.0730, -1.0968,  1.9922],\n",
       "               [-0.6148, -1.3081, -1.6231]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:16:50.113466Z",
     "iopub.status.busy": "2023-05-26T07:16:50.113115Z",
     "iopub.status.idle": "2023-05-26T07:17:02.140502Z",
     "shell.execute_reply": "2023-05-26T07:17:02.139769Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148 µs ± 513 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:17:02.144129Z",
     "iopub.status.busy": "2023-05-26T07:17:02.143754Z",
     "iopub.status.idle": "2023-05-26T07:17:04.740178Z",
     "shell.execute_reply": "2023-05-26T07:17:04.739580Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "320 µs ± 4.04 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
