{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:35.107572Z",
     "iopub.status.busy": "2023-02-27T11:33:35.107018Z",
     "iopub.status.idle": "2023-02-27T11:33:36.270650Z",
     "shell.execute_reply": "2023-02-27T11:33:36.269634Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:36.275124Z",
     "iopub.status.busy": "2023-02-27T11:33:36.274490Z",
     "iopub.status.idle": "2023-02-27T11:33:36.615263Z",
     "shell.execute_reply": "2023-02-27T11:33:36.614246Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:36.619740Z",
     "iopub.status.busy": "2023-02-27T11:33:36.619152Z",
     "iopub.status.idle": "2023-02-27T11:33:36.632761Z",
     "shell.execute_reply": "2023-02-27T11:33:36.631991Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f731404c580>\n",
       "├── 'a' --> tensor([[ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861]])\n",
       "└── 'x' --> <FastTreeValue 0x7f731404cfd0>\n",
       "    └── 'c' --> tensor([[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:36.636546Z",
     "iopub.status.busy": "2023-02-27T11:33:36.635815Z",
     "iopub.status.idle": "2023-02-27T11:33:36.642388Z",
     "shell.execute_reply": "2023-02-27T11:33:36.641627Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3128, -0.3445,  1.7751],\n",
       "        [ 0.4075,  0.0337, -0.0861]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:36.645529Z",
     "iopub.status.busy": "2023-02-27T11:33:36.645257Z",
     "iopub.status.idle": "2023-02-27T11:33:43.384803Z",
     "shell.execute_reply": "2023-02-27T11:33:43.383926Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.7 ns ± 0.452 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:43.388629Z",
     "iopub.status.busy": "2023-02-27T11:33:43.388178Z",
     "iopub.status.idle": "2023-02-27T11:33:43.396697Z",
     "shell.execute_reply": "2023-02-27T11:33:43.395692Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f731404c580>\n",
       "├── 'a' --> tensor([[ 0.6241, -0.6538, -0.3401],\n",
       "│                   [-0.4012, -0.5596, -1.6271]])\n",
       "└── 'x' --> <FastTreeValue 0x7f731404cfd0>\n",
       "    └── 'c' --> tensor([[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:43.399903Z",
     "iopub.status.busy": "2023-02-27T11:33:43.399474Z",
     "iopub.status.idle": "2023-02-27T11:33:50.737657Z",
     "shell.execute_reply": "2023-02-27T11:33:50.736919Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.3 ns ± 0.437 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:50.741394Z",
     "iopub.status.busy": "2023-02-27T11:33:50.740962Z",
     "iopub.status.idle": "2023-02-27T11:33:51.186474Z",
     "shell.execute_reply": "2023-02-27T11:33:51.185344Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:51.190658Z",
     "iopub.status.busy": "2023-02-27T11:33:51.190038Z",
     "iopub.status.idle": "2023-02-27T11:33:51.197746Z",
     "shell.execute_reply": "2023-02-27T11:33:51.197090Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:51.201203Z",
     "iopub.status.busy": "2023-02-27T11:33:51.200793Z",
     "iopub.status.idle": "2023-02-27T11:33:51.207673Z",
     "shell.execute_reply": "2023-02-27T11:33:51.206870Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3128, -0.3445,  1.7751],\n",
       "        [ 0.4075,  0.0337, -0.0861]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:51.210971Z",
     "iopub.status.busy": "2023-02-27T11:33:51.210541Z",
     "iopub.status.idle": "2023-02-27T11:33:56.813019Z",
     "shell.execute_reply": "2023-02-27T11:33:56.811766Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69 ns ± 0.318 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:56.817193Z",
     "iopub.status.busy": "2023-02-27T11:33:56.816608Z",
     "iopub.status.idle": "2023-02-27T11:33:56.824383Z",
     "shell.execute_reply": "2023-02-27T11:33:56.823672Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0514, -0.3476,  0.1002],\n",
       "               [-0.4914, -1.3233,  0.0986]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:33:56.827689Z",
     "iopub.status.busy": "2023-02-27T11:33:56.827014Z",
     "iopub.status.idle": "2023-02-27T11:34:01.592283Z",
     "shell.execute_reply": "2023-02-27T11:34:01.591250Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "582 ns ± 3.27 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:01.596545Z",
     "iopub.status.busy": "2023-02-27T11:34:01.595706Z",
     "iopub.status.idle": "2023-02-27T11:34:09.369077Z",
     "shell.execute_reply": "2023-02-27T11:34:09.367787Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "957 ns ± 3.02 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:09.373608Z",
     "iopub.status.busy": "2023-02-27T11:34:09.372904Z",
     "iopub.status.idle": "2023-02-27T11:34:18.956482Z",
     "shell.execute_reply": "2023-02-27T11:34:18.955401Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.8 µs ± 66.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:18.960822Z",
     "iopub.status.busy": "2023-02-27T11:34:18.960190Z",
     "iopub.status.idle": "2023-02-27T11:34:18.964857Z",
     "shell.execute_reply": "2023-02-27T11:34:18.964149Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:18.968173Z",
     "iopub.status.busy": "2023-02-27T11:34:18.967728Z",
     "iopub.status.idle": "2023-02-27T11:34:32.510481Z",
     "shell.execute_reply": "2023-02-27T11:34:32.509729Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 1.05 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:32.514175Z",
     "iopub.status.busy": "2023-02-27T11:34:32.513424Z",
     "iopub.status.idle": "2023-02-27T11:34:46.115511Z",
     "shell.execute_reply": "2023-02-27T11:34:46.114804Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 391 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:46.119180Z",
     "iopub.status.busy": "2023-02-27T11:34:46.118587Z",
     "iopub.status.idle": "2023-02-27T11:34:46.122543Z",
     "shell.execute_reply": "2023-02-27T11:34:46.121863Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:46.125556Z",
     "iopub.status.busy": "2023-02-27T11:34:46.125036Z",
     "iopub.status.idle": "2023-02-27T11:34:46.133310Z",
     "shell.execute_reply": "2023-02-27T11:34:46.132646Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f725f31bfa0>\n",
       "├── 'a' --> tensor([[[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]],\n",
       "│           \n",
       "│                   [[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]],\n",
       "│           \n",
       "│                   [[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]],\n",
       "│           \n",
       "│                   [[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]],\n",
       "│           \n",
       "│                   [[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]],\n",
       "│           \n",
       "│                   [[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]],\n",
       "│           \n",
       "│                   [[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]],\n",
       "│           \n",
       "│                   [[ 1.3128, -0.3445,  1.7751],\n",
       "│                    [ 0.4075,  0.0337, -0.0861]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f725f31be20>\n",
       "    └── 'c' --> tensor([[[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "                \n",
       "                        [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "                \n",
       "                        [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "                \n",
       "                        [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "                \n",
       "                        [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "                \n",
       "                        [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "                \n",
       "                        [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "                \n",
       "                        [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                         [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                         [ 0.0289,  1.4673,  0.0341, -0.1760]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:46.136429Z",
     "iopub.status.busy": "2023-02-27T11:34:46.135724Z",
     "iopub.status.idle": "2023-02-27T11:34:49.160388Z",
     "shell.execute_reply": "2023-02-27T11:34:49.159213Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37.2 µs ± 102 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:49.164611Z",
     "iopub.status.busy": "2023-02-27T11:34:49.163938Z",
     "iopub.status.idle": "2023-02-27T11:34:49.174506Z",
     "shell.execute_reply": "2023-02-27T11:34:49.173743Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f725f31b8b0>\n",
       "├── 'a' --> tensor([[ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861],\n",
       "│                   [ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861],\n",
       "│                   [ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861],\n",
       "│                   [ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861],\n",
       "│                   [ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861],\n",
       "│                   [ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861],\n",
       "│                   [ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861],\n",
       "│                   [ 1.3128, -0.3445,  1.7751],\n",
       "│                   [ 0.4075,  0.0337, -0.0861]])\n",
       "└── 'x' --> <FastTreeValue 0x7f725f31b760>\n",
       "    └── 'c' --> tensor([[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                        [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                        [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                        [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                        [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                        [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                        [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                        [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                        [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                        [ 0.0289,  1.4673,  0.0341, -0.1760]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:49.177855Z",
     "iopub.status.busy": "2023-02-27T11:34:49.177564Z",
     "iopub.status.idle": "2023-02-27T11:34:52.022628Z",
     "shell.execute_reply": "2023-02-27T11:34:52.021413Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35 µs ± 257 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:52.027481Z",
     "iopub.status.busy": "2023-02-27T11:34:52.026931Z",
     "iopub.status.idle": "2023-02-27T11:34:57.361243Z",
     "shell.execute_reply": "2023-02-27T11:34:57.360237Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.5 µs ± 302 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:57.365053Z",
     "iopub.status.busy": "2023-02-27T11:34:57.364577Z",
     "iopub.status.idle": "2023-02-27T11:34:57.374838Z",
     "shell.execute_reply": "2023-02-27T11:34:57.374073Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "              \n",
       "                      [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "              \n",
       "                      [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "              \n",
       "                      [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "              \n",
       "                      [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "              \n",
       "                      [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "              \n",
       "                      [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]],\n",
       "              \n",
       "                      [[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                       [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                       [ 0.0289,  1.4673,  0.0341, -0.1760]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]],\n",
       "       \n",
       "               [[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]],\n",
       "       \n",
       "               [[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]],\n",
       "       \n",
       "               [[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]],\n",
       "       \n",
       "               [[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]],\n",
       "       \n",
       "               [[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]],\n",
       "       \n",
       "               [[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]],\n",
       "       \n",
       "               [[ 1.3128, -0.3445,  1.7751],\n",
       "                [ 0.4075,  0.0337, -0.0861]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:34:57.378069Z",
     "iopub.status.busy": "2023-02-27T11:34:57.377659Z",
     "iopub.status.idle": "2023-02-27T11:35:04.763089Z",
     "shell.execute_reply": "2023-02-27T11:35:04.762346Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.4 µs ± 1.12 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:35:04.766775Z",
     "iopub.status.busy": "2023-02-27T11:35:04.766346Z",
     "iopub.status.idle": "2023-02-27T11:35:04.775231Z",
     "shell.execute_reply": "2023-02-27T11:35:04.774516Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                      [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                      [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                      [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                      [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                      [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                      [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760],\n",
       "                      [ 0.0186,  0.5440,  0.9128, -0.5612],\n",
       "                      [-1.0793, -0.1842, -0.8388, -0.3869],\n",
       "                      [ 0.0289,  1.4673,  0.0341, -0.1760]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861],\n",
       "               [ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861],\n",
       "               [ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861],\n",
       "               [ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861],\n",
       "               [ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861],\n",
       "               [ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861],\n",
       "               [ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861],\n",
       "               [ 1.3128, -0.3445,  1.7751],\n",
       "               [ 0.4075,  0.0337, -0.0861]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:35:04.778621Z",
     "iopub.status.busy": "2023-02-27T11:35:04.778193Z",
     "iopub.status.idle": "2023-02-27T11:35:18.086095Z",
     "shell.execute_reply": "2023-02-27T11:35:18.085244Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "164 µs ± 366 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:35:18.089864Z",
     "iopub.status.busy": "2023-02-27T11:35:18.089191Z",
     "iopub.status.idle": "2023-02-27T11:35:21.289365Z",
     "shell.execute_reply": "2023-02-27T11:35:21.288686Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "391 µs ± 2.17 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
