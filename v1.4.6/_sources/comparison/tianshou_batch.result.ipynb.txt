{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:45.847249Z",
     "iopub.status.busy": "2023-03-06T19:18:45.846971Z",
     "iopub.status.idle": "2023-03-06T19:18:47.113787Z",
     "shell.execute_reply": "2023-03-06T19:18:47.112353Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:47.119505Z",
     "iopub.status.busy": "2023-03-06T19:18:47.119141Z",
     "iopub.status.idle": "2023-03-06T19:18:47.502644Z",
     "shell.execute_reply": "2023-03-06T19:18:47.501553Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:47.506781Z",
     "iopub.status.busy": "2023-03-06T19:18:47.506422Z",
     "iopub.status.idle": "2023-03-06T19:18:47.518540Z",
     "shell.execute_reply": "2023-03-06T19:18:47.517367Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9a80b2cb80>\n",
       "├── 'a' --> tensor([[-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9a80aa1250>\n",
       "    └── 'c' --> tensor([[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:47.522161Z",
     "iopub.status.busy": "2023-03-06T19:18:47.521816Z",
     "iopub.status.idle": "2023-03-06T19:18:47.528451Z",
     "shell.execute_reply": "2023-03-06T19:18:47.527522Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1791,  1.2245, -0.5387],\n",
       "        [ 1.9300, -0.6600,  1.1595]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:47.531665Z",
     "iopub.status.busy": "2023-03-06T19:18:47.531384Z",
     "iopub.status.idle": "2023-03-06T19:18:53.510162Z",
     "shell.execute_reply": "2023-03-06T19:18:53.509112Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.7 ns ± 0.799 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:53.513947Z",
     "iopub.status.busy": "2023-03-06T19:18:53.513359Z",
     "iopub.status.idle": "2023-03-06T19:18:53.523338Z",
     "shell.execute_reply": "2023-03-06T19:18:53.522240Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9a80b2cb80>\n",
       "├── 'a' --> tensor([[-1.4951, -1.1420, -0.1572],\n",
       "│                   [-0.2155, -1.2206, -1.4992]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9a80aa1250>\n",
       "    └── 'c' --> tensor([[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:53.527244Z",
     "iopub.status.busy": "2023-03-06T19:18:53.526749Z",
     "iopub.status.idle": "2023-03-06T19:18:59.820337Z",
     "shell.execute_reply": "2023-03-06T19:18:59.819322Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 ns ± 1.5 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:18:59.824527Z",
     "iopub.status.busy": "2023-03-06T19:18:59.823986Z",
     "iopub.status.idle": "2023-03-06T19:19:00.308308Z",
     "shell.execute_reply": "2023-03-06T19:19:00.306983Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:00.313274Z",
     "iopub.status.busy": "2023-03-06T19:19:00.312677Z",
     "iopub.status.idle": "2023-03-06T19:19:00.322290Z",
     "shell.execute_reply": "2023-03-06T19:19:00.321397Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:00.327722Z",
     "iopub.status.busy": "2023-03-06T19:19:00.327026Z",
     "iopub.status.idle": "2023-03-06T19:19:00.334425Z",
     "shell.execute_reply": "2023-03-06T19:19:00.333539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1791,  1.2245, -0.5387],\n",
       "        [ 1.9300, -0.6600,  1.1595]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:00.338224Z",
     "iopub.status.busy": "2023-03-06T19:19:00.337718Z",
     "iopub.status.idle": "2023-03-06T19:19:05.920975Z",
     "shell.execute_reply": "2023-03-06T19:19:05.920012Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.3 ns ± 1.75 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:05.925277Z",
     "iopub.status.busy": "2023-03-06T19:19:05.924741Z",
     "iopub.status.idle": "2023-03-06T19:19:05.933664Z",
     "shell.execute_reply": "2023-03-06T19:19:05.932821Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9010, -0.4782, -1.6182],\n",
       "               [ 0.8076,  2.0138,  0.7661]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:05.937728Z",
     "iopub.status.busy": "2023-03-06T19:19:05.937178Z",
     "iopub.status.idle": "2023-03-06T19:19:11.128256Z",
     "shell.execute_reply": "2023-03-06T19:19:11.127350Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "633 ns ± 5.65 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:11.134023Z",
     "iopub.status.busy": "2023-03-06T19:19:11.132993Z",
     "iopub.status.idle": "2023-03-06T19:19:19.407141Z",
     "shell.execute_reply": "2023-03-06T19:19:19.405556Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.02 µs ± 14.4 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:19.411158Z",
     "iopub.status.busy": "2023-03-06T19:19:19.410814Z",
     "iopub.status.idle": "2023-03-06T19:19:30.220462Z",
     "shell.execute_reply": "2023-03-06T19:19:30.219414Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.3 µs ± 106 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:30.224764Z",
     "iopub.status.busy": "2023-03-06T19:19:30.224234Z",
     "iopub.status.idle": "2023-03-06T19:19:30.231667Z",
     "shell.execute_reply": "2023-03-06T19:19:30.230485Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:30.235404Z",
     "iopub.status.busy": "2023-03-06T19:19:30.234951Z",
     "iopub.status.idle": "2023-03-06T19:19:32.571209Z",
     "shell.execute_reply": "2023-03-06T19:19:32.570175Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "285 µs ± 11.5 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:32.575306Z",
     "iopub.status.busy": "2023-03-06T19:19:32.574711Z",
     "iopub.status.idle": "2023-03-06T19:19:34.838834Z",
     "shell.execute_reply": "2023-03-06T19:19:34.837782Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "277 µs ± 4.66 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:34.846696Z",
     "iopub.status.busy": "2023-03-06T19:19:34.846025Z",
     "iopub.status.idle": "2023-03-06T19:19:34.850849Z",
     "shell.execute_reply": "2023-03-06T19:19:34.849868Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:34.854042Z",
     "iopub.status.busy": "2023-03-06T19:19:34.853752Z",
     "iopub.status.idle": "2023-03-06T19:19:34.866249Z",
     "shell.execute_reply": "2023-03-06T19:19:34.865034Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f99f46ad040>\n",
       "├── 'a' --> tensor([[[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]],\n",
       "│           \n",
       "│                   [[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]],\n",
       "│           \n",
       "│                   [[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]],\n",
       "│           \n",
       "│                   [[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]],\n",
       "│           \n",
       "│                   [[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]],\n",
       "│           \n",
       "│                   [[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]],\n",
       "│           \n",
       "│                   [[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]],\n",
       "│           \n",
       "│                   [[-0.1791,  1.2245, -0.5387],\n",
       "│                    [ 1.9300, -0.6600,  1.1595]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9aae477700>\n",
       "    └── 'c' --> tensor([[[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "                \n",
       "                        [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "                \n",
       "                        [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "                \n",
       "                        [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "                \n",
       "                        [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "                \n",
       "                        [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "                \n",
       "                        [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "                \n",
       "                        [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                         [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                         [ 1.5165,  1.5576, -0.0351, -0.3848]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:34.870012Z",
     "iopub.status.busy": "2023-03-06T19:19:34.869568Z",
     "iopub.status.idle": "2023-03-06T19:19:38.592356Z",
     "shell.execute_reply": "2023-03-06T19:19:38.591210Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.5 µs ± 429 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:38.595986Z",
     "iopub.status.busy": "2023-03-06T19:19:38.595540Z",
     "iopub.status.idle": "2023-03-06T19:19:38.606556Z",
     "shell.execute_reply": "2023-03-06T19:19:38.605635Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9aac406be0>\n",
       "├── 'a' --> tensor([[-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595],\n",
       "│                   [-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595],\n",
       "│                   [-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595],\n",
       "│                   [-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595],\n",
       "│                   [-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595],\n",
       "│                   [-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595],\n",
       "│                   [-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595],\n",
       "│                   [-0.1791,  1.2245, -0.5387],\n",
       "│                   [ 1.9300, -0.6600,  1.1595]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9aae472f40>\n",
       "    └── 'c' --> tensor([[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                        [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                        [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                        [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                        [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                        [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                        [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                        [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                        [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                        [ 1.5165,  1.5576, -0.0351, -0.3848]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:38.609909Z",
     "iopub.status.busy": "2023-03-06T19:19:38.609311Z",
     "iopub.status.idle": "2023-03-06T19:19:41.982781Z",
     "shell.execute_reply": "2023-03-06T19:19:41.981570Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41.6 µs ± 487 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:41.987038Z",
     "iopub.status.busy": "2023-03-06T19:19:41.986690Z",
     "iopub.status.idle": "2023-03-06T19:19:48.438010Z",
     "shell.execute_reply": "2023-03-06T19:19:48.436882Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.5 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:48.442416Z",
     "iopub.status.busy": "2023-03-06T19:19:48.441821Z",
     "iopub.status.idle": "2023-03-06T19:19:48.453134Z",
     "shell.execute_reply": "2023-03-06T19:19:48.452112Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "              \n",
       "                      [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "              \n",
       "                      [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "              \n",
       "                      [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "              \n",
       "                      [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "              \n",
       "                      [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "              \n",
       "                      [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]],\n",
       "              \n",
       "                      [[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                       [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                       [ 1.5165,  1.5576, -0.0351, -0.3848]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]],\n",
       "       \n",
       "               [[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]],\n",
       "       \n",
       "               [[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]],\n",
       "       \n",
       "               [[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]],\n",
       "       \n",
       "               [[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]],\n",
       "       \n",
       "               [[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]],\n",
       "       \n",
       "               [[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]],\n",
       "       \n",
       "               [[-0.1791,  1.2245, -0.5387],\n",
       "                [ 1.9300, -0.6600,  1.1595]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:19:48.456872Z",
     "iopub.status.busy": "2023-03-06T19:19:48.456573Z",
     "iopub.status.idle": "2023-03-06T19:20:01.003828Z",
     "shell.execute_reply": "2023-03-06T19:20:01.002719Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "154 µs ± 889 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:20:01.008536Z",
     "iopub.status.busy": "2023-03-06T19:20:01.007774Z",
     "iopub.status.idle": "2023-03-06T19:20:01.018449Z",
     "shell.execute_reply": "2023-03-06T19:20:01.017211Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                      [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                      [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                      [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                      [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                      [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                      [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848],\n",
       "                      [ 0.0957,  0.3080,  0.9720, -0.2256],\n",
       "                      [-1.2331,  0.6387, -0.6974,  1.3196],\n",
       "                      [ 1.5165,  1.5576, -0.0351, -0.3848]]),\n",
       "       ),\n",
       "    a: tensor([[-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595],\n",
       "               [-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595],\n",
       "               [-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595],\n",
       "               [-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595],\n",
       "               [-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595],\n",
       "               [-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595],\n",
       "               [-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595],\n",
       "               [-0.1791,  1.2245, -0.5387],\n",
       "               [ 1.9300, -0.6600,  1.1595]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:20:01.021561Z",
     "iopub.status.busy": "2023-03-06T19:20:01.021274Z",
     "iopub.status.idle": "2023-03-06T19:20:02.998363Z",
     "shell.execute_reply": "2023-03-06T19:20:02.997259Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "241 µs ± 3.19 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:20:03.002797Z",
     "iopub.status.busy": "2023-03-06T19:20:03.002195Z",
     "iopub.status.idle": "2023-03-06T19:20:08.064836Z",
     "shell.execute_reply": "2023-03-06T19:20:08.063862Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "626 µs ± 29.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
