@startuml
skinparam backgroundcolor transparent
skinparam rectangle<<behavior>> {
	roundCorner 25
}
sprite $primitive jar:archimate/application-component
sprite $data jar:archimate/application-service
sprite $logic jar:archimate/business-process

rectangle "Logic Layer" as logiclayer {
    rectangle "TreeValue\n(Basic logic framework)" as treevalue <<$logic>> #Business
    rectangle "**func_treelize**\n(Function wrapper)" as func_treelize <<$logic>> #Application

    rectangle "**FastTreeValue**\n(Common treevalue)" as fasttreevalue <<$logic>> #Business
    rectangle "method_treelize" as method_treelize <<$logic>> #Application
    rectangle "classmethod_treelize" as classmethod_treelize <<$logic>> #Application

    method_treelize <-- func_treelize: Special wrapper \nfor instance method
    classmethod_treelize <-- func_treelize: Special wrapper \nfor class method
    fasttreevalue <-down- treevalue: Logic extension
    method_treelize --> fasttreevalue: Wrapper support
    classmethod_treelize --> fasttreevalue: Wrapper support
}

rectangle "Data Layer" as datalayer {
    rectangle "TreeStorage" as tree_storage <<$data>><<behavior>> #Application

    tree_storage -up-> treevalue: "TreeValue can \nbe based on Tree."
}

rectangle "Primitive Python" as python {
    rectangle "Python Dict" as dict <<$primitive>> #Application
    rectangle "Python Operators" as operators <<$primitive>> #Application
    python -up-> tree_storage : "Tree is based on \nprimitive python dict."
}



legend left
Examples of Architecture
====
<$logic> : Logic Layer
====
<$data> : Data Layer
====
<$primitive> : Primitive Python
endlegend
@enduml
