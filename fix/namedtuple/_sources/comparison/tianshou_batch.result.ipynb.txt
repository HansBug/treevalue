{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:40.109661Z",
     "iopub.status.busy": "2023-02-24T07:36:40.109341Z",
     "iopub.status.idle": "2023-02-24T07:36:41.040750Z",
     "shell.execute_reply": "2023-02-24T07:36:41.040085Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:41.044165Z",
     "iopub.status.busy": "2023-02-24T07:36:41.043543Z",
     "iopub.status.idle": "2023-02-24T07:36:41.076641Z",
     "shell.execute_reply": "2023-02-24T07:36:41.076000Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:41.079750Z",
     "iopub.status.busy": "2023-02-24T07:36:41.079167Z",
     "iopub.status.idle": "2023-02-24T07:36:41.088600Z",
     "shell.execute_reply": "2023-02-24T07:36:41.088001Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f690ca98490>\n",
       "├── 'a' --> tensor([[ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944]])\n",
       "└── 'x' --> <FastTreeValue 0x7f690ca941f0>\n",
       "    └── 'c' --> tensor([[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:41.091584Z",
     "iopub.status.busy": "2023-02-24T07:36:41.091206Z",
     "iopub.status.idle": "2023-02-24T07:36:41.097124Z",
     "shell.execute_reply": "2023-02-24T07:36:41.096537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2169, -0.0195,  0.7124],\n",
       "        [ 0.5592, -0.2965,  0.3944]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:41.099850Z",
     "iopub.status.busy": "2023-02-24T07:36:41.099305Z",
     "iopub.status.idle": "2023-02-24T07:36:45.914188Z",
     "shell.execute_reply": "2023-02-24T07:36:45.913443Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.4 ns ± 0.0242 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:45.917314Z",
     "iopub.status.busy": "2023-02-24T07:36:45.916767Z",
     "iopub.status.idle": "2023-02-24T07:36:45.922702Z",
     "shell.execute_reply": "2023-02-24T07:36:45.922065Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f690ca98490>\n",
       "├── 'a' --> tensor([[-1.3713,  1.2031, -1.1789],\n",
       "│                   [ 1.8320,  0.6740,  1.0197]])\n",
       "└── 'x' --> <FastTreeValue 0x7f690ca941f0>\n",
       "    └── 'c' --> tensor([[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:45.925160Z",
     "iopub.status.busy": "2023-02-24T07:36:45.924807Z",
     "iopub.status.idle": "2023-02-24T07:36:50.642485Z",
     "shell.execute_reply": "2023-02-24T07:36:50.641738Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 ns ± 0.0205 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:50.645586Z",
     "iopub.status.busy": "2023-02-24T07:36:50.645006Z",
     "iopub.status.idle": "2023-02-24T07:36:50.976367Z",
     "shell.execute_reply": "2023-02-24T07:36:50.975687Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:50.979466Z",
     "iopub.status.busy": "2023-02-24T07:36:50.979011Z",
     "iopub.status.idle": "2023-02-24T07:36:50.984436Z",
     "shell.execute_reply": "2023-02-24T07:36:50.983805Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:50.987223Z",
     "iopub.status.busy": "2023-02-24T07:36:50.986644Z",
     "iopub.status.idle": "2023-02-24T07:36:50.991321Z",
     "shell.execute_reply": "2023-02-24T07:36:50.990708Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2169, -0.0195,  0.7124],\n",
       "        [ 0.5592, -0.2965,  0.3944]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:50.993757Z",
     "iopub.status.busy": "2023-02-24T07:36:50.993414Z",
     "iopub.status.idle": "2023-02-24T07:36:55.738806Z",
     "shell.execute_reply": "2023-02-24T07:36:55.738082Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.5 ns ± 0.0145 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:55.741863Z",
     "iopub.status.busy": "2023-02-24T07:36:55.741334Z",
     "iopub.status.idle": "2023-02-24T07:36:55.747709Z",
     "shell.execute_reply": "2023-02-24T07:36:55.747127Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.1453e+00,  2.3065e-01,  1.8872e-03],\n",
       "               [-1.4738e+00,  1.8972e+00,  8.9191e-01]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:55.750531Z",
     "iopub.status.busy": "2023-02-24T07:36:55.749986Z",
     "iopub.status.idle": "2023-02-24T07:36:59.755402Z",
     "shell.execute_reply": "2023-02-24T07:36:59.754703Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "493 ns ± 0.203 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:36:59.758430Z",
     "iopub.status.busy": "2023-02-24T07:36:59.758199Z",
     "iopub.status.idle": "2023-02-24T07:37:06.555384Z",
     "shell.execute_reply": "2023-02-24T07:37:06.554668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "837 ns ± 2.03 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:06.558813Z",
     "iopub.status.busy": "2023-02-24T07:37:06.558155Z",
     "iopub.status.idle": "2023-02-24T07:37:15.761626Z",
     "shell.execute_reply": "2023-02-24T07:37:15.760952Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 29.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:15.764702Z",
     "iopub.status.busy": "2023-02-24T07:37:15.764112Z",
     "iopub.status.idle": "2023-02-24T07:37:15.768179Z",
     "shell.execute_reply": "2023-02-24T07:37:15.767567Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:15.771023Z",
     "iopub.status.busy": "2023-02-24T07:37:15.770436Z",
     "iopub.status.idle": "2023-02-24T07:37:26.878814Z",
     "shell.execute_reply": "2023-02-24T07:37:26.878247Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 161 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:26.882323Z",
     "iopub.status.busy": "2023-02-24T07:37:26.881830Z",
     "iopub.status.idle": "2023-02-24T07:37:38.002853Z",
     "shell.execute_reply": "2023-02-24T07:37:38.002263Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 212 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:38.005872Z",
     "iopub.status.busy": "2023-02-24T07:37:38.005411Z",
     "iopub.status.idle": "2023-02-24T07:37:38.008692Z",
     "shell.execute_reply": "2023-02-24T07:37:38.008159Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:38.011137Z",
     "iopub.status.busy": "2023-02-24T07:37:38.010670Z",
     "iopub.status.idle": "2023-02-24T07:37:38.017753Z",
     "shell.execute_reply": "2023-02-24T07:37:38.017226Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f690caa1cd0>\n",
       "├── 'a' --> tensor([[[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]],\n",
       "│           \n",
       "│                   [[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]],\n",
       "│           \n",
       "│                   [[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]],\n",
       "│           \n",
       "│                   [[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]],\n",
       "│           \n",
       "│                   [[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]],\n",
       "│           \n",
       "│                   [[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]],\n",
       "│           \n",
       "│                   [[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]],\n",
       "│           \n",
       "│                   [[ 0.2169, -0.0195,  0.7124],\n",
       "│                    [ 0.5592, -0.2965,  0.3944]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f690caa1b50>\n",
       "    └── 'c' --> tensor([[[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "                \n",
       "                        [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "                \n",
       "                        [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "                \n",
       "                        [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "                \n",
       "                        [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "                \n",
       "                        [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "                \n",
       "                        [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "                \n",
       "                        [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                         [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                         [ 1.3175,  0.5634,  0.1722, -0.0203]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:38.020264Z",
     "iopub.status.busy": "2023-02-24T07:37:38.019675Z",
     "iopub.status.idle": "2023-02-24T07:37:40.653430Z",
     "shell.execute_reply": "2023-02-24T07:37:40.652683Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 37.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:40.656513Z",
     "iopub.status.busy": "2023-02-24T07:37:40.655986Z",
     "iopub.status.idle": "2023-02-24T07:37:40.663150Z",
     "shell.execute_reply": "2023-02-24T07:37:40.662495Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f690caa1d00>\n",
       "├── 'a' --> tensor([[ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944],\n",
       "│                   [ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944],\n",
       "│                   [ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944],\n",
       "│                   [ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944],\n",
       "│                   [ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944],\n",
       "│                   [ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944],\n",
       "│                   [ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944],\n",
       "│                   [ 0.2169, -0.0195,  0.7124],\n",
       "│                   [ 0.5592, -0.2965,  0.3944]])\n",
       "└── 'x' --> <FastTreeValue 0x7f690caa15e0>\n",
       "    └── 'c' --> tensor([[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                        [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                        [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                        [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                        [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                        [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                        [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                        [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                        [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                        [ 1.3175,  0.5634,  0.1722, -0.0203]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:40.665688Z",
     "iopub.status.busy": "2023-02-24T07:37:40.665341Z",
     "iopub.status.idle": "2023-02-24T07:37:43.134831Z",
     "shell.execute_reply": "2023-02-24T07:37:43.134117Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4 µs ± 91.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:43.137663Z",
     "iopub.status.busy": "2023-02-24T07:37:43.137299Z",
     "iopub.status.idle": "2023-02-24T07:37:47.859871Z",
     "shell.execute_reply": "2023-02-24T07:37:47.859091Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 µs ± 223 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:47.862972Z",
     "iopub.status.busy": "2023-02-24T07:37:47.862616Z",
     "iopub.status.idle": "2023-02-24T07:37:47.870418Z",
     "shell.execute_reply": "2023-02-24T07:37:47.869851Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]],\n",
       "       \n",
       "               [[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]],\n",
       "       \n",
       "               [[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]],\n",
       "       \n",
       "               [[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]],\n",
       "       \n",
       "               [[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]],\n",
       "       \n",
       "               [[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]],\n",
       "       \n",
       "               [[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]],\n",
       "       \n",
       "               [[ 0.2169, -0.0195,  0.7124],\n",
       "                [ 0.5592, -0.2965,  0.3944]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "              \n",
       "                      [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "              \n",
       "                      [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "              \n",
       "                      [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "              \n",
       "                      [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "              \n",
       "                      [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "              \n",
       "                      [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]],\n",
       "              \n",
       "                      [[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                       [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                       [ 1.3175,  0.5634,  0.1722, -0.0203]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:47.872843Z",
     "iopub.status.busy": "2023-02-24T07:37:47.872496Z",
     "iopub.status.idle": "2023-02-24T07:37:54.172929Z",
     "shell.execute_reply": "2023-02-24T07:37:54.172259Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.5 µs ± 121 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:54.175943Z",
     "iopub.status.busy": "2023-02-24T07:37:54.175571Z",
     "iopub.status.idle": "2023-02-24T07:37:54.182944Z",
     "shell.execute_reply": "2023-02-24T07:37:54.182337Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944],\n",
       "               [ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944],\n",
       "               [ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944],\n",
       "               [ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944],\n",
       "               [ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944],\n",
       "               [ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944],\n",
       "               [ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944],\n",
       "               [ 0.2169, -0.0195,  0.7124],\n",
       "               [ 0.5592, -0.2965,  0.3944]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                      [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                      [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                      [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                      [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                      [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                      [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203],\n",
       "                      [-0.3561,  0.2147,  0.3066, -0.6032],\n",
       "                      [-2.5731,  0.8957,  0.0550, -0.6310],\n",
       "                      [ 1.3175,  0.5634,  0.1722, -0.0203]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:37:54.185779Z",
     "iopub.status.busy": "2023-02-24T07:37:54.185274Z",
     "iopub.status.idle": "2023-02-24T07:38:05.914544Z",
     "shell.execute_reply": "2023-02-24T07:38:05.913870Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 321 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:38:05.917799Z",
     "iopub.status.busy": "2023-02-24T07:38:05.917263Z",
     "iopub.status.idle": "2023-02-24T07:38:08.423962Z",
     "shell.execute_reply": "2023-02-24T07:38:08.423370Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "307 µs ± 907 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
