{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:30.606393Z",
     "iopub.status.busy": "2023-02-27T08:26:30.606161Z",
     "iopub.status.idle": "2023-02-27T08:26:31.505804Z",
     "shell.execute_reply": "2023-02-27T08:26:31.504824Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:31.508969Z",
     "iopub.status.busy": "2023-02-27T08:26:31.508579Z",
     "iopub.status.idle": "2023-02-27T08:26:31.540896Z",
     "shell.execute_reply": "2023-02-27T08:26:31.540315Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:31.543592Z",
     "iopub.status.busy": "2023-02-27T08:26:31.543034Z",
     "iopub.status.idle": "2023-02-27T08:26:31.552180Z",
     "shell.execute_reply": "2023-02-27T08:26:31.551611Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2f24ba2f40>\n",
       "├── 'a' --> tensor([[-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2f24ba2f10>\n",
       "    └── 'c' --> tensor([[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:31.554529Z",
     "iopub.status.busy": "2023-02-27T08:26:31.554306Z",
     "iopub.status.idle": "2023-02-27T08:26:31.558920Z",
     "shell.execute_reply": "2023-02-27T08:26:31.558309Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.2285,  0.4132,  2.0835],\n",
       "        [ 0.6822,  0.9488,  0.2984]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:31.561468Z",
     "iopub.status.busy": "2023-02-27T08:26:31.560965Z",
     "iopub.status.idle": "2023-02-27T08:26:36.620080Z",
     "shell.execute_reply": "2023-02-27T08:26:36.619324Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62 ns ± 0.107 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:36.623386Z",
     "iopub.status.busy": "2023-02-27T08:26:36.622790Z",
     "iopub.status.idle": "2023-02-27T08:26:36.630559Z",
     "shell.execute_reply": "2023-02-27T08:26:36.629968Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2f24ba2f40>\n",
       "├── 'a' --> tensor([[ 0.3149, -1.2667,  0.3612],\n",
       "│                   [-0.4934,  0.0179,  1.2738]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2f24ba2f10>\n",
       "    └── 'c' --> tensor([[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:36.633384Z",
     "iopub.status.busy": "2023-02-27T08:26:36.632913Z",
     "iopub.status.idle": "2023-02-27T08:26:41.642908Z",
     "shell.execute_reply": "2023-02-27T08:26:41.642146Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.8 ns ± 0.0282 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:41.646180Z",
     "iopub.status.busy": "2023-02-27T08:26:41.645690Z",
     "iopub.status.idle": "2023-02-27T08:26:41.970325Z",
     "shell.execute_reply": "2023-02-27T08:26:41.969660Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:41.973901Z",
     "iopub.status.busy": "2023-02-27T08:26:41.973165Z",
     "iopub.status.idle": "2023-02-27T08:26:41.979349Z",
     "shell.execute_reply": "2023-02-27T08:26:41.978762Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:41.982033Z",
     "iopub.status.busy": "2023-02-27T08:26:41.981706Z",
     "iopub.status.idle": "2023-02-27T08:26:41.986657Z",
     "shell.execute_reply": "2023-02-27T08:26:41.985600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.2285,  0.4132,  2.0835],\n",
       "        [ 0.6822,  0.9488,  0.2984]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:41.990096Z",
     "iopub.status.busy": "2023-02-27T08:26:41.988845Z",
     "iopub.status.idle": "2023-02-27T08:26:46.192843Z",
     "shell.execute_reply": "2023-02-27T08:26:46.192126Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.5 ns ± 0.0473 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:46.195700Z",
     "iopub.status.busy": "2023-02-27T08:26:46.195258Z",
     "iopub.status.idle": "2023-02-27T08:26:46.201666Z",
     "shell.execute_reply": "2023-02-27T08:26:46.201058Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2740, -0.2289,  2.5068],\n",
       "               [-0.2829,  0.9987, -1.2058]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:46.204314Z",
     "iopub.status.busy": "2023-02-27T08:26:46.203820Z",
     "iopub.status.idle": "2023-02-27T08:26:50.169602Z",
     "shell.execute_reply": "2023-02-27T08:26:50.168872Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "489 ns ± 0.104 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:50.172786Z",
     "iopub.status.busy": "2023-02-27T08:26:50.172250Z",
     "iopub.status.idle": "2023-02-27T08:26:57.007135Z",
     "shell.execute_reply": "2023-02-27T08:26:57.006416Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "841 ns ± 0.188 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:26:57.010229Z",
     "iopub.status.busy": "2023-02-27T08:26:57.009862Z",
     "iopub.status.idle": "2023-02-27T08:27:06.234677Z",
     "shell.execute_reply": "2023-02-27T08:27:06.233905Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 19.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:06.237692Z",
     "iopub.status.busy": "2023-02-27T08:27:06.237456Z",
     "iopub.status.idle": "2023-02-27T08:27:06.241589Z",
     "shell.execute_reply": "2023-02-27T08:27:06.240650Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:06.243961Z",
     "iopub.status.busy": "2023-02-27T08:27:06.243757Z",
     "iopub.status.idle": "2023-02-27T08:27:17.138130Z",
     "shell.execute_reply": "2023-02-27T08:27:17.137572Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "134 µs ± 245 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:17.141499Z",
     "iopub.status.busy": "2023-02-27T08:27:17.140472Z",
     "iopub.status.idle": "2023-02-27T08:27:28.362254Z",
     "shell.execute_reply": "2023-02-27T08:27:28.361655Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 559 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:28.365796Z",
     "iopub.status.busy": "2023-02-27T08:27:28.364780Z",
     "iopub.status.idle": "2023-02-27T08:27:28.368661Z",
     "shell.execute_reply": "2023-02-27T08:27:28.368139Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:28.371050Z",
     "iopub.status.busy": "2023-02-27T08:27:28.370650Z",
     "iopub.status.idle": "2023-02-27T08:27:28.377487Z",
     "shell.execute_reply": "2023-02-27T08:27:28.376981Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2f24c0ea00>\n",
       "├── 'a' --> tensor([[[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]],\n",
       "│           \n",
       "│                   [[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]],\n",
       "│           \n",
       "│                   [[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]],\n",
       "│           \n",
       "│                   [[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]],\n",
       "│           \n",
       "│                   [[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]],\n",
       "│           \n",
       "│                   [[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]],\n",
       "│           \n",
       "│                   [[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]],\n",
       "│           \n",
       "│                   [[-1.2285,  0.4132,  2.0835],\n",
       "│                    [ 0.6822,  0.9488,  0.2984]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2e77828e50>\n",
       "    └── 'c' --> tensor([[[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "                \n",
       "                        [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "                \n",
       "                        [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "                \n",
       "                        [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "                \n",
       "                        [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "                \n",
       "                        [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "                \n",
       "                        [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "                \n",
       "                        [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                         [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                         [-0.7702, -0.4040,  0.0073, -0.6479]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:28.379955Z",
     "iopub.status.busy": "2023-02-27T08:27:28.379559Z",
     "iopub.status.idle": "2023-02-27T08:27:30.931821Z",
     "shell.execute_reply": "2023-02-27T08:27:30.931094Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 29.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:30.934723Z",
     "iopub.status.busy": "2023-02-27T08:27:30.934344Z",
     "iopub.status.idle": "2023-02-27T08:27:30.941600Z",
     "shell.execute_reply": "2023-02-27T08:27:30.940951Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2e77827f40>\n",
       "├── 'a' --> tensor([[-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984],\n",
       "│                   [-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984],\n",
       "│                   [-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984],\n",
       "│                   [-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984],\n",
       "│                   [-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984],\n",
       "│                   [-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984],\n",
       "│                   [-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984],\n",
       "│                   [-1.2285,  0.4132,  2.0835],\n",
       "│                   [ 0.6822,  0.9488,  0.2984]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2e77e41f70>\n",
       "    └── 'c' --> tensor([[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                        [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                        [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                        [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                        [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                        [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                        [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                        [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                        [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                        [-0.7702, -0.4040,  0.0073, -0.6479]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:30.944336Z",
     "iopub.status.busy": "2023-02-27T08:27:30.943785Z",
     "iopub.status.idle": "2023-02-27T08:27:33.386145Z",
     "shell.execute_reply": "2023-02-27T08:27:33.385434Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 µs ± 65.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:33.389119Z",
     "iopub.status.busy": "2023-02-27T08:27:33.388610Z",
     "iopub.status.idle": "2023-02-27T08:27:38.072144Z",
     "shell.execute_reply": "2023-02-27T08:27:38.071405Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.6 µs ± 54.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:38.075211Z",
     "iopub.status.busy": "2023-02-27T08:27:38.074657Z",
     "iopub.status.idle": "2023-02-27T08:27:38.082547Z",
     "shell.execute_reply": "2023-02-27T08:27:38.081943Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]],\n",
       "       \n",
       "               [[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]],\n",
       "       \n",
       "               [[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]],\n",
       "       \n",
       "               [[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]],\n",
       "       \n",
       "               [[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]],\n",
       "       \n",
       "               [[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]],\n",
       "       \n",
       "               [[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]],\n",
       "       \n",
       "               [[-1.2285,  0.4132,  2.0835],\n",
       "                [ 0.6822,  0.9488,  0.2984]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "              \n",
       "                      [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "              \n",
       "                      [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "              \n",
       "                      [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "              \n",
       "                      [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "              \n",
       "                      [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "              \n",
       "                      [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]],\n",
       "              \n",
       "                      [[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                       [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                       [-0.7702, -0.4040,  0.0073, -0.6479]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:38.085124Z",
     "iopub.status.busy": "2023-02-27T08:27:38.084901Z",
     "iopub.status.idle": "2023-02-27T08:27:44.413390Z",
     "shell.execute_reply": "2023-02-27T08:27:44.412666Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 µs ± 244 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:44.416242Z",
     "iopub.status.busy": "2023-02-27T08:27:44.415886Z",
     "iopub.status.idle": "2023-02-27T08:27:44.423610Z",
     "shell.execute_reply": "2023-02-27T08:27:44.422947Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984],\n",
       "               [-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984],\n",
       "               [-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984],\n",
       "               [-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984],\n",
       "               [-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984],\n",
       "               [-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984],\n",
       "               [-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984],\n",
       "               [-1.2285,  0.4132,  2.0835],\n",
       "               [ 0.6822,  0.9488,  0.2984]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                      [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                      [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                      [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                      [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                      [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                      [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479],\n",
       "                      [ 0.0192, -0.0738,  1.3046,  0.8962],\n",
       "                      [ 1.6831, -0.1166, -0.0914,  0.1954],\n",
       "                      [-0.7702, -0.4040,  0.0073, -0.6479]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:44.426387Z",
     "iopub.status.busy": "2023-02-27T08:27:44.425879Z",
     "iopub.status.idle": "2023-02-27T08:27:56.248378Z",
     "shell.execute_reply": "2023-02-27T08:27:56.247704Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 257 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:27:56.251455Z",
     "iopub.status.busy": "2023-02-27T08:27:56.250904Z",
     "iopub.status.idle": "2023-02-27T08:27:58.748717Z",
     "shell.execute_reply": "2023-02-27T08:27:58.748045Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "307 µs ± 3.24 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
