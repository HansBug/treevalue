{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:31.723293Z",
     "iopub.status.busy": "2023-08-10T04:36:31.722975Z",
     "iopub.status.idle": "2023-08-10T04:36:33.327765Z",
     "shell.execute_reply": "2023-08-10T04:36:33.326684Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:33.332459Z",
     "iopub.status.busy": "2023-08-10T04:36:33.331935Z",
     "iopub.status.idle": "2023-08-10T04:36:33.364910Z",
     "shell.execute_reply": "2023-08-10T04:36:33.364030Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:33.369047Z",
     "iopub.status.busy": "2023-08-10T04:36:33.368560Z",
     "iopub.status.idle": "2023-08-10T04:36:33.380577Z",
     "shell.execute_reply": "2023-08-10T04:36:33.379774Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faaf8752b80>\n",
       "├── 'a' --> tensor([[-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005]])\n",
       "└── 'x' --> <FastTreeValue 0x7faaf8752190>\n",
       "    └── 'c' --> tensor([[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:33.384402Z",
     "iopub.status.busy": "2023-08-10T04:36:33.383957Z",
     "iopub.status.idle": "2023-08-10T04:36:33.391811Z",
     "shell.execute_reply": "2023-08-10T04:36:33.391085Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0325,  0.8977, -0.0215],\n",
       "        [ 0.1376,  1.9339,  1.0005]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:33.395360Z",
     "iopub.status.busy": "2023-08-10T04:36:33.394921Z",
     "iopub.status.idle": "2023-08-10T04:36:40.124050Z",
     "shell.execute_reply": "2023-08-10T04:36:40.122620Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.8 ns ± 0.91 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:40.128597Z",
     "iopub.status.busy": "2023-08-10T04:36:40.128098Z",
     "iopub.status.idle": "2023-08-10T04:36:40.135155Z",
     "shell.execute_reply": "2023-08-10T04:36:40.134361Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faaf8752b80>\n",
       "├── 'a' --> tensor([[ 0.2802,  0.3024,  0.7962],\n",
       "│                   [-0.0046, -0.3028, -0.4754]])\n",
       "└── 'x' --> <FastTreeValue 0x7faaf8752190>\n",
       "    └── 'c' --> tensor([[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:40.138311Z",
     "iopub.status.busy": "2023-08-10T04:36:40.137820Z",
     "iopub.status.idle": "2023-08-10T04:36:46.941274Z",
     "shell.execute_reply": "2023-08-10T04:36:46.938384Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.9 ns ± 0.414 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:46.946592Z",
     "iopub.status.busy": "2023-08-10T04:36:46.946140Z",
     "iopub.status.idle": "2023-08-10T04:36:47.371419Z",
     "shell.execute_reply": "2023-08-10T04:36:47.370459Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:47.375882Z",
     "iopub.status.busy": "2023-08-10T04:36:47.375306Z",
     "iopub.status.idle": "2023-08-10T04:36:47.384605Z",
     "shell.execute_reply": "2023-08-10T04:36:47.383151Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:47.388126Z",
     "iopub.status.busy": "2023-08-10T04:36:47.387611Z",
     "iopub.status.idle": "2023-08-10T04:36:47.395099Z",
     "shell.execute_reply": "2023-08-10T04:36:47.394371Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0325,  0.8977, -0.0215],\n",
       "        [ 0.1376,  1.9339,  1.0005]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:47.398783Z",
     "iopub.status.busy": "2023-08-10T04:36:47.398157Z",
     "iopub.status.idle": "2023-08-10T04:36:54.131487Z",
     "shell.execute_reply": "2023-08-10T04:36:54.130699Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.2 ns ± 1.19 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:54.135143Z",
     "iopub.status.busy": "2023-08-10T04:36:54.134589Z",
     "iopub.status.idle": "2023-08-10T04:36:54.141658Z",
     "shell.execute_reply": "2023-08-10T04:36:54.140826Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.7478, -0.8717,  0.1012],\n",
       "               [ 0.6791,  0.6019,  2.0724]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:54.145122Z",
     "iopub.status.busy": "2023-08-10T04:36:54.144827Z",
     "iopub.status.idle": "2023-08-10T04:36:59.239223Z",
     "shell.execute_reply": "2023-08-10T04:36:59.237913Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "628 ns ± 11.9 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:36:59.243763Z",
     "iopub.status.busy": "2023-08-10T04:36:59.243211Z",
     "iopub.status.idle": "2023-08-10T04:37:07.276539Z",
     "shell.execute_reply": "2023-08-10T04:37:07.275783Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "992 ns ± 10.3 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:07.281931Z",
     "iopub.status.busy": "2023-08-10T04:37:07.281157Z",
     "iopub.status.idle": "2023-08-10T04:37:16.815916Z",
     "shell.execute_reply": "2023-08-10T04:37:16.815077Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.8 µs ± 263 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:16.820177Z",
     "iopub.status.busy": "2023-08-10T04:37:16.819638Z",
     "iopub.status.idle": "2023-08-10T04:37:16.823600Z",
     "shell.execute_reply": "2023-08-10T04:37:16.822752Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:16.827608Z",
     "iopub.status.busy": "2023-08-10T04:37:16.827010Z",
     "iopub.status.idle": "2023-08-10T04:37:30.264780Z",
     "shell.execute_reply": "2023-08-10T04:37:30.263958Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "165 µs ± 1.6 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:30.269070Z",
     "iopub.status.busy": "2023-08-10T04:37:30.268252Z",
     "iopub.status.idle": "2023-08-10T04:37:43.763454Z",
     "shell.execute_reply": "2023-08-10T04:37:43.762569Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "166 µs ± 1.21 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:43.767268Z",
     "iopub.status.busy": "2023-08-10T04:37:43.766970Z",
     "iopub.status.idle": "2023-08-10T04:37:43.770831Z",
     "shell.execute_reply": "2023-08-10T04:37:43.770018Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:43.774965Z",
     "iopub.status.busy": "2023-08-10T04:37:43.774454Z",
     "iopub.status.idle": "2023-08-10T04:37:43.783210Z",
     "shell.execute_reply": "2023-08-10T04:37:43.782431Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faa28866700>\n",
       "├── 'a' --> tensor([[[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]],\n",
       "│           \n",
       "│                   [[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]],\n",
       "│           \n",
       "│                   [[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]],\n",
       "│           \n",
       "│                   [[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]],\n",
       "│           \n",
       "│                   [[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]],\n",
       "│           \n",
       "│                   [[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]],\n",
       "│           \n",
       "│                   [[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]],\n",
       "│           \n",
       "│                   [[-1.0325,  0.8977, -0.0215],\n",
       "│                    [ 0.1376,  1.9339,  1.0005]]])\n",
       "└── 'x' --> <FastTreeValue 0x7faa28866e50>\n",
       "    └── 'c' --> tensor([[[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "                \n",
       "                        [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "                \n",
       "                        [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "                \n",
       "                        [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "                \n",
       "                        [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "                \n",
       "                        [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "                \n",
       "                        [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "                \n",
       "                        [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                         [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                         [-1.3064, -0.4280, -0.1105,  1.2533]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:43.786698Z",
     "iopub.status.busy": "2023-08-10T04:37:43.786429Z",
     "iopub.status.idle": "2023-08-10T04:37:46.818290Z",
     "shell.execute_reply": "2023-08-10T04:37:46.817297Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37.3 µs ± 533 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:46.823119Z",
     "iopub.status.busy": "2023-08-10T04:37:46.822588Z",
     "iopub.status.idle": "2023-08-10T04:37:46.831972Z",
     "shell.execute_reply": "2023-08-10T04:37:46.831108Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faa30a04880>\n",
       "├── 'a' --> tensor([[-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005],\n",
       "│                   [-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005],\n",
       "│                   [-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005],\n",
       "│                   [-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005],\n",
       "│                   [-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005],\n",
       "│                   [-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005],\n",
       "│                   [-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005],\n",
       "│                   [-1.0325,  0.8977, -0.0215],\n",
       "│                   [ 0.1376,  1.9339,  1.0005]])\n",
       "└── 'x' --> <FastTreeValue 0x7faa30a046d0>\n",
       "    └── 'c' --> tensor([[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                        [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                        [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                        [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                        [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                        [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                        [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                        [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                        [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                        [-1.3064, -0.4280, -0.1105,  1.2533]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:46.835788Z",
     "iopub.status.busy": "2023-08-10T04:37:46.835267Z",
     "iopub.status.idle": "2023-08-10T04:37:49.669165Z",
     "shell.execute_reply": "2023-08-10T04:37:49.667536Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34.8 µs ± 316 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:49.673529Z",
     "iopub.status.busy": "2023-08-10T04:37:49.672942Z",
     "iopub.status.idle": "2023-08-10T04:37:55.765265Z",
     "shell.execute_reply": "2023-08-10T04:37:55.763924Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.9 µs ± 1.01 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:55.770117Z",
     "iopub.status.busy": "2023-08-10T04:37:55.769282Z",
     "iopub.status.idle": "2023-08-10T04:37:55.778533Z",
     "shell.execute_reply": "2023-08-10T04:37:55.777692Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "              \n",
       "                      [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "              \n",
       "                      [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "              \n",
       "                      [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "              \n",
       "                      [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "              \n",
       "                      [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "              \n",
       "                      [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]],\n",
       "              \n",
       "                      [[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                       [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                       [-1.3064, -0.4280, -0.1105,  1.2533]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]],\n",
       "       \n",
       "               [[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]],\n",
       "       \n",
       "               [[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]],\n",
       "       \n",
       "               [[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]],\n",
       "       \n",
       "               [[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]],\n",
       "       \n",
       "               [[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]],\n",
       "       \n",
       "               [[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]],\n",
       "       \n",
       "               [[-1.0325,  0.8977, -0.0215],\n",
       "                [ 0.1376,  1.9339,  1.0005]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:37:55.782109Z",
     "iopub.status.busy": "2023-08-10T04:37:55.781678Z",
     "iopub.status.idle": "2023-08-10T04:38:03.467515Z",
     "shell.execute_reply": "2023-08-10T04:38:03.466338Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "94.7 µs ± 572 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:38:03.472252Z",
     "iopub.status.busy": "2023-08-10T04:38:03.471929Z",
     "iopub.status.idle": "2023-08-10T04:38:03.480512Z",
     "shell.execute_reply": "2023-08-10T04:38:03.479637Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                      [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                      [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                      [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                      [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                      [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                      [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533],\n",
       "                      [ 1.0989,  0.5911, -0.9925, -0.3216],\n",
       "                      [-0.2562, -0.3475, -0.4017,  1.5875],\n",
       "                      [-1.3064, -0.4280, -0.1105,  1.2533]]),\n",
       "       ),\n",
       "    a: tensor([[-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005],\n",
       "               [-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005],\n",
       "               [-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005],\n",
       "               [-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005],\n",
       "               [-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005],\n",
       "               [-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005],\n",
       "               [-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005],\n",
       "               [-1.0325,  0.8977, -0.0215],\n",
       "               [ 0.1376,  1.9339,  1.0005]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:38:03.484141Z",
     "iopub.status.busy": "2023-08-10T04:38:03.483727Z",
     "iopub.status.idle": "2023-08-10T04:38:17.888502Z",
     "shell.execute_reply": "2023-08-10T04:38:17.887290Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "177 µs ± 2.39 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:38:17.894060Z",
     "iopub.status.busy": "2023-08-10T04:38:17.893182Z",
     "iopub.status.idle": "2023-08-10T04:38:21.236568Z",
     "shell.execute_reply": "2023-08-10T04:38:21.235616Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "411 µs ± 19 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
