{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:18.098152Z",
     "iopub.status.busy": "2023-05-26T07:23:18.097877Z",
     "iopub.status.idle": "2023-05-26T07:23:19.557660Z",
     "shell.execute_reply": "2023-05-26T07:23:19.556851Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:19.562530Z",
     "iopub.status.busy": "2023-05-26T07:23:19.562032Z",
     "iopub.status.idle": "2023-05-26T07:23:19.594144Z",
     "shell.execute_reply": "2023-05-26T07:23:19.593372Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:19.598166Z",
     "iopub.status.busy": "2023-05-26T07:23:19.597704Z",
     "iopub.status.idle": "2023-05-26T07:23:19.609531Z",
     "shell.execute_reply": "2023-05-26T07:23:19.608863Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f16e8d32fd0>\n",
       "├── 'a' --> tensor([[-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414]])\n",
       "└── 'x' --> <FastTreeValue 0x7f16e8d32fa0>\n",
       "    └── 'c' --> tensor([[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:19.613256Z",
     "iopub.status.busy": "2023-05-26T07:23:19.612666Z",
     "iopub.status.idle": "2023-05-26T07:23:19.618966Z",
     "shell.execute_reply": "2023-05-26T07:23:19.618223Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0549,  1.7257,  0.0927],\n",
       "        [-0.4926,  1.2963, -0.6414]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:19.622485Z",
     "iopub.status.busy": "2023-05-26T07:23:19.621887Z",
     "iopub.status.idle": "2023-05-26T07:23:24.825573Z",
     "shell.execute_reply": "2023-05-26T07:23:24.824822Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.1 ns ± 0.0982 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:24.829281Z",
     "iopub.status.busy": "2023-05-26T07:23:24.828661Z",
     "iopub.status.idle": "2023-05-26T07:23:24.835251Z",
     "shell.execute_reply": "2023-05-26T07:23:24.834549Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f16e8d32fd0>\n",
       "├── 'a' --> tensor([[ 1.6130,  1.3621,  0.9131],\n",
       "│                   [-0.8639, -0.4068,  1.5090]])\n",
       "└── 'x' --> <FastTreeValue 0x7f16e8d32fa0>\n",
       "    └── 'c' --> tensor([[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:24.838268Z",
     "iopub.status.busy": "2023-05-26T07:23:24.837893Z",
     "iopub.status.idle": "2023-05-26T07:23:30.612729Z",
     "shell.execute_reply": "2023-05-26T07:23:30.611928Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.1 ns ± 0.0444 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:30.616745Z",
     "iopub.status.busy": "2023-05-26T07:23:30.616151Z",
     "iopub.status.idle": "2023-05-26T07:23:31.042524Z",
     "shell.execute_reply": "2023-05-26T07:23:31.041677Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:31.046834Z",
     "iopub.status.busy": "2023-05-26T07:23:31.046229Z",
     "iopub.status.idle": "2023-05-26T07:23:31.052880Z",
     "shell.execute_reply": "2023-05-26T07:23:31.052153Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:31.056467Z",
     "iopub.status.busy": "2023-05-26T07:23:31.055918Z",
     "iopub.status.idle": "2023-05-26T07:23:31.061852Z",
     "shell.execute_reply": "2023-05-26T07:23:31.061083Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.0549,  1.7257,  0.0927],\n",
       "        [-0.4926,  1.2963, -0.6414]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:31.065588Z",
     "iopub.status.busy": "2023-05-26T07:23:31.065159Z",
     "iopub.status.idle": "2023-05-26T07:23:35.949782Z",
     "shell.execute_reply": "2023-05-26T07:23:35.949013Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.1 ns ± 0.018 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:35.953273Z",
     "iopub.status.busy": "2023-05-26T07:23:35.952746Z",
     "iopub.status.idle": "2023-05-26T07:23:35.959326Z",
     "shell.execute_reply": "2023-05-26T07:23:35.958584Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0440,  1.4166,  1.2817],\n",
       "               [ 0.0270, -1.5701, -1.9163]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:35.962537Z",
     "iopub.status.busy": "2023-05-26T07:23:35.962076Z",
     "iopub.status.idle": "2023-05-26T07:23:39.951424Z",
     "shell.execute_reply": "2023-05-26T07:23:39.950666Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "491 ns ± 0.16 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:39.954906Z",
     "iopub.status.busy": "2023-05-26T07:23:39.954395Z",
     "iopub.status.idle": "2023-05-26T07:23:46.479854Z",
     "shell.execute_reply": "2023-05-26T07:23:46.479061Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "803 ns ± 0.272 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:46.483580Z",
     "iopub.status.busy": "2023-05-26T07:23:46.482855Z",
     "iopub.status.idle": "2023-05-26T07:23:55.185205Z",
     "shell.execute_reply": "2023-05-26T07:23:55.184432Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 24.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:55.188729Z",
     "iopub.status.busy": "2023-05-26T07:23:55.188226Z",
     "iopub.status.idle": "2023-05-26T07:23:55.191622Z",
     "shell.execute_reply": "2023-05-26T07:23:55.190917Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:23:55.194862Z",
     "iopub.status.busy": "2023-05-26T07:23:55.194484Z",
     "iopub.status.idle": "2023-05-26T07:24:06.757940Z",
     "shell.execute_reply": "2023-05-26T07:24:06.757109Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 1.6 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:06.761581Z",
     "iopub.status.busy": "2023-05-26T07:24:06.761322Z",
     "iopub.status.idle": "2023-05-26T07:24:18.422112Z",
     "shell.execute_reply": "2023-05-26T07:24:18.421328Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 967 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:18.426264Z",
     "iopub.status.busy": "2023-05-26T07:24:18.425729Z",
     "iopub.status.idle": "2023-05-26T07:24:18.431016Z",
     "shell.execute_reply": "2023-05-26T07:24:18.430334Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:18.434223Z",
     "iopub.status.busy": "2023-05-26T07:24:18.433820Z",
     "iopub.status.idle": "2023-05-26T07:24:18.444606Z",
     "shell.execute_reply": "2023-05-26T07:24:18.443918Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1624198c70>\n",
       "├── 'a' --> tensor([[[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]],\n",
       "│           \n",
       "│                   [[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]],\n",
       "│           \n",
       "│                   [[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]],\n",
       "│           \n",
       "│                   [[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]],\n",
       "│           \n",
       "│                   [[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]],\n",
       "│           \n",
       "│                   [[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]],\n",
       "│           \n",
       "│                   [[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]],\n",
       "│           \n",
       "│                   [[-2.0549,  1.7257,  0.0927],\n",
       "│                    [-0.4926,  1.2963, -0.6414]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1624198cd0>\n",
       "    └── 'c' --> tensor([[[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "                \n",
       "                        [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "                \n",
       "                        [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "                \n",
       "                        [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "                \n",
       "                        [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "                \n",
       "                        [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "                \n",
       "                        [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "                \n",
       "                        [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                         [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                         [ 1.3391,  0.2162, -0.1738,  0.3983]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:18.449056Z",
     "iopub.status.busy": "2023-05-26T07:24:18.447672Z",
     "iopub.status.idle": "2023-05-26T07:24:21.193469Z",
     "shell.execute_reply": "2023-05-26T07:24:21.192669Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.7 µs ± 73.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:21.197792Z",
     "iopub.status.busy": "2023-05-26T07:24:21.197259Z",
     "iopub.status.idle": "2023-05-26T07:24:21.206477Z",
     "shell.execute_reply": "2023-05-26T07:24:21.205796Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f161b017d90>\n",
       "├── 'a' --> tensor([[-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414],\n",
       "│                   [-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414],\n",
       "│                   [-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414],\n",
       "│                   [-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414],\n",
       "│                   [-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414],\n",
       "│                   [-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414],\n",
       "│                   [-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414],\n",
       "│                   [-2.0549,  1.7257,  0.0927],\n",
       "│                   [-0.4926,  1.2963, -0.6414]])\n",
       "└── 'x' --> <FastTreeValue 0x7f161c058c70>\n",
       "    └── 'c' --> tensor([[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                        [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                        [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                        [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                        [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                        [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                        [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                        [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                        [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                        [ 1.3391,  0.2162, -0.1738,  0.3983]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:21.209483Z",
     "iopub.status.busy": "2023-05-26T07:24:21.209233Z",
     "iopub.status.idle": "2023-05-26T07:24:23.739244Z",
     "shell.execute_reply": "2023-05-26T07:24:23.738429Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.1 µs ± 63.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:23.743030Z",
     "iopub.status.busy": "2023-05-26T07:24:23.742535Z",
     "iopub.status.idle": "2023-05-26T07:24:29.106318Z",
     "shell.execute_reply": "2023-05-26T07:24:29.105625Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66 µs ± 79.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:29.109989Z",
     "iopub.status.busy": "2023-05-26T07:24:29.109465Z",
     "iopub.status.idle": "2023-05-26T07:24:29.117781Z",
     "shell.execute_reply": "2023-05-26T07:24:29.117030Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]],\n",
       "       \n",
       "               [[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]],\n",
       "       \n",
       "               [[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]],\n",
       "       \n",
       "               [[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]],\n",
       "       \n",
       "               [[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]],\n",
       "       \n",
       "               [[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]],\n",
       "       \n",
       "               [[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]],\n",
       "       \n",
       "               [[-2.0549,  1.7257,  0.0927],\n",
       "                [-0.4926,  1.2963, -0.6414]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "              \n",
       "                      [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "              \n",
       "                      [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "              \n",
       "                      [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "              \n",
       "                      [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "              \n",
       "                      [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "              \n",
       "                      [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]],\n",
       "              \n",
       "                      [[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                       [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                       [ 1.3391,  0.2162, -0.1738,  0.3983]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:29.121290Z",
     "iopub.status.busy": "2023-05-26T07:24:29.120699Z",
     "iopub.status.idle": "2023-05-26T07:24:35.583038Z",
     "shell.execute_reply": "2023-05-26T07:24:35.582281Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.5 µs ± 608 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:35.586768Z",
     "iopub.status.busy": "2023-05-26T07:24:35.586043Z",
     "iopub.status.idle": "2023-05-26T07:24:35.594059Z",
     "shell.execute_reply": "2023-05-26T07:24:35.593311Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414],\n",
       "               [-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414],\n",
       "               [-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414],\n",
       "               [-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414],\n",
       "               [-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414],\n",
       "               [-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414],\n",
       "               [-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414],\n",
       "               [-2.0549,  1.7257,  0.0927],\n",
       "               [-0.4926,  1.2963, -0.6414]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                      [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                      [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                      [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                      [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                      [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                      [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983],\n",
       "                      [-1.8859, -0.2668,  2.0962, -0.6071],\n",
       "                      [-1.3886,  1.3526, -0.6392, -2.0611],\n",
       "                      [ 1.3391,  0.2162, -0.1738,  0.3983]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:35.597432Z",
     "iopub.status.busy": "2023-05-26T07:24:35.596839Z",
     "iopub.status.idle": "2023-05-26T07:24:47.615406Z",
     "shell.execute_reply": "2023-05-26T07:24:47.614627Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148 µs ± 294 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:24:47.619180Z",
     "iopub.status.busy": "2023-05-26T07:24:47.618753Z",
     "iopub.status.idle": "2023-05-26T07:24:50.427706Z",
     "shell.execute_reply": "2023-05-26T07:24:50.426193Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "345 µs ± 2.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
