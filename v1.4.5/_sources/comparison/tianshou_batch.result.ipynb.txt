{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:28.197246Z",
     "iopub.status.busy": "2023-02-26T15:41:28.196805Z",
     "iopub.status.idle": "2023-02-26T15:41:29.149393Z",
     "shell.execute_reply": "2023-02-26T15:41:29.148642Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:29.153294Z",
     "iopub.status.busy": "2023-02-26T15:41:29.152957Z",
     "iopub.status.idle": "2023-02-26T15:41:29.187203Z",
     "shell.execute_reply": "2023-02-26T15:41:29.186548Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:29.190440Z",
     "iopub.status.busy": "2023-02-26T15:41:29.190013Z",
     "iopub.status.idle": "2023-02-26T15:41:29.199703Z",
     "shell.execute_reply": "2023-02-26T15:41:29.198929Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2e4cc22fa0>\n",
       "├── 'a' --> tensor([[ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2e4cc15220>\n",
       "    └── 'c' --> tensor([[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:29.202438Z",
     "iopub.status.busy": "2023-02-26T15:41:29.202089Z",
     "iopub.status.idle": "2023-02-26T15:41:29.208238Z",
     "shell.execute_reply": "2023-02-26T15:41:29.207645Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3878, -0.6174,  0.5047],\n",
       "        [ 0.3918,  0.7357, -0.3302]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:29.210980Z",
     "iopub.status.busy": "2023-02-26T15:41:29.210456Z",
     "iopub.status.idle": "2023-02-26T15:41:34.708306Z",
     "shell.execute_reply": "2023-02-26T15:41:34.707660Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.7 ns ± 0.0667 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:34.711313Z",
     "iopub.status.busy": "2023-02-26T15:41:34.710840Z",
     "iopub.status.idle": "2023-02-26T15:41:34.716713Z",
     "shell.execute_reply": "2023-02-26T15:41:34.716166Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2e4cc22fa0>\n",
       "├── 'a' --> tensor([[-1.6727, -0.3736, -1.7035],\n",
       "│                   [ 0.6524, -0.0887, -0.5390]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2e4cc15220>\n",
       "    └── 'c' --> tensor([[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:34.719261Z",
     "iopub.status.busy": "2023-02-26T15:41:34.718828Z",
     "iopub.status.idle": "2023-02-26T15:41:40.430076Z",
     "shell.execute_reply": "2023-02-26T15:41:40.429210Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.3 ns ± 0.257 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:40.433390Z",
     "iopub.status.busy": "2023-02-26T15:41:40.432981Z",
     "iopub.status.idle": "2023-02-26T15:41:40.789693Z",
     "shell.execute_reply": "2023-02-26T15:41:40.788316Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:40.793755Z",
     "iopub.status.busy": "2023-02-26T15:41:40.793001Z",
     "iopub.status.idle": "2023-02-26T15:41:40.800152Z",
     "shell.execute_reply": "2023-02-26T15:41:40.799132Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:40.802912Z",
     "iopub.status.busy": "2023-02-26T15:41:40.802479Z",
     "iopub.status.idle": "2023-02-26T15:41:40.807223Z",
     "shell.execute_reply": "2023-02-26T15:41:40.806547Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3878, -0.6174,  0.5047],\n",
       "        [ 0.3918,  0.7357, -0.3302]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:40.810116Z",
     "iopub.status.busy": "2023-02-26T15:41:40.809686Z",
     "iopub.status.idle": "2023-02-26T15:41:45.697257Z",
     "shell.execute_reply": "2023-02-26T15:41:45.696405Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.3 ns ± 0.0173 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:45.700729Z",
     "iopub.status.busy": "2023-02-26T15:41:45.700346Z",
     "iopub.status.idle": "2023-02-26T15:41:45.706593Z",
     "shell.execute_reply": "2023-02-26T15:41:45.705915Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4766, -1.2001, -0.9965],\n",
       "               [-1.0203,  0.8614,  0.6661]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:45.709583Z",
     "iopub.status.busy": "2023-02-26T15:41:45.708980Z",
     "iopub.status.idle": "2023-02-26T15:41:49.715587Z",
     "shell.execute_reply": "2023-02-26T15:41:49.714729Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "493 ns ± 0.188 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:49.719368Z",
     "iopub.status.busy": "2023-02-26T15:41:49.718723Z",
     "iopub.status.idle": "2023-02-26T15:41:56.375502Z",
     "shell.execute_reply": "2023-02-26T15:41:56.374700Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "821 ns ± 0.954 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:41:56.378944Z",
     "iopub.status.busy": "2023-02-26T15:41:56.378463Z",
     "iopub.status.idle": "2023-02-26T15:42:05.071250Z",
     "shell.execute_reply": "2023-02-26T15:42:05.070388Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 89 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:05.075293Z",
     "iopub.status.busy": "2023-02-26T15:42:05.074677Z",
     "iopub.status.idle": "2023-02-26T15:42:05.079099Z",
     "shell.execute_reply": "2023-02-26T15:42:05.078389Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:05.082266Z",
     "iopub.status.busy": "2023-02-26T15:42:05.081898Z",
     "iopub.status.idle": "2023-02-26T15:42:16.750658Z",
     "shell.execute_reply": "2023-02-26T15:42:16.749894Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 338 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:16.754080Z",
     "iopub.status.busy": "2023-02-26T15:42:16.753824Z",
     "iopub.status.idle": "2023-02-26T15:42:28.456418Z",
     "shell.execute_reply": "2023-02-26T15:42:28.455615Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 609 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:28.459537Z",
     "iopub.status.busy": "2023-02-26T15:42:28.459292Z",
     "iopub.status.idle": "2023-02-26T15:42:28.463551Z",
     "shell.execute_reply": "2023-02-26T15:42:28.462930Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:28.466291Z",
     "iopub.status.busy": "2023-02-26T15:42:28.466062Z",
     "iopub.status.idle": "2023-02-26T15:42:28.473253Z",
     "shell.execute_reply": "2023-02-26T15:42:28.472568Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2d9f88b790>\n",
       "├── 'a' --> tensor([[[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]],\n",
       "│           \n",
       "│                   [[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]],\n",
       "│           \n",
       "│                   [[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]],\n",
       "│           \n",
       "│                   [[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]],\n",
       "│           \n",
       "│                   [[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]],\n",
       "│           \n",
       "│                   [[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]],\n",
       "│           \n",
       "│                   [[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]],\n",
       "│           \n",
       "│                   [[ 0.3878, -0.6174,  0.5047],\n",
       "│                    [ 0.3918,  0.7357, -0.3302]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2d9f88b130>\n",
       "    └── 'c' --> tensor([[[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "                \n",
       "                        [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "                \n",
       "                        [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "                \n",
       "                        [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "                \n",
       "                        [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "                \n",
       "                        [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "                \n",
       "                        [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "                \n",
       "                        [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                         [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                         [ 1.9699, -0.1494,  0.3028, -1.6403]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:28.476018Z",
     "iopub.status.busy": "2023-02-26T15:42:28.475413Z",
     "iopub.status.idle": "2023-02-26T15:42:31.093134Z",
     "shell.execute_reply": "2023-02-26T15:42:31.092284Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.2 µs ± 47.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:31.096518Z",
     "iopub.status.busy": "2023-02-26T15:42:31.096136Z",
     "iopub.status.idle": "2023-02-26T15:42:31.104340Z",
     "shell.execute_reply": "2023-02-26T15:42:31.103716Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2e4cc8fe50>\n",
       "├── 'a' --> tensor([[ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302],\n",
       "│                   [ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302],\n",
       "│                   [ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302],\n",
       "│                   [ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302],\n",
       "│                   [ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302],\n",
       "│                   [ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302],\n",
       "│                   [ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302],\n",
       "│                   [ 0.3878, -0.6174,  0.5047],\n",
       "│                   [ 0.3918,  0.7357, -0.3302]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2e4cc8fa30>\n",
       "    └── 'c' --> tensor([[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                        [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                        [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                        [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                        [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                        [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                        [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                        [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                        [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                        [ 1.9699, -0.1494,  0.3028, -1.6403]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:31.107284Z",
     "iopub.status.busy": "2023-02-26T15:42:31.106939Z",
     "iopub.status.idle": "2023-02-26T15:42:33.533039Z",
     "shell.execute_reply": "2023-02-26T15:42:33.531893Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.8 µs ± 59.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:33.536138Z",
     "iopub.status.busy": "2023-02-26T15:42:33.535753Z",
     "iopub.status.idle": "2023-02-26T15:42:38.086845Z",
     "shell.execute_reply": "2023-02-26T15:42:38.085985Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.9 µs ± 113 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:38.090227Z",
     "iopub.status.busy": "2023-02-26T15:42:38.089828Z",
     "iopub.status.idle": "2023-02-26T15:42:38.098403Z",
     "shell.execute_reply": "2023-02-26T15:42:38.097772Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "              \n",
       "                      [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "              \n",
       "                      [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "              \n",
       "                      [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "              \n",
       "                      [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "              \n",
       "                      [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "              \n",
       "                      [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]],\n",
       "              \n",
       "                      [[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                       [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                       [ 1.9699, -0.1494,  0.3028, -1.6403]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]],\n",
       "       \n",
       "               [[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]],\n",
       "       \n",
       "               [[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]],\n",
       "       \n",
       "               [[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]],\n",
       "       \n",
       "               [[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]],\n",
       "       \n",
       "               [[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]],\n",
       "       \n",
       "               [[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]],\n",
       "       \n",
       "               [[ 0.3878, -0.6174,  0.5047],\n",
       "                [ 0.3918,  0.7357, -0.3302]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:38.101675Z",
     "iopub.status.busy": "2023-02-26T15:42:38.100994Z",
     "iopub.status.idle": "2023-02-26T15:42:44.376339Z",
     "shell.execute_reply": "2023-02-26T15:42:44.375487Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.2 µs ± 136 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:44.379681Z",
     "iopub.status.busy": "2023-02-26T15:42:44.379204Z",
     "iopub.status.idle": "2023-02-26T15:42:44.387655Z",
     "shell.execute_reply": "2023-02-26T15:42:44.386400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                      [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                      [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                      [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                      [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                      [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                      [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403],\n",
       "                      [-0.1744, -1.9221,  0.5118,  0.4322],\n",
       "                      [ 0.8708, -0.2826, -1.7390,  1.3074],\n",
       "                      [ 1.9699, -0.1494,  0.3028, -1.6403]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302],\n",
       "               [ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302],\n",
       "               [ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302],\n",
       "               [ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302],\n",
       "               [ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302],\n",
       "               [ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302],\n",
       "               [ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302],\n",
       "               [ 0.3878, -0.6174,  0.5047],\n",
       "               [ 0.3918,  0.7357, -0.3302]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:44.390560Z",
     "iopub.status.busy": "2023-02-26T15:42:44.390212Z",
     "iopub.status.idle": "2023-02-26T15:42:56.043695Z",
     "shell.execute_reply": "2023-02-26T15:42:56.042657Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 450 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:42:56.046998Z",
     "iopub.status.busy": "2023-02-26T15:42:56.046598Z",
     "iopub.status.idle": "2023-02-26T15:42:58.662851Z",
     "shell.execute_reply": "2023-02-26T15:42:58.662094Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "322 µs ± 915 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
