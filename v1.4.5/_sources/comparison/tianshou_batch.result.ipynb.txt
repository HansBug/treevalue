{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:10.986051Z",
     "iopub.status.busy": "2023-04-16T14:37:10.985678Z",
     "iopub.status.idle": "2023-04-16T14:37:12.257284Z",
     "shell.execute_reply": "2023-04-16T14:37:12.256622Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:12.260663Z",
     "iopub.status.busy": "2023-04-16T14:37:12.260339Z",
     "iopub.status.idle": "2023-04-16T14:37:12.287862Z",
     "shell.execute_reply": "2023-04-16T14:37:12.286905Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:12.290746Z",
     "iopub.status.busy": "2023-04-16T14:37:12.290236Z",
     "iopub.status.idle": "2023-04-16T14:37:12.300543Z",
     "shell.execute_reply": "2023-04-16T14:37:12.299633Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f16e02616d0>\n",
       "├── 'a' --> tensor([[ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692]])\n",
       "└── 'x' --> <FastTreeValue 0x7f16e0261d30>\n",
       "    └── 'c' --> tensor([[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:12.303501Z",
     "iopub.status.busy": "2023-04-16T14:37:12.303177Z",
     "iopub.status.idle": "2023-04-16T14:37:12.309233Z",
     "shell.execute_reply": "2023-04-16T14:37:12.308640Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0305, -1.0333,  1.0170],\n",
       "        [-0.8545, -0.7049, -0.4692]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:12.312252Z",
     "iopub.status.busy": "2023-04-16T14:37:12.311788Z",
     "iopub.status.idle": "2023-04-16T14:37:17.825663Z",
     "shell.execute_reply": "2023-04-16T14:37:17.824697Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.6 ns ± 0.0506 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:17.829032Z",
     "iopub.status.busy": "2023-04-16T14:37:17.828684Z",
     "iopub.status.idle": "2023-04-16T14:37:17.836061Z",
     "shell.execute_reply": "2023-04-16T14:37:17.835469Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f16e02616d0>\n",
       "├── 'a' --> tensor([[ 0.5861, -0.5586, -1.0250],\n",
       "│                   [ 0.5506,  1.5292,  0.9148]])\n",
       "└── 'x' --> <FastTreeValue 0x7f16e0261d30>\n",
       "    └── 'c' --> tensor([[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:17.838751Z",
     "iopub.status.busy": "2023-04-16T14:37:17.838546Z",
     "iopub.status.idle": "2023-04-16T14:37:22.945535Z",
     "shell.execute_reply": "2023-04-16T14:37:22.944578Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.4 ns ± 0.0489 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:22.948919Z",
     "iopub.status.busy": "2023-04-16T14:37:22.948569Z",
     "iopub.status.idle": "2023-04-16T14:37:23.296180Z",
     "shell.execute_reply": "2023-04-16T14:37:23.295529Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:23.299600Z",
     "iopub.status.busy": "2023-04-16T14:37:23.299288Z",
     "iopub.status.idle": "2023-04-16T14:37:23.306459Z",
     "shell.execute_reply": "2023-04-16T14:37:23.305884Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:23.309562Z",
     "iopub.status.busy": "2023-04-16T14:37:23.309240Z",
     "iopub.status.idle": "2023-04-16T14:37:23.315554Z",
     "shell.execute_reply": "2023-04-16T14:37:23.314670Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0305, -1.0333,  1.0170],\n",
       "        [-0.8545, -0.7049, -0.4692]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:23.318138Z",
     "iopub.status.busy": "2023-04-16T14:37:23.317800Z",
     "iopub.status.idle": "2023-04-16T14:37:27.915977Z",
     "shell.execute_reply": "2023-04-16T14:37:27.915307Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.9 ns ± 0.0209 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:27.919263Z",
     "iopub.status.busy": "2023-04-16T14:37:27.918916Z",
     "iopub.status.idle": "2023-04-16T14:37:27.925620Z",
     "shell.execute_reply": "2023-04-16T14:37:27.925043Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2535, -1.4704, -0.4731],\n",
       "               [-0.7987, -0.1173, -0.5021]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:27.928771Z",
     "iopub.status.busy": "2023-04-16T14:37:27.928244Z",
     "iopub.status.idle": "2023-04-16T14:37:31.871125Z",
     "shell.execute_reply": "2023-04-16T14:37:31.870360Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "486 ns ± 0.381 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:31.874659Z",
     "iopub.status.busy": "2023-04-16T14:37:31.874068Z",
     "iopub.status.idle": "2023-04-16T14:37:38.481840Z",
     "shell.execute_reply": "2023-04-16T14:37:38.481250Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "814 ns ± 0.817 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:38.484970Z",
     "iopub.status.busy": "2023-04-16T14:37:38.484624Z",
     "iopub.status.idle": "2023-04-16T14:37:47.907407Z",
     "shell.execute_reply": "2023-04-16T14:37:47.906410Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 29.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:47.910925Z",
     "iopub.status.busy": "2023-04-16T14:37:47.910575Z",
     "iopub.status.idle": "2023-04-16T14:37:47.915686Z",
     "shell.execute_reply": "2023-04-16T14:37:47.914319Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:47.918378Z",
     "iopub.status.busy": "2023-04-16T14:37:47.918051Z",
     "iopub.status.idle": "2023-04-16T14:37:59.045987Z",
     "shell.execute_reply": "2023-04-16T14:37:59.045419Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 847 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:37:59.049695Z",
     "iopub.status.busy": "2023-04-16T14:37:59.049007Z",
     "iopub.status.idle": "2023-04-16T14:38:10.346246Z",
     "shell.execute_reply": "2023-04-16T14:38:10.345573Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 668 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:10.349722Z",
     "iopub.status.busy": "2023-04-16T14:38:10.349396Z",
     "iopub.status.idle": "2023-04-16T14:38:10.353767Z",
     "shell.execute_reply": "2023-04-16T14:38:10.353243Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:10.356408Z",
     "iopub.status.busy": "2023-04-16T14:38:10.356024Z",
     "iopub.status.idle": "2023-04-16T14:38:10.362934Z",
     "shell.execute_reply": "2023-04-16T14:38:10.362406Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f161680c220>\n",
       "├── 'a' --> tensor([[[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]],\n",
       "│           \n",
       "│                   [[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]],\n",
       "│           \n",
       "│                   [[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]],\n",
       "│           \n",
       "│                   [[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]],\n",
       "│           \n",
       "│                   [[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]],\n",
       "│           \n",
       "│                   [[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]],\n",
       "│           \n",
       "│                   [[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]],\n",
       "│           \n",
       "│                   [[ 0.0305, -1.0333,  1.0170],\n",
       "│                    [-0.8545, -0.7049, -0.4692]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f161680c430>\n",
       "    └── 'c' --> tensor([[[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "                \n",
       "                        [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "                \n",
       "                        [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "                \n",
       "                        [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "                \n",
       "                        [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "                \n",
       "                        [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "                \n",
       "                        [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "                \n",
       "                        [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                         [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                         [-0.4675,  0.6998, -0.1782,  0.9617]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:10.365825Z",
     "iopub.status.busy": "2023-04-16T14:38:10.365423Z",
     "iopub.status.idle": "2023-04-16T14:38:13.130259Z",
     "shell.execute_reply": "2023-04-16T14:38:13.129038Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34 µs ± 32.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:13.133428Z",
     "iopub.status.busy": "2023-04-16T14:38:13.133207Z",
     "iopub.status.idle": "2023-04-16T14:38:13.140304Z",
     "shell.execute_reply": "2023-04-16T14:38:13.139647Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f161680c100>\n",
       "├── 'a' --> tensor([[ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692],\n",
       "│                   [ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692],\n",
       "│                   [ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692],\n",
       "│                   [ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692],\n",
       "│                   [ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692],\n",
       "│                   [ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692],\n",
       "│                   [ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692],\n",
       "│                   [ 0.0305, -1.0333,  1.0170],\n",
       "│                   [-0.8545, -0.7049, -0.4692]])\n",
       "└── 'x' --> <FastTreeValue 0x7f161680cbe0>\n",
       "    └── 'c' --> tensor([[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                        [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                        [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                        [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                        [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                        [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                        [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                        [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                        [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                        [-0.4675,  0.6998, -0.1782,  0.9617]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:13.143250Z",
     "iopub.status.busy": "2023-04-16T14:38:13.143043Z",
     "iopub.status.idle": "2023-04-16T14:38:15.682152Z",
     "shell.execute_reply": "2023-04-16T14:38:15.681410Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.2 µs ± 101 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:15.685791Z",
     "iopub.status.busy": "2023-04-16T14:38:15.685437Z",
     "iopub.status.idle": "2023-04-16T14:38:21.174319Z",
     "shell.execute_reply": "2023-04-16T14:38:21.173608Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.5 µs ± 66.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:21.177300Z",
     "iopub.status.busy": "2023-04-16T14:38:21.176946Z",
     "iopub.status.idle": "2023-04-16T14:38:21.184301Z",
     "shell.execute_reply": "2023-04-16T14:38:21.183663Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]],\n",
       "       \n",
       "               [[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]],\n",
       "       \n",
       "               [[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]],\n",
       "       \n",
       "               [[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]],\n",
       "       \n",
       "               [[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]],\n",
       "       \n",
       "               [[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]],\n",
       "       \n",
       "               [[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]],\n",
       "       \n",
       "               [[ 0.0305, -1.0333,  1.0170],\n",
       "                [-0.8545, -0.7049, -0.4692]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "              \n",
       "                      [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "              \n",
       "                      [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "              \n",
       "                      [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "              \n",
       "                      [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "              \n",
       "                      [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "              \n",
       "                      [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]],\n",
       "              \n",
       "                      [[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                       [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                       [-0.4675,  0.6998, -0.1782,  0.9617]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:21.187144Z",
     "iopub.status.busy": "2023-04-16T14:38:21.186638Z",
     "iopub.status.idle": "2023-04-16T14:38:27.660845Z",
     "shell.execute_reply": "2023-04-16T14:38:27.659762Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.7 µs ± 65.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:27.664261Z",
     "iopub.status.busy": "2023-04-16T14:38:27.663900Z",
     "iopub.status.idle": "2023-04-16T14:38:27.672521Z",
     "shell.execute_reply": "2023-04-16T14:38:27.671186Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692],\n",
       "               [ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692],\n",
       "               [ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692],\n",
       "               [ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692],\n",
       "               [ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692],\n",
       "               [ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692],\n",
       "               [ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692],\n",
       "               [ 0.0305, -1.0333,  1.0170],\n",
       "               [-0.8545, -0.7049, -0.4692]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                      [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                      [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                      [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                      [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                      [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                      [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617],\n",
       "                      [-2.4836,  0.0718, -1.8319, -1.7056],\n",
       "                      [ 1.1090, -1.0655,  0.1586, -0.2887],\n",
       "                      [-0.4675,  0.6998, -0.1782,  0.9617]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:27.675490Z",
     "iopub.status.busy": "2023-04-16T14:38:27.675173Z",
     "iopub.status.idle": "2023-04-16T14:38:39.545796Z",
     "shell.execute_reply": "2023-04-16T14:38:39.544751Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 314 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-16T14:38:39.549485Z",
     "iopub.status.busy": "2023-04-16T14:38:39.548939Z",
     "iopub.status.idle": "2023-04-16T14:38:42.090536Z",
     "shell.execute_reply": "2023-04-16T14:38:42.089989Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 1.93 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
