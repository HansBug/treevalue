{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:37.871494Z",
     "iopub.status.busy": "2023-02-26T14:19:37.870953Z",
     "iopub.status.idle": "2023-02-26T14:19:38.958594Z",
     "shell.execute_reply": "2023-02-26T14:19:38.957647Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:38.962559Z",
     "iopub.status.busy": "2023-02-26T14:19:38.962247Z",
     "iopub.status.idle": "2023-02-26T14:19:39.001506Z",
     "shell.execute_reply": "2023-02-26T14:19:39.000331Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:39.004426Z",
     "iopub.status.busy": "2023-02-26T14:19:39.004131Z",
     "iopub.status.idle": "2023-02-26T14:19:39.016544Z",
     "shell.execute_reply": "2023-02-26T14:19:39.015678Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f59d0c615b0>\n",
       "├── 'a' --> tensor([[ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651]])\n",
       "└── 'x' --> <FastTreeValue 0x7f59d0c61970>\n",
       "    └── 'c' --> tensor([[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:39.020667Z",
     "iopub.status.busy": "2023-02-26T14:19:39.020400Z",
     "iopub.status.idle": "2023-02-26T14:19:39.028365Z",
     "shell.execute_reply": "2023-02-26T14:19:39.027303Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4872, -0.6079, -0.6435],\n",
       "        [-0.2149, -0.1676, -1.4651]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:39.031885Z",
     "iopub.status.busy": "2023-02-26T14:19:39.031574Z",
     "iopub.status.idle": "2023-02-26T14:19:44.340414Z",
     "shell.execute_reply": "2023-02-26T14:19:44.339500Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.4 ns ± 0.807 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:44.343708Z",
     "iopub.status.busy": "2023-02-26T14:19:44.343243Z",
     "iopub.status.idle": "2023-02-26T14:19:44.351684Z",
     "shell.execute_reply": "2023-02-26T14:19:44.350674Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f59d0c615b0>\n",
       "├── 'a' --> tensor([[ 0.7945, -0.2290,  1.4893],\n",
       "│                   [ 0.6284, -0.7447,  2.5461]])\n",
       "└── 'x' --> <FastTreeValue 0x7f59d0c61970>\n",
       "    └── 'c' --> tensor([[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:44.355097Z",
     "iopub.status.busy": "2023-02-26T14:19:44.354579Z",
     "iopub.status.idle": "2023-02-26T14:19:50.019884Z",
     "shell.execute_reply": "2023-02-26T14:19:50.018933Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.4 ns ± 1.04 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:50.023567Z",
     "iopub.status.busy": "2023-02-26T14:19:50.023285Z",
     "iopub.status.idle": "2023-02-26T14:19:50.431319Z",
     "shell.execute_reply": "2023-02-26T14:19:50.430209Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:50.435347Z",
     "iopub.status.busy": "2023-02-26T14:19:50.434706Z",
     "iopub.status.idle": "2023-02-26T14:19:50.444515Z",
     "shell.execute_reply": "2023-02-26T14:19:50.443275Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:50.448063Z",
     "iopub.status.busy": "2023-02-26T14:19:50.447573Z",
     "iopub.status.idle": "2023-02-26T14:19:50.455498Z",
     "shell.execute_reply": "2023-02-26T14:19:50.454463Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4872, -0.6079, -0.6435],\n",
       "        [-0.2149, -0.1676, -1.4651]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:50.458930Z",
     "iopub.status.busy": "2023-02-26T14:19:50.458619Z",
     "iopub.status.idle": "2023-02-26T14:19:56.217747Z",
     "shell.execute_reply": "2023-02-26T14:19:56.216725Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71 ns ± 0.666 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:56.221630Z",
     "iopub.status.busy": "2023-02-26T14:19:56.221214Z",
     "iopub.status.idle": "2023-02-26T14:19:56.229728Z",
     "shell.execute_reply": "2023-02-26T14:19:56.228505Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6403, -0.3097, -0.2220],\n",
       "               [ 0.0420, -0.6984,  0.3275]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:19:56.233017Z",
     "iopub.status.busy": "2023-02-26T14:19:56.232534Z",
     "iopub.status.idle": "2023-02-26T14:20:00.938251Z",
     "shell.execute_reply": "2023-02-26T14:20:00.937259Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "578 ns ± 15 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:00.941789Z",
     "iopub.status.busy": "2023-02-26T14:20:00.941482Z",
     "iopub.status.idle": "2023-02-26T14:20:08.389140Z",
     "shell.execute_reply": "2023-02-26T14:20:08.388223Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "914 ns ± 8.39 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:08.392722Z",
     "iopub.status.busy": "2023-02-26T14:20:08.392284Z",
     "iopub.status.idle": "2023-02-26T14:20:18.865312Z",
     "shell.execute_reply": "2023-02-26T14:20:18.864248Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.9 µs ± 174 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:18.869074Z",
     "iopub.status.busy": "2023-02-26T14:20:18.868365Z",
     "iopub.status.idle": "2023-02-26T14:20:18.872491Z",
     "shell.execute_reply": "2023-02-26T14:20:18.871653Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:18.875797Z",
     "iopub.status.busy": "2023-02-26T14:20:18.875303Z",
     "iopub.status.idle": "2023-02-26T14:20:21.072208Z",
     "shell.execute_reply": "2023-02-26T14:20:21.071317Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "270 µs ± 9.06 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:21.075553Z",
     "iopub.status.busy": "2023-02-26T14:20:21.075123Z",
     "iopub.status.idle": "2023-02-26T14:20:23.217293Z",
     "shell.execute_reply": "2023-02-26T14:20:23.216416Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "261 µs ± 7.68 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:23.220849Z",
     "iopub.status.busy": "2023-02-26T14:20:23.220358Z",
     "iopub.status.idle": "2023-02-26T14:20:23.224282Z",
     "shell.execute_reply": "2023-02-26T14:20:23.223557Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:23.227705Z",
     "iopub.status.busy": "2023-02-26T14:20:23.227155Z",
     "iopub.status.idle": "2023-02-26T14:20:23.236185Z",
     "shell.execute_reply": "2023-02-26T14:20:23.235249Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5924943fd0>\n",
       "├── 'a' --> tensor([[[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]],\n",
       "│           \n",
       "│                   [[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]],\n",
       "│           \n",
       "│                   [[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]],\n",
       "│           \n",
       "│                   [[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]],\n",
       "│           \n",
       "│                   [[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]],\n",
       "│           \n",
       "│                   [[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]],\n",
       "│           \n",
       "│                   [[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]],\n",
       "│           \n",
       "│                   [[ 0.4872, -0.6079, -0.6435],\n",
       "│                    [-0.2149, -0.1676, -1.4651]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5924943f70>\n",
       "    └── 'c' --> tensor([[[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "                \n",
       "                        [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "                \n",
       "                        [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "                \n",
       "                        [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "                \n",
       "                        [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "                \n",
       "                        [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "                \n",
       "                        [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "                \n",
       "                        [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                         [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                         [-0.3862,  1.1084, -1.6843, -0.0630]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:23.239336Z",
     "iopub.status.busy": "2023-02-26T14:20:23.238833Z",
     "iopub.status.idle": "2023-02-26T14:20:26.686640Z",
     "shell.execute_reply": "2023-02-26T14:20:26.685587Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.4 µs ± 1.34 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:26.690024Z",
     "iopub.status.busy": "2023-02-26T14:20:26.689732Z",
     "iopub.status.idle": "2023-02-26T14:20:26.699432Z",
     "shell.execute_reply": "2023-02-26T14:20:26.698446Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f59a8147580>\n",
       "├── 'a' --> tensor([[ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651],\n",
       "│                   [ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651],\n",
       "│                   [ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651],\n",
       "│                   [ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651],\n",
       "│                   [ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651],\n",
       "│                   [ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651],\n",
       "│                   [ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651],\n",
       "│                   [ 0.4872, -0.6079, -0.6435],\n",
       "│                   [-0.2149, -0.1676, -1.4651]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5924942f40>\n",
       "    └── 'c' --> tensor([[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                        [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                        [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                        [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                        [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                        [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                        [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                        [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                        [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                        [-0.3862,  1.1084, -1.6843, -0.0630]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:26.703449Z",
     "iopub.status.busy": "2023-02-26T14:20:26.702888Z",
     "iopub.status.idle": "2023-02-26T14:20:29.810743Z",
     "shell.execute_reply": "2023-02-26T14:20:29.809797Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38.3 µs ± 336 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:29.814099Z",
     "iopub.status.busy": "2023-02-26T14:20:29.813824Z",
     "iopub.status.idle": "2023-02-26T14:20:35.692130Z",
     "shell.execute_reply": "2023-02-26T14:20:35.690717Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.1 µs ± 1.36 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:35.696023Z",
     "iopub.status.busy": "2023-02-26T14:20:35.695488Z",
     "iopub.status.idle": "2023-02-26T14:20:35.705732Z",
     "shell.execute_reply": "2023-02-26T14:20:35.704733Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]],\n",
       "       \n",
       "               [[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]],\n",
       "       \n",
       "               [[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]],\n",
       "       \n",
       "               [[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]],\n",
       "       \n",
       "               [[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]],\n",
       "       \n",
       "               [[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]],\n",
       "       \n",
       "               [[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]],\n",
       "       \n",
       "               [[ 0.4872, -0.6079, -0.6435],\n",
       "                [-0.2149, -0.1676, -1.4651]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "              \n",
       "                      [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "              \n",
       "                      [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "              \n",
       "                      [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "              \n",
       "                      [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "              \n",
       "                      [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "              \n",
       "                      [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]],\n",
       "              \n",
       "                      [[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                       [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                       [-0.3862,  1.1084, -1.6843, -0.0630]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:35.709173Z",
     "iopub.status.busy": "2023-02-26T14:20:35.708708Z",
     "iopub.status.idle": "2023-02-26T14:20:43.380877Z",
     "shell.execute_reply": "2023-02-26T14:20:43.379702Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "94.5 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:43.384348Z",
     "iopub.status.busy": "2023-02-26T14:20:43.384072Z",
     "iopub.status.idle": "2023-02-26T14:20:43.397976Z",
     "shell.execute_reply": "2023-02-26T14:20:43.397189Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651],\n",
       "               [ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651],\n",
       "               [ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651],\n",
       "               [ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651],\n",
       "               [ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651],\n",
       "               [ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651],\n",
       "               [ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651],\n",
       "               [ 0.4872, -0.6079, -0.6435],\n",
       "               [-0.2149, -0.1676, -1.4651]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                      [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                      [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                      [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                      [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                      [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                      [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630],\n",
       "                      [-0.2316, -0.2467, -1.6495, -0.1264],\n",
       "                      [-1.1449,  0.6659,  1.7702, -0.0574],\n",
       "                      [-0.3862,  1.1084, -1.6843, -0.0630]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:43.406080Z",
     "iopub.status.busy": "2023-02-26T14:20:43.401224Z",
     "iopub.status.idle": "2023-02-26T14:20:57.156174Z",
     "shell.execute_reply": "2023-02-26T14:20:57.155099Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "170 µs ± 1.93 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:20:57.159816Z",
     "iopub.status.busy": "2023-02-26T14:20:57.159516Z",
     "iopub.status.idle": "2023-02-26T14:21:01.688244Z",
     "shell.execute_reply": "2023-02-26T14:21:01.687427Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "553 µs ± 35 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
