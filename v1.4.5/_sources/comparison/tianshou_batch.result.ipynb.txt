{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:00.767134Z",
     "iopub.status.busy": "2023-03-16T08:20:00.766473Z",
     "iopub.status.idle": "2023-03-16T08:20:02.218351Z",
     "shell.execute_reply": "2023-03-16T08:20:02.217512Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:02.222543Z",
     "iopub.status.busy": "2023-03-16T08:20:02.221938Z",
     "iopub.status.idle": "2023-03-16T08:20:02.251306Z",
     "shell.execute_reply": "2023-03-16T08:20:02.250598Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:02.254765Z",
     "iopub.status.busy": "2023-03-16T08:20:02.254291Z",
     "iopub.status.idle": "2023-03-16T08:20:02.265550Z",
     "shell.execute_reply": "2023-03-16T08:20:02.264913Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fab250e3d30>\n",
       "├── 'a' --> tensor([[ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712]])\n",
       "└── 'x' --> <FastTreeValue 0x7fab250e3040>\n",
       "    └── 'c' --> tensor([[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:02.268550Z",
     "iopub.status.busy": "2023-03-16T08:20:02.268210Z",
     "iopub.status.idle": "2023-03-16T08:20:02.274095Z",
     "shell.execute_reply": "2023-03-16T08:20:02.273487Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.2261, -0.4379,  1.0956],\n",
       "        [-0.7337,  0.8397, -0.5712]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:02.276885Z",
     "iopub.status.busy": "2023-03-16T08:20:02.276532Z",
     "iopub.status.idle": "2023-03-16T08:20:07.938358Z",
     "shell.execute_reply": "2023-03-16T08:20:07.937376Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.7 ns ± 0.0318 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:07.941938Z",
     "iopub.status.busy": "2023-03-16T08:20:07.941327Z",
     "iopub.status.idle": "2023-03-16T08:20:07.949246Z",
     "shell.execute_reply": "2023-03-16T08:20:07.948618Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fab250e3d30>\n",
       "├── 'a' --> tensor([[ 0.8521,  0.3607,  0.4238],\n",
       "│                   [-1.2237, -0.0999, -1.1530]])\n",
       "└── 'x' --> <FastTreeValue 0x7fab250e3040>\n",
       "    └── 'c' --> tensor([[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:07.952149Z",
     "iopub.status.busy": "2023-03-16T08:20:07.951562Z",
     "iopub.status.idle": "2023-03-16T08:20:13.558719Z",
     "shell.execute_reply": "2023-03-16T08:20:13.557810Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.1 ns ± 0.0645 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:13.562456Z",
     "iopub.status.busy": "2023-03-16T08:20:13.562016Z",
     "iopub.status.idle": "2023-03-16T08:20:14.208745Z",
     "shell.execute_reply": "2023-03-16T08:20:14.207967Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:14.212262Z",
     "iopub.status.busy": "2023-03-16T08:20:14.211733Z",
     "iopub.status.idle": "2023-03-16T08:20:14.218686Z",
     "shell.execute_reply": "2023-03-16T08:20:14.218046Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:14.221911Z",
     "iopub.status.busy": "2023-03-16T08:20:14.221320Z",
     "iopub.status.idle": "2023-03-16T08:20:14.227008Z",
     "shell.execute_reply": "2023-03-16T08:20:14.226399Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.2261, -0.4379,  1.0956],\n",
       "        [-0.7337,  0.8397, -0.5712]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:14.235071Z",
     "iopub.status.busy": "2023-03-16T08:20:14.234603Z",
     "iopub.status.idle": "2023-03-16T08:20:18.926723Z",
     "shell.execute_reply": "2023-03-16T08:20:18.925835Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.8 ns ± 0.0709 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:18.930493Z",
     "iopub.status.busy": "2023-03-16T08:20:18.929952Z",
     "iopub.status.idle": "2023-03-16T08:20:18.937045Z",
     "shell.execute_reply": "2023-03-16T08:20:18.936394Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.7730,  2.0081,  1.6305],\n",
       "               [-0.1318, -0.5292, -1.6034]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:18.940218Z",
     "iopub.status.busy": "2023-03-16T08:20:18.939582Z",
     "iopub.status.idle": "2023-03-16T08:20:22.918514Z",
     "shell.execute_reply": "2023-03-16T08:20:22.917647Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "489 ns ± 0.0962 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:22.922452Z",
     "iopub.status.busy": "2023-03-16T08:20:22.921749Z",
     "iopub.status.idle": "2023-03-16T08:20:29.523561Z",
     "shell.execute_reply": "2023-03-16T08:20:29.522687Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "810 ns ± 0.184 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:29.526889Z",
     "iopub.status.busy": "2023-03-16T08:20:29.526451Z",
     "iopub.status.idle": "2023-03-16T08:20:38.380290Z",
     "shell.execute_reply": "2023-03-16T08:20:38.379425Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 23 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:38.383971Z",
     "iopub.status.busy": "2023-03-16T08:20:38.383325Z",
     "iopub.status.idle": "2023-03-16T08:20:38.387261Z",
     "shell.execute_reply": "2023-03-16T08:20:38.386624Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:38.390394Z",
     "iopub.status.busy": "2023-03-16T08:20:38.389886Z",
     "iopub.status.idle": "2023-03-16T08:20:50.245131Z",
     "shell.execute_reply": "2023-03-16T08:20:50.244280Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 743 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:20:50.248391Z",
     "iopub.status.busy": "2023-03-16T08:20:50.247899Z",
     "iopub.status.idle": "2023-03-16T08:21:01.885443Z",
     "shell.execute_reply": "2023-03-16T08:21:01.884644Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 665 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:01.889176Z",
     "iopub.status.busy": "2023-03-16T08:21:01.888547Z",
     "iopub.status.idle": "2023-03-16T08:21:01.892707Z",
     "shell.execute_reply": "2023-03-16T08:21:01.892110Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:01.895381Z",
     "iopub.status.busy": "2023-03-16T08:21:01.894941Z",
     "iopub.status.idle": "2023-03-16T08:21:01.903435Z",
     "shell.execute_reply": "2023-03-16T08:21:01.902820Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fab250f8f70>\n",
       "├── 'a' --> tensor([[[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]],\n",
       "│           \n",
       "│                   [[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]],\n",
       "│           \n",
       "│                   [[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]],\n",
       "│           \n",
       "│                   [[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]],\n",
       "│           \n",
       "│                   [[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]],\n",
       "│           \n",
       "│                   [[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]],\n",
       "│           \n",
       "│                   [[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]],\n",
       "│           \n",
       "│                   [[ 1.2261, -0.4379,  1.0956],\n",
       "│                    [-0.7337,  0.8397, -0.5712]]])\n",
       "└── 'x' --> <FastTreeValue 0x7faa5d311e20>\n",
       "    └── 'c' --> tensor([[[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "                \n",
       "                        [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "                \n",
       "                        [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "                \n",
       "                        [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "                \n",
       "                        [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "                \n",
       "                        [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "                \n",
       "                        [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "                \n",
       "                        [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                         [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                         [ 0.5248,  0.0435, -0.0254, -2.0615]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:01.906313Z",
     "iopub.status.busy": "2023-03-16T08:21:01.905690Z",
     "iopub.status.idle": "2023-03-16T08:21:04.641285Z",
     "shell.execute_reply": "2023-03-16T08:21:04.640413Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.6 µs ± 88.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:04.645030Z",
     "iopub.status.busy": "2023-03-16T08:21:04.644588Z",
     "iopub.status.idle": "2023-03-16T08:21:04.654690Z",
     "shell.execute_reply": "2023-03-16T08:21:04.654008Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7faa4d1e2d90>\n",
       "├── 'a' --> tensor([[ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712],\n",
       "│                   [ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712],\n",
       "│                   [ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712],\n",
       "│                   [ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712],\n",
       "│                   [ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712],\n",
       "│                   [ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712],\n",
       "│                   [ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712],\n",
       "│                   [ 1.2261, -0.4379,  1.0956],\n",
       "│                   [-0.7337,  0.8397, -0.5712]])\n",
       "└── 'x' --> <FastTreeValue 0x7fab2552c3a0>\n",
       "    └── 'c' --> tensor([[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                        [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                        [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                        [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                        [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                        [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                        [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                        [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                        [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                        [ 0.5248,  0.0435, -0.0254, -2.0615]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:04.657746Z",
     "iopub.status.busy": "2023-03-16T08:21:04.657379Z",
     "iopub.status.idle": "2023-03-16T08:21:07.211177Z",
     "shell.execute_reply": "2023-03-16T08:21:07.210320Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 66.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:07.214545Z",
     "iopub.status.busy": "2023-03-16T08:21:07.214098Z",
     "iopub.status.idle": "2023-03-16T08:21:12.817235Z",
     "shell.execute_reply": "2023-03-16T08:21:12.816384Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.9 µs ± 87.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:12.820645Z",
     "iopub.status.busy": "2023-03-16T08:21:12.820202Z",
     "iopub.status.idle": "2023-03-16T08:21:12.829206Z",
     "shell.execute_reply": "2023-03-16T08:21:12.828556Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]],\n",
       "       \n",
       "               [[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]],\n",
       "       \n",
       "               [[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]],\n",
       "       \n",
       "               [[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]],\n",
       "       \n",
       "               [[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]],\n",
       "       \n",
       "               [[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]],\n",
       "       \n",
       "               [[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]],\n",
       "       \n",
       "               [[ 1.2261, -0.4379,  1.0956],\n",
       "                [-0.7337,  0.8397, -0.5712]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "              \n",
       "                      [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "              \n",
       "                      [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "              \n",
       "                      [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "              \n",
       "                      [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "              \n",
       "                      [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "              \n",
       "                      [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]],\n",
       "              \n",
       "                      [[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                       [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                       [ 0.5248,  0.0435, -0.0254, -2.0615]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:12.832128Z",
     "iopub.status.busy": "2023-03-16T08:21:12.831750Z",
     "iopub.status.idle": "2023-03-16T08:21:19.209586Z",
     "shell.execute_reply": "2023-03-16T08:21:19.208724Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.6 µs ± 118 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:19.212882Z",
     "iopub.status.busy": "2023-03-16T08:21:19.212411Z",
     "iopub.status.idle": "2023-03-16T08:21:19.220780Z",
     "shell.execute_reply": "2023-03-16T08:21:19.220141Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712],\n",
       "               [ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712],\n",
       "               [ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712],\n",
       "               [ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712],\n",
       "               [ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712],\n",
       "               [ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712],\n",
       "               [ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712],\n",
       "               [ 1.2261, -0.4379,  1.0956],\n",
       "               [-0.7337,  0.8397, -0.5712]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                      [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                      [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                      [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                      [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                      [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                      [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615],\n",
       "                      [ 0.0143,  0.0952,  1.6115,  1.4137],\n",
       "                      [-1.1223,  0.1957, -0.2791, -0.0747],\n",
       "                      [ 0.5248,  0.0435, -0.0254, -2.0615]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:19.223739Z",
     "iopub.status.busy": "2023-03-16T08:21:19.223151Z",
     "iopub.status.idle": "2023-03-16T08:21:31.267634Z",
     "shell.execute_reply": "2023-03-16T08:21:31.266761Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148 µs ± 285 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-16T08:21:31.270917Z",
     "iopub.status.busy": "2023-03-16T08:21:31.270527Z",
     "iopub.status.idle": "2023-03-16T08:21:33.994024Z",
     "shell.execute_reply": "2023-03-16T08:21:33.992990Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "335 µs ± 1.17 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
