{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:24.380102Z",
     "iopub.status.busy": "2023-02-26T05:00:24.379873Z",
     "iopub.status.idle": "2023-02-26T05:00:25.301483Z",
     "shell.execute_reply": "2023-02-26T05:00:25.300801Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:25.304897Z",
     "iopub.status.busy": "2023-02-26T05:00:25.304316Z",
     "iopub.status.idle": "2023-02-26T05:00:25.337104Z",
     "shell.execute_reply": "2023-02-26T05:00:25.336472Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:25.339773Z",
     "iopub.status.busy": "2023-02-26T05:00:25.339424Z",
     "iopub.status.idle": "2023-02-26T05:00:25.348827Z",
     "shell.execute_reply": "2023-02-26T05:00:25.348245Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7a70cdb850>\n",
       "├── 'a' --> tensor([[ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7a70cd51f0>\n",
       "    └── 'c' --> tensor([[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:25.351457Z",
     "iopub.status.busy": "2023-02-26T05:00:25.351115Z",
     "iopub.status.idle": "2023-02-26T05:00:25.355855Z",
     "shell.execute_reply": "2023-02-26T05:00:25.355207Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9599, -0.2579, -0.9741],\n",
       "        [-1.0019, -0.6747, -1.9603]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:25.358462Z",
     "iopub.status.busy": "2023-02-26T05:00:25.358125Z",
     "iopub.status.idle": "2023-02-26T05:00:30.357971Z",
     "shell.execute_reply": "2023-02-26T05:00:30.357070Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.6 ns ± 0.126 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:30.361106Z",
     "iopub.status.busy": "2023-02-26T05:00:30.360677Z",
     "iopub.status.idle": "2023-02-26T05:00:30.367383Z",
     "shell.execute_reply": "2023-02-26T05:00:30.366796Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7a70cdb850>\n",
       "├── 'a' --> tensor([[-0.3222, -1.7157, -0.7409],\n",
       "│                   [-0.6264,  0.4682,  0.9622]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7a70cd51f0>\n",
       "    └── 'c' --> tensor([[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:30.369879Z",
     "iopub.status.busy": "2023-02-26T05:00:30.369527Z",
     "iopub.status.idle": "2023-02-26T05:00:35.475639Z",
     "shell.execute_reply": "2023-02-26T05:00:35.474922Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.6 ns ± 0.0339 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:35.478548Z",
     "iopub.status.busy": "2023-02-26T05:00:35.478016Z",
     "iopub.status.idle": "2023-02-26T05:00:35.809481Z",
     "shell.execute_reply": "2023-02-26T05:00:35.808809Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:35.812581Z",
     "iopub.status.busy": "2023-02-26T05:00:35.812022Z",
     "iopub.status.idle": "2023-02-26T05:00:35.818234Z",
     "shell.execute_reply": "2023-02-26T05:00:35.817448Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:35.820602Z",
     "iopub.status.busy": "2023-02-26T05:00:35.820382Z",
     "iopub.status.idle": "2023-02-26T05:00:35.825092Z",
     "shell.execute_reply": "2023-02-26T05:00:35.824465Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9599, -0.2579, -0.9741],\n",
       "        [-1.0019, -0.6747, -1.9603]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:35.827658Z",
     "iopub.status.busy": "2023-02-26T05:00:35.827316Z",
     "iopub.status.idle": "2023-02-26T05:00:40.603155Z",
     "shell.execute_reply": "2023-02-26T05:00:40.602431Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.4 ns ± 0.00951 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:40.606501Z",
     "iopub.status.busy": "2023-02-26T05:00:40.605929Z",
     "iopub.status.idle": "2023-02-26T05:00:40.612411Z",
     "shell.execute_reply": "2023-02-26T05:00:40.611829Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.1498,  1.4273,  0.3667],\n",
       "               [ 0.0147, -1.7014,  0.2554]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:40.614912Z",
     "iopub.status.busy": "2023-02-26T05:00:40.614578Z",
     "iopub.status.idle": "2023-02-26T05:00:44.577274Z",
     "shell.execute_reply": "2023-02-26T05:00:44.576590Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.206 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:44.580264Z",
     "iopub.status.busy": "2023-02-26T05:00:44.579888Z",
     "iopub.status.idle": "2023-02-26T05:00:51.410565Z",
     "shell.execute_reply": "2023-02-26T05:00:51.409877Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "841 ns ± 16.1 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:00:51.413626Z",
     "iopub.status.busy": "2023-02-26T05:00:51.413046Z",
     "iopub.status.idle": "2023-02-26T05:01:00.568493Z",
     "shell.execute_reply": "2023-02-26T05:01:00.567816Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 30.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:00.571806Z",
     "iopub.status.busy": "2023-02-26T05:01:00.571305Z",
     "iopub.status.idle": "2023-02-26T05:01:00.575333Z",
     "shell.execute_reply": "2023-02-26T05:01:00.574724Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:00.578865Z",
     "iopub.status.busy": "2023-02-26T05:01:00.577771Z",
     "iopub.status.idle": "2023-02-26T05:01:12.003447Z",
     "shell.execute_reply": "2023-02-26T05:01:12.002884Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 376 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:12.007656Z",
     "iopub.status.busy": "2023-02-26T05:01:12.006451Z",
     "iopub.status.idle": "2023-02-26T05:01:23.481876Z",
     "shell.execute_reply": "2023-02-26T05:01:23.481276Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 326 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:23.485273Z",
     "iopub.status.busy": "2023-02-26T05:01:23.484760Z",
     "iopub.status.idle": "2023-02-26T05:01:23.489182Z",
     "shell.execute_reply": "2023-02-26T05:01:23.488639Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:23.492165Z",
     "iopub.status.busy": "2023-02-26T05:01:23.491758Z",
     "iopub.status.idle": "2023-02-26T05:01:23.499445Z",
     "shell.execute_reply": "2023-02-26T05:01:23.498832Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f79c3968fa0>\n",
       "├── 'a' --> tensor([[[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]],\n",
       "│           \n",
       "│                   [[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]],\n",
       "│           \n",
       "│                   [[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]],\n",
       "│           \n",
       "│                   [[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]],\n",
       "│           \n",
       "│                   [[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]],\n",
       "│           \n",
       "│                   [[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]],\n",
       "│           \n",
       "│                   [[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]],\n",
       "│           \n",
       "│                   [[ 0.9599, -0.2579, -0.9741],\n",
       "│                    [-1.0019, -0.6747, -1.9603]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f79c3968ee0>\n",
       "    └── 'c' --> tensor([[[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "                \n",
       "                        [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "                \n",
       "                        [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "                \n",
       "                        [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "                \n",
       "                        [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "                \n",
       "                        [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "                \n",
       "                        [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "                \n",
       "                        [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                         [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                         [-0.8630,  1.0684, -0.2636, -0.0792]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:23.502015Z",
     "iopub.status.busy": "2023-02-26T05:01:23.501810Z",
     "iopub.status.idle": "2023-02-26T05:01:26.110775Z",
     "shell.execute_reply": "2023-02-26T05:01:26.110027Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 38.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:26.113837Z",
     "iopub.status.busy": "2023-02-26T05:01:26.113243Z",
     "iopub.status.idle": "2023-02-26T05:01:26.121323Z",
     "shell.execute_reply": "2023-02-26T05:01:26.120718Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f79c3f2d370>\n",
       "├── 'a' --> tensor([[ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603],\n",
       "│                   [ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603],\n",
       "│                   [ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603],\n",
       "│                   [ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603],\n",
       "│                   [ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603],\n",
       "│                   [ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603],\n",
       "│                   [ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603],\n",
       "│                   [ 0.9599, -0.2579, -0.9741],\n",
       "│                   [-1.0019, -0.6747, -1.9603]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7a70d0b0a0>\n",
       "    └── 'c' --> tensor([[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                        [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                        [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                        [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                        [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                        [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                        [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                        [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                        [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                        [-0.8630,  1.0684, -0.2636, -0.0792]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:26.123830Z",
     "iopub.status.busy": "2023-02-26T05:01:26.123510Z",
     "iopub.status.idle": "2023-02-26T05:01:28.524657Z",
     "shell.execute_reply": "2023-02-26T05:01:28.524000Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.5 µs ± 41 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:28.527646Z",
     "iopub.status.busy": "2023-02-26T05:01:28.527100Z",
     "iopub.status.idle": "2023-02-26T05:01:33.309821Z",
     "shell.execute_reply": "2023-02-26T05:01:33.309082Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.8 µs ± 75.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:33.312992Z",
     "iopub.status.busy": "2023-02-26T05:01:33.312620Z",
     "iopub.status.idle": "2023-02-26T05:01:33.320574Z",
     "shell.execute_reply": "2023-02-26T05:01:33.319994Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "              \n",
       "                      [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "              \n",
       "                      [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "              \n",
       "                      [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "              \n",
       "                      [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "              \n",
       "                      [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "              \n",
       "                      [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]],\n",
       "              \n",
       "                      [[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                       [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                       [-0.8630,  1.0684, -0.2636, -0.0792]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]],\n",
       "       \n",
       "               [[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]],\n",
       "       \n",
       "               [[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]],\n",
       "       \n",
       "               [[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]],\n",
       "       \n",
       "               [[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]],\n",
       "       \n",
       "               [[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]],\n",
       "       \n",
       "               [[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]],\n",
       "       \n",
       "               [[ 0.9599, -0.2579, -0.9741],\n",
       "                [-1.0019, -0.6747, -1.9603]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:33.323058Z",
     "iopub.status.busy": "2023-02-26T05:01:33.322705Z",
     "iopub.status.idle": "2023-02-26T05:01:39.679858Z",
     "shell.execute_reply": "2023-02-26T05:01:39.679177Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.2 µs ± 112 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:39.682828Z",
     "iopub.status.busy": "2023-02-26T05:01:39.682371Z",
     "iopub.status.idle": "2023-02-26T05:01:39.689830Z",
     "shell.execute_reply": "2023-02-26T05:01:39.689219Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                      [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                      [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                      [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                      [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                      [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                      [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792],\n",
       "                      [-1.3047, -0.5139,  0.5719,  1.4706],\n",
       "                      [-1.2772,  1.4208, -1.3977,  0.1844],\n",
       "                      [-0.8630,  1.0684, -0.2636, -0.0792]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603],\n",
       "               [ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603],\n",
       "               [ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603],\n",
       "               [ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603],\n",
       "               [ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603],\n",
       "               [ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603],\n",
       "               [ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603],\n",
       "               [ 0.9599, -0.2579, -0.9741],\n",
       "               [-1.0019, -0.6747, -1.9603]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:39.692287Z",
     "iopub.status.busy": "2023-02-26T05:01:39.691941Z",
     "iopub.status.idle": "2023-02-26T05:01:51.485422Z",
     "shell.execute_reply": "2023-02-26T05:01:51.484750Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 393 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T05:01:51.488458Z",
     "iopub.status.busy": "2023-02-26T05:01:51.488108Z",
     "iopub.status.idle": "2023-02-26T05:01:53.984812Z",
     "shell.execute_reply": "2023-02-26T05:01:53.984244Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "307 µs ± 5.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
