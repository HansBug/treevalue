{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:16.074660Z",
     "iopub.status.busy": "2023-02-24T07:41:16.074382Z",
     "iopub.status.idle": "2023-02-24T07:41:17.198540Z",
     "shell.execute_reply": "2023-02-24T07:41:17.197548Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:17.202959Z",
     "iopub.status.busy": "2023-02-24T07:41:17.202537Z",
     "iopub.status.idle": "2023-02-24T07:41:17.246003Z",
     "shell.execute_reply": "2023-02-24T07:41:17.245135Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:17.249463Z",
     "iopub.status.busy": "2023-02-24T07:41:17.249193Z",
     "iopub.status.idle": "2023-02-24T07:41:17.261105Z",
     "shell.execute_reply": "2023-02-24T07:41:17.260193Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2340b60fd0>\n",
       "├── 'a' --> tensor([[ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2340b60f70>\n",
       "    └── 'c' --> tensor([[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:17.264633Z",
     "iopub.status.busy": "2023-02-24T07:41:17.264334Z",
     "iopub.status.idle": "2023-02-24T07:41:17.271745Z",
     "shell.execute_reply": "2023-02-24T07:41:17.270959Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8500,  0.6077, -1.0274],\n",
       "        [ 1.7517, -0.3917,  0.0814]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:17.275121Z",
     "iopub.status.busy": "2023-02-24T07:41:17.274610Z",
     "iopub.status.idle": "2023-02-24T07:41:22.513965Z",
     "shell.execute_reply": "2023-02-24T07:41:22.512703Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.5 ns ± 0.716 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:22.517796Z",
     "iopub.status.busy": "2023-02-24T07:41:22.517257Z",
     "iopub.status.idle": "2023-02-24T07:41:22.526484Z",
     "shell.execute_reply": "2023-02-24T07:41:22.525396Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2340b60fd0>\n",
       "├── 'a' --> tensor([[-0.1752, -1.9071, -1.0673],\n",
       "│                   [-1.7437, -0.0749, -0.0083]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2340b60f70>\n",
       "    └── 'c' --> tensor([[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:22.529990Z",
     "iopub.status.busy": "2023-02-24T07:41:22.529628Z",
     "iopub.status.idle": "2023-02-24T07:41:28.153219Z",
     "shell.execute_reply": "2023-02-24T07:41:28.151954Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.8 ns ± 2.7 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:28.157159Z",
     "iopub.status.busy": "2023-02-24T07:41:28.156443Z",
     "iopub.status.idle": "2023-02-24T07:41:28.582947Z",
     "shell.execute_reply": "2023-02-24T07:41:28.581838Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:28.586478Z",
     "iopub.status.busy": "2023-02-24T07:41:28.586172Z",
     "iopub.status.idle": "2023-02-24T07:41:28.595604Z",
     "shell.execute_reply": "2023-02-24T07:41:28.593502Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:28.599673Z",
     "iopub.status.busy": "2023-02-24T07:41:28.599321Z",
     "iopub.status.idle": "2023-02-24T07:41:28.605295Z",
     "shell.execute_reply": "2023-02-24T07:41:28.604487Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8500,  0.6077, -1.0274],\n",
       "        [ 1.7517, -0.3917,  0.0814]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:28.608251Z",
     "iopub.status.busy": "2023-02-24T07:41:28.607958Z",
     "iopub.status.idle": "2023-02-24T07:41:33.474763Z",
     "shell.execute_reply": "2023-02-24T07:41:33.473664Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.2 ns ± 0.819 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:33.479017Z",
     "iopub.status.busy": "2023-02-24T07:41:33.478491Z",
     "iopub.status.idle": "2023-02-24T07:41:33.486662Z",
     "shell.execute_reply": "2023-02-24T07:41:33.485813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4118, -0.1574,  1.4726],\n",
       "               [-0.6531,  1.5940, -0.8428]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:33.490440Z",
     "iopub.status.busy": "2023-02-24T07:41:33.489664Z",
     "iopub.status.idle": "2023-02-24T07:41:37.917787Z",
     "shell.execute_reply": "2023-02-24T07:41:37.916958Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "549 ns ± 17.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:37.921589Z",
     "iopub.status.busy": "2023-02-24T07:41:37.921036Z",
     "iopub.status.idle": "2023-02-24T07:41:45.197146Z",
     "shell.execute_reply": "2023-02-24T07:41:45.196070Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "900 ns ± 26.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:45.200811Z",
     "iopub.status.busy": "2023-02-24T07:41:45.200529Z",
     "iopub.status.idle": "2023-02-24T07:41:54.763076Z",
     "shell.execute_reply": "2023-02-24T07:41:54.762066Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.8 µs ± 246 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:54.766816Z",
     "iopub.status.busy": "2023-02-24T07:41:54.766323Z",
     "iopub.status.idle": "2023-02-24T07:41:54.771333Z",
     "shell.execute_reply": "2023-02-24T07:41:54.770543Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:54.774501Z",
     "iopub.status.busy": "2023-02-24T07:41:54.774033Z",
     "iopub.status.idle": "2023-02-24T07:41:56.945173Z",
     "shell.execute_reply": "2023-02-24T07:41:56.944223Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "267 µs ± 15.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:56.949558Z",
     "iopub.status.busy": "2023-02-24T07:41:56.948902Z",
     "iopub.status.idle": "2023-02-24T07:41:58.846461Z",
     "shell.execute_reply": "2023-02-24T07:41:58.845482Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "232 µs ± 5.13 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:58.849762Z",
     "iopub.status.busy": "2023-02-24T07:41:58.849367Z",
     "iopub.status.idle": "2023-02-24T07:41:58.853333Z",
     "shell.execute_reply": "2023-02-24T07:41:58.852613Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:58.856208Z",
     "iopub.status.busy": "2023-02-24T07:41:58.855784Z",
     "iopub.status.idle": "2023-02-24T07:41:58.863648Z",
     "shell.execute_reply": "2023-02-24T07:41:58.862875Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f229580c460>\n",
       "├── 'a' --> tensor([[[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]],\n",
       "│           \n",
       "│                   [[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]],\n",
       "│           \n",
       "│                   [[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]],\n",
       "│           \n",
       "│                   [[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]],\n",
       "│           \n",
       "│                   [[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]],\n",
       "│           \n",
       "│                   [[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]],\n",
       "│           \n",
       "│                   [[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]],\n",
       "│           \n",
       "│                   [[ 0.8500,  0.6077, -1.0274],\n",
       "│                    [ 1.7517, -0.3917,  0.0814]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f229580c700>\n",
       "    └── 'c' --> tensor([[[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "                \n",
       "                        [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "                \n",
       "                        [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "                \n",
       "                        [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "                \n",
       "                        [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "                \n",
       "                        [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "                \n",
       "                        [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "                \n",
       "                        [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                         [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                         [ 0.9434,  1.6573, -0.0741,  1.9337]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:41:58.866491Z",
     "iopub.status.busy": "2023-02-24T07:41:58.866109Z",
     "iopub.status.idle": "2023-02-24T07:42:02.039647Z",
     "shell.execute_reply": "2023-02-24T07:42:02.038683Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39.2 µs ± 1.33 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:02.042929Z",
     "iopub.status.busy": "2023-02-24T07:42:02.042406Z",
     "iopub.status.idle": "2023-02-24T07:42:02.051164Z",
     "shell.execute_reply": "2023-02-24T07:42:02.050340Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2340b59790>\n",
       "├── 'a' --> tensor([[ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814],\n",
       "│                   [ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814],\n",
       "│                   [ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814],\n",
       "│                   [ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814],\n",
       "│                   [ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814],\n",
       "│                   [ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814],\n",
       "│                   [ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814],\n",
       "│                   [ 0.8500,  0.6077, -1.0274],\n",
       "│                   [ 1.7517, -0.3917,  0.0814]])\n",
       "└── 'x' --> <FastTreeValue 0x7f229c522730>\n",
       "    └── 'c' --> tensor([[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                        [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                        [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                        [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                        [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                        [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                        [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                        [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                        [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                        [ 0.9434,  1.6573, -0.0741,  1.9337]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:02.054580Z",
     "iopub.status.busy": "2023-02-24T07:42:02.053965Z",
     "iopub.status.idle": "2023-02-24T07:42:04.998681Z",
     "shell.execute_reply": "2023-02-24T07:42:04.997278Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.1 µs ± 1.17 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:05.002871Z",
     "iopub.status.busy": "2023-02-24T07:42:05.002524Z",
     "iopub.status.idle": "2023-02-24T07:42:10.729250Z",
     "shell.execute_reply": "2023-02-24T07:42:10.728147Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.5 µs ± 1.64 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:10.733470Z",
     "iopub.status.busy": "2023-02-24T07:42:10.732948Z",
     "iopub.status.idle": "2023-02-24T07:42:10.742962Z",
     "shell.execute_reply": "2023-02-24T07:42:10.742213Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "              \n",
       "                      [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "              \n",
       "                      [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "              \n",
       "                      [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "              \n",
       "                      [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "              \n",
       "                      [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "              \n",
       "                      [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]],\n",
       "              \n",
       "                      [[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                       [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                       [ 0.9434,  1.6573, -0.0741,  1.9337]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]],\n",
       "       \n",
       "               [[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]],\n",
       "       \n",
       "               [[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]],\n",
       "       \n",
       "               [[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]],\n",
       "       \n",
       "               [[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]],\n",
       "       \n",
       "               [[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]],\n",
       "       \n",
       "               [[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]],\n",
       "       \n",
       "               [[ 0.8500,  0.6077, -1.0274],\n",
       "                [ 1.7517, -0.3917,  0.0814]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:10.746700Z",
     "iopub.status.busy": "2023-02-24T07:42:10.745785Z",
     "iopub.status.idle": "2023-02-24T07:42:18.496412Z",
     "shell.execute_reply": "2023-02-24T07:42:18.495321Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "94.8 µs ± 1.12 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:18.500252Z",
     "iopub.status.busy": "2023-02-24T07:42:18.499832Z",
     "iopub.status.idle": "2023-02-24T07:42:18.510422Z",
     "shell.execute_reply": "2023-02-24T07:42:18.509215Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                      [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                      [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                      [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                      [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                      [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                      [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337],\n",
       "                      [ 0.2825, -1.5190,  0.0118,  0.1731],\n",
       "                      [ 0.4305, -0.4464,  1.6371,  0.1959],\n",
       "                      [ 0.9434,  1.6573, -0.0741,  1.9337]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814],\n",
       "               [ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814],\n",
       "               [ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814],\n",
       "               [ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814],\n",
       "               [ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814],\n",
       "               [ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814],\n",
       "               [ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814],\n",
       "               [ 0.8500,  0.6077, -1.0274],\n",
       "               [ 1.7517, -0.3917,  0.0814]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:18.513915Z",
     "iopub.status.busy": "2023-02-24T07:42:18.513628Z",
     "iopub.status.idle": "2023-02-24T07:42:32.270887Z",
     "shell.execute_reply": "2023-02-24T07:42:32.269835Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "170 µs ± 5.57 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:42:32.274468Z",
     "iopub.status.busy": "2023-02-24T07:42:32.273911Z",
     "iopub.status.idle": "2023-02-24T07:42:36.635428Z",
     "shell.execute_reply": "2023-02-24T07:42:36.634292Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "537 µs ± 14.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
