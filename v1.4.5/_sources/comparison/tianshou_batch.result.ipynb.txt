{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:31.416649Z",
     "iopub.status.busy": "2023-02-24T08:36:31.416336Z",
     "iopub.status.idle": "2023-02-24T08:36:32.658983Z",
     "shell.execute_reply": "2023-02-24T08:36:32.657927Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:32.663621Z",
     "iopub.status.busy": "2023-02-24T08:36:32.662935Z",
     "iopub.status.idle": "2023-02-24T08:36:32.708310Z",
     "shell.execute_reply": "2023-02-24T08:36:32.707286Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:32.712559Z",
     "iopub.status.busy": "2023-02-24T08:36:32.712232Z",
     "iopub.status.idle": "2023-02-24T08:36:32.723984Z",
     "shell.execute_reply": "2023-02-24T08:36:32.723022Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3be0462880>\n",
       "├── 'a' --> tensor([[ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3be0462e50>\n",
       "    └── 'c' --> tensor([[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:32.727695Z",
     "iopub.status.busy": "2023-02-24T08:36:32.727399Z",
     "iopub.status.idle": "2023-02-24T08:36:32.734317Z",
     "shell.execute_reply": "2023-02-24T08:36:32.733362Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3338,  0.3585, -0.1206],\n",
       "        [-1.1269, -0.0033, -0.6083]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:32.737882Z",
     "iopub.status.busy": "2023-02-24T08:36:32.737577Z",
     "iopub.status.idle": "2023-02-24T08:36:38.941742Z",
     "shell.execute_reply": "2023-02-24T08:36:38.940717Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.4 ns ± 1.29 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:38.945598Z",
     "iopub.status.busy": "2023-02-24T08:36:38.945020Z",
     "iopub.status.idle": "2023-02-24T08:36:38.954412Z",
     "shell.execute_reply": "2023-02-24T08:36:38.953463Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3be0462880>\n",
       "├── 'a' --> tensor([[ 0.5425, -0.3483,  1.0465],\n",
       "│                   [ 0.4359, -0.0565,  0.6000]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3be0462e50>\n",
       "    └── 'c' --> tensor([[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:38.958070Z",
     "iopub.status.busy": "2023-02-24T08:36:38.957605Z",
     "iopub.status.idle": "2023-02-24T08:36:45.439937Z",
     "shell.execute_reply": "2023-02-24T08:36:45.438927Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.9 ns ± 0.46 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:45.443537Z",
     "iopub.status.busy": "2023-02-24T08:36:45.443241Z",
     "iopub.status.idle": "2023-02-24T08:36:45.912225Z",
     "shell.execute_reply": "2023-02-24T08:36:45.911187Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:45.916117Z",
     "iopub.status.busy": "2023-02-24T08:36:45.915697Z",
     "iopub.status.idle": "2023-02-24T08:36:45.924314Z",
     "shell.execute_reply": "2023-02-24T08:36:45.923330Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:45.927788Z",
     "iopub.status.busy": "2023-02-24T08:36:45.927328Z",
     "iopub.status.idle": "2023-02-24T08:36:45.933632Z",
     "shell.execute_reply": "2023-02-24T08:36:45.932716Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3338,  0.3585, -0.1206],\n",
       "        [-1.1269, -0.0033, -0.6083]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:45.937030Z",
     "iopub.status.busy": "2023-02-24T08:36:45.936441Z",
     "iopub.status.idle": "2023-02-24T08:36:51.669787Z",
     "shell.execute_reply": "2023-02-24T08:36:51.668748Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.1 ns ± 1.53 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:51.673512Z",
     "iopub.status.busy": "2023-02-24T08:36:51.673068Z",
     "iopub.status.idle": "2023-02-24T08:36:51.682575Z",
     "shell.execute_reply": "2023-02-24T08:36:51.681272Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1268, -0.4107, -0.3960],\n",
       "               [-1.8969,  1.0229, -0.2205]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:51.686614Z",
     "iopub.status.busy": "2023-02-24T08:36:51.686104Z",
     "iopub.status.idle": "2023-02-24T08:36:56.816037Z",
     "shell.execute_reply": "2023-02-24T08:36:56.815004Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "631 ns ± 10.6 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:36:56.820092Z",
     "iopub.status.busy": "2023-02-24T08:36:56.819603Z",
     "iopub.status.idle": "2023-02-24T08:37:05.070625Z",
     "shell.execute_reply": "2023-02-24T08:37:05.069526Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.02 µs ± 14.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:05.074835Z",
     "iopub.status.busy": "2023-02-24T08:37:05.073938Z",
     "iopub.status.idle": "2023-02-24T08:37:17.504924Z",
     "shell.execute_reply": "2023-02-24T08:37:17.503882Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15.3 µs ± 292 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:17.508751Z",
     "iopub.status.busy": "2023-02-24T08:37:17.508272Z",
     "iopub.status.idle": "2023-02-24T08:37:17.514169Z",
     "shell.execute_reply": "2023-02-24T08:37:17.513235Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:17.518077Z",
     "iopub.status.busy": "2023-02-24T08:37:17.517740Z",
     "iopub.status.idle": "2023-02-24T08:37:19.956712Z",
     "shell.execute_reply": "2023-02-24T08:37:19.955588Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "299 µs ± 10.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:19.960406Z",
     "iopub.status.busy": "2023-02-24T08:37:19.960083Z",
     "iopub.status.idle": "2023-02-24T08:37:22.196440Z",
     "shell.execute_reply": "2023-02-24T08:37:22.195496Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "275 µs ± 11.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:22.200420Z",
     "iopub.status.busy": "2023-02-24T08:37:22.199720Z",
     "iopub.status.idle": "2023-02-24T08:37:22.204526Z",
     "shell.execute_reply": "2023-02-24T08:37:22.203601Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:22.208027Z",
     "iopub.status.busy": "2023-02-24T08:37:22.207432Z",
     "iopub.status.idle": "2023-02-24T08:37:22.217978Z",
     "shell.execute_reply": "2023-02-24T08:37:22.217035Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3b330c56a0>\n",
       "├── 'a' --> tensor([[[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]],\n",
       "│           \n",
       "│                   [[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]],\n",
       "│           \n",
       "│                   [[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]],\n",
       "│           \n",
       "│                   [[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]],\n",
       "│           \n",
       "│                   [[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]],\n",
       "│           \n",
       "│                   [[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]],\n",
       "│           \n",
       "│                   [[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]],\n",
       "│           \n",
       "│                   [[ 0.3338,  0.3585, -0.1206],\n",
       "│                    [-1.1269, -0.0033, -0.6083]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3b330c5400>\n",
       "    └── 'c' --> tensor([[[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "                \n",
       "                        [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "                \n",
       "                        [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "                \n",
       "                        [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "                \n",
       "                        [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "                \n",
       "                        [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "                \n",
       "                        [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "                \n",
       "                        [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                         [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                         [ 1.3890, -0.4198,  0.6423,  0.4596]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:22.221984Z",
     "iopub.status.busy": "2023-02-24T08:37:22.221341Z",
     "iopub.status.idle": "2023-02-24T08:37:26.356295Z",
     "shell.execute_reply": "2023-02-24T08:37:26.355275Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50.7 µs ± 3.13 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:26.360432Z",
     "iopub.status.busy": "2023-02-24T08:37:26.359501Z",
     "iopub.status.idle": "2023-02-24T08:37:26.370133Z",
     "shell.execute_reply": "2023-02-24T08:37:26.369203Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3bb4b5c280>\n",
       "├── 'a' --> tensor([[ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083],\n",
       "│                   [ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083],\n",
       "│                   [ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083],\n",
       "│                   [ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083],\n",
       "│                   [ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083],\n",
       "│                   [ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083],\n",
       "│                   [ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083],\n",
       "│                   [ 0.3338,  0.3585, -0.1206],\n",
       "│                   [-1.1269, -0.0033, -0.6083]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3be0492a60>\n",
       "    └── 'c' --> tensor([[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                        [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                        [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                        [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                        [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                        [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                        [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                        [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                        [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                        [ 1.3890, -0.4198,  0.6423,  0.4596]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:26.374205Z",
     "iopub.status.busy": "2023-02-24T08:37:26.373897Z",
     "iopub.status.idle": "2023-02-24T08:37:29.923229Z",
     "shell.execute_reply": "2023-02-24T08:37:29.922206Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43.7 µs ± 992 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:29.927774Z",
     "iopub.status.busy": "2023-02-24T08:37:29.927436Z",
     "iopub.status.idle": "2023-02-24T08:37:36.827669Z",
     "shell.execute_reply": "2023-02-24T08:37:36.826571Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.4 µs ± 5.05 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:36.831437Z",
     "iopub.status.busy": "2023-02-24T08:37:36.831112Z",
     "iopub.status.idle": "2023-02-24T08:37:36.841579Z",
     "shell.execute_reply": "2023-02-24T08:37:36.840657Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "              \n",
       "                      [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "              \n",
       "                      [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "              \n",
       "                      [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "              \n",
       "                      [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "              \n",
       "                      [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "              \n",
       "                      [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]],\n",
       "              \n",
       "                      [[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                       [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                       [ 1.3890, -0.4198,  0.6423,  0.4596]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]],\n",
       "       \n",
       "               [[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]],\n",
       "       \n",
       "               [[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]],\n",
       "       \n",
       "               [[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]],\n",
       "       \n",
       "               [[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]],\n",
       "       \n",
       "               [[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]],\n",
       "       \n",
       "               [[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]],\n",
       "       \n",
       "               [[ 0.3338,  0.3585, -0.1206],\n",
       "                [-1.1269, -0.0033, -0.6083]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:36.845551Z",
     "iopub.status.busy": "2023-02-24T08:37:36.844990Z",
     "iopub.status.idle": "2023-02-24T08:37:45.463179Z",
     "shell.execute_reply": "2023-02-24T08:37:45.461964Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "107 µs ± 3.91 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:45.467002Z",
     "iopub.status.busy": "2023-02-24T08:37:45.466526Z",
     "iopub.status.idle": "2023-02-24T08:37:45.477034Z",
     "shell.execute_reply": "2023-02-24T08:37:45.475946Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                      [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                      [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                      [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                      [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                      [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                      [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596],\n",
       "                      [ 1.6224, -0.0354,  0.2774, -0.0305],\n",
       "                      [-0.2023, -2.0576,  1.7253,  0.2902],\n",
       "                      [ 1.3890, -0.4198,  0.6423,  0.4596]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083],\n",
       "               [ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083],\n",
       "               [ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083],\n",
       "               [ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083],\n",
       "               [ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083],\n",
       "               [ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083],\n",
       "               [ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083],\n",
       "               [ 0.3338,  0.3585, -0.1206],\n",
       "               [-1.1269, -0.0033, -0.6083]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:37:45.480599Z",
     "iopub.status.busy": "2023-02-24T08:37:45.480263Z",
     "iopub.status.idle": "2023-02-24T08:38:00.678683Z",
     "shell.execute_reply": "2023-02-24T08:38:00.677688Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "188 µs ± 3.01 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:38:00.682474Z",
     "iopub.status.busy": "2023-02-24T08:38:00.681916Z",
     "iopub.status.idle": "2023-02-24T08:38:05.462289Z",
     "shell.execute_reply": "2023-02-24T08:38:05.461256Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "593 µs ± 44.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
