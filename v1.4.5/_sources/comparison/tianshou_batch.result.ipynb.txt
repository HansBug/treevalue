{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:38.310074Z",
     "iopub.status.busy": "2023-02-23T08:32:38.309677Z",
     "iopub.status.idle": "2023-02-23T08:32:39.337758Z",
     "shell.execute_reply": "2023-02-23T08:32:39.336975Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:39.342064Z",
     "iopub.status.busy": "2023-02-23T08:32:39.341489Z",
     "iopub.status.idle": "2023-02-23T08:32:39.378078Z",
     "shell.execute_reply": "2023-02-23T08:32:39.376934Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:39.382852Z",
     "iopub.status.busy": "2023-02-23T08:32:39.381971Z",
     "iopub.status.idle": "2023-02-23T08:32:39.392120Z",
     "shell.execute_reply": "2023-02-23T08:32:39.391389Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f33c0756ca0>\n",
       "├── 'a' --> tensor([[-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744]])\n",
       "└── 'x' --> <FastTreeValue 0x7f33c07568e0>\n",
       "    └── 'c' --> tensor([[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:39.396179Z",
     "iopub.status.busy": "2023-02-23T08:32:39.395616Z",
     "iopub.status.idle": "2023-02-23T08:32:39.403667Z",
     "shell.execute_reply": "2023-02-23T08:32:39.403025Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2426,  0.1106,  0.2187],\n",
       "        [-1.4255, -2.6399,  1.2744]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:39.407462Z",
     "iopub.status.busy": "2023-02-23T08:32:39.407080Z",
     "iopub.status.idle": "2023-02-23T08:32:44.704932Z",
     "shell.execute_reply": "2023-02-23T08:32:44.703964Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.1 ns ± 0.0361 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:44.708803Z",
     "iopub.status.busy": "2023-02-23T08:32:44.708087Z",
     "iopub.status.idle": "2023-02-23T08:32:44.716920Z",
     "shell.execute_reply": "2023-02-23T08:32:44.716188Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f33c0756ca0>\n",
       "├── 'a' --> tensor([[ 0.1650,  2.0342, -0.8105],\n",
       "│                   [-0.2929,  0.4921, -0.6241]])\n",
       "└── 'x' --> <FastTreeValue 0x7f33c07568e0>\n",
       "    └── 'c' --> tensor([[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:44.720087Z",
     "iopub.status.busy": "2023-02-23T08:32:44.719650Z",
     "iopub.status.idle": "2023-02-23T08:32:50.242055Z",
     "shell.execute_reply": "2023-02-23T08:32:50.241224Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68 ns ± 0.0627 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:50.245515Z",
     "iopub.status.busy": "2023-02-23T08:32:50.245034Z",
     "iopub.status.idle": "2023-02-23T08:32:50.637368Z",
     "shell.execute_reply": "2023-02-23T08:32:50.636502Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:50.642788Z",
     "iopub.status.busy": "2023-02-23T08:32:50.642310Z",
     "iopub.status.idle": "2023-02-23T08:32:50.650407Z",
     "shell.execute_reply": "2023-02-23T08:32:50.649284Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:50.653120Z",
     "iopub.status.busy": "2023-02-23T08:32:50.652736Z",
     "iopub.status.idle": "2023-02-23T08:32:50.657858Z",
     "shell.execute_reply": "2023-02-23T08:32:50.657183Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2426,  0.1106,  0.2187],\n",
       "        [-1.4255, -2.6399,  1.2744]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:50.660587Z",
     "iopub.status.busy": "2023-02-23T08:32:50.660151Z",
     "iopub.status.idle": "2023-02-23T08:32:55.361377Z",
     "shell.execute_reply": "2023-02-23T08:32:55.360465Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.8 ns ± 0.0863 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:55.364896Z",
     "iopub.status.busy": "2023-02-23T08:32:55.364248Z",
     "iopub.status.idle": "2023-02-23T08:32:55.370653Z",
     "shell.execute_reply": "2023-02-23T08:32:55.369950Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3391, -0.5340,  0.2026],\n",
       "               [ 1.4779,  0.2738, -0.0207]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:55.373512Z",
     "iopub.status.busy": "2023-02-23T08:32:55.372945Z",
     "iopub.status.idle": "2023-02-23T08:32:59.409141Z",
     "shell.execute_reply": "2023-02-23T08:32:59.408369Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "496 ns ± 0.0756 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:32:59.412907Z",
     "iopub.status.busy": "2023-02-23T08:32:59.412394Z",
     "iopub.status.idle": "2023-02-23T08:33:06.109820Z",
     "shell.execute_reply": "2023-02-23T08:33:06.108906Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "825 ns ± 0.572 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:06.118570Z",
     "iopub.status.busy": "2023-02-23T08:33:06.118091Z",
     "iopub.status.idle": "2023-02-23T08:33:14.773826Z",
     "shell.execute_reply": "2023-02-23T08:33:14.772920Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 7.26 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:14.777144Z",
     "iopub.status.busy": "2023-02-23T08:33:14.776754Z",
     "iopub.status.idle": "2023-02-23T08:33:14.781111Z",
     "shell.execute_reply": "2023-02-23T08:33:14.780345Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:14.783919Z",
     "iopub.status.busy": "2023-02-23T08:33:14.783537Z",
     "iopub.status.idle": "2023-02-23T08:33:26.654009Z",
     "shell.execute_reply": "2023-02-23T08:33:26.653181Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 855 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:26.657814Z",
     "iopub.status.busy": "2023-02-23T08:33:26.657290Z",
     "iopub.status.idle": "2023-02-23T08:33:38.390923Z",
     "shell.execute_reply": "2023-02-23T08:33:38.390055Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 821 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:38.394370Z",
     "iopub.status.busy": "2023-02-23T08:33:38.393872Z",
     "iopub.status.idle": "2023-02-23T08:33:38.398464Z",
     "shell.execute_reply": "2023-02-23T08:33:38.397831Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:38.401083Z",
     "iopub.status.busy": "2023-02-23T08:33:38.400713Z",
     "iopub.status.idle": "2023-02-23T08:33:38.409202Z",
     "shell.execute_reply": "2023-02-23T08:33:38.408561Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f33c07b8e20>\n",
       "├── 'a' --> tensor([[[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]],\n",
       "│           \n",
       "│                   [[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]],\n",
       "│           \n",
       "│                   [[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]],\n",
       "│           \n",
       "│                   [[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]],\n",
       "│           \n",
       "│                   [[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]],\n",
       "│           \n",
       "│                   [[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]],\n",
       "│           \n",
       "│                   [[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]],\n",
       "│           \n",
       "│                   [[-0.2426,  0.1106,  0.2187],\n",
       "│                    [-1.4255, -2.6399,  1.2744]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f33c07b8fa0>\n",
       "    └── 'c' --> tensor([[[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "                \n",
       "                        [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "                \n",
       "                        [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "                \n",
       "                        [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "                \n",
       "                        [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "                \n",
       "                        [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "                \n",
       "                        [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "                \n",
       "                        [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                         [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                         [-0.5601,  1.2433, -0.2784,  0.6274]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:38.411820Z",
     "iopub.status.busy": "2023-02-23T08:33:38.411451Z",
     "iopub.status.idle": "2023-02-23T08:33:41.073141Z",
     "shell.execute_reply": "2023-02-23T08:33:41.072229Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.7 µs ± 24.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:41.077266Z",
     "iopub.status.busy": "2023-02-23T08:33:41.075987Z",
     "iopub.status.idle": "2023-02-23T08:33:41.085859Z",
     "shell.execute_reply": "2023-02-23T08:33:41.085208Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f33c075f640>\n",
       "├── 'a' --> tensor([[-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744],\n",
       "│                   [-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744],\n",
       "│                   [-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744],\n",
       "│                   [-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744],\n",
       "│                   [-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744],\n",
       "│                   [-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744],\n",
       "│                   [-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744],\n",
       "│                   [-0.2426,  0.1106,  0.2187],\n",
       "│                   [-1.4255, -2.6399,  1.2744]])\n",
       "└── 'x' --> <FastTreeValue 0x7f33c075f670>\n",
       "    └── 'c' --> tensor([[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                        [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                        [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                        [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                        [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                        [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                        [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                        [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                        [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                        [-0.5601,  1.2433, -0.2784,  0.6274]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:41.089127Z",
     "iopub.status.busy": "2023-02-23T08:33:41.088610Z",
     "iopub.status.idle": "2023-02-23T08:33:43.588198Z",
     "shell.execute_reply": "2023-02-23T08:33:43.587433Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.7 µs ± 98 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:43.591421Z",
     "iopub.status.busy": "2023-02-23T08:33:43.591023Z",
     "iopub.status.idle": "2023-02-23T08:33:48.174598Z",
     "shell.execute_reply": "2023-02-23T08:33:48.173685Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.4 µs ± 116 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:48.178290Z",
     "iopub.status.busy": "2023-02-23T08:33:48.177844Z",
     "iopub.status.idle": "2023-02-23T08:33:48.186754Z",
     "shell.execute_reply": "2023-02-23T08:33:48.186072Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]],\n",
       "       \n",
       "               [[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]],\n",
       "       \n",
       "               [[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]],\n",
       "       \n",
       "               [[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]],\n",
       "       \n",
       "               [[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]],\n",
       "       \n",
       "               [[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]],\n",
       "       \n",
       "               [[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]],\n",
       "       \n",
       "               [[-0.2426,  0.1106,  0.2187],\n",
       "                [-1.4255, -2.6399,  1.2744]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "              \n",
       "                      [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "              \n",
       "                      [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "              \n",
       "                      [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "              \n",
       "                      [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "              \n",
       "                      [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "              \n",
       "                      [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]],\n",
       "              \n",
       "                      [[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                       [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                       [-0.5601,  1.2433, -0.2784,  0.6274]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:48.189732Z",
     "iopub.status.busy": "2023-02-23T08:33:48.189340Z",
     "iopub.status.idle": "2023-02-23T08:33:54.535395Z",
     "shell.execute_reply": "2023-02-23T08:33:54.534477Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.1 µs ± 91 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:54.539174Z",
     "iopub.status.busy": "2023-02-23T08:33:54.538870Z",
     "iopub.status.idle": "2023-02-23T08:33:54.547963Z",
     "shell.execute_reply": "2023-02-23T08:33:54.547271Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744],\n",
       "               [-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744],\n",
       "               [-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744],\n",
       "               [-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744],\n",
       "               [-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744],\n",
       "               [-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744],\n",
       "               [-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744],\n",
       "               [-0.2426,  0.1106,  0.2187],\n",
       "               [-1.4255, -2.6399,  1.2744]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                      [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                      [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                      [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                      [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                      [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                      [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274],\n",
       "                      [ 0.1624,  1.1324, -0.8103, -1.1534],\n",
       "                      [ 1.4703, -1.5527,  0.3789, -0.8592],\n",
       "                      [-0.5601,  1.2433, -0.2784,  0.6274]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:33:54.551214Z",
     "iopub.status.busy": "2023-02-23T08:33:54.550726Z",
     "iopub.status.idle": "2023-02-23T08:34:06.724643Z",
     "shell.execute_reply": "2023-02-23T08:34:06.723774Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150 µs ± 1.74 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T08:34:06.728359Z",
     "iopub.status.busy": "2023-02-23T08:34:06.727846Z",
     "iopub.status.idle": "2023-02-23T08:34:09.373637Z",
     "shell.execute_reply": "2023-02-23T08:34:09.372927Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "325 µs ± 2.44 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
