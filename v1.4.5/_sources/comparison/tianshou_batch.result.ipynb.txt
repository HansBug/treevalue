{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:35.119596Z",
     "iopub.status.busy": "2023-02-24T07:50:35.119333Z",
     "iopub.status.idle": "2023-02-24T07:50:36.083121Z",
     "shell.execute_reply": "2023-02-24T07:50:36.082320Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:36.087056Z",
     "iopub.status.busy": "2023-02-24T07:50:36.086355Z",
     "iopub.status.idle": "2023-02-24T07:50:36.120924Z",
     "shell.execute_reply": "2023-02-24T07:50:36.120256Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:36.124145Z",
     "iopub.status.busy": "2023-02-24T07:50:36.123760Z",
     "iopub.status.idle": "2023-02-24T07:50:36.133553Z",
     "shell.execute_reply": "2023-02-24T07:50:36.132938Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc29c9dff70>\n",
       "├── 'a' --> tensor([[ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc29c9df970>\n",
       "    └── 'c' --> tensor([[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:36.136333Z",
     "iopub.status.busy": "2023-02-24T07:50:36.135985Z",
     "iopub.status.idle": "2023-02-24T07:50:36.141223Z",
     "shell.execute_reply": "2023-02-24T07:50:36.140539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3768,  0.8949,  1.0881],\n",
       "        [ 1.7863,  0.0154, -0.3440]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:36.144310Z",
     "iopub.status.busy": "2023-02-24T07:50:36.143750Z",
     "iopub.status.idle": "2023-02-24T07:50:41.337967Z",
     "shell.execute_reply": "2023-02-24T07:50:41.337098Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64 ns ± 0.0616 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:41.341617Z",
     "iopub.status.busy": "2023-02-24T07:50:41.340980Z",
     "iopub.status.idle": "2023-02-24T07:50:41.349001Z",
     "shell.execute_reply": "2023-02-24T07:50:41.347726Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc29c9dff70>\n",
       "├── 'a' --> tensor([[-0.3512,  1.5459,  0.1499],\n",
       "│                   [-1.0810, -0.8687,  0.3485]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc29c9df970>\n",
       "    └── 'c' --> tensor([[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:41.352120Z",
     "iopub.status.busy": "2023-02-24T07:50:41.351477Z",
     "iopub.status.idle": "2023-02-24T07:50:46.832843Z",
     "shell.execute_reply": "2023-02-24T07:50:46.831971Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.5 ns ± 0.0958 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:46.836464Z",
     "iopub.status.busy": "2023-02-24T07:50:46.836059Z",
     "iopub.status.idle": "2023-02-24T07:50:47.196077Z",
     "shell.execute_reply": "2023-02-24T07:50:47.194704Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:47.199585Z",
     "iopub.status.busy": "2023-02-24T07:50:47.199249Z",
     "iopub.status.idle": "2023-02-24T07:50:47.205775Z",
     "shell.execute_reply": "2023-02-24T07:50:47.204923Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:47.208599Z",
     "iopub.status.busy": "2023-02-24T07:50:47.208051Z",
     "iopub.status.idle": "2023-02-24T07:50:47.213011Z",
     "shell.execute_reply": "2023-02-24T07:50:47.212335Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.3768,  0.8949,  1.0881],\n",
       "        [ 1.7863,  0.0154, -0.3440]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:47.215840Z",
     "iopub.status.busy": "2023-02-24T07:50:47.215226Z",
     "iopub.status.idle": "2023-02-24T07:50:52.033279Z",
     "shell.execute_reply": "2023-02-24T07:50:52.032397Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.2 ns ± 0.0461 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:52.037162Z",
     "iopub.status.busy": "2023-02-24T07:50:52.036497Z",
     "iopub.status.idle": "2023-02-24T07:50:52.043272Z",
     "shell.execute_reply": "2023-02-24T07:50:52.042584Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0415, -0.6360, -0.2242],\n",
       "               [-1.0430, -0.7022,  0.2348]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:52.046058Z",
     "iopub.status.busy": "2023-02-24T07:50:52.045521Z",
     "iopub.status.idle": "2023-02-24T07:50:56.126437Z",
     "shell.execute_reply": "2023-02-24T07:50:56.125345Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "503 ns ± 0.113 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:50:56.130120Z",
     "iopub.status.busy": "2023-02-24T07:50:56.129682Z",
     "iopub.status.idle": "2023-02-24T07:51:02.788928Z",
     "shell.execute_reply": "2023-02-24T07:51:02.788065Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "819 ns ± 2.39 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:02.792938Z",
     "iopub.status.busy": "2023-02-24T07:51:02.792344Z",
     "iopub.status.idle": "2023-02-24T07:51:11.659932Z",
     "shell.execute_reply": "2023-02-24T07:51:11.659072Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 52.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:11.663901Z",
     "iopub.status.busy": "2023-02-24T07:51:11.663320Z",
     "iopub.status.idle": "2023-02-24T07:51:11.668420Z",
     "shell.execute_reply": "2023-02-24T07:51:11.667072Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:11.671463Z",
     "iopub.status.busy": "2023-02-24T07:51:11.670911Z",
     "iopub.status.idle": "2023-02-24T07:51:23.402546Z",
     "shell.execute_reply": "2023-02-24T07:51:23.401825Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 628 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:23.405861Z",
     "iopub.status.busy": "2023-02-24T07:51:23.405266Z",
     "iopub.status.idle": "2023-02-24T07:51:35.035257Z",
     "shell.execute_reply": "2023-02-24T07:51:35.034519Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 209 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:35.038639Z",
     "iopub.status.busy": "2023-02-24T07:51:35.038218Z",
     "iopub.status.idle": "2023-02-24T07:51:35.042072Z",
     "shell.execute_reply": "2023-02-24T07:51:35.041278Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:35.044704Z",
     "iopub.status.busy": "2023-02-24T07:51:35.044353Z",
     "iopub.status.idle": "2023-02-24T07:51:35.051855Z",
     "shell.execute_reply": "2023-02-24T07:51:35.051187Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc27415c2b0>\n",
       "├── 'a' --> tensor([[[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]],\n",
       "│           \n",
       "│                   [[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]],\n",
       "│           \n",
       "│                   [[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]],\n",
       "│           \n",
       "│                   [[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]],\n",
       "│           \n",
       "│                   [[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]],\n",
       "│           \n",
       "│                   [[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]],\n",
       "│           \n",
       "│                   [[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]],\n",
       "│           \n",
       "│                   [[ 0.3768,  0.8949,  1.0881],\n",
       "│                    [ 1.7863,  0.0154, -0.3440]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc274170a00>\n",
       "    └── 'c' --> tensor([[[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "                \n",
       "                        [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "                \n",
       "                        [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "                \n",
       "                        [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "                \n",
       "                        [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "                \n",
       "                        [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "                \n",
       "                        [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "                \n",
       "                        [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                         [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                         [ 0.6328,  0.9968,  1.5475, -0.6239]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:35.054690Z",
     "iopub.status.busy": "2023-02-24T07:51:35.054328Z",
     "iopub.status.idle": "2023-02-24T07:51:37.687677Z",
     "shell.execute_reply": "2023-02-24T07:51:37.686770Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 63.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:37.691215Z",
     "iopub.status.busy": "2023-02-24T07:51:37.690792Z",
     "iopub.status.idle": "2023-02-24T07:51:37.698642Z",
     "shell.execute_reply": "2023-02-24T07:51:37.697942Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc274170b20>\n",
       "├── 'a' --> tensor([[ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440],\n",
       "│                   [ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440],\n",
       "│                   [ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440],\n",
       "│                   [ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440],\n",
       "│                   [ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440],\n",
       "│                   [ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440],\n",
       "│                   [ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440],\n",
       "│                   [ 0.3768,  0.8949,  1.0881],\n",
       "│                   [ 1.7863,  0.0154, -0.3440]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc1f26ebf40>\n",
       "    └── 'c' --> tensor([[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                        [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                        [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                        [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                        [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                        [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                        [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                        [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                        [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                        [ 0.6328,  0.9968,  1.5475, -0.6239]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:37.701734Z",
     "iopub.status.busy": "2023-02-24T07:51:37.701111Z",
     "iopub.status.idle": "2023-02-24T07:51:40.181317Z",
     "shell.execute_reply": "2023-02-24T07:51:40.180449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.5 µs ± 80.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:40.184756Z",
     "iopub.status.busy": "2023-02-24T07:51:40.184174Z",
     "iopub.status.idle": "2023-02-24T07:51:44.719975Z",
     "shell.execute_reply": "2023-02-24T07:51:44.719096Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.8 µs ± 83.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:44.723265Z",
     "iopub.status.busy": "2023-02-24T07:51:44.722862Z",
     "iopub.status.idle": "2023-02-24T07:51:44.731398Z",
     "shell.execute_reply": "2023-02-24T07:51:44.730769Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]],\n",
       "       \n",
       "               [[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]],\n",
       "       \n",
       "               [[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]],\n",
       "       \n",
       "               [[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]],\n",
       "       \n",
       "               [[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]],\n",
       "       \n",
       "               [[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]],\n",
       "       \n",
       "               [[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]],\n",
       "       \n",
       "               [[ 0.3768,  0.8949,  1.0881],\n",
       "                [ 1.7863,  0.0154, -0.3440]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "              \n",
       "                      [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "              \n",
       "                      [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "              \n",
       "                      [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "              \n",
       "                      [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "              \n",
       "                      [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "              \n",
       "                      [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]],\n",
       "              \n",
       "                      [[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                       [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                       [ 0.6328,  0.9968,  1.5475, -0.6239]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:44.734216Z",
     "iopub.status.busy": "2023-02-24T07:51:44.733834Z",
     "iopub.status.idle": "2023-02-24T07:51:51.113713Z",
     "shell.execute_reply": "2023-02-24T07:51:51.112808Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.5 µs ± 163 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:51.117562Z",
     "iopub.status.busy": "2023-02-24T07:51:51.117050Z",
     "iopub.status.idle": "2023-02-24T07:51:51.125775Z",
     "shell.execute_reply": "2023-02-24T07:51:51.124886Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440],\n",
       "               [ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440],\n",
       "               [ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440],\n",
       "               [ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440],\n",
       "               [ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440],\n",
       "               [ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440],\n",
       "               [ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440],\n",
       "               [ 0.3768,  0.8949,  1.0881],\n",
       "               [ 1.7863,  0.0154, -0.3440]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                      [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                      [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                      [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                      [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                      [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                      [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239],\n",
       "                      [-1.9376, -0.3890, -0.9870, -1.7412],\n",
       "                      [ 0.0291, -0.1666, -0.4339,  0.1297],\n",
       "                      [ 0.6328,  0.9968,  1.5475, -0.6239]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:51:51.128673Z",
     "iopub.status.busy": "2023-02-24T07:51:51.128321Z",
     "iopub.status.idle": "2023-02-24T07:52:02.801442Z",
     "shell.execute_reply": "2023-02-24T07:52:02.800564Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 229 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:52:02.804860Z",
     "iopub.status.busy": "2023-02-24T07:52:02.804461Z",
     "iopub.status.idle": "2023-02-24T07:52:05.473308Z",
     "shell.execute_reply": "2023-02-24T07:52:05.472661Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "328 µs ± 1.95 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
