{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:40.482997Z",
     "iopub.status.busy": "2023-03-06T09:58:40.481900Z",
     "iopub.status.idle": "2023-03-06T09:58:41.386872Z",
     "shell.execute_reply": "2023-03-06T09:58:41.386216Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:41.390211Z",
     "iopub.status.busy": "2023-03-06T09:58:41.389821Z",
     "iopub.status.idle": "2023-03-06T09:58:41.423317Z",
     "shell.execute_reply": "2023-03-06T09:58:41.422699Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:41.426137Z",
     "iopub.status.busy": "2023-03-06T09:58:41.425624Z",
     "iopub.status.idle": "2023-03-06T09:58:41.434785Z",
     "shell.execute_reply": "2023-03-06T09:58:41.434214Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f83dc5c5d30>\n",
       "├── 'a' --> tensor([[-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642]])\n",
       "└── 'x' --> <FastTreeValue 0x7f83dc5c5d00>\n",
       "    └── 'c' --> tensor([[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:41.437415Z",
     "iopub.status.busy": "2023-03-06T09:58:41.436928Z",
     "iopub.status.idle": "2023-03-06T09:58:41.441990Z",
     "shell.execute_reply": "2023-03-06T09:58:41.441437Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2316, -2.2175, -0.5511],\n",
       "        [-2.3484,  1.3965, -0.9642]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:41.444425Z",
     "iopub.status.busy": "2023-03-06T09:58:41.444015Z",
     "iopub.status.idle": "2023-03-06T09:58:46.380980Z",
     "shell.execute_reply": "2023-03-06T09:58:46.380274Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.2 ns ± 0.0422 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:46.383806Z",
     "iopub.status.busy": "2023-03-06T09:58:46.383441Z",
     "iopub.status.idle": "2023-03-06T09:58:46.389563Z",
     "shell.execute_reply": "2023-03-06T09:58:46.388913Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f83dc5c5d30>\n",
       "├── 'a' --> tensor([[ 0.9648,  0.0234,  1.1723],\n",
       "│                   [ 0.7169, -0.7797,  0.7437]])\n",
       "└── 'x' --> <FastTreeValue 0x7f83dc5c5d00>\n",
       "    └── 'c' --> tensor([[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:46.392295Z",
     "iopub.status.busy": "2023-03-06T09:58:46.391807Z",
     "iopub.status.idle": "2023-03-06T09:58:52.236452Z",
     "shell.execute_reply": "2023-03-06T09:58:52.235749Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.9 ns ± 0.0488 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:52.239722Z",
     "iopub.status.busy": "2023-03-06T09:58:52.239164Z",
     "iopub.status.idle": "2023-03-06T09:58:52.567702Z",
     "shell.execute_reply": "2023-03-06T09:58:52.567030Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:52.570751Z",
     "iopub.status.busy": "2023-03-06T09:58:52.570318Z",
     "iopub.status.idle": "2023-03-06T09:58:52.575682Z",
     "shell.execute_reply": "2023-03-06T09:58:52.575043Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:52.578232Z",
     "iopub.status.busy": "2023-03-06T09:58:52.577902Z",
     "iopub.status.idle": "2023-03-06T09:58:52.583320Z",
     "shell.execute_reply": "2023-03-06T09:58:52.582733Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2316, -2.2175, -0.5511],\n",
       "        [-2.3484,  1.3965, -0.9642]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:52.586033Z",
     "iopub.status.busy": "2023-03-06T09:58:52.585582Z",
     "iopub.status.idle": "2023-03-06T09:58:57.267707Z",
     "shell.execute_reply": "2023-03-06T09:58:57.266953Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.6 ns ± 0.185 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:57.270917Z",
     "iopub.status.busy": "2023-03-06T09:58:57.270278Z",
     "iopub.status.idle": "2023-03-06T09:58:57.276643Z",
     "shell.execute_reply": "2023-03-06T09:58:57.276077Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.4808,  2.0174,  1.0361],\n",
       "               [-1.7073, -2.3017,  0.3576]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:58:57.278899Z",
     "iopub.status.busy": "2023-03-06T09:58:57.278677Z",
     "iopub.status.idle": "2023-03-06T09:59:01.273417Z",
     "shell.execute_reply": "2023-03-06T09:59:01.272748Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492 ns ± 0.258 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:01.277120Z",
     "iopub.status.busy": "2023-03-06T09:59:01.276077Z",
     "iopub.status.idle": "2023-03-06T09:59:08.692097Z",
     "shell.execute_reply": "2023-03-06T09:59:08.691437Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "915 ns ± 5.52 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:08.695215Z",
     "iopub.status.busy": "2023-03-06T09:59:08.694686Z",
     "iopub.status.idle": "2023-03-06T09:59:17.984953Z",
     "shell.execute_reply": "2023-03-06T09:59:17.984229Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 38.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:17.987776Z",
     "iopub.status.busy": "2023-03-06T09:59:17.987411Z",
     "iopub.status.idle": "2023-03-06T09:59:17.991299Z",
     "shell.execute_reply": "2023-03-06T09:59:17.990705Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:17.993669Z",
     "iopub.status.busy": "2023-03-06T09:59:17.993340Z",
     "iopub.status.idle": "2023-03-06T09:59:29.227293Z",
     "shell.execute_reply": "2023-03-06T09:59:29.226693Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 199 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:29.230743Z",
     "iopub.status.busy": "2023-03-06T09:59:29.229745Z",
     "iopub.status.idle": "2023-03-06T09:59:40.626539Z",
     "shell.execute_reply": "2023-03-06T09:59:40.625947Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 245 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:40.629876Z",
     "iopub.status.busy": "2023-03-06T09:59:40.629451Z",
     "iopub.status.idle": "2023-03-06T09:59:40.632643Z",
     "shell.execute_reply": "2023-03-06T09:59:40.632127Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:40.635089Z",
     "iopub.status.busy": "2023-03-06T09:59:40.634695Z",
     "iopub.status.idle": "2023-03-06T09:59:40.641500Z",
     "shell.execute_reply": "2023-03-06T09:59:40.640990Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8330279d60>\n",
       "├── 'a' --> tensor([[[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]],\n",
       "│           \n",
       "│                   [[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]],\n",
       "│           \n",
       "│                   [[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]],\n",
       "│           \n",
       "│                   [[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]],\n",
       "│           \n",
       "│                   [[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]],\n",
       "│           \n",
       "│                   [[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]],\n",
       "│           \n",
       "│                   [[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]],\n",
       "│           \n",
       "│                   [[-0.2316, -2.2175, -0.5511],\n",
       "│                    [-2.3484,  1.3965, -0.9642]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8330279c70>\n",
       "    └── 'c' --> tensor([[[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "                \n",
       "                        [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "                \n",
       "                        [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "                \n",
       "                        [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "                \n",
       "                        [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "                \n",
       "                        [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "                \n",
       "                        [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "                \n",
       "                        [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                         [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                         [ 0.8326,  0.7124,  0.4887, -1.5250]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:40.643932Z",
     "iopub.status.busy": "2023-03-06T09:59:40.643541Z",
     "iopub.status.idle": "2023-03-06T09:59:43.238076Z",
     "shell.execute_reply": "2023-03-06T09:59:43.237368Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.9 µs ± 32.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:43.240813Z",
     "iopub.status.busy": "2023-03-06T09:59:43.240460Z",
     "iopub.status.idle": "2023-03-06T09:59:43.247593Z",
     "shell.execute_reply": "2023-03-06T09:59:43.246983Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f83308beac0>\n",
       "├── 'a' --> tensor([[-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642],\n",
       "│                   [-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642],\n",
       "│                   [-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642],\n",
       "│                   [-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642],\n",
       "│                   [-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642],\n",
       "│                   [-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642],\n",
       "│                   [-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642],\n",
       "│                   [-0.2316, -2.2175, -0.5511],\n",
       "│                   [-2.3484,  1.3965, -0.9642]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8336e98ee0>\n",
       "    └── 'c' --> tensor([[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                        [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                        [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                        [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                        [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                        [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                        [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                        [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                        [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                        [ 0.8326,  0.7124,  0.4887, -1.5250]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:43.249844Z",
     "iopub.status.busy": "2023-03-06T09:59:43.249622Z",
     "iopub.status.idle": "2023-03-06T09:59:45.714176Z",
     "shell.execute_reply": "2023-03-06T09:59:45.713416Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4 µs ± 46.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:45.716821Z",
     "iopub.status.busy": "2023-03-06T09:59:45.716597Z",
     "iopub.status.idle": "2023-03-06T09:59:50.446135Z",
     "shell.execute_reply": "2023-03-06T09:59:50.445480Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 µs ± 124 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:50.448862Z",
     "iopub.status.busy": "2023-03-06T09:59:50.448506Z",
     "iopub.status.idle": "2023-03-06T09:59:50.456567Z",
     "shell.execute_reply": "2023-03-06T09:59:50.456005Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "              \n",
       "                      [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "              \n",
       "                      [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "              \n",
       "                      [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "              \n",
       "                      [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "              \n",
       "                      [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "              \n",
       "                      [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]],\n",
       "              \n",
       "                      [[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                       [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                       [ 0.8326,  0.7124,  0.4887, -1.5250]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]],\n",
       "       \n",
       "               [[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]],\n",
       "       \n",
       "               [[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]],\n",
       "       \n",
       "               [[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]],\n",
       "       \n",
       "               [[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]],\n",
       "       \n",
       "               [[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]],\n",
       "       \n",
       "               [[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]],\n",
       "       \n",
       "               [[-0.2316, -2.2175, -0.5511],\n",
       "                [-2.3484,  1.3965, -0.9642]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:50.459228Z",
     "iopub.status.busy": "2023-03-06T09:59:50.459011Z",
     "iopub.status.idle": "2023-03-06T09:59:53.201971Z",
     "shell.execute_reply": "2023-03-06T09:59:53.200889Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "337 µs ± 2.48 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:53.205025Z",
     "iopub.status.busy": "2023-03-06T09:59:53.204594Z",
     "iopub.status.idle": "2023-03-06T09:59:53.213344Z",
     "shell.execute_reply": "2023-03-06T09:59:53.212769Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                      [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                      [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                      [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                      [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                      [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                      [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250],\n",
       "                      [ 1.2859, -0.3243,  1.1351,  0.1327],\n",
       "                      [ 0.5730,  1.3117, -1.2694, -0.3451],\n",
       "                      [ 0.8326,  0.7124,  0.4887, -1.5250]]),\n",
       "       ),\n",
       "    a: tensor([[-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642],\n",
       "               [-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642],\n",
       "               [-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642],\n",
       "               [-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642],\n",
       "               [-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642],\n",
       "               [-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642],\n",
       "               [-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642],\n",
       "               [-0.2316, -2.2175, -0.5511],\n",
       "               [-2.3484,  1.3965, -0.9642]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:53.216426Z",
     "iopub.status.busy": "2023-03-06T09:59:53.215877Z",
     "iopub.status.idle": "2023-03-06T09:59:54.832199Z",
     "shell.execute_reply": "2023-03-06T09:59:54.831497Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 1.26 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T09:59:54.835385Z",
     "iopub.status.busy": "2023-03-06T09:59:54.834897Z",
     "iopub.status.idle": "2023-03-06T09:59:57.291455Z",
     "shell.execute_reply": "2023-03-06T09:59:57.290605Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "302 µs ± 768 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
