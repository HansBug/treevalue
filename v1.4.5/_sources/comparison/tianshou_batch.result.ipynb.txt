{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:44.003006Z",
     "iopub.status.busy": "2023-02-26T14:42:44.001590Z",
     "iopub.status.idle": "2023-02-26T14:42:44.923567Z",
     "shell.execute_reply": "2023-02-26T14:42:44.922831Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:44.927075Z",
     "iopub.status.busy": "2023-02-26T14:42:44.926660Z",
     "iopub.status.idle": "2023-02-26T14:42:44.959506Z",
     "shell.execute_reply": "2023-02-26T14:42:44.958892Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:44.962242Z",
     "iopub.status.busy": "2023-02-26T14:42:44.962024Z",
     "iopub.status.idle": "2023-02-26T14:42:44.970236Z",
     "shell.execute_reply": "2023-02-26T14:42:44.969340Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9c4c605be0>\n",
       "├── 'a' --> tensor([[ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9c70619ca0>\n",
       "    └── 'c' --> tensor([[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:44.972841Z",
     "iopub.status.busy": "2023-02-26T14:42:44.972519Z",
     "iopub.status.idle": "2023-02-26T14:42:44.977997Z",
     "shell.execute_reply": "2023-02-26T14:42:44.977455Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0728, -0.5750, -0.7938],\n",
       "        [ 0.2080, -0.7280,  0.2632]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:44.980636Z",
     "iopub.status.busy": "2023-02-26T14:42:44.980312Z",
     "iopub.status.idle": "2023-02-26T14:42:50.486611Z",
     "shell.execute_reply": "2023-02-26T14:42:50.485912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.3 ns ± 0.0288 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:50.489873Z",
     "iopub.status.busy": "2023-02-26T14:42:50.489298Z",
     "iopub.status.idle": "2023-02-26T14:42:50.495867Z",
     "shell.execute_reply": "2023-02-26T14:42:50.495290Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9c4c605be0>\n",
       "├── 'a' --> tensor([[ 1.8406,  0.6986,  0.6411],\n",
       "│                   [ 1.1580, -0.1093, -0.8276]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9c70619ca0>\n",
       "    └── 'c' --> tensor([[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:50.498270Z",
     "iopub.status.busy": "2023-02-26T14:42:50.497931Z",
     "iopub.status.idle": "2023-02-26T14:42:55.898711Z",
     "shell.execute_reply": "2023-02-26T14:42:55.897991Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.7 ns ± 0.051 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:55.901959Z",
     "iopub.status.busy": "2023-02-26T14:42:55.901455Z",
     "iopub.status.idle": "2023-02-26T14:42:56.225001Z",
     "shell.execute_reply": "2023-02-26T14:42:56.224327Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:56.228088Z",
     "iopub.status.busy": "2023-02-26T14:42:56.227570Z",
     "iopub.status.idle": "2023-02-26T14:42:56.233602Z",
     "shell.execute_reply": "2023-02-26T14:42:56.233031Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:56.236220Z",
     "iopub.status.busy": "2023-02-26T14:42:56.235682Z",
     "iopub.status.idle": "2023-02-26T14:42:56.241698Z",
     "shell.execute_reply": "2023-02-26T14:42:56.241116Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0728, -0.5750, -0.7938],\n",
       "        [ 0.2080, -0.7280,  0.2632]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:56.244367Z",
     "iopub.status.busy": "2023-02-26T14:42:56.243844Z",
     "iopub.status.idle": "2023-02-26T14:43:00.601055Z",
     "shell.execute_reply": "2023-02-26T14:43:00.600289Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53.6 ns ± 0.0261 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:00.604234Z",
     "iopub.status.busy": "2023-02-26T14:43:00.603777Z",
     "iopub.status.idle": "2023-02-26T14:43:00.610362Z",
     "shell.execute_reply": "2023-02-26T14:43:00.609773Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6381, -0.2176,  0.1853],\n",
       "               [ 1.3131,  0.6267, -0.3765]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:00.612862Z",
     "iopub.status.busy": "2023-02-26T14:43:00.612521Z",
     "iopub.status.idle": "2023-02-26T14:43:04.547707Z",
     "shell.execute_reply": "2023-02-26T14:43:04.546861Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "484 ns ± 0.0899 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:04.550861Z",
     "iopub.status.busy": "2023-02-26T14:43:04.550483Z",
     "iopub.status.idle": "2023-02-26T14:43:11.546759Z",
     "shell.execute_reply": "2023-02-26T14:43:11.545941Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "862 ns ± 3.84 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:11.549827Z",
     "iopub.status.busy": "2023-02-26T14:43:11.549260Z",
     "iopub.status.idle": "2023-02-26T14:43:20.838195Z",
     "shell.execute_reply": "2023-02-26T14:43:20.837440Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.5 µs ± 22.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:20.841628Z",
     "iopub.status.busy": "2023-02-26T14:43:20.841064Z",
     "iopub.status.idle": "2023-02-26T14:43:20.844652Z",
     "shell.execute_reply": "2023-02-26T14:43:20.844085Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:20.847388Z",
     "iopub.status.busy": "2023-02-26T14:43:20.847064Z",
     "iopub.status.idle": "2023-02-26T14:43:31.697595Z",
     "shell.execute_reply": "2023-02-26T14:43:31.696916Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "134 µs ± 516 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:31.700887Z",
     "iopub.status.busy": "2023-02-26T14:43:31.700644Z",
     "iopub.status.idle": "2023-02-26T14:43:42.807718Z",
     "shell.execute_reply": "2023-02-26T14:43:42.807131Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 219 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:42.811689Z",
     "iopub.status.busy": "2023-02-26T14:43:42.810715Z",
     "iopub.status.idle": "2023-02-26T14:43:42.815000Z",
     "shell.execute_reply": "2023-02-26T14:43:42.814462Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:42.818561Z",
     "iopub.status.busy": "2023-02-26T14:43:42.817623Z",
     "iopub.status.idle": "2023-02-26T14:43:42.825172Z",
     "shell.execute_reply": "2023-02-26T14:43:42.824564Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9bc32c5b20>\n",
       "├── 'a' --> tensor([[[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]],\n",
       "│           \n",
       "│                   [[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]],\n",
       "│           \n",
       "│                   [[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]],\n",
       "│           \n",
       "│                   [[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]],\n",
       "│           \n",
       "│                   [[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]],\n",
       "│           \n",
       "│                   [[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]],\n",
       "│           \n",
       "│                   [[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]],\n",
       "│           \n",
       "│                   [[ 0.0728, -0.5750, -0.7938],\n",
       "│                    [ 0.2080, -0.7280,  0.2632]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9bc32c5340>\n",
       "    └── 'c' --> tensor([[[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "                \n",
       "                        [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "                \n",
       "                        [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "                \n",
       "                        [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "                \n",
       "                        [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "                \n",
       "                        [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "                \n",
       "                        [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "                \n",
       "                        [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                         [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                         [ 0.0754, -0.5071, -0.8235, -0.5396]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:42.827633Z",
     "iopub.status.busy": "2023-02-26T14:43:42.827310Z",
     "iopub.status.idle": "2023-02-26T14:43:45.473069Z",
     "shell.execute_reply": "2023-02-26T14:43:45.472411Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.5 µs ± 61.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:45.476147Z",
     "iopub.status.busy": "2023-02-26T14:43:45.475609Z",
     "iopub.status.idle": "2023-02-26T14:43:45.483392Z",
     "shell.execute_reply": "2023-02-26T14:43:45.482811Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9bc32c51c0>\n",
       "├── 'a' --> tensor([[ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632],\n",
       "│                   [ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632],\n",
       "│                   [ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632],\n",
       "│                   [ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632],\n",
       "│                   [ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632],\n",
       "│                   [ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632],\n",
       "│                   [ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632],\n",
       "│                   [ 0.0728, -0.5750, -0.7938],\n",
       "│                   [ 0.2080, -0.7280,  0.2632]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9bc32c57f0>\n",
       "    └── 'c' --> tensor([[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                        [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                        [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                        [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                        [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                        [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                        [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                        [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                        [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                        [ 0.0754, -0.5071, -0.8235, -0.5396]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:45.486041Z",
     "iopub.status.busy": "2023-02-26T14:43:45.485710Z",
     "iopub.status.idle": "2023-02-26T14:43:47.941577Z",
     "shell.execute_reply": "2023-02-26T14:43:47.940879Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.2 µs ± 56 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:47.944404Z",
     "iopub.status.busy": "2023-02-26T14:43:47.944035Z",
     "iopub.status.idle": "2023-02-26T14:43:52.500643Z",
     "shell.execute_reply": "2023-02-26T14:43:52.499878Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56 µs ± 53.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:52.503566Z",
     "iopub.status.busy": "2023-02-26T14:43:52.503223Z",
     "iopub.status.idle": "2023-02-26T14:43:52.511107Z",
     "shell.execute_reply": "2023-02-26T14:43:52.510523Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]],\n",
       "       \n",
       "               [[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]],\n",
       "       \n",
       "               [[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]],\n",
       "       \n",
       "               [[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]],\n",
       "       \n",
       "               [[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]],\n",
       "       \n",
       "               [[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]],\n",
       "       \n",
       "               [[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]],\n",
       "       \n",
       "               [[ 0.0728, -0.5750, -0.7938],\n",
       "                [ 0.2080, -0.7280,  0.2632]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "              \n",
       "                      [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "              \n",
       "                      [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "              \n",
       "                      [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "              \n",
       "                      [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "              \n",
       "                      [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "              \n",
       "                      [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]],\n",
       "              \n",
       "                      [[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                       [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                       [ 0.0754, -0.5071, -0.8235, -0.5396]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:52.513720Z",
     "iopub.status.busy": "2023-02-26T14:43:52.513244Z",
     "iopub.status.idle": "2023-02-26T14:43:58.880358Z",
     "shell.execute_reply": "2023-02-26T14:43:58.879692Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.4 µs ± 172 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:58.883376Z",
     "iopub.status.busy": "2023-02-26T14:43:58.882690Z",
     "iopub.status.idle": "2023-02-26T14:43:58.890761Z",
     "shell.execute_reply": "2023-02-26T14:43:58.889713Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632],\n",
       "               [ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632],\n",
       "               [ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632],\n",
       "               [ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632],\n",
       "               [ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632],\n",
       "               [ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632],\n",
       "               [ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632],\n",
       "               [ 0.0728, -0.5750, -0.7938],\n",
       "               [ 0.2080, -0.7280,  0.2632]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                      [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                      [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                      [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                      [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                      [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                      [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396],\n",
       "                      [ 0.0846,  0.1408,  0.4734, -0.5364],\n",
       "                      [ 0.4235,  0.9042,  0.7096,  0.1917],\n",
       "                      [ 0.0754, -0.5071, -0.8235, -0.5396]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:43:58.893210Z",
     "iopub.status.busy": "2023-02-26T14:43:58.892863Z",
     "iopub.status.idle": "2023-02-26T14:44:10.484029Z",
     "shell.execute_reply": "2023-02-26T14:44:10.483381Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 443 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:44:10.487007Z",
     "iopub.status.busy": "2023-02-26T14:44:10.486432Z",
     "iopub.status.idle": "2023-02-26T14:44:12.931861Z",
     "shell.execute_reply": "2023-02-26T14:44:12.931304Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300 µs ± 590 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
