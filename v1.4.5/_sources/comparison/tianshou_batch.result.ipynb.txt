{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:36.880423Z",
     "iopub.status.busy": "2023-02-26T15:38:36.879887Z",
     "iopub.status.idle": "2023-02-26T15:38:37.781112Z",
     "shell.execute_reply": "2023-02-26T15:38:37.780471Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:37.784432Z",
     "iopub.status.busy": "2023-02-26T15:38:37.783840Z",
     "iopub.status.idle": "2023-02-26T15:38:37.816416Z",
     "shell.execute_reply": "2023-02-26T15:38:37.815502Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:37.819135Z",
     "iopub.status.busy": "2023-02-26T15:38:37.818590Z",
     "iopub.status.idle": "2023-02-26T15:38:37.828313Z",
     "shell.execute_reply": "2023-02-26T15:38:37.827103Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f58889614f0>\n",
       "├── 'a' --> tensor([[-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213]])\n",
       "└── 'x' --> <FastTreeValue 0x7f58889cdee0>\n",
       "    └── 'c' --> tensor([[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:37.830991Z",
     "iopub.status.busy": "2023-02-26T15:38:37.830498Z",
     "iopub.status.idle": "2023-02-26T15:38:37.835606Z",
     "shell.execute_reply": "2023-02-26T15:38:37.835050Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9771, -0.5984,  1.6520],\n",
       "        [-1.2725, -0.6649, -1.0213]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:37.838178Z",
     "iopub.status.busy": "2023-02-26T15:38:37.837679Z",
     "iopub.status.idle": "2023-02-26T15:38:42.586933Z",
     "shell.execute_reply": "2023-02-26T15:38:42.586197Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.5 ns ± 0.043 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:42.590192Z",
     "iopub.status.busy": "2023-02-26T15:38:42.589598Z",
     "iopub.status.idle": "2023-02-26T15:38:42.595472Z",
     "shell.execute_reply": "2023-02-26T15:38:42.594835Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f58889614f0>\n",
       "├── 'a' --> tensor([[ 0.6496,  0.4499, -0.6495],\n",
       "│                   [-0.8372, -1.2271, -0.8792]])\n",
       "└── 'x' --> <FastTreeValue 0x7f58889cdee0>\n",
       "    └── 'c' --> tensor([[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:42.597912Z",
     "iopub.status.busy": "2023-02-26T15:38:42.597566Z",
     "iopub.status.idle": "2023-02-26T15:38:47.761299Z",
     "shell.execute_reply": "2023-02-26T15:38:47.760377Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.6 ns ± 0.0585 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:47.764571Z",
     "iopub.status.busy": "2023-02-26T15:38:47.764005Z",
     "iopub.status.idle": "2023-02-26T15:38:48.090070Z",
     "shell.execute_reply": "2023-02-26T15:38:48.089075Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:48.093011Z",
     "iopub.status.busy": "2023-02-26T15:38:48.092583Z",
     "iopub.status.idle": "2023-02-26T15:38:48.097868Z",
     "shell.execute_reply": "2023-02-26T15:38:48.097223Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:48.100490Z",
     "iopub.status.busy": "2023-02-26T15:38:48.100163Z",
     "iopub.status.idle": "2023-02-26T15:38:48.104932Z",
     "shell.execute_reply": "2023-02-26T15:38:48.104280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9771, -0.5984,  1.6520],\n",
       "        [-1.2725, -0.6649, -1.0213]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:48.107779Z",
     "iopub.status.busy": "2023-02-26T15:38:48.107297Z",
     "iopub.status.idle": "2023-02-26T15:38:52.271901Z",
     "shell.execute_reply": "2023-02-26T15:38:52.271170Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.2 ns ± 0.0459 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:52.274820Z",
     "iopub.status.busy": "2023-02-26T15:38:52.274285Z",
     "iopub.status.idle": "2023-02-26T15:38:52.280580Z",
     "shell.execute_reply": "2023-02-26T15:38:52.280010Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.1220, -0.0200, -0.7205],\n",
       "               [-0.4455,  0.8957,  0.4124]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:52.282972Z",
     "iopub.status.busy": "2023-02-26T15:38:52.282641Z",
     "iopub.status.idle": "2023-02-26T15:38:56.312447Z",
     "shell.execute_reply": "2023-02-26T15:38:56.311790Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "496 ns ± 0.189 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:38:56.315683Z",
     "iopub.status.busy": "2023-02-26T15:38:56.315199Z",
     "iopub.status.idle": "2023-02-26T15:39:03.073341Z",
     "shell.execute_reply": "2023-02-26T15:39:03.072673Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "832 ns ± 0.205 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:03.076238Z",
     "iopub.status.busy": "2023-02-26T15:39:03.075907Z",
     "iopub.status.idle": "2023-02-26T15:39:12.298353Z",
     "shell.execute_reply": "2023-02-26T15:39:12.297573Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 64.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:12.301574Z",
     "iopub.status.busy": "2023-02-26T15:39:12.301072Z",
     "iopub.status.idle": "2023-02-26T15:39:12.305003Z",
     "shell.execute_reply": "2023-02-26T15:39:12.304428Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:12.307695Z",
     "iopub.status.busy": "2023-02-26T15:39:12.307366Z",
     "iopub.status.idle": "2023-02-26T15:39:23.298548Z",
     "shell.execute_reply": "2023-02-26T15:39:23.297883Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135 µs ± 345 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:23.301655Z",
     "iopub.status.busy": "2023-02-26T15:39:23.301206Z",
     "iopub.status.idle": "2023-02-26T15:39:34.454985Z",
     "shell.execute_reply": "2023-02-26T15:39:34.454411Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 469 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:34.457824Z",
     "iopub.status.busy": "2023-02-26T15:39:34.457410Z",
     "iopub.status.idle": "2023-02-26T15:39:34.460565Z",
     "shell.execute_reply": "2023-02-26T15:39:34.460045Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:34.463064Z",
     "iopub.status.busy": "2023-02-26T15:39:34.462478Z",
     "iopub.status.idle": "2023-02-26T15:39:34.471494Z",
     "shell.execute_reply": "2023-02-26T15:39:34.470902Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f57dc66b4f0>\n",
       "├── 'a' --> tensor([[[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]],\n",
       "│           \n",
       "│                   [[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]],\n",
       "│           \n",
       "│                   [[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]],\n",
       "│           \n",
       "│                   [[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]],\n",
       "│           \n",
       "│                   [[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]],\n",
       "│           \n",
       "│                   [[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]],\n",
       "│           \n",
       "│                   [[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]],\n",
       "│           \n",
       "│                   [[-0.9771, -0.5984,  1.6520],\n",
       "│                    [-1.2725, -0.6649, -1.0213]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f57dc66bfd0>\n",
       "    └── 'c' --> tensor([[[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "                \n",
       "                        [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "                \n",
       "                        [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "                \n",
       "                        [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "                \n",
       "                        [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "                \n",
       "                        [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "                \n",
       "                        [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "                \n",
       "                        [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                         [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                         [-0.2586, -0.9907,  1.0291, -1.4260]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:34.473813Z",
     "iopub.status.busy": "2023-02-26T15:39:34.473591Z",
     "iopub.status.idle": "2023-02-26T15:39:37.077312Z",
     "shell.execute_reply": "2023-02-26T15:39:37.076568Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 66.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:37.079865Z",
     "iopub.status.busy": "2023-02-26T15:39:37.079644Z",
     "iopub.status.idle": "2023-02-26T15:39:37.087407Z",
     "shell.execute_reply": "2023-02-26T15:39:37.086838Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f57dc61df40>\n",
       "├── 'a' --> tensor([[-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213],\n",
       "│                   [-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213],\n",
       "│                   [-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213],\n",
       "│                   [-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213],\n",
       "│                   [-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213],\n",
       "│                   [-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213],\n",
       "│                   [-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213],\n",
       "│                   [-0.9771, -0.5984,  1.6520],\n",
       "│                   [-1.2725, -0.6649, -1.0213]])\n",
       "└── 'x' --> <FastTreeValue 0x7f57dc603970>\n",
       "    └── 'c' --> tensor([[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                        [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                        [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                        [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                        [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                        [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                        [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                        [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                        [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                        [-0.2586, -0.9907,  1.0291, -1.4260]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:37.089889Z",
     "iopub.status.busy": "2023-02-26T15:39:37.089546Z",
     "iopub.status.idle": "2023-02-26T15:39:39.489750Z",
     "shell.execute_reply": "2023-02-26T15:39:39.489037Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.5 µs ± 52.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:39.492522Z",
     "iopub.status.busy": "2023-02-26T15:39:39.492092Z",
     "iopub.status.idle": "2023-02-26T15:39:44.232196Z",
     "shell.execute_reply": "2023-02-26T15:39:44.231495Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.3 µs ± 112 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:44.235336Z",
     "iopub.status.busy": "2023-02-26T15:39:44.234992Z",
     "iopub.status.idle": "2023-02-26T15:39:44.243745Z",
     "shell.execute_reply": "2023-02-26T15:39:44.242943Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]],\n",
       "       \n",
       "               [[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]],\n",
       "       \n",
       "               [[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]],\n",
       "       \n",
       "               [[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]],\n",
       "       \n",
       "               [[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]],\n",
       "       \n",
       "               [[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]],\n",
       "       \n",
       "               [[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]],\n",
       "       \n",
       "               [[-0.9771, -0.5984,  1.6520],\n",
       "                [-1.2725, -0.6649, -1.0213]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "              \n",
       "                      [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "              \n",
       "                      [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "              \n",
       "                      [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "              \n",
       "                      [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "              \n",
       "                      [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "              \n",
       "                      [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]],\n",
       "              \n",
       "                      [[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                       [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                       [-0.2586, -0.9907,  1.0291, -1.4260]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:44.246336Z",
     "iopub.status.busy": "2023-02-26T15:39:44.246015Z",
     "iopub.status.idle": "2023-02-26T15:39:50.573962Z",
     "shell.execute_reply": "2023-02-26T15:39:50.573290Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 µs ± 97.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:50.576805Z",
     "iopub.status.busy": "2023-02-26T15:39:50.576570Z",
     "iopub.status.idle": "2023-02-26T15:39:50.583846Z",
     "shell.execute_reply": "2023-02-26T15:39:50.583197Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213],\n",
       "               [-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213],\n",
       "               [-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213],\n",
       "               [-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213],\n",
       "               [-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213],\n",
       "               [-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213],\n",
       "               [-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213],\n",
       "               [-0.9771, -0.5984,  1.6520],\n",
       "               [-1.2725, -0.6649, -1.0213]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                      [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                      [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                      [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                      [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                      [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                      [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260],\n",
       "                      [-1.7678,  0.1199, -0.2184, -0.3164],\n",
       "                      [-1.4435,  2.1339, -0.3543,  0.9503],\n",
       "                      [-0.2586, -0.9907,  1.0291, -1.4260]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:39:50.586422Z",
     "iopub.status.busy": "2023-02-26T15:39:50.586107Z",
     "iopub.status.idle": "2023-02-26T15:40:02.157967Z",
     "shell.execute_reply": "2023-02-26T15:40:02.157241Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 477 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T15:40:02.160975Z",
     "iopub.status.busy": "2023-02-26T15:40:02.160621Z",
     "iopub.status.idle": "2023-02-26T15:40:04.691098Z",
     "shell.execute_reply": "2023-02-26T15:40:04.690545Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "310 µs ± 638 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
