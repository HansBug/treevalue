{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:16.876057Z",
     "iopub.status.busy": "2023-05-26T09:01:16.875789Z",
     "iopub.status.idle": "2023-05-26T09:01:18.227876Z",
     "shell.execute_reply": "2023-05-26T09:01:18.227145Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:18.232564Z",
     "iopub.status.busy": "2023-05-26T09:01:18.232072Z",
     "iopub.status.idle": "2023-05-26T09:01:18.262022Z",
     "shell.execute_reply": "2023-05-26T09:01:18.261352Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:18.265674Z",
     "iopub.status.busy": "2023-05-26T09:01:18.265262Z",
     "iopub.status.idle": "2023-05-26T09:01:18.276174Z",
     "shell.execute_reply": "2023-05-26T09:01:18.275521Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f79543b3f10>\n",
       "├── 'a' --> tensor([[-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562]])\n",
       "└── 'x' --> <FastTreeValue 0x7f79543b3d90>\n",
       "    └── 'c' --> tensor([[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:18.279373Z",
     "iopub.status.busy": "2023-05-26T09:01:18.278917Z",
     "iopub.status.idle": "2023-05-26T09:01:18.283920Z",
     "shell.execute_reply": "2023-05-26T09:01:18.283254Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.4767, -1.4637,  0.3815],\n",
       "        [-0.5734,  0.9261,  0.1562]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:18.287519Z",
     "iopub.status.busy": "2023-05-26T09:01:18.286990Z",
     "iopub.status.idle": "2023-05-26T09:01:23.515312Z",
     "shell.execute_reply": "2023-05-26T09:01:23.513219Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.4 ns ± 0.11 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:23.519332Z",
     "iopub.status.busy": "2023-05-26T09:01:23.518780Z",
     "iopub.status.idle": "2023-05-26T09:01:23.526799Z",
     "shell.execute_reply": "2023-05-26T09:01:23.524992Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f79543b3f10>\n",
       "├── 'a' --> tensor([[-0.2038,  0.7590,  0.1471],\n",
       "│                   [ 0.3643, -0.4599,  1.1088]])\n",
       "└── 'x' --> <FastTreeValue 0x7f79543b3d90>\n",
       "    └── 'c' --> tensor([[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:23.530023Z",
     "iopub.status.busy": "2023-05-26T09:01:23.529571Z",
     "iopub.status.idle": "2023-05-26T09:01:28.907487Z",
     "shell.execute_reply": "2023-05-26T09:01:28.906762Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.1 ns ± 0.0633 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:28.911291Z",
     "iopub.status.busy": "2023-05-26T09:01:28.910697Z",
     "iopub.status.idle": "2023-05-26T09:01:29.285374Z",
     "shell.execute_reply": "2023-05-26T09:01:29.284590Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:29.289707Z",
     "iopub.status.busy": "2023-05-26T09:01:29.289038Z",
     "iopub.status.idle": "2023-05-26T09:01:29.295232Z",
     "shell.execute_reply": "2023-05-26T09:01:29.294537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:29.298588Z",
     "iopub.status.busy": "2023-05-26T09:01:29.298157Z",
     "iopub.status.idle": "2023-05-26T09:01:29.303531Z",
     "shell.execute_reply": "2023-05-26T09:01:29.302849Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.4767, -1.4637,  0.3815],\n",
       "        [-0.5734,  0.9261,  0.1562]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:29.307009Z",
     "iopub.status.busy": "2023-05-26T09:01:29.306450Z",
     "iopub.status.idle": "2023-05-26T09:01:34.023806Z",
     "shell.execute_reply": "2023-05-26T09:01:34.023080Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 ns ± 0.176 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:34.027584Z",
     "iopub.status.busy": "2023-05-26T09:01:34.027082Z",
     "iopub.status.idle": "2023-05-26T09:01:34.033325Z",
     "shell.execute_reply": "2023-05-26T09:01:34.032618Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7027, -1.1101, -0.7077],\n",
       "               [-0.5650, -0.3460,  0.3861]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:34.036453Z",
     "iopub.status.busy": "2023-05-26T09:01:34.035903Z",
     "iopub.status.idle": "2023-05-26T09:01:38.010642Z",
     "shell.execute_reply": "2023-05-26T09:01:38.009237Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "489 ns ± 0.143 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:38.014484Z",
     "iopub.status.busy": "2023-05-26T09:01:38.014106Z",
     "iopub.status.idle": "2023-05-26T09:01:44.703244Z",
     "shell.execute_reply": "2023-05-26T09:01:44.702341Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "824 ns ± 3.37 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:44.706694Z",
     "iopub.status.busy": "2023-05-26T09:01:44.706210Z",
     "iopub.status.idle": "2023-05-26T09:01:53.470265Z",
     "shell.execute_reply": "2023-05-26T09:01:53.469526Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.8 µs ± 18.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:53.473988Z",
     "iopub.status.busy": "2023-05-26T09:01:53.473551Z",
     "iopub.status.idle": "2023-05-26T09:01:53.478440Z",
     "shell.execute_reply": "2023-05-26T09:01:53.477808Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:01:53.481646Z",
     "iopub.status.busy": "2023-05-26T09:01:53.481261Z",
     "iopub.status.idle": "2023-05-26T09:02:05.116021Z",
     "shell.execute_reply": "2023-05-26T09:02:05.115388Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 4.38 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:05.119338Z",
     "iopub.status.busy": "2023-05-26T09:02:05.118822Z",
     "iopub.status.idle": "2023-05-26T09:02:16.647793Z",
     "shell.execute_reply": "2023-05-26T09:02:16.647073Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 948 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:16.651573Z",
     "iopub.status.busy": "2023-05-26T09:02:16.651315Z",
     "iopub.status.idle": "2023-05-26T09:02:16.655750Z",
     "shell.execute_reply": "2023-05-26T09:02:16.655134Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:16.659041Z",
     "iopub.status.busy": "2023-05-26T09:02:16.658797Z",
     "iopub.status.idle": "2023-05-26T09:02:16.668375Z",
     "shell.execute_reply": "2023-05-26T09:02:16.667706Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7954397c10>\n",
       "├── 'a' --> tensor([[[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]],\n",
       "│           \n",
       "│                   [[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]],\n",
       "│           \n",
       "│                   [[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]],\n",
       "│           \n",
       "│                   [[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]],\n",
       "│           \n",
       "│                   [[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]],\n",
       "│           \n",
       "│                   [[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]],\n",
       "│           \n",
       "│                   [[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]],\n",
       "│           \n",
       "│                   [[-1.4767, -1.4637,  0.3815],\n",
       "│                    [-0.5734,  0.9261,  0.1562]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f78876b2520>\n",
       "    └── 'c' --> tensor([[[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "                \n",
       "                        [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                         [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                         [ 0.7269,  0.2695,  0.7317, -2.5379]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:16.671886Z",
     "iopub.status.busy": "2023-05-26T09:02:16.671644Z",
     "iopub.status.idle": "2023-05-26T09:02:19.309393Z",
     "shell.execute_reply": "2023-05-26T09:02:19.308488Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 57.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:19.312943Z",
     "iopub.status.busy": "2023-05-26T09:02:19.312685Z",
     "iopub.status.idle": "2023-05-26T09:02:19.321290Z",
     "shell.execute_reply": "2023-05-26T09:02:19.320658Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f795743ae50>\n",
       "├── 'a' --> tensor([[-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562],\n",
       "│                   [-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562],\n",
       "│                   [-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562],\n",
       "│                   [-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562],\n",
       "│                   [-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562],\n",
       "│                   [-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562],\n",
       "│                   [-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562],\n",
       "│                   [-1.4767, -1.4637,  0.3815],\n",
       "│                   [-0.5734,  0.9261,  0.1562]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7957441be0>\n",
       "    └── 'c' --> tensor([[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                        [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                        [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                        [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                        [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                        [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                        [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                        [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                        [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                        [ 0.7269,  0.2695,  0.7317, -2.5379]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:19.324572Z",
     "iopub.status.busy": "2023-05-26T09:02:19.324167Z",
     "iopub.status.idle": "2023-05-26T09:02:21.801992Z",
     "shell.execute_reply": "2023-05-26T09:02:21.801270Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.5 µs ± 54.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:21.805818Z",
     "iopub.status.busy": "2023-05-26T09:02:21.805307Z",
     "iopub.status.idle": "2023-05-26T09:02:27.161915Z",
     "shell.execute_reply": "2023-05-26T09:02:27.161188Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.8 µs ± 101 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:27.165669Z",
     "iopub.status.busy": "2023-05-26T09:02:27.165234Z",
     "iopub.status.idle": "2023-05-26T09:02:27.174031Z",
     "shell.execute_reply": "2023-05-26T09:02:27.173262Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]],\n",
       "              \n",
       "                      [[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                       [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                       [ 0.7269,  0.2695,  0.7317, -2.5379]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]],\n",
       "       \n",
       "               [[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]],\n",
       "       \n",
       "               [[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]],\n",
       "       \n",
       "               [[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]],\n",
       "       \n",
       "               [[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]],\n",
       "       \n",
       "               [[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]],\n",
       "       \n",
       "               [[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]],\n",
       "       \n",
       "               [[-1.4767, -1.4637,  0.3815],\n",
       "                [-0.5734,  0.9261,  0.1562]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:27.177673Z",
     "iopub.status.busy": "2023-05-26T09:02:27.177188Z",
     "iopub.status.idle": "2023-05-26T09:02:33.568482Z",
     "shell.execute_reply": "2023-05-26T09:02:33.567602Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.5 µs ± 125 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:33.572137Z",
     "iopub.status.busy": "2023-05-26T09:02:33.571637Z",
     "iopub.status.idle": "2023-05-26T09:02:33.579737Z",
     "shell.execute_reply": "2023-05-26T09:02:33.579120Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                      [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                      [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                      [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                      [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                      [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                      [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379],\n",
       "                      [ 0.2640, -0.4432,  0.0406, -0.3534],\n",
       "                      [ 0.8988, -0.3702, -0.7845, -0.1178],\n",
       "                      [ 0.7269,  0.2695,  0.7317, -2.5379]]),\n",
       "       ),\n",
       "    a: tensor([[-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562],\n",
       "               [-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562],\n",
       "               [-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562],\n",
       "               [-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562],\n",
       "               [-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562],\n",
       "               [-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562],\n",
       "               [-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562],\n",
       "               [-1.4767, -1.4637,  0.3815],\n",
       "               [-0.5734,  0.9261,  0.1562]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:33.582619Z",
     "iopub.status.busy": "2023-05-26T09:02:33.582247Z",
     "iopub.status.idle": "2023-05-26T09:02:45.424419Z",
     "shell.execute_reply": "2023-05-26T09:02:45.423637Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 750 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:02:45.427975Z",
     "iopub.status.busy": "2023-05-26T09:02:45.427521Z",
     "iopub.status.idle": "2023-05-26T09:02:48.193941Z",
     "shell.execute_reply": "2023-05-26T09:02:48.193322Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "339 µs ± 2.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
