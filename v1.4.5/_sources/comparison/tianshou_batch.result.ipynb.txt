{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:08:52.785422Z",
     "iopub.status.busy": "2023-05-26T07:08:52.784991Z",
     "iopub.status.idle": "2023-05-26T07:08:54.091892Z",
     "shell.execute_reply": "2023-05-26T07:08:54.091186Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:08:54.096342Z",
     "iopub.status.busy": "2023-05-26T07:08:54.095723Z",
     "iopub.status.idle": "2023-05-26T07:08:54.123974Z",
     "shell.execute_reply": "2023-05-26T07:08:54.123306Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:08:54.127360Z",
     "iopub.status.busy": "2023-05-26T07:08:54.126801Z",
     "iopub.status.idle": "2023-05-26T07:08:54.137146Z",
     "shell.execute_reply": "2023-05-26T07:08:54.136539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8588a33d60>\n",
       "├── 'a' --> tensor([[ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8588a335e0>\n",
       "    └── 'c' --> tensor([[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:08:54.139893Z",
     "iopub.status.busy": "2023-05-26T07:08:54.139663Z",
     "iopub.status.idle": "2023-05-26T07:08:54.144268Z",
     "shell.execute_reply": "2023-05-26T07:08:54.143653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6084, -0.7588,  0.5138],\n",
       "        [ 0.3963,  0.5435, -0.3306]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:08:54.147568Z",
     "iopub.status.busy": "2023-05-26T07:08:54.147039Z",
     "iopub.status.idle": "2023-05-26T07:08:59.133438Z",
     "shell.execute_reply": "2023-05-26T07:08:59.132726Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.4 ns ± 0.0657 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:08:59.136727Z",
     "iopub.status.busy": "2023-05-26T07:08:59.136352Z",
     "iopub.status.idle": "2023-05-26T07:08:59.142493Z",
     "shell.execute_reply": "2023-05-26T07:08:59.141828Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8588a33d60>\n",
       "├── 'a' --> tensor([[ 0.4994, -0.2943, -1.4299],\n",
       "│                   [-2.2572, -1.6841, -1.2392]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8588a335e0>\n",
       "    └── 'c' --> tensor([[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:08:59.145303Z",
     "iopub.status.busy": "2023-05-26T07:08:59.144952Z",
     "iopub.status.idle": "2023-05-26T07:09:03.925941Z",
     "shell.execute_reply": "2023-05-26T07:09:03.924848Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.8 ns ± 0.0668 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:03.929044Z",
     "iopub.status.busy": "2023-05-26T07:09:03.928803Z",
     "iopub.status.idle": "2023-05-26T07:09:04.278267Z",
     "shell.execute_reply": "2023-05-26T07:09:04.277579Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:04.282036Z",
     "iopub.status.busy": "2023-05-26T07:09:04.281318Z",
     "iopub.status.idle": "2023-05-26T07:09:04.287013Z",
     "shell.execute_reply": "2023-05-26T07:09:04.286346Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:04.289813Z",
     "iopub.status.busy": "2023-05-26T07:09:04.289474Z",
     "iopub.status.idle": "2023-05-26T07:09:04.294170Z",
     "shell.execute_reply": "2023-05-26T07:09:04.293538Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6084, -0.7588,  0.5138],\n",
       "        [ 0.3963,  0.5435, -0.3306]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:04.297024Z",
     "iopub.status.busy": "2023-05-26T07:09:04.296677Z",
     "iopub.status.idle": "2023-05-26T07:09:08.726689Z",
     "shell.execute_reply": "2023-05-26T07:09:08.725858Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54.6 ns ± 0.0321 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:08.729806Z",
     "iopub.status.busy": "2023-05-26T07:09:08.729566Z",
     "iopub.status.idle": "2023-05-26T07:09:08.735582Z",
     "shell.execute_reply": "2023-05-26T07:09:08.734934Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.5708,  0.1319,  1.3915],\n",
       "               [-0.1372, -0.7080, -1.2420]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:08.738535Z",
     "iopub.status.busy": "2023-05-26T07:09:08.738020Z",
     "iopub.status.idle": "2023-05-26T07:09:12.664702Z",
     "shell.execute_reply": "2023-05-26T07:09:12.664120Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "484 ns ± 0.18 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:12.667879Z",
     "iopub.status.busy": "2023-05-26T07:09:12.667429Z",
     "iopub.status.idle": "2023-05-26T07:09:19.838205Z",
     "shell.execute_reply": "2023-05-26T07:09:19.837621Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "884 ns ± 7.06 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:19.841440Z",
     "iopub.status.busy": "2023-05-26T07:09:19.840789Z",
     "iopub.status.idle": "2023-05-26T07:09:29.033384Z",
     "shell.execute_reply": "2023-05-26T07:09:29.032803Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 35.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:29.036658Z",
     "iopub.status.busy": "2023-05-26T07:09:29.036081Z",
     "iopub.status.idle": "2023-05-26T07:09:29.039168Z",
     "shell.execute_reply": "2023-05-26T07:09:29.038638Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:29.041657Z",
     "iopub.status.busy": "2023-05-26T07:09:29.041436Z",
     "iopub.status.idle": "2023-05-26T07:09:40.252219Z",
     "shell.execute_reply": "2023-05-26T07:09:40.251655Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 336 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:40.255279Z",
     "iopub.status.busy": "2023-05-26T07:09:40.254918Z",
     "iopub.status.idle": "2023-05-26T07:09:51.582729Z",
     "shell.execute_reply": "2023-05-26T07:09:51.582148Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 307 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:51.585869Z",
     "iopub.status.busy": "2023-05-26T07:09:51.585509Z",
     "iopub.status.idle": "2023-05-26T07:09:51.588669Z",
     "shell.execute_reply": "2023-05-26T07:09:51.588140Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:51.591406Z",
     "iopub.status.busy": "2023-05-26T07:09:51.590981Z",
     "iopub.status.idle": "2023-05-26T07:09:51.598173Z",
     "shell.execute_reply": "2023-05-26T07:09:51.597635Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f84b9d14f40>\n",
       "├── 'a' --> tensor([[[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]],\n",
       "│           \n",
       "│                   [[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]],\n",
       "│           \n",
       "│                   [[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]],\n",
       "│           \n",
       "│                   [[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]],\n",
       "│           \n",
       "│                   [[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]],\n",
       "│           \n",
       "│                   [[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]],\n",
       "│           \n",
       "│                   [[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]],\n",
       "│           \n",
       "│                   [[ 0.6084, -0.7588,  0.5138],\n",
       "│                    [ 0.3963,  0.5435, -0.3306]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f84b9d14f10>\n",
       "    └── 'c' --> tensor([[[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "                \n",
       "                        [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "                \n",
       "                        [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "                \n",
       "                        [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "                \n",
       "                        [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "                \n",
       "                        [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "                \n",
       "                        [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "                \n",
       "                        [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                         [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                         [ 0.4824, -1.2804, -1.0225, -1.6694]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:51.600962Z",
     "iopub.status.busy": "2023-05-26T07:09:51.600558Z",
     "iopub.status.idle": "2023-05-26T07:09:54.208570Z",
     "shell.execute_reply": "2023-05-26T07:09:54.207980Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 99 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:54.211595Z",
     "iopub.status.busy": "2023-05-26T07:09:54.211114Z",
     "iopub.status.idle": "2023-05-26T07:09:54.218514Z",
     "shell.execute_reply": "2023-05-26T07:09:54.217859Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f84c2dfa190>\n",
       "├── 'a' --> tensor([[ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306],\n",
       "│                   [ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306],\n",
       "│                   [ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306],\n",
       "│                   [ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306],\n",
       "│                   [ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306],\n",
       "│                   [ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306],\n",
       "│                   [ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306],\n",
       "│                   [ 0.6084, -0.7588,  0.5138],\n",
       "│                   [ 0.3963,  0.5435, -0.3306]])\n",
       "└── 'x' --> <FastTreeValue 0x7f858aabb280>\n",
       "    └── 'c' --> tensor([[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                        [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                        [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                        [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                        [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                        [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                        [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                        [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                        [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                        [ 0.4824, -1.2804, -1.0225, -1.6694]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:54.221271Z",
     "iopub.status.busy": "2023-05-26T07:09:54.220926Z",
     "iopub.status.idle": "2023-05-26T07:09:56.688395Z",
     "shell.execute_reply": "2023-05-26T07:09:56.687650Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.3 µs ± 56.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:09:56.691681Z",
     "iopub.status.busy": "2023-05-26T07:09:56.691070Z",
     "iopub.status.idle": "2023-05-26T07:10:02.282001Z",
     "shell.execute_reply": "2023-05-26T07:10:02.281416Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.8 µs ± 86.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:10:02.285333Z",
     "iopub.status.busy": "2023-05-26T07:10:02.284779Z",
     "iopub.status.idle": "2023-05-26T07:10:02.293300Z",
     "shell.execute_reply": "2023-05-26T07:10:02.292713Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "              \n",
       "                      [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "              \n",
       "                      [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "              \n",
       "                      [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "              \n",
       "                      [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "              \n",
       "                      [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "              \n",
       "                      [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]],\n",
       "              \n",
       "                      [[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                       [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                       [ 0.4824, -1.2804, -1.0225, -1.6694]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]],\n",
       "       \n",
       "               [[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]],\n",
       "       \n",
       "               [[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]],\n",
       "       \n",
       "               [[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]],\n",
       "       \n",
       "               [[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]],\n",
       "       \n",
       "               [[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]],\n",
       "       \n",
       "               [[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]],\n",
       "       \n",
       "               [[ 0.6084, -0.7588,  0.5138],\n",
       "                [ 0.3963,  0.5435, -0.3306]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:10:02.296075Z",
     "iopub.status.busy": "2023-05-26T07:10:02.295716Z",
     "iopub.status.idle": "2023-05-26T07:10:08.648490Z",
     "shell.execute_reply": "2023-05-26T07:10:08.647820Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.1 µs ± 169 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:10:08.652240Z",
     "iopub.status.busy": "2023-05-26T07:10:08.651697Z",
     "iopub.status.idle": "2023-05-26T07:10:08.659647Z",
     "shell.execute_reply": "2023-05-26T07:10:08.659037Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                      [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                      [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                      [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                      [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                      [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                      [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694],\n",
       "                      [-0.3289,  0.5932,  0.2774, -2.1261],\n",
       "                      [-2.7271, -0.7969, -1.0272, -0.9531],\n",
       "                      [ 0.4824, -1.2804, -1.0225, -1.6694]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306],\n",
       "               [ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306],\n",
       "               [ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306],\n",
       "               [ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306],\n",
       "               [ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306],\n",
       "               [ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306],\n",
       "               [ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306],\n",
       "               [ 0.6084, -0.7588,  0.5138],\n",
       "               [ 0.3963,  0.5435, -0.3306]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:10:08.662306Z",
     "iopub.status.busy": "2023-05-26T07:10:08.662087Z",
     "iopub.status.idle": "2023-05-26T07:10:20.502936Z",
     "shell.execute_reply": "2023-05-26T07:10:20.502216Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 449 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:10:20.506420Z",
     "iopub.status.busy": "2023-05-26T07:10:20.506054Z",
     "iopub.status.idle": "2023-05-26T07:10:23.136343Z",
     "shell.execute_reply": "2023-05-26T07:10:23.135608Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "323 µs ± 2.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
