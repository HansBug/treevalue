{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:19.082353Z",
     "iopub.status.busy": "2024-10-16T13:11:19.082142Z",
     "iopub.status.idle": "2024-10-16T13:11:20.282792Z",
     "shell.execute_reply": "2024-10-16T13:11:20.282039Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:20.285622Z",
     "iopub.status.busy": "2024-10-16T13:11:20.285316Z",
     "iopub.status.idle": "2024-10-16T13:11:20.311788Z",
     "shell.execute_reply": "2024-10-16T13:11:20.311152Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:20.313780Z",
     "iopub.status.busy": "2024-10-16T13:11:20.313557Z",
     "iopub.status.idle": "2024-10-16T13:11:20.321901Z",
     "shell.execute_reply": "2024-10-16T13:11:20.321265Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd004ba3e20>\n",
       "├── 'a' --> tensor([[0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd004bf1b20>\n",
       "    └── 'c' --> tensor([[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:20.323845Z",
     "iopub.status.busy": "2024-10-16T13:11:20.323646Z",
     "iopub.status.idle": "2024-10-16T13:11:20.328164Z",
     "shell.execute_reply": "2024-10-16T13:11:20.327528Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.0160, 0.9517, 0.7109],\n",
       "        [0.9249, 0.6371, 0.0753]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:20.330421Z",
     "iopub.status.busy": "2024-10-16T13:11:20.329923Z",
     "iopub.status.idle": "2024-10-16T13:11:24.414401Z",
     "shell.execute_reply": "2024-10-16T13:11:24.413644Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49.3 ns ± 0.166 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:24.416538Z",
     "iopub.status.busy": "2024-10-16T13:11:24.416290Z",
     "iopub.status.idle": "2024-10-16T13:11:24.422179Z",
     "shell.execute_reply": "2024-10-16T13:11:24.421588Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd004ba3e20>\n",
       "├── 'a' --> tensor([[-0.3580,  0.5381,  0.3574],\n",
       "│                   [-2.2296,  0.5389, -0.3477]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd004bf1b20>\n",
       "    └── 'c' --> tensor([[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:24.424122Z",
     "iopub.status.busy": "2024-10-16T13:11:24.423911Z",
     "iopub.status.idle": "2024-10-16T13:11:28.971374Z",
     "shell.execute_reply": "2024-10-16T13:11:28.970733Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54.6 ns ± 0.491 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:28.973531Z",
     "iopub.status.busy": "2024-10-16T13:11:28.973302Z",
     "iopub.status.idle": "2024-10-16T13:11:29.269920Z",
     "shell.execute_reply": "2024-10-16T13:11:29.269191Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:29.272836Z",
     "iopub.status.busy": "2024-10-16T13:11:29.272264Z",
     "iopub.status.idle": "2024-10-16T13:11:29.277463Z",
     "shell.execute_reply": "2024-10-16T13:11:29.276847Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:29.279590Z",
     "iopub.status.busy": "2024-10-16T13:11:29.279199Z",
     "iopub.status.idle": "2024-10-16T13:11:29.283712Z",
     "shell.execute_reply": "2024-10-16T13:11:29.283089Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.0160, 0.9517, 0.7109],\n",
       "        [0.9249, 0.6371, 0.0753]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:29.285673Z",
     "iopub.status.busy": "2024-10-16T13:11:29.285472Z",
     "iopub.status.idle": "2024-10-16T13:11:32.663906Z",
     "shell.execute_reply": "2024-10-16T13:11:32.663260Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40.9 ns ± 0.305 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:32.666229Z",
     "iopub.status.busy": "2024-10-16T13:11:32.665838Z",
     "iopub.status.idle": "2024-10-16T13:11:32.671477Z",
     "shell.execute_reply": "2024-10-16T13:11:32.670940Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.6719, -2.5417, -0.6172],\n",
       "               [-1.0708, -0.9851, -0.1983]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:32.673595Z",
     "iopub.status.busy": "2024-10-16T13:11:32.673204Z",
     "iopub.status.idle": "2024-10-16T13:11:35.647714Z",
     "shell.execute_reply": "2024-10-16T13:11:35.646997Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "363 ns ± 1.47 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:35.650362Z",
     "iopub.status.busy": "2024-10-16T13:11:35.649840Z",
     "iopub.status.idle": "2024-10-16T13:11:40.724847Z",
     "shell.execute_reply": "2024-10-16T13:11:40.724196Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "619 ns ± 4.31 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:40.727224Z",
     "iopub.status.busy": "2024-10-16T13:11:40.726796Z",
     "iopub.status.idle": "2024-10-16T13:11:47.652978Z",
     "shell.execute_reply": "2024-10-16T13:11:47.652335Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.55 µs ± 42 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:47.655342Z",
     "iopub.status.busy": "2024-10-16T13:11:47.654906Z",
     "iopub.status.idle": "2024-10-16T13:11:47.658099Z",
     "shell.execute_reply": "2024-10-16T13:11:47.657488Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:47.660316Z",
     "iopub.status.busy": "2024-10-16T13:11:47.659925Z",
     "iopub.status.idle": "2024-10-16T13:11:58.002417Z",
     "shell.execute_reply": "2024-10-16T13:11:58.001689Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "127 µs ± 712 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:11:58.004835Z",
     "iopub.status.busy": "2024-10-16T13:11:58.004611Z",
     "iopub.status.idle": "2024-10-16T13:12:08.075735Z",
     "shell.execute_reply": "2024-10-16T13:12:08.075016Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "124 µs ± 549 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:08.078348Z",
     "iopub.status.busy": "2024-10-16T13:12:08.077890Z",
     "iopub.status.idle": "2024-10-16T13:12:08.081391Z",
     "shell.execute_reply": "2024-10-16T13:12:08.080714Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:08.083487Z",
     "iopub.status.busy": "2024-10-16T13:12:08.083109Z",
     "iopub.status.idle": "2024-10-16T13:12:08.090040Z",
     "shell.execute_reply": "2024-10-16T13:12:08.089392Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcf27f20250>\n",
       "├── 'a' --> tensor([[[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]],\n",
       "│           \n",
       "│                   [[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]],\n",
       "│           \n",
       "│                   [[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]],\n",
       "│           \n",
       "│                   [[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]],\n",
       "│           \n",
       "│                   [[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]],\n",
       "│           \n",
       "│                   [[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]],\n",
       "│           \n",
       "│                   [[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]],\n",
       "│           \n",
       "│                   [[0.0160, 0.9517, 0.7109],\n",
       "│                    [0.9249, 0.6371, 0.0753]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcf1ec6ff40>\n",
       "    └── 'c' --> tensor([[[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "                \n",
       "                        [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "                \n",
       "                        [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "                \n",
       "                        [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "                \n",
       "                        [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "                \n",
       "                        [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "                \n",
       "                        [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "                \n",
       "                        [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                         [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                         [-0.5804,  0.1720,  1.1919, -0.9883]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:08.092236Z",
     "iopub.status.busy": "2024-10-16T13:12:08.091862Z",
     "iopub.status.idle": "2024-10-16T13:12:10.069973Z",
     "shell.execute_reply": "2024-10-16T13:12:10.069220Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.3 µs ± 83.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:10.072226Z",
     "iopub.status.busy": "2024-10-16T13:12:10.071820Z",
     "iopub.status.idle": "2024-10-16T13:12:10.079222Z",
     "shell.execute_reply": "2024-10-16T13:12:10.078546Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fcf1ec71c40>\n",
       "├── 'a' --> tensor([[0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753],\n",
       "│                   [0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753],\n",
       "│                   [0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753],\n",
       "│                   [0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753],\n",
       "│                   [0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753],\n",
       "│                   [0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753],\n",
       "│                   [0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753],\n",
       "│                   [0.0160, 0.9517, 0.7109],\n",
       "│                   [0.9249, 0.6371, 0.0753]])\n",
       "└── 'x' --> <FastTreeValue 0x7fcf1fcda040>\n",
       "    └── 'c' --> tensor([[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                        [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                        [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                        [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                        [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                        [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                        [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                        [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                        [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                        [-0.5804,  0.1720,  1.1919, -0.9883]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:10.081293Z",
     "iopub.status.busy": "2024-10-16T13:12:10.080924Z",
     "iopub.status.idle": "2024-10-16T13:12:11.914855Z",
     "shell.execute_reply": "2024-10-16T13:12:11.914206Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22.6 µs ± 219 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:11.916901Z",
     "iopub.status.busy": "2024-10-16T13:12:11.916704Z",
     "iopub.status.idle": "2024-10-16T13:12:15.947513Z",
     "shell.execute_reply": "2024-10-16T13:12:15.946861Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49.7 µs ± 813 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:15.949623Z",
     "iopub.status.busy": "2024-10-16T13:12:15.949407Z",
     "iopub.status.idle": "2024-10-16T13:12:15.956247Z",
     "shell.execute_reply": "2024-10-16T13:12:15.955716Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]],\n",
       "       \n",
       "               [[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]],\n",
       "       \n",
       "               [[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]],\n",
       "       \n",
       "               [[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]],\n",
       "       \n",
       "               [[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]],\n",
       "       \n",
       "               [[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]],\n",
       "       \n",
       "               [[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]],\n",
       "       \n",
       "               [[0.0160, 0.9517, 0.7109],\n",
       "                [0.9249, 0.6371, 0.0753]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "              \n",
       "                      [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "              \n",
       "                      [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "              \n",
       "                      [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "              \n",
       "                      [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "              \n",
       "                      [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "              \n",
       "                      [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]],\n",
       "              \n",
       "                      [[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                       [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                       [-0.5804,  0.1720,  1.1919, -0.9883]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:15.958299Z",
     "iopub.status.busy": "2024-10-16T13:12:15.958092Z",
     "iopub.status.idle": "2024-10-16T13:12:21.099870Z",
     "shell.execute_reply": "2024-10-16T13:12:21.099241Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.1 µs ± 534 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:21.101850Z",
     "iopub.status.busy": "2024-10-16T13:12:21.101640Z",
     "iopub.status.idle": "2024-10-16T13:12:21.108417Z",
     "shell.execute_reply": "2024-10-16T13:12:21.107750Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753],\n",
       "               [0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753],\n",
       "               [0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753],\n",
       "               [0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753],\n",
       "               [0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753],\n",
       "               [0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753],\n",
       "               [0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753],\n",
       "               [0.0160, 0.9517, 0.7109],\n",
       "               [0.9249, 0.6371, 0.0753]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                      [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                      [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                      [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                      [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                      [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                      [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883],\n",
       "                      [-0.1180,  1.1987,  0.7311, -0.3844],\n",
       "                      [-1.3379,  0.8012, -1.3079, -0.1670],\n",
       "                      [-0.5804,  0.1720,  1.1919, -0.9883]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:21.110391Z",
     "iopub.status.busy": "2024-10-16T13:12:21.110186Z",
     "iopub.status.idle": "2024-10-16T13:12:30.731155Z",
     "shell.execute_reply": "2024-10-16T13:12:30.730505Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "119 µs ± 486 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:12:30.733269Z",
     "iopub.status.busy": "2024-10-16T13:12:30.733037Z",
     "iopub.status.idle": "2024-10-16T13:12:33.027760Z",
     "shell.execute_reply": "2024-10-16T13:12:33.026968Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "281 µs ± 2.63 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
