{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:48.231984Z",
     "iopub.status.busy": "2023-02-27T11:25:48.231719Z",
     "iopub.status.idle": "2023-02-27T11:25:49.399550Z",
     "shell.execute_reply": "2023-02-27T11:25:49.398529Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:49.403842Z",
     "iopub.status.busy": "2023-02-27T11:25:49.403212Z",
     "iopub.status.idle": "2023-02-27T11:25:49.443323Z",
     "shell.execute_reply": "2023-02-27T11:25:49.442519Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:49.447529Z",
     "iopub.status.busy": "2023-02-27T11:25:49.446971Z",
     "iopub.status.idle": "2023-02-27T11:25:49.463554Z",
     "shell.execute_reply": "2023-02-27T11:25:49.458919Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2a24cc90d0>\n",
       "├── 'a' --> tensor([[-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2a24c99b20>\n",
       "    └── 'c' --> tensor([[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:49.468209Z",
     "iopub.status.busy": "2023-02-27T11:25:49.466732Z",
     "iopub.status.idle": "2023-02-27T11:25:49.474577Z",
     "shell.execute_reply": "2023-02-27T11:25:49.473868Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0707,  1.2092,  0.9996],\n",
       "        [ 0.6008,  0.5328,  1.0580]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:49.479624Z",
     "iopub.status.busy": "2023-02-27T11:25:49.477452Z",
     "iopub.status.idle": "2023-02-27T11:25:55.863528Z",
     "shell.execute_reply": "2023-02-27T11:25:55.862302Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 ns ± 0.232 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:55.868046Z",
     "iopub.status.busy": "2023-02-27T11:25:55.867073Z",
     "iopub.status.idle": "2023-02-27T11:25:55.875514Z",
     "shell.execute_reply": "2023-02-27T11:25:55.874768Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2a24cc90d0>\n",
       "├── 'a' --> tensor([[-0.3461,  0.0019,  0.5644],\n",
       "│                   [-0.7596,  0.4651, -1.8409]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2a24c99b20>\n",
       "    └── 'c' --> tensor([[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:55.879303Z",
     "iopub.status.busy": "2023-02-27T11:25:55.878547Z",
     "iopub.status.idle": "2023-02-27T11:26:03.223380Z",
     "shell.execute_reply": "2023-02-27T11:26:03.222364Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.5 ns ± 0.243 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:03.227319Z",
     "iopub.status.busy": "2023-02-27T11:26:03.226758Z",
     "iopub.status.idle": "2023-02-27T11:26:03.637472Z",
     "shell.execute_reply": "2023-02-27T11:26:03.636605Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:03.642125Z",
     "iopub.status.busy": "2023-02-27T11:26:03.641289Z",
     "iopub.status.idle": "2023-02-27T11:26:03.649681Z",
     "shell.execute_reply": "2023-02-27T11:26:03.648982Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:03.653113Z",
     "iopub.status.busy": "2023-02-27T11:26:03.652519Z",
     "iopub.status.idle": "2023-02-27T11:26:03.658793Z",
     "shell.execute_reply": "2023-02-27T11:26:03.658074Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0707,  1.2092,  0.9996],\n",
       "        [ 0.6008,  0.5328,  1.0580]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:03.661863Z",
     "iopub.status.busy": "2023-02-27T11:26:03.661419Z",
     "iopub.status.idle": "2023-02-27T11:26:09.267956Z",
     "shell.execute_reply": "2023-02-27T11:26:09.266807Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.1 ns ± 0.25 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:09.271736Z",
     "iopub.status.busy": "2023-02-27T11:26:09.271189Z",
     "iopub.status.idle": "2023-02-27T11:26:09.279021Z",
     "shell.execute_reply": "2023-02-27T11:26:09.278280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0648,  0.5701,  0.3449],\n",
       "               [-0.6834,  0.1541, -0.1849]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:09.282215Z",
     "iopub.status.busy": "2023-02-27T11:26:09.281741Z",
     "iopub.status.idle": "2023-02-27T11:26:14.164126Z",
     "shell.execute_reply": "2023-02-27T11:26:14.162916Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "599 ns ± 2.75 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:14.168479Z",
     "iopub.status.busy": "2023-02-27T11:26:14.167708Z",
     "iopub.status.idle": "2023-02-27T11:26:22.099536Z",
     "shell.execute_reply": "2023-02-27T11:26:22.098699Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "977 ns ± 6.06 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:22.103458Z",
     "iopub.status.busy": "2023-02-27T11:26:22.102874Z",
     "iopub.status.idle": "2023-02-27T11:26:31.901739Z",
     "shell.execute_reply": "2023-02-27T11:26:31.900436Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.1 µs ± 79.6 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:31.906416Z",
     "iopub.status.busy": "2023-02-27T11:26:31.905577Z",
     "iopub.status.idle": "2023-02-27T11:26:31.910004Z",
     "shell.execute_reply": "2023-02-27T11:26:31.909275Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:31.913511Z",
     "iopub.status.busy": "2023-02-27T11:26:31.912906Z",
     "iopub.status.idle": "2023-02-27T11:26:45.429680Z",
     "shell.execute_reply": "2023-02-27T11:26:45.428974Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 966 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:45.433062Z",
     "iopub.status.busy": "2023-02-27T11:26:45.432472Z",
     "iopub.status.idle": "2023-02-27T11:26:58.844651Z",
     "shell.execute_reply": "2023-02-27T11:26:58.843946Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "165 µs ± 557 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:58.848248Z",
     "iopub.status.busy": "2023-02-27T11:26:58.847675Z",
     "iopub.status.idle": "2023-02-27T11:26:58.851616Z",
     "shell.execute_reply": "2023-02-27T11:26:58.850975Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:58.854748Z",
     "iopub.status.busy": "2023-02-27T11:26:58.854005Z",
     "iopub.status.idle": "2023-02-27T11:26:58.862128Z",
     "shell.execute_reply": "2023-02-27T11:26:58.861475Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f29fc97b2e0>\n",
       "├── 'a' --> tensor([[[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]],\n",
       "│           \n",
       "│                   [[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]],\n",
       "│           \n",
       "│                   [[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]],\n",
       "│           \n",
       "│                   [[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]],\n",
       "│           \n",
       "│                   [[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]],\n",
       "│           \n",
       "│                   [[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]],\n",
       "│           \n",
       "│                   [[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]],\n",
       "│           \n",
       "│                   [[-1.0707,  1.2092,  0.9996],\n",
       "│                    [ 0.6008,  0.5328,  1.0580]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f29fc97b310>\n",
       "    └── 'c' --> tensor([[[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "                \n",
       "                        [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "                \n",
       "                        [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "                \n",
       "                        [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "                \n",
       "                        [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "                \n",
       "                        [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "                \n",
       "                        [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "                \n",
       "                        [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                         [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                         [ 0.1375, -0.1942, -0.2934, -0.4540]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:58.865196Z",
     "iopub.status.busy": "2023-02-27T11:26:58.864491Z",
     "iopub.status.idle": "2023-02-27T11:27:01.877781Z",
     "shell.execute_reply": "2023-02-27T11:27:01.876834Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37 µs ± 176 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:01.881622Z",
     "iopub.status.busy": "2023-02-27T11:27:01.880965Z",
     "iopub.status.idle": "2023-02-27T11:27:01.889610Z",
     "shell.execute_reply": "2023-02-27T11:27:01.888770Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2a24cc9160>\n",
       "├── 'a' --> tensor([[-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580],\n",
       "│                   [-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580],\n",
       "│                   [-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580],\n",
       "│                   [-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580],\n",
       "│                   [-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580],\n",
       "│                   [-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580],\n",
       "│                   [-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580],\n",
       "│                   [-1.0707,  1.2092,  0.9996],\n",
       "│                   [ 0.6008,  0.5328,  1.0580]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2a24c94310>\n",
       "    └── 'c' --> tensor([[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                        [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                        [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                        [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                        [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                        [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                        [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                        [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                        [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                        [ 0.1375, -0.1942, -0.2934, -0.4540]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:01.893049Z",
     "iopub.status.busy": "2023-02-27T11:27:01.892411Z",
     "iopub.status.idle": "2023-02-27T11:27:04.678288Z",
     "shell.execute_reply": "2023-02-27T11:27:04.677188Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34.2 µs ± 218 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:04.681993Z",
     "iopub.status.busy": "2023-02-27T11:27:04.681318Z",
     "iopub.status.idle": "2023-02-27T11:27:09.883874Z",
     "shell.execute_reply": "2023-02-27T11:27:09.882749Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.9 µs ± 309 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:09.887946Z",
     "iopub.status.busy": "2023-02-27T11:27:09.887252Z",
     "iopub.status.idle": "2023-02-27T11:27:09.896728Z",
     "shell.execute_reply": "2023-02-27T11:27:09.896030Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "              \n",
       "                      [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "              \n",
       "                      [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "              \n",
       "                      [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "              \n",
       "                      [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "              \n",
       "                      [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "              \n",
       "                      [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]],\n",
       "              \n",
       "                      [[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                       [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                       [ 0.1375, -0.1942, -0.2934, -0.4540]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]],\n",
       "       \n",
       "               [[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]],\n",
       "       \n",
       "               [[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]],\n",
       "       \n",
       "               [[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]],\n",
       "       \n",
       "               [[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]],\n",
       "       \n",
       "               [[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]],\n",
       "       \n",
       "               [[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]],\n",
       "       \n",
       "               [[-1.0707,  1.2092,  0.9996],\n",
       "                [ 0.6008,  0.5328,  1.0580]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:09.900291Z",
     "iopub.status.busy": "2023-02-27T11:27:09.899653Z",
     "iopub.status.idle": "2023-02-27T11:27:17.155488Z",
     "shell.execute_reply": "2023-02-27T11:27:17.154534Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89.2 µs ± 408 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:17.160026Z",
     "iopub.status.busy": "2023-02-27T11:27:17.159366Z",
     "iopub.status.idle": "2023-02-27T11:27:17.168375Z",
     "shell.execute_reply": "2023-02-27T11:27:17.167611Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                      [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                      [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                      [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                      [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                      [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                      [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540],\n",
       "                      [ 0.1077, -0.7732, -0.0566,  1.7932],\n",
       "                      [-0.2822, -1.9354, -0.1867,  1.8209],\n",
       "                      [ 0.1375, -0.1942, -0.2934, -0.4540]]),\n",
       "       ),\n",
       "    a: tensor([[-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580],\n",
       "               [-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580],\n",
       "               [-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580],\n",
       "               [-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580],\n",
       "               [-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580],\n",
       "               [-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580],\n",
       "               [-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580],\n",
       "               [-1.0707,  1.2092,  0.9996],\n",
       "               [ 0.6008,  0.5328,  1.0580]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:17.171949Z",
     "iopub.status.busy": "2023-02-27T11:27:17.171169Z",
     "iopub.status.idle": "2023-02-27T11:27:30.701336Z",
     "shell.execute_reply": "2023-02-27T11:27:30.699976Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "166 µs ± 691 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:30.707661Z",
     "iopub.status.busy": "2023-02-27T11:27:30.706787Z",
     "iopub.status.idle": "2023-02-27T11:27:33.801489Z",
     "shell.execute_reply": "2023-02-27T11:27:33.800613Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "380 µs ± 1.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
