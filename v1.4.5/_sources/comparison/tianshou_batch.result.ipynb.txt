{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:20:58.726338Z",
     "iopub.status.busy": "2023-02-24T07:20:58.726111Z",
     "iopub.status.idle": "2023-02-24T07:20:59.645864Z",
     "shell.execute_reply": "2023-02-24T07:20:59.645197Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:20:59.649385Z",
     "iopub.status.busy": "2023-02-24T07:20:59.648721Z",
     "iopub.status.idle": "2023-02-24T07:20:59.681837Z",
     "shell.execute_reply": "2023-02-24T07:20:59.681217Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:20:59.684740Z",
     "iopub.status.busy": "2023-02-24T07:20:59.684213Z",
     "iopub.status.idle": "2023-02-24T07:20:59.693652Z",
     "shell.execute_reply": "2023-02-24T07:20:59.693040Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc780f8d670>\n",
       "├── 'a' --> tensor([[-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc780f8dd30>\n",
       "    └── 'c' --> tensor([[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:20:59.696319Z",
     "iopub.status.busy": "2023-02-24T07:20:59.695803Z",
     "iopub.status.idle": "2023-02-24T07:20:59.700539Z",
     "shell.execute_reply": "2023-02-24T07:20:59.699949Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.5251,  0.1962,  0.9168],\n",
       "        [-0.7550,  0.1347, -0.2752]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:20:59.703476Z",
     "iopub.status.busy": "2023-02-24T07:20:59.702995Z",
     "iopub.status.idle": "2023-02-24T07:21:04.553579Z",
     "shell.execute_reply": "2023-02-24T07:21:04.552837Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.8 ns ± 0.0599 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:04.556425Z",
     "iopub.status.busy": "2023-02-24T07:21:04.556079Z",
     "iopub.status.idle": "2023-02-24T07:21:04.562781Z",
     "shell.execute_reply": "2023-02-24T07:21:04.562203Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc780f8d670>\n",
       "├── 'a' --> tensor([[ 0.3637,  0.8112, -1.3288],\n",
       "│                   [-1.3516, -0.1837,  0.2410]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc780f8dd30>\n",
       "    └── 'c' --> tensor([[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:04.565530Z",
     "iopub.status.busy": "2023-02-24T07:21:04.564959Z",
     "iopub.status.idle": "2023-02-24T07:21:09.457933Z",
     "shell.execute_reply": "2023-02-24T07:21:09.457215Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.4 ns ± 0.0166 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:09.460809Z",
     "iopub.status.busy": "2023-02-24T07:21:09.460460Z",
     "iopub.status.idle": "2023-02-24T07:21:09.793633Z",
     "shell.execute_reply": "2023-02-24T07:21:09.792999Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:09.797074Z",
     "iopub.status.busy": "2023-02-24T07:21:09.796443Z",
     "iopub.status.idle": "2023-02-24T07:21:09.802526Z",
     "shell.execute_reply": "2023-02-24T07:21:09.801870Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:09.805348Z",
     "iopub.status.busy": "2023-02-24T07:21:09.804838Z",
     "iopub.status.idle": "2023-02-24T07:21:09.809534Z",
     "shell.execute_reply": "2023-02-24T07:21:09.808887Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.5251,  0.1962,  0.9168],\n",
       "        [-0.7550,  0.1347, -0.2752]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:09.812031Z",
     "iopub.status.busy": "2023-02-24T07:21:09.811696Z",
     "iopub.status.idle": "2023-02-24T07:21:14.357959Z",
     "shell.execute_reply": "2023-02-24T07:21:14.357242Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.2 ns ± 0.0275 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:14.360984Z",
     "iopub.status.busy": "2023-02-24T07:21:14.360420Z",
     "iopub.status.idle": "2023-02-24T07:21:14.366148Z",
     "shell.execute_reply": "2023-02-24T07:21:14.365523Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5395, -1.5408, -0.7230],\n",
       "               [-1.2055, -0.3428, -0.4516]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:14.368545Z",
     "iopub.status.busy": "2023-02-24T07:21:14.368209Z",
     "iopub.status.idle": "2023-02-24T07:21:18.348054Z",
     "shell.execute_reply": "2023-02-24T07:21:18.347157Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "489 ns ± 0.134 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:18.350946Z",
     "iopub.status.busy": "2023-02-24T07:21:18.350501Z",
     "iopub.status.idle": "2023-02-24T07:21:25.069757Z",
     "shell.execute_reply": "2023-02-24T07:21:25.069064Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "827 ns ± 0.0774 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:25.072615Z",
     "iopub.status.busy": "2023-02-24T07:21:25.072225Z",
     "iopub.status.idle": "2023-02-24T07:21:34.021593Z",
     "shell.execute_reply": "2023-02-24T07:21:34.020826Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 µs ± 80.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:34.024859Z",
     "iopub.status.busy": "2023-02-24T07:21:34.024340Z",
     "iopub.status.idle": "2023-02-24T07:21:34.028288Z",
     "shell.execute_reply": "2023-02-24T07:21:34.027707Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:34.031060Z",
     "iopub.status.busy": "2023-02-24T07:21:34.030435Z",
     "iopub.status.idle": "2023-02-24T07:21:44.848634Z",
     "shell.execute_reply": "2023-02-24T07:21:44.848082Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "133 µs ± 229 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:44.852452Z",
     "iopub.status.busy": "2023-02-24T07:21:44.851469Z",
     "iopub.status.idle": "2023-02-24T07:21:55.990033Z",
     "shell.execute_reply": "2023-02-24T07:21:55.989425Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 436 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:55.994054Z",
     "iopub.status.busy": "2023-02-24T07:21:55.993054Z",
     "iopub.status.idle": "2023-02-24T07:21:55.997372Z",
     "shell.execute_reply": "2023-02-24T07:21:55.996819Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:56.001001Z",
     "iopub.status.busy": "2023-02-24T07:21:56.000057Z",
     "iopub.status.idle": "2023-02-24T07:21:56.008844Z",
     "shell.execute_reply": "2023-02-24T07:21:56.008320Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc75c429ee0>\n",
       "├── 'a' --> tensor([[[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]],\n",
       "│           \n",
       "│                   [[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]],\n",
       "│           \n",
       "│                   [[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]],\n",
       "│           \n",
       "│                   [[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]],\n",
       "│           \n",
       "│                   [[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]],\n",
       "│           \n",
       "│                   [[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]],\n",
       "│           \n",
       "│                   [[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]],\n",
       "│           \n",
       "│                   [[-1.5251,  0.1962,  0.9168],\n",
       "│                    [-0.7550,  0.1347, -0.2752]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc75c429940>\n",
       "    └── 'c' --> tensor([[[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "                \n",
       "                        [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "                \n",
       "                        [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "                \n",
       "                        [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "                \n",
       "                        [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "                \n",
       "                        [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "                \n",
       "                        [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "                \n",
       "                        [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                         [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                         [ 0.7693, -2.5787, -1.2475,  0.5076]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:56.012399Z",
     "iopub.status.busy": "2023-02-24T07:21:56.011470Z",
     "iopub.status.idle": "2023-02-24T07:21:58.593862Z",
     "shell.execute_reply": "2023-02-24T07:21:58.593047Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.7 µs ± 27.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:58.596876Z",
     "iopub.status.busy": "2023-02-24T07:21:58.596362Z",
     "iopub.status.idle": "2023-02-24T07:21:58.604178Z",
     "shell.execute_reply": "2023-02-24T07:21:58.603591Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc6dac768e0>\n",
       "├── 'a' --> tensor([[-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752],\n",
       "│                   [-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752],\n",
       "│                   [-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752],\n",
       "│                   [-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752],\n",
       "│                   [-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752],\n",
       "│                   [-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752],\n",
       "│                   [-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752],\n",
       "│                   [-1.5251,  0.1962,  0.9168],\n",
       "│                   [-0.7550,  0.1347, -0.2752]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc6dac767c0>\n",
       "    └── 'c' --> tensor([[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                        [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                        [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                        [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                        [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                        [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                        [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                        [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                        [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                        [ 0.7693, -2.5787, -1.2475,  0.5076]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:21:58.606847Z",
     "iopub.status.busy": "2023-02-24T07:21:58.606300Z",
     "iopub.status.idle": "2023-02-24T07:22:01.009011Z",
     "shell.execute_reply": "2023-02-24T07:22:01.008349Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.5 µs ± 186 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:22:01.012220Z",
     "iopub.status.busy": "2023-02-24T07:22:01.011715Z",
     "iopub.status.idle": "2023-02-24T07:22:05.663492Z",
     "shell.execute_reply": "2023-02-24T07:22:05.662722Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.2 µs ± 628 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:22:05.666568Z",
     "iopub.status.busy": "2023-02-24T07:22:05.665983Z",
     "iopub.status.idle": "2023-02-24T07:22:05.674048Z",
     "shell.execute_reply": "2023-02-24T07:22:05.673451Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "              \n",
       "                      [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "              \n",
       "                      [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "              \n",
       "                      [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "              \n",
       "                      [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "              \n",
       "                      [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "              \n",
       "                      [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]],\n",
       "              \n",
       "                      [[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                       [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                       [ 0.7693, -2.5787, -1.2475,  0.5076]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]],\n",
       "       \n",
       "               [[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]],\n",
       "       \n",
       "               [[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]],\n",
       "       \n",
       "               [[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]],\n",
       "       \n",
       "               [[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]],\n",
       "       \n",
       "               [[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]],\n",
       "       \n",
       "               [[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]],\n",
       "       \n",
       "               [[-1.5251,  0.1962,  0.9168],\n",
       "                [-0.7550,  0.1347, -0.2752]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:22:05.676355Z",
     "iopub.status.busy": "2023-02-24T07:22:05.676154Z",
     "iopub.status.idle": "2023-02-24T07:22:11.997704Z",
     "shell.execute_reply": "2023-02-24T07:22:11.996919Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 µs ± 85.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:22:12.000707Z",
     "iopub.status.busy": "2023-02-24T07:22:12.000178Z",
     "iopub.status.idle": "2023-02-24T07:22:12.006940Z",
     "shell.execute_reply": "2023-02-24T07:22:12.006300Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                      [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                      [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                      [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                      [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                      [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                      [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076],\n",
       "                      [ 0.3076,  2.8109, -0.3795, -0.4946],\n",
       "                      [ 1.7469, -2.4834, -0.1314,  0.5626],\n",
       "                      [ 0.7693, -2.5787, -1.2475,  0.5076]]),\n",
       "       ),\n",
       "    a: tensor([[-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752],\n",
       "               [-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752],\n",
       "               [-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752],\n",
       "               [-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752],\n",
       "               [-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752],\n",
       "               [-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752],\n",
       "               [-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752],\n",
       "               [-1.5251,  0.1962,  0.9168],\n",
       "               [-0.7550,  0.1347, -0.2752]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:22:12.009408Z",
     "iopub.status.busy": "2023-02-24T07:22:12.009053Z",
     "iopub.status.idle": "2023-02-24T07:22:23.567776Z",
     "shell.execute_reply": "2023-02-24T07:22:23.567097Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 300 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:22:23.571052Z",
     "iopub.status.busy": "2023-02-24T07:22:23.570450Z",
     "iopub.status.idle": "2023-02-24T07:22:26.078355Z",
     "shell.execute_reply": "2023-02-24T07:22:26.077746Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "308 µs ± 1.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
