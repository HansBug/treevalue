{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:25.951250Z",
     "iopub.status.busy": "2023-02-27T11:52:25.951002Z",
     "iopub.status.idle": "2023-02-27T11:52:26.893883Z",
     "shell.execute_reply": "2023-02-27T11:52:26.893190Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:26.897777Z",
     "iopub.status.busy": "2023-02-27T11:52:26.897091Z",
     "iopub.status.idle": "2023-02-27T11:52:26.930506Z",
     "shell.execute_reply": "2023-02-27T11:52:26.929835Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:26.933644Z",
     "iopub.status.busy": "2023-02-27T11:52:26.933072Z",
     "iopub.status.idle": "2023-02-27T11:52:26.942566Z",
     "shell.execute_reply": "2023-02-27T11:52:26.941954Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa408379dc0>\n",
       "├── 'a' --> tensor([[ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa408379d30>\n",
       "    └── 'c' --> tensor([[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:26.945351Z",
     "iopub.status.busy": "2023-02-27T11:52:26.944748Z",
     "iopub.status.idle": "2023-02-27T11:52:26.950058Z",
     "shell.execute_reply": "2023-02-27T11:52:26.949480Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7380, -0.5792, -1.0891],\n",
       "        [-0.3249,  0.0254, -1.3844]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:26.952883Z",
     "iopub.status.busy": "2023-02-27T11:52:26.952418Z",
     "iopub.status.idle": "2023-02-27T11:52:31.704615Z",
     "shell.execute_reply": "2023-02-27T11:52:31.703956Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.5 ns ± 0.0489 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:31.707776Z",
     "iopub.status.busy": "2023-02-27T11:52:31.707312Z",
     "iopub.status.idle": "2023-02-27T11:52:31.714570Z",
     "shell.execute_reply": "2023-02-27T11:52:31.713879Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa408379dc0>\n",
       "├── 'a' --> tensor([[ 1.6498,  1.2412, -0.4433],\n",
       "│                   [ 1.2421, -0.7454, -0.3682]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa408379d30>\n",
       "    └── 'c' --> tensor([[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:31.718700Z",
     "iopub.status.busy": "2023-02-27T11:52:31.718049Z",
     "iopub.status.idle": "2023-02-27T11:52:36.413535Z",
     "shell.execute_reply": "2023-02-27T11:52:36.412741Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.8 ns ± 0.0283 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:36.416439Z",
     "iopub.status.busy": "2023-02-27T11:52:36.416079Z",
     "iopub.status.idle": "2023-02-27T11:52:36.780182Z",
     "shell.execute_reply": "2023-02-27T11:52:36.779391Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:36.783958Z",
     "iopub.status.busy": "2023-02-27T11:52:36.783355Z",
     "iopub.status.idle": "2023-02-27T11:52:36.789715Z",
     "shell.execute_reply": "2023-02-27T11:52:36.789098Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:36.793012Z",
     "iopub.status.busy": "2023-02-27T11:52:36.792495Z",
     "iopub.status.idle": "2023-02-27T11:52:36.799170Z",
     "shell.execute_reply": "2023-02-27T11:52:36.798533Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7380, -0.5792, -1.0891],\n",
       "        [-0.3249,  0.0254, -1.3844]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:36.802156Z",
     "iopub.status.busy": "2023-02-27T11:52:36.801804Z",
     "iopub.status.idle": "2023-02-27T11:52:41.783948Z",
     "shell.execute_reply": "2023-02-27T11:52:41.783166Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.3 ns ± 0.0247 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:41.787089Z",
     "iopub.status.busy": "2023-02-27T11:52:41.786830Z",
     "iopub.status.idle": "2023-02-27T11:52:41.793047Z",
     "shell.execute_reply": "2023-02-27T11:52:41.792469Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8228,  0.3203, -0.1011],\n",
       "               [ 1.6778, -1.4378, -1.1524]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:41.795969Z",
     "iopub.status.busy": "2023-02-27T11:52:41.795734Z",
     "iopub.status.idle": "2023-02-27T11:52:45.785669Z",
     "shell.execute_reply": "2023-02-27T11:52:45.784883Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492 ns ± 0.116 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:45.788981Z",
     "iopub.status.busy": "2023-02-27T11:52:45.788592Z",
     "iopub.status.idle": "2023-02-27T11:52:52.613507Z",
     "shell.execute_reply": "2023-02-27T11:52:52.612627Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "842 ns ± 0.0648 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:52:52.616629Z",
     "iopub.status.busy": "2023-02-27T11:52:52.616107Z",
     "iopub.status.idle": "2023-02-27T11:53:01.778641Z",
     "shell.execute_reply": "2023-02-27T11:53:01.777885Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 16.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:01.782053Z",
     "iopub.status.busy": "2023-02-27T11:53:01.781478Z",
     "iopub.status.idle": "2023-02-27T11:53:01.785163Z",
     "shell.execute_reply": "2023-02-27T11:53:01.784553Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:01.787781Z",
     "iopub.status.busy": "2023-02-27T11:53:01.787423Z",
     "iopub.status.idle": "2023-02-27T11:53:13.632069Z",
     "shell.execute_reply": "2023-02-27T11:53:13.631478Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 1.17 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:13.636097Z",
     "iopub.status.busy": "2023-02-27T11:53:13.635103Z",
     "iopub.status.idle": "2023-02-27T11:53:25.097186Z",
     "shell.execute_reply": "2023-02-27T11:53:25.096580Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 444 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:25.101356Z",
     "iopub.status.busy": "2023-02-27T11:53:25.100125Z",
     "iopub.status.idle": "2023-02-27T11:53:25.104819Z",
     "shell.execute_reply": "2023-02-27T11:53:25.104201Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:25.107677Z",
     "iopub.status.busy": "2023-02-27T11:53:25.107102Z",
     "iopub.status.idle": "2023-02-27T11:53:25.114617Z",
     "shell.execute_reply": "2023-02-27T11:53:25.113974Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa35d637f70>\n",
       "├── 'a' --> tensor([[[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]],\n",
       "│           \n",
       "│                   [[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]],\n",
       "│           \n",
       "│                   [[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]],\n",
       "│           \n",
       "│                   [[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]],\n",
       "│           \n",
       "│                   [[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]],\n",
       "│           \n",
       "│                   [[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]],\n",
       "│           \n",
       "│                   [[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]],\n",
       "│           \n",
       "│                   [[ 0.7380, -0.5792, -1.0891],\n",
       "│                    [-0.3249,  0.0254, -1.3844]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa363c25ee0>\n",
       "    └── 'c' --> tensor([[[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "                \n",
       "                        [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "                \n",
       "                        [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "                \n",
       "                        [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "                \n",
       "                        [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "                \n",
       "                        [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "                \n",
       "                        [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "                \n",
       "                        [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                         [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                         [-0.7803,  0.9864, -2.5061,  0.7014]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:25.117335Z",
     "iopub.status.busy": "2023-02-27T11:53:25.116989Z",
     "iopub.status.idle": "2023-02-27T11:53:27.667350Z",
     "shell.execute_reply": "2023-02-27T11:53:27.666626Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 64.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:27.670580Z",
     "iopub.status.busy": "2023-02-27T11:53:27.669984Z",
     "iopub.status.idle": "2023-02-27T11:53:27.678004Z",
     "shell.execute_reply": "2023-02-27T11:53:27.677397Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa363e9a280>\n",
       "├── 'a' --> tensor([[ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844],\n",
       "│                   [ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844],\n",
       "│                   [ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844],\n",
       "│                   [ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844],\n",
       "│                   [ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844],\n",
       "│                   [ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844],\n",
       "│                   [ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844],\n",
       "│                   [ 0.7380, -0.5792, -1.0891],\n",
       "│                   [-0.3249,  0.0254, -1.3844]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa363c25850>\n",
       "    └── 'c' --> tensor([[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                        [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                        [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                        [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                        [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                        [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                        [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                        [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                        [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                        [-0.7803,  0.9864, -2.5061,  0.7014]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:27.680795Z",
     "iopub.status.busy": "2023-02-27T11:53:27.680471Z",
     "iopub.status.idle": "2023-02-27T11:53:30.063525Z",
     "shell.execute_reply": "2023-02-27T11:53:30.062758Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.3 µs ± 34.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:30.066820Z",
     "iopub.status.busy": "2023-02-27T11:53:30.066288Z",
     "iopub.status.idle": "2023-02-27T11:53:34.903983Z",
     "shell.execute_reply": "2023-02-27T11:53:34.903285Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.4 µs ± 90.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:34.907104Z",
     "iopub.status.busy": "2023-02-27T11:53:34.906745Z",
     "iopub.status.idle": "2023-02-27T11:53:34.914749Z",
     "shell.execute_reply": "2023-02-27T11:53:34.914120Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "              \n",
       "                      [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "              \n",
       "                      [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "              \n",
       "                      [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "              \n",
       "                      [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "              \n",
       "                      [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "              \n",
       "                      [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]],\n",
       "              \n",
       "                      [[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                       [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                       [-0.7803,  0.9864, -2.5061,  0.7014]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]],\n",
       "       \n",
       "               [[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]],\n",
       "       \n",
       "               [[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]],\n",
       "       \n",
       "               [[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]],\n",
       "       \n",
       "               [[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]],\n",
       "       \n",
       "               [[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]],\n",
       "       \n",
       "               [[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]],\n",
       "       \n",
       "               [[ 0.7380, -0.5792, -1.0891],\n",
       "                [-0.3249,  0.0254, -1.3844]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:34.917420Z",
     "iopub.status.busy": "2023-02-27T11:53:34.917071Z",
     "iopub.status.idle": "2023-02-27T11:53:41.303799Z",
     "shell.execute_reply": "2023-02-27T11:53:41.303095Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.6 µs ± 102 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:41.306894Z",
     "iopub.status.busy": "2023-02-27T11:53:41.306222Z",
     "iopub.status.idle": "2023-02-27T11:53:41.314004Z",
     "shell.execute_reply": "2023-02-27T11:53:41.313382Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                      [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                      [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                      [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                      [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                      [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                      [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014],\n",
       "                      [ 0.8517, -0.3993,  1.1132, -0.5886],\n",
       "                      [-1.1397, -1.2686,  1.0152,  0.3250],\n",
       "                      [-0.7803,  0.9864, -2.5061,  0.7014]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844],\n",
       "               [ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844],\n",
       "               [ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844],\n",
       "               [ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844],\n",
       "               [ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844],\n",
       "               [ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844],\n",
       "               [ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844],\n",
       "               [ 0.7380, -0.5792, -1.0891],\n",
       "               [-0.3249,  0.0254, -1.3844]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:41.316941Z",
     "iopub.status.busy": "2023-02-27T11:53:41.316573Z",
     "iopub.status.idle": "2023-02-27T11:53:52.833090Z",
     "shell.execute_reply": "2023-02-27T11:53:52.832235Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 126 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:53:52.836216Z",
     "iopub.status.busy": "2023-02-27T11:53:52.835828Z",
     "iopub.status.idle": "2023-02-27T11:53:55.359695Z",
     "shell.execute_reply": "2023-02-27T11:53:55.358980Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "310 µs ± 3.71 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
