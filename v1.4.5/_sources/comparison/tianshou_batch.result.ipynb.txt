{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:01.721102Z",
     "iopub.status.busy": "2023-02-26T16:46:01.720852Z",
     "iopub.status.idle": "2023-02-26T16:46:02.708970Z",
     "shell.execute_reply": "2023-02-26T16:46:02.708137Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:02.713230Z",
     "iopub.status.busy": "2023-02-26T16:46:02.712608Z",
     "iopub.status.idle": "2023-02-26T16:46:02.748108Z",
     "shell.execute_reply": "2023-02-26T16:46:02.747378Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:02.751645Z",
     "iopub.status.busy": "2023-02-26T16:46:02.751152Z",
     "iopub.status.idle": "2023-02-26T16:46:02.761977Z",
     "shell.execute_reply": "2023-02-26T16:46:02.761344Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff0502f8fd0>\n",
       "├── 'a' --> tensor([[ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff0502920d0>\n",
       "    └── 'c' --> tensor([[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:02.765764Z",
     "iopub.status.busy": "2023-02-26T16:46:02.764648Z",
     "iopub.status.idle": "2023-02-26T16:46:02.771344Z",
     "shell.execute_reply": "2023-02-26T16:46:02.770739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6979,  0.0814, -1.7270],\n",
       "        [-0.3653,  0.2222, -0.5793]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:02.774426Z",
     "iopub.status.busy": "2023-02-26T16:46:02.773918Z",
     "iopub.status.idle": "2023-02-26T16:46:07.957048Z",
     "shell.execute_reply": "2023-02-26T16:46:07.956208Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 ns ± 0.0494 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:07.960423Z",
     "iopub.status.busy": "2023-02-26T16:46:07.959909Z",
     "iopub.status.idle": "2023-02-26T16:46:07.967500Z",
     "shell.execute_reply": "2023-02-26T16:46:07.966829Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff0502f8fd0>\n",
       "├── 'a' --> tensor([[-2.8178, -0.9363, -0.1934],\n",
       "│                   [-0.0656,  0.5652,  1.5287]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff0502920d0>\n",
       "    └── 'c' --> tensor([[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:07.971107Z",
     "iopub.status.busy": "2023-02-26T16:46:07.970428Z",
     "iopub.status.idle": "2023-02-26T16:46:13.363526Z",
     "shell.execute_reply": "2023-02-26T16:46:13.362621Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.4 ns ± 0.085 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:13.367710Z",
     "iopub.status.busy": "2023-02-26T16:46:13.366966Z",
     "iopub.status.idle": "2023-02-26T16:46:13.741215Z",
     "shell.execute_reply": "2023-02-26T16:46:13.740273Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:13.745207Z",
     "iopub.status.busy": "2023-02-26T16:46:13.744307Z",
     "iopub.status.idle": "2023-02-26T16:46:13.752064Z",
     "shell.execute_reply": "2023-02-26T16:46:13.751383Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:13.755257Z",
     "iopub.status.busy": "2023-02-26T16:46:13.754794Z",
     "iopub.status.idle": "2023-02-26T16:46:13.760223Z",
     "shell.execute_reply": "2023-02-26T16:46:13.759523Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6979,  0.0814, -1.7270],\n",
       "        [-0.3653,  0.2222, -0.5793]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:13.763689Z",
     "iopub.status.busy": "2023-02-26T16:46:13.763092Z",
     "iopub.status.idle": "2023-02-26T16:46:18.472990Z",
     "shell.execute_reply": "2023-02-26T16:46:18.472108Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 ns ± 0.0327 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:18.476601Z",
     "iopub.status.busy": "2023-02-26T16:46:18.475909Z",
     "iopub.status.idle": "2023-02-26T16:46:18.483070Z",
     "shell.execute_reply": "2023-02-26T16:46:18.482342Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2982,  0.3282, -1.2911],\n",
       "               [ 0.5817, -1.0531,  1.0950]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:18.486219Z",
     "iopub.status.busy": "2023-02-26T16:46:18.485964Z",
     "iopub.status.idle": "2023-02-26T16:46:22.463724Z",
     "shell.execute_reply": "2023-02-26T16:46:22.462924Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "487 ns ± 0.11 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:22.467429Z",
     "iopub.status.busy": "2023-02-26T16:46:22.466919Z",
     "iopub.status.idle": "2023-02-26T16:46:29.155434Z",
     "shell.execute_reply": "2023-02-26T16:46:29.154515Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "826 ns ± 0.691 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:29.159451Z",
     "iopub.status.busy": "2023-02-26T16:46:29.158934Z",
     "iopub.status.idle": "2023-02-26T16:46:37.852027Z",
     "shell.execute_reply": "2023-02-26T16:46:37.851118Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 16.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:37.855643Z",
     "iopub.status.busy": "2023-02-26T16:46:37.855112Z",
     "iopub.status.idle": "2023-02-26T16:46:37.859625Z",
     "shell.execute_reply": "2023-02-26T16:46:37.858961Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:37.862918Z",
     "iopub.status.busy": "2023-02-26T16:46:37.862447Z",
     "iopub.status.idle": "2023-02-26T16:46:49.570056Z",
     "shell.execute_reply": "2023-02-26T16:46:49.569307Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 438 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:46:49.573396Z",
     "iopub.status.busy": "2023-02-26T16:46:49.572841Z",
     "iopub.status.idle": "2023-02-26T16:47:01.263421Z",
     "shell.execute_reply": "2023-02-26T16:47:01.262765Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 474 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:01.266632Z",
     "iopub.status.busy": "2023-02-26T16:47:01.266070Z",
     "iopub.status.idle": "2023-02-26T16:47:01.269704Z",
     "shell.execute_reply": "2023-02-26T16:47:01.269120Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:01.272398Z",
     "iopub.status.busy": "2023-02-26T16:47:01.271920Z",
     "iopub.status.idle": "2023-02-26T16:47:01.279305Z",
     "shell.execute_reply": "2023-02-26T16:47:01.278730Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fefa5f34640>\n",
       "├── 'a' --> tensor([[[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]],\n",
       "│           \n",
       "│                   [[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]],\n",
       "│           \n",
       "│                   [[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]],\n",
       "│           \n",
       "│                   [[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]],\n",
       "│           \n",
       "│                   [[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]],\n",
       "│           \n",
       "│                   [[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]],\n",
       "│           \n",
       "│                   [[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]],\n",
       "│           \n",
       "│                   [[ 0.6979,  0.0814, -1.7270],\n",
       "│                    [-0.3653,  0.2222, -0.5793]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fefacb761c0>\n",
       "    └── 'c' --> tensor([[[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "                \n",
       "                        [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "                \n",
       "                        [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "                \n",
       "                        [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "                \n",
       "                        [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "                \n",
       "                        [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "                \n",
       "                        [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "                \n",
       "                        [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                         [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                         [-0.6295,  0.4372,  1.8728,  0.6348]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:01.282221Z",
     "iopub.status.busy": "2023-02-26T16:47:01.281543Z",
     "iopub.status.idle": "2023-02-26T16:47:03.899969Z",
     "shell.execute_reply": "2023-02-26T16:47:03.898979Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 128 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:03.903502Z",
     "iopub.status.busy": "2023-02-26T16:47:03.903234Z",
     "iopub.status.idle": "2023-02-26T16:47:03.912709Z",
     "shell.execute_reply": "2023-02-26T16:47:03.912012Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fefa5f4df40>\n",
       "├── 'a' --> tensor([[ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793],\n",
       "│                   [ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793],\n",
       "│                   [ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793],\n",
       "│                   [ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793],\n",
       "│                   [ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793],\n",
       "│                   [ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793],\n",
       "│                   [ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793],\n",
       "│                   [ 0.6979,  0.0814, -1.7270],\n",
       "│                   [-0.3653,  0.2222, -0.5793]])\n",
       "└── 'x' --> <FastTreeValue 0x7fefacb60370>\n",
       "    └── 'c' --> tensor([[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                        [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                        [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                        [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                        [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                        [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                        [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                        [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                        [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                        [-0.6295,  0.4372,  1.8728,  0.6348]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:03.916238Z",
     "iopub.status.busy": "2023-02-26T16:47:03.915653Z",
     "iopub.status.idle": "2023-02-26T16:47:06.384131Z",
     "shell.execute_reply": "2023-02-26T16:47:06.383211Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.3 µs ± 46.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:06.387868Z",
     "iopub.status.busy": "2023-02-26T16:47:06.387344Z",
     "iopub.status.idle": "2023-02-26T16:47:10.864219Z",
     "shell.execute_reply": "2023-02-26T16:47:10.863249Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55 µs ± 171 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:10.867984Z",
     "iopub.status.busy": "2023-02-26T16:47:10.867368Z",
     "iopub.status.idle": "2023-02-26T16:47:10.875903Z",
     "shell.execute_reply": "2023-02-26T16:47:10.875216Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]],\n",
       "       \n",
       "               [[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]],\n",
       "       \n",
       "               [[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]],\n",
       "       \n",
       "               [[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]],\n",
       "       \n",
       "               [[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]],\n",
       "       \n",
       "               [[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]],\n",
       "       \n",
       "               [[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]],\n",
       "       \n",
       "               [[ 0.6979,  0.0814, -1.7270],\n",
       "                [-0.3653,  0.2222, -0.5793]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "              \n",
       "                      [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "              \n",
       "                      [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "              \n",
       "                      [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "              \n",
       "                      [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "              \n",
       "                      [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "              \n",
       "                      [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]],\n",
       "              \n",
       "                      [[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                       [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                       [-0.6295,  0.4372,  1.8728,  0.6348]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:10.879324Z",
     "iopub.status.busy": "2023-02-26T16:47:10.878706Z",
     "iopub.status.idle": "2023-02-26T16:47:17.267446Z",
     "shell.execute_reply": "2023-02-26T16:47:17.266506Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.7 µs ± 181 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:17.271166Z",
     "iopub.status.busy": "2023-02-26T16:47:17.270719Z",
     "iopub.status.idle": "2023-02-26T16:47:17.279227Z",
     "shell.execute_reply": "2023-02-26T16:47:17.278528Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793],\n",
       "               [ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793],\n",
       "               [ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793],\n",
       "               [ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793],\n",
       "               [ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793],\n",
       "               [ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793],\n",
       "               [ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793],\n",
       "               [ 0.6979,  0.0814, -1.7270],\n",
       "               [-0.3653,  0.2222, -0.5793]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                      [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                      [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                      [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                      [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                      [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                      [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348],\n",
       "                      [-1.1207, -0.2471, -0.7147,  1.5128],\n",
       "                      [-0.5670, -0.4748, -0.0261,  3.0279],\n",
       "                      [-0.6295,  0.4372,  1.8728,  0.6348]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:17.282054Z",
     "iopub.status.busy": "2023-02-26T16:47:17.281774Z",
     "iopub.status.idle": "2023-02-26T16:47:29.017303Z",
     "shell.execute_reply": "2023-02-26T16:47:29.016409Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 169 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T16:47:29.020685Z",
     "iopub.status.busy": "2023-02-26T16:47:29.020022Z",
     "iopub.status.idle": "2023-02-26T16:47:31.671775Z",
     "shell.execute_reply": "2023-02-26T16:47:31.670999Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "324 µs ± 3.26 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
