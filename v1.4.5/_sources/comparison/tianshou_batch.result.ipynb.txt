{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:01.136732Z",
     "iopub.status.busy": "2024-10-16T12:50:01.136244Z",
     "iopub.status.idle": "2024-10-16T12:50:02.370328Z",
     "shell.execute_reply": "2024-10-16T12:50:02.369647Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:02.373231Z",
     "iopub.status.busy": "2024-10-16T12:50:02.372781Z",
     "iopub.status.idle": "2024-10-16T12:50:02.399084Z",
     "shell.execute_reply": "2024-10-16T12:50:02.398561Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:02.401275Z",
     "iopub.status.busy": "2024-10-16T12:50:02.400899Z",
     "iopub.status.idle": "2024-10-16T12:50:02.409545Z",
     "shell.execute_reply": "2024-10-16T12:50:02.408886Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f07f489aa00>\n",
       "├── 'a' --> tensor([[ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802]])\n",
       "└── 'x' --> <FastTreeValue 0x7f07f489afd0>\n",
       "    └── 'c' --> tensor([[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:02.411565Z",
     "iopub.status.busy": "2024-10-16T12:50:02.411153Z",
     "iopub.status.idle": "2024-10-16T12:50:02.415662Z",
     "shell.execute_reply": "2024-10-16T12:50:02.414970Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 2.4528, -0.2200,  0.1426],\n",
       "        [-1.0750,  1.1667,  0.5802]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:02.417825Z",
     "iopub.status.busy": "2024-10-16T12:50:02.417478Z",
     "iopub.status.idle": "2024-10-16T12:50:06.297674Z",
     "shell.execute_reply": "2024-10-16T12:50:06.296940Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47.7 ns ± 0.298 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:06.299924Z",
     "iopub.status.busy": "2024-10-16T12:50:06.299709Z",
     "iopub.status.idle": "2024-10-16T12:50:06.305517Z",
     "shell.execute_reply": "2024-10-16T12:50:06.304948Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f07f489aa00>\n",
       "├── 'a' --> tensor([[-0.2828,  0.1338,  0.4915],\n",
       "│                   [ 1.2147, -0.4817,  0.2909]])\n",
       "└── 'x' --> <FastTreeValue 0x7f07f489afd0>\n",
       "    └── 'c' --> tensor([[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:06.307403Z",
     "iopub.status.busy": "2024-10-16T12:50:06.307202Z",
     "iopub.status.idle": "2024-10-16T12:50:10.770641Z",
     "shell.execute_reply": "2024-10-16T12:50:10.769912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54.9 ns ± 0.214 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:10.772885Z",
     "iopub.status.busy": "2024-10-16T12:50:10.772671Z",
     "iopub.status.idle": "2024-10-16T12:50:11.079631Z",
     "shell.execute_reply": "2024-10-16T12:50:11.078967Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:11.082177Z",
     "iopub.status.busy": "2024-10-16T12:50:11.081879Z",
     "iopub.status.idle": "2024-10-16T12:50:11.087426Z",
     "shell.execute_reply": "2024-10-16T12:50:11.086759Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:11.089694Z",
     "iopub.status.busy": "2024-10-16T12:50:11.089317Z",
     "iopub.status.idle": "2024-10-16T12:50:11.093821Z",
     "shell.execute_reply": "2024-10-16T12:50:11.093299Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 2.4528, -0.2200,  0.1426],\n",
       "        [-1.0750,  1.1667,  0.5802]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:11.095945Z",
     "iopub.status.busy": "2024-10-16T12:50:11.095569Z",
     "iopub.status.idle": "2024-10-16T12:50:14.725468Z",
     "shell.execute_reply": "2024-10-16T12:50:14.724770Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44.7 ns ± 0.251 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:14.727746Z",
     "iopub.status.busy": "2024-10-16T12:50:14.727315Z",
     "iopub.status.idle": "2024-10-16T12:50:14.732914Z",
     "shell.execute_reply": "2024-10-16T12:50:14.732378Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.5917, -0.5303,  0.5215],\n",
       "               [ 1.4566, -0.7730,  0.3872]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:14.734727Z",
     "iopub.status.busy": "2024-10-16T12:50:14.734522Z",
     "iopub.status.idle": "2024-10-16T12:50:17.836880Z",
     "shell.execute_reply": "2024-10-16T12:50:17.836189Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "383 ns ± 2.21 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:17.839300Z",
     "iopub.status.busy": "2024-10-16T12:50:17.838932Z",
     "iopub.status.idle": "2024-10-16T12:50:22.990084Z",
     "shell.execute_reply": "2024-10-16T12:50:22.989431Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "637 ns ± 3.02 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:22.992474Z",
     "iopub.status.busy": "2024-10-16T12:50:22.991982Z",
     "iopub.status.idle": "2024-10-16T12:50:29.914590Z",
     "shell.execute_reply": "2024-10-16T12:50:29.913873Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.53 µs ± 33.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:29.916922Z",
     "iopub.status.busy": "2024-10-16T12:50:29.916558Z",
     "iopub.status.idle": "2024-10-16T12:50:29.919594Z",
     "shell.execute_reply": "2024-10-16T12:50:29.919025Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:29.921464Z",
     "iopub.status.busy": "2024-10-16T12:50:29.921265Z",
     "iopub.status.idle": "2024-10-16T12:50:40.491305Z",
     "shell.execute_reply": "2024-10-16T12:50:40.490577Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "130 µs ± 769 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:40.494061Z",
     "iopub.status.busy": "2024-10-16T12:50:40.493411Z",
     "iopub.status.idle": "2024-10-16T12:50:50.865510Z",
     "shell.execute_reply": "2024-10-16T12:50:50.864802Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "128 µs ± 1.67 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:50.868326Z",
     "iopub.status.busy": "2024-10-16T12:50:50.867811Z",
     "iopub.status.idle": "2024-10-16T12:50:50.871671Z",
     "shell.execute_reply": "2024-10-16T12:50:50.871079Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:50.873842Z",
     "iopub.status.busy": "2024-10-16T12:50:50.873451Z",
     "iopub.status.idle": "2024-10-16T12:50:50.880364Z",
     "shell.execute_reply": "2024-10-16T12:50:50.879837Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f070b9efd30>\n",
       "├── 'a' --> tensor([[[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]],\n",
       "│           \n",
       "│                   [[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]],\n",
       "│           \n",
       "│                   [[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]],\n",
       "│           \n",
       "│                   [[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]],\n",
       "│           \n",
       "│                   [[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]],\n",
       "│           \n",
       "│                   [[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]],\n",
       "│           \n",
       "│                   [[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]],\n",
       "│           \n",
       "│                   [[ 2.4528, -0.2200,  0.1426],\n",
       "│                    [-1.0750,  1.1667,  0.5802]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f070b9efb50>\n",
       "    └── 'c' --> tensor([[[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "                \n",
       "                        [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "                \n",
       "                        [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "                \n",
       "                        [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "                \n",
       "                        [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "                \n",
       "                        [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "                \n",
       "                        [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "                \n",
       "                        [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                         [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                         [-1.5730, -0.2927, -0.7706, -1.1081]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:50.882360Z",
     "iopub.status.busy": "2024-10-16T12:50:50.881969Z",
     "iopub.status.idle": "2024-10-16T12:50:52.894595Z",
     "shell.execute_reply": "2024-10-16T12:50:52.893944Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.8 µs ± 278 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:52.896678Z",
     "iopub.status.busy": "2024-10-16T12:50:52.896465Z",
     "iopub.status.idle": "2024-10-16T12:50:52.903130Z",
     "shell.execute_reply": "2024-10-16T12:50:52.902594Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f070b9c1fa0>\n",
       "├── 'a' --> tensor([[ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802],\n",
       "│                   [ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802],\n",
       "│                   [ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802],\n",
       "│                   [ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802],\n",
       "│                   [ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802],\n",
       "│                   [ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802],\n",
       "│                   [ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802],\n",
       "│                   [ 2.4528, -0.2200,  0.1426],\n",
       "│                   [-1.0750,  1.1667,  0.5802]])\n",
       "└── 'x' --> <FastTreeValue 0x7f070b9c1dc0>\n",
       "    └── 'c' --> tensor([[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                        [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                        [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                        [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                        [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                        [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                        [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                        [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                        [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                        [-1.5730, -0.2927, -0.7706, -1.1081]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:52.905137Z",
     "iopub.status.busy": "2024-10-16T12:50:52.904934Z",
     "iopub.status.idle": "2024-10-16T12:50:54.775984Z",
     "shell.execute_reply": "2024-10-16T12:50:54.775328Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23 µs ± 86.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:54.778007Z",
     "iopub.status.busy": "2024-10-16T12:50:54.777797Z",
     "iopub.status.idle": "2024-10-16T12:50:58.895833Z",
     "shell.execute_reply": "2024-10-16T12:50:58.895167Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50.7 µs ± 1.72 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:58.898045Z",
     "iopub.status.busy": "2024-10-16T12:50:58.897831Z",
     "iopub.status.idle": "2024-10-16T12:50:58.904744Z",
     "shell.execute_reply": "2024-10-16T12:50:58.904104Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "              \n",
       "                      [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "              \n",
       "                      [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "              \n",
       "                      [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "              \n",
       "                      [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "              \n",
       "                      [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "              \n",
       "                      [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]],\n",
       "              \n",
       "                      [[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                       [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                       [-1.5730, -0.2927, -0.7706, -1.1081]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]],\n",
       "       \n",
       "               [[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]],\n",
       "       \n",
       "               [[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]],\n",
       "       \n",
       "               [[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]],\n",
       "       \n",
       "               [[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]],\n",
       "       \n",
       "               [[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]],\n",
       "       \n",
       "               [[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]],\n",
       "       \n",
       "               [[ 2.4528, -0.2200,  0.1426],\n",
       "                [-1.0750,  1.1667,  0.5802]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:50:58.906895Z",
     "iopub.status.busy": "2024-10-16T12:50:58.906445Z",
     "iopub.status.idle": "2024-10-16T12:51:04.052283Z",
     "shell.execute_reply": "2024-10-16T12:51:04.051582Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.3 µs ± 293 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:51:04.054600Z",
     "iopub.status.busy": "2024-10-16T12:51:04.054219Z",
     "iopub.status.idle": "2024-10-16T12:51:04.060780Z",
     "shell.execute_reply": "2024-10-16T12:51:04.060117Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                      [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                      [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                      [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                      [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                      [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                      [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081],\n",
       "                      [-0.7945,  0.0770,  0.3646,  0.1818],\n",
       "                      [-0.5019, -0.2319, -2.3030, -0.0652],\n",
       "                      [-1.5730, -0.2927, -0.7706, -1.1081]]),\n",
       "       ),\n",
       "    a: tensor([[ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802],\n",
       "               [ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802],\n",
       "               [ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802],\n",
       "               [ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802],\n",
       "               [ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802],\n",
       "               [ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802],\n",
       "               [ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802],\n",
       "               [ 2.4528, -0.2200,  0.1426],\n",
       "               [-1.0750,  1.1667,  0.5802]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:51:04.062929Z",
     "iopub.status.busy": "2024-10-16T12:51:04.062550Z",
     "iopub.status.idle": "2024-10-16T12:51:13.735382Z",
     "shell.execute_reply": "2024-10-16T12:51:13.734736Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "119 µs ± 606 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T12:51:13.737694Z",
     "iopub.status.busy": "2024-10-16T12:51:13.737258Z",
     "iopub.status.idle": "2024-10-16T12:51:15.999712Z",
     "shell.execute_reply": "2024-10-16T12:51:15.998925Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "278 µs ± 2.47 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
