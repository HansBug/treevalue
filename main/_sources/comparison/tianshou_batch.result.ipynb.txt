{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:05.335264Z",
     "iopub.status.busy": "2023-02-24T07:59:05.335002Z",
     "iopub.status.idle": "2023-02-24T07:59:06.443910Z",
     "shell.execute_reply": "2023-02-24T07:59:06.442862Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:06.448693Z",
     "iopub.status.busy": "2023-02-24T07:59:06.447959Z",
     "iopub.status.idle": "2023-02-24T07:59:06.487726Z",
     "shell.execute_reply": "2023-02-24T07:59:06.486955Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:06.490540Z",
     "iopub.status.busy": "2023-02-24T07:59:06.490235Z",
     "iopub.status.idle": "2023-02-24T07:59:06.500732Z",
     "shell.execute_reply": "2023-02-24T07:59:06.499814Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5b2c920d90>\n",
       "├── 'a' --> tensor([[-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5b2c9209d0>\n",
       "    └── 'c' --> tensor([[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:06.503681Z",
     "iopub.status.busy": "2023-02-24T07:59:06.503413Z",
     "iopub.status.idle": "2023-02-24T07:59:06.509389Z",
     "shell.execute_reply": "2023-02-24T07:59:06.508536Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0461, -0.6577,  0.0617],\n",
       "        [ 0.2180,  0.4498, -0.0332]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:06.512619Z",
     "iopub.status.busy": "2023-02-24T07:59:06.512338Z",
     "iopub.status.idle": "2023-02-24T07:59:11.633016Z",
     "shell.execute_reply": "2023-02-24T07:59:11.631901Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.6 ns ± 2.39 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:11.637047Z",
     "iopub.status.busy": "2023-02-24T07:59:11.636578Z",
     "iopub.status.idle": "2023-02-24T07:59:11.645065Z",
     "shell.execute_reply": "2023-02-24T07:59:11.644013Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5b2c920d90>\n",
       "├── 'a' --> tensor([[ 1.2951, -0.7126,  0.6029],\n",
       "│                   [ 1.4836,  0.9687,  0.2403]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5b2c9209d0>\n",
       "    └── 'c' --> tensor([[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:11.648880Z",
     "iopub.status.busy": "2023-02-24T07:59:11.648443Z",
     "iopub.status.idle": "2023-02-24T07:59:18.158912Z",
     "shell.execute_reply": "2023-02-24T07:59:18.157806Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.6 ns ± 2.99 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:18.163191Z",
     "iopub.status.busy": "2023-02-24T07:59:18.162349Z",
     "iopub.status.idle": "2023-02-24T07:59:18.577861Z",
     "shell.execute_reply": "2023-02-24T07:59:18.576959Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:18.581790Z",
     "iopub.status.busy": "2023-02-24T07:59:18.581451Z",
     "iopub.status.idle": "2023-02-24T07:59:18.588141Z",
     "shell.execute_reply": "2023-02-24T07:59:18.587390Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:18.590785Z",
     "iopub.status.busy": "2023-02-24T07:59:18.590499Z",
     "iopub.status.idle": "2023-02-24T07:59:18.596929Z",
     "shell.execute_reply": "2023-02-24T07:59:18.595815Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0461, -0.6577,  0.0617],\n",
       "        [ 0.2180,  0.4498, -0.0332]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:18.599803Z",
     "iopub.status.busy": "2023-02-24T07:59:18.599534Z",
     "iopub.status.idle": "2023-02-24T07:59:23.311227Z",
     "shell.execute_reply": "2023-02-24T07:59:23.309832Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.6 ns ± 2.46 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:23.315459Z",
     "iopub.status.busy": "2023-02-24T07:59:23.314984Z",
     "iopub.status.idle": "2023-02-24T07:59:23.324065Z",
     "shell.execute_reply": "2023-02-24T07:59:23.322814Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.3229,  0.0533, -1.1725],\n",
       "               [-0.3905,  0.6190,  0.5175]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:23.328042Z",
     "iopub.status.busy": "2023-02-24T07:59:23.327788Z",
     "iopub.status.idle": "2023-02-24T07:59:28.047195Z",
     "shell.execute_reply": "2023-02-24T07:59:28.046249Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "585 ns ± 30.5 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:28.050760Z",
     "iopub.status.busy": "2023-02-24T07:59:28.050191Z",
     "iopub.status.idle": "2023-02-24T07:59:35.275549Z",
     "shell.execute_reply": "2023-02-24T07:59:35.274570Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "891 ns ± 14.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:35.279497Z",
     "iopub.status.busy": "2023-02-24T07:59:35.278951Z",
     "iopub.status.idle": "2023-02-24T07:59:44.994909Z",
     "shell.execute_reply": "2023-02-24T07:59:44.993648Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 µs ± 173 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:44.998743Z",
     "iopub.status.busy": "2023-02-24T07:59:44.998386Z",
     "iopub.status.idle": "2023-02-24T07:59:45.003501Z",
     "shell.execute_reply": "2023-02-24T07:59:45.002695Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:45.006957Z",
     "iopub.status.busy": "2023-02-24T07:59:45.006376Z",
     "iopub.status.idle": "2023-02-24T07:59:47.026964Z",
     "shell.execute_reply": "2023-02-24T07:59:47.026100Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "249 µs ± 8.53 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:47.030391Z",
     "iopub.status.busy": "2023-02-24T07:59:47.029882Z",
     "iopub.status.idle": "2023-02-24T07:59:49.052762Z",
     "shell.execute_reply": "2023-02-24T07:59:49.051752Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "248 µs ± 7.35 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:49.056472Z",
     "iopub.status.busy": "2023-02-24T07:59:49.056014Z",
     "iopub.status.idle": "2023-02-24T07:59:49.061340Z",
     "shell.execute_reply": "2023-02-24T07:59:49.060552Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:49.066316Z",
     "iopub.status.busy": "2023-02-24T07:59:49.065852Z",
     "iopub.status.idle": "2023-02-24T07:59:49.075771Z",
     "shell.execute_reply": "2023-02-24T07:59:49.074939Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5a882d5fd0>\n",
       "├── 'a' --> tensor([[[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]],\n",
       "│           \n",
       "│                   [[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]],\n",
       "│           \n",
       "│                   [[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]],\n",
       "│           \n",
       "│                   [[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]],\n",
       "│           \n",
       "│                   [[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]],\n",
       "│           \n",
       "│                   [[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]],\n",
       "│           \n",
       "│                   [[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]],\n",
       "│           \n",
       "│                   [[-1.0461, -0.6577,  0.0617],\n",
       "│                    [ 0.2180,  0.4498, -0.0332]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5b2c8e4910>\n",
       "    └── 'c' --> tensor([[[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "                \n",
       "                        [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "                \n",
       "                        [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "                \n",
       "                        [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "                \n",
       "                        [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "                \n",
       "                        [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "                \n",
       "                        [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "                \n",
       "                        [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                         [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                         [-0.5973,  0.6704,  0.3580, -0.4781]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:49.079205Z",
     "iopub.status.busy": "2023-02-24T07:59:49.078775Z",
     "iopub.status.idle": "2023-02-24T07:59:52.384914Z",
     "shell.execute_reply": "2023-02-24T07:59:52.383922Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41 µs ± 1.46 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:52.388563Z",
     "iopub.status.busy": "2023-02-24T07:59:52.388054Z",
     "iopub.status.idle": "2023-02-24T07:59:52.397485Z",
     "shell.execute_reply": "2023-02-24T07:59:52.396754Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5a882d5f70>\n",
       "├── 'a' --> tensor([[-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332],\n",
       "│                   [-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332],\n",
       "│                   [-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332],\n",
       "│                   [-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332],\n",
       "│                   [-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332],\n",
       "│                   [-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332],\n",
       "│                   [-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332],\n",
       "│                   [-1.0461, -0.6577,  0.0617],\n",
       "│                   [ 0.2180,  0.4498, -0.0332]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5a815bda90>\n",
       "    └── 'c' --> tensor([[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                        [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                        [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                        [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                        [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                        [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                        [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                        [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                        [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                        [-0.5973,  0.6704,  0.3580, -0.4781]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:52.400321Z",
     "iopub.status.busy": "2023-02-24T07:59:52.399900Z",
     "iopub.status.idle": "2023-02-24T07:59:55.559583Z",
     "shell.execute_reply": "2023-02-24T07:59:55.558442Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39 µs ± 1.21 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:55.562853Z",
     "iopub.status.busy": "2023-02-24T07:59:55.562575Z",
     "iopub.status.idle": "2023-02-24T08:00:01.483955Z",
     "shell.execute_reply": "2023-02-24T08:00:01.482546Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.4 µs ± 2.16 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:00:01.487842Z",
     "iopub.status.busy": "2023-02-24T08:00:01.487570Z",
     "iopub.status.idle": "2023-02-24T08:00:01.497925Z",
     "shell.execute_reply": "2023-02-24T08:00:01.496894Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]],\n",
       "       \n",
       "               [[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]],\n",
       "       \n",
       "               [[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]],\n",
       "       \n",
       "               [[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]],\n",
       "       \n",
       "               [[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]],\n",
       "       \n",
       "               [[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]],\n",
       "       \n",
       "               [[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]],\n",
       "       \n",
       "               [[-1.0461, -0.6577,  0.0617],\n",
       "                [ 0.2180,  0.4498, -0.0332]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "              \n",
       "                      [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "              \n",
       "                      [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "              \n",
       "                      [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "              \n",
       "                      [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "              \n",
       "                      [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "              \n",
       "                      [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]],\n",
       "              \n",
       "                      [[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                       [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                       [-0.5973,  0.6704,  0.3580, -0.4781]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:00:01.501183Z",
     "iopub.status.busy": "2023-02-24T08:00:01.500908Z",
     "iopub.status.idle": "2023-02-24T08:00:08.705634Z",
     "shell.execute_reply": "2023-02-24T08:00:08.704624Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88.6 µs ± 1.38 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:00:08.709390Z",
     "iopub.status.busy": "2023-02-24T08:00:08.708627Z",
     "iopub.status.idle": "2023-02-24T08:00:08.717659Z",
     "shell.execute_reply": "2023-02-24T08:00:08.716924Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332],\n",
       "               [-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332],\n",
       "               [-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332],\n",
       "               [-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332],\n",
       "               [-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332],\n",
       "               [-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332],\n",
       "               [-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332],\n",
       "               [-1.0461, -0.6577,  0.0617],\n",
       "               [ 0.2180,  0.4498, -0.0332]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                      [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                      [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                      [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                      [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                      [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                      [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781],\n",
       "                      [-1.1380, -0.9621, -0.4376,  0.4053],\n",
       "                      [ 1.0244,  0.6279, -0.3609,  0.9966],\n",
       "                      [-0.5973,  0.6704,  0.3580, -0.4781]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:00:08.720587Z",
     "iopub.status.busy": "2023-02-24T08:00:08.720162Z",
     "iopub.status.idle": "2023-02-24T08:00:22.297364Z",
     "shell.execute_reply": "2023-02-24T08:00:22.296460Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "169 µs ± 4.62 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:00:22.301012Z",
     "iopub.status.busy": "2023-02-24T08:00:22.300544Z",
     "iopub.status.idle": "2023-02-24T08:00:26.589603Z",
     "shell.execute_reply": "2023-02-24T08:00:26.588658Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "532 µs ± 11.8 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
