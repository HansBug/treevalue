{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:38.522431Z",
     "iopub.status.busy": "2023-02-27T12:22:38.522177Z",
     "iopub.status.idle": "2023-02-27T12:22:39.447386Z",
     "shell.execute_reply": "2023-02-27T12:22:39.446684Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:39.450844Z",
     "iopub.status.busy": "2023-02-27T12:22:39.450547Z",
     "iopub.status.idle": "2023-02-27T12:22:39.735952Z",
     "shell.execute_reply": "2023-02-27T12:22:39.735231Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:39.740119Z",
     "iopub.status.busy": "2023-02-27T12:22:39.738913Z",
     "iopub.status.idle": "2023-02-27T12:22:39.749786Z",
     "shell.execute_reply": "2023-02-27T12:22:39.749191Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f726cea06a0>\n",
       "├── 'a' --> tensor([[-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498]])\n",
       "└── 'x' --> <FastTreeValue 0x7f726cea0fd0>\n",
       "    └── 'c' --> tensor([[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:39.752853Z",
     "iopub.status.busy": "2023-02-27T12:22:39.752327Z",
     "iopub.status.idle": "2023-02-27T12:22:39.759437Z",
     "shell.execute_reply": "2023-02-27T12:22:39.758908Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.4985, -0.4876,  0.2456],\n",
       "        [-0.2987,  0.2928, -0.0498]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:39.762104Z",
     "iopub.status.busy": "2023-02-27T12:22:39.761879Z",
     "iopub.status.idle": "2023-02-27T12:22:44.737370Z",
     "shell.execute_reply": "2023-02-27T12:22:44.736482Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.6 ns ± 0.0234 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:44.740759Z",
     "iopub.status.busy": "2023-02-27T12:22:44.740135Z",
     "iopub.status.idle": "2023-02-27T12:22:44.748218Z",
     "shell.execute_reply": "2023-02-27T12:22:44.747607Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f726cea06a0>\n",
       "├── 'a' --> tensor([[ 0.4445,  0.2298,  2.0219],\n",
       "│                   [-0.1050, -1.3181, -1.9693]])\n",
       "└── 'x' --> <FastTreeValue 0x7f726cea0fd0>\n",
       "    └── 'c' --> tensor([[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:44.751057Z",
     "iopub.status.busy": "2023-02-27T12:22:44.750500Z",
     "iopub.status.idle": "2023-02-27T12:22:49.469003Z",
     "shell.execute_reply": "2023-02-27T12:22:49.468151Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 ns ± 0.0332 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:49.472200Z",
     "iopub.status.busy": "2023-02-27T12:22:49.471544Z",
     "iopub.status.idle": "2023-02-27T12:22:49.799683Z",
     "shell.execute_reply": "2023-02-27T12:22:49.799011Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:49.802741Z",
     "iopub.status.busy": "2023-02-27T12:22:49.802247Z",
     "iopub.status.idle": "2023-02-27T12:22:49.807855Z",
     "shell.execute_reply": "2023-02-27T12:22:49.807246Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:49.810629Z",
     "iopub.status.busy": "2023-02-27T12:22:49.810057Z",
     "iopub.status.idle": "2023-02-27T12:22:49.816117Z",
     "shell.execute_reply": "2023-02-27T12:22:49.815532Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.4985, -0.4876,  0.2456],\n",
       "        [-0.2987,  0.2928, -0.0498]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:49.818839Z",
     "iopub.status.busy": "2023-02-27T12:22:49.818504Z",
     "iopub.status.idle": "2023-02-27T12:22:54.696826Z",
     "shell.execute_reply": "2023-02-27T12:22:54.696079Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 ns ± 0.0295 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:54.699696Z",
     "iopub.status.busy": "2023-02-27T12:22:54.699222Z",
     "iopub.status.idle": "2023-02-27T12:22:54.705673Z",
     "shell.execute_reply": "2023-02-27T12:22:54.705079Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0061, -1.2713,  1.8903],\n",
       "               [-1.1548,  0.9384,  0.7287]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:54.708100Z",
     "iopub.status.busy": "2023-02-27T12:22:54.707884Z",
     "iopub.status.idle": "2023-02-27T12:22:58.603575Z",
     "shell.execute_reply": "2023-02-27T12:22:58.602901Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "479 ns ± 0.0843 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:22:58.606458Z",
     "iopub.status.busy": "2023-02-27T12:22:58.605922Z",
     "iopub.status.idle": "2023-02-27T12:23:05.328332Z",
     "shell.execute_reply": "2023-02-27T12:23:05.327606Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "828 ns ± 0.524 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:05.331058Z",
     "iopub.status.busy": "2023-02-27T12:23:05.330836Z",
     "iopub.status.idle": "2023-02-27T12:23:14.455250Z",
     "shell.execute_reply": "2023-02-27T12:23:14.454474Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 52.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:14.458320Z",
     "iopub.status.busy": "2023-02-27T12:23:14.457724Z",
     "iopub.status.idle": "2023-02-27T12:23:14.461322Z",
     "shell.execute_reply": "2023-02-27T12:23:14.460745Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:14.463951Z",
     "iopub.status.busy": "2023-02-27T12:23:14.463442Z",
     "iopub.status.idle": "2023-02-27T12:23:25.580110Z",
     "shell.execute_reply": "2023-02-27T12:23:25.579542Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 545 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:25.583552Z",
     "iopub.status.busy": "2023-02-27T12:23:25.583062Z",
     "iopub.status.idle": "2023-02-27T12:23:36.802820Z",
     "shell.execute_reply": "2023-02-27T12:23:36.802207Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 422 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:36.806439Z",
     "iopub.status.busy": "2023-02-27T12:23:36.805375Z",
     "iopub.status.idle": "2023-02-27T12:23:36.809298Z",
     "shell.execute_reply": "2023-02-27T12:23:36.808772Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:36.811656Z",
     "iopub.status.busy": "2023-02-27T12:23:36.811203Z",
     "iopub.status.idle": "2023-02-27T12:23:36.818334Z",
     "shell.execute_reply": "2023-02-27T12:23:36.817799Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f726ce98580>\n",
       "├── 'a' --> tensor([[[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]],\n",
       "│           \n",
       "│                   [[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]],\n",
       "│           \n",
       "│                   [[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]],\n",
       "│           \n",
       "│                   [[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]],\n",
       "│           \n",
       "│                   [[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]],\n",
       "│           \n",
       "│                   [[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]],\n",
       "│           \n",
       "│                   [[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]],\n",
       "│           \n",
       "│                   [[-1.4985, -0.4876,  0.2456],\n",
       "│                    [-0.2987,  0.2928, -0.0498]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f726ce98b50>\n",
       "    └── 'c' --> tensor([[[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "                \n",
       "                        [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "                \n",
       "                        [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "                \n",
       "                        [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "                \n",
       "                        [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "                \n",
       "                        [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "                \n",
       "                        [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "                \n",
       "                        [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                         [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                         [-0.4202, -0.9149, -1.8405,  0.5272]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:36.820853Z",
     "iopub.status.busy": "2023-02-27T12:23:36.820219Z",
     "iopub.status.idle": "2023-02-27T12:23:39.362746Z",
     "shell.execute_reply": "2023-02-27T12:23:39.361900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.3 µs ± 49.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:39.365973Z",
     "iopub.status.busy": "2023-02-27T12:23:39.365443Z",
     "iopub.status.idle": "2023-02-27T12:23:39.373806Z",
     "shell.execute_reply": "2023-02-27T12:23:39.373210Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f71b714dc40>\n",
       "├── 'a' --> tensor([[-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498],\n",
       "│                   [-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498],\n",
       "│                   [-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498],\n",
       "│                   [-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498],\n",
       "│                   [-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498],\n",
       "│                   [-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498],\n",
       "│                   [-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498],\n",
       "│                   [-1.4985, -0.4876,  0.2456],\n",
       "│                   [-0.2987,  0.2928, -0.0498]])\n",
       "└── 'x' --> <FastTreeValue 0x7f71b715ef40>\n",
       "    └── 'c' --> tensor([[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                        [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                        [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                        [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                        [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                        [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                        [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                        [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                        [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                        [-0.4202, -0.9149, -1.8405,  0.5272]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:39.376340Z",
     "iopub.status.busy": "2023-02-27T12:23:39.376023Z",
     "iopub.status.idle": "2023-02-27T12:23:41.785812Z",
     "shell.execute_reply": "2023-02-27T12:23:41.785099Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.7 µs ± 19.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:41.788827Z",
     "iopub.status.busy": "2023-02-27T12:23:41.788476Z",
     "iopub.status.idle": "2023-02-27T12:23:46.696749Z",
     "shell.execute_reply": "2023-02-27T12:23:46.696026Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.4 µs ± 60.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:46.699702Z",
     "iopub.status.busy": "2023-02-27T12:23:46.699348Z",
     "iopub.status.idle": "2023-02-27T12:23:46.707344Z",
     "shell.execute_reply": "2023-02-27T12:23:46.706752Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "              \n",
       "                      [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "              \n",
       "                      [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "              \n",
       "                      [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "              \n",
       "                      [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "              \n",
       "                      [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "              \n",
       "                      [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]],\n",
       "              \n",
       "                      [[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                       [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                       [-0.4202, -0.9149, -1.8405,  0.5272]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]],\n",
       "       \n",
       "               [[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]],\n",
       "       \n",
       "               [[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]],\n",
       "       \n",
       "               [[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]],\n",
       "       \n",
       "               [[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]],\n",
       "       \n",
       "               [[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]],\n",
       "       \n",
       "               [[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]],\n",
       "       \n",
       "               [[-1.4985, -0.4876,  0.2456],\n",
       "                [-0.2987,  0.2928, -0.0498]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:46.710052Z",
     "iopub.status.busy": "2023-02-27T12:23:46.709731Z",
     "iopub.status.idle": "2023-02-27T12:23:53.025507Z",
     "shell.execute_reply": "2023-02-27T12:23:53.024779Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.4 µs ± 102 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:53.028592Z",
     "iopub.status.busy": "2023-02-27T12:23:53.028017Z",
     "iopub.status.idle": "2023-02-27T12:23:53.035543Z",
     "shell.execute_reply": "2023-02-27T12:23:53.034970Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                      [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                      [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                      [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                      [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                      [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                      [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272],\n",
       "                      [ 0.1066, -0.3598,  0.6631,  1.1125],\n",
       "                      [-0.5921,  1.2194,  0.6545, -1.7544],\n",
       "                      [-0.4202, -0.9149, -1.8405,  0.5272]]),\n",
       "       ),\n",
       "    a: tensor([[-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498],\n",
       "               [-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498],\n",
       "               [-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498],\n",
       "               [-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498],\n",
       "               [-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498],\n",
       "               [-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498],\n",
       "               [-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498],\n",
       "               [-1.4985, -0.4876,  0.2456],\n",
       "               [-0.2987,  0.2928, -0.0498]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:23:53.037967Z",
     "iopub.status.busy": "2023-02-27T12:23:53.037639Z",
     "iopub.status.idle": "2023-02-27T12:24:04.746035Z",
     "shell.execute_reply": "2023-02-27T12:24:04.745324Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 256 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:24:04.749242Z",
     "iopub.status.busy": "2023-02-27T12:24:04.748854Z",
     "iopub.status.idle": "2023-02-27T12:24:07.269806Z",
     "shell.execute_reply": "2023-02-27T12:24:07.269193Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "310 µs ± 3.86 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
