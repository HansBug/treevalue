{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:23.507497Z",
     "iopub.status.busy": "2023-02-24T08:21:23.507148Z",
     "iopub.status.idle": "2023-02-24T08:21:24.733441Z",
     "shell.execute_reply": "2023-02-24T08:21:24.732129Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:24.737599Z",
     "iopub.status.busy": "2023-02-24T08:21:24.737256Z",
     "iopub.status.idle": "2023-02-24T08:21:24.782363Z",
     "shell.execute_reply": "2023-02-24T08:21:24.781323Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:24.788416Z",
     "iopub.status.busy": "2023-02-24T08:21:24.788107Z",
     "iopub.status.idle": "2023-02-24T08:21:24.804212Z",
     "shell.execute_reply": "2023-02-24T08:21:24.803194Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb2e094d550>\n",
       "├── 'a' --> tensor([[ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb2e094d130>\n",
       "    └── 'c' --> tensor([[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:24.807990Z",
     "iopub.status.busy": "2023-02-24T08:21:24.807695Z",
     "iopub.status.idle": "2023-02-24T08:21:24.814684Z",
     "shell.execute_reply": "2023-02-24T08:21:24.813707Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.0598,  0.1059, -0.1148],\n",
       "        [-1.8377,  0.1462, -0.5735]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:24.817980Z",
     "iopub.status.busy": "2023-02-24T08:21:24.817715Z",
     "iopub.status.idle": "2023-02-24T08:21:30.630917Z",
     "shell.execute_reply": "2023-02-24T08:21:30.629933Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.7 ns ± 1.1 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:30.634755Z",
     "iopub.status.busy": "2023-02-24T08:21:30.634467Z",
     "iopub.status.idle": "2023-02-24T08:21:30.644818Z",
     "shell.execute_reply": "2023-02-24T08:21:30.643652Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb2e094d550>\n",
       "├── 'a' --> tensor([[-1.6285, -2.3936,  1.2108],\n",
       "│                   [ 0.2074, -0.4971,  0.4403]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb2e094d130>\n",
       "    └── 'c' --> tensor([[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:30.648556Z",
     "iopub.status.busy": "2023-02-24T08:21:30.647777Z",
     "iopub.status.idle": "2023-02-24T08:21:36.370677Z",
     "shell.execute_reply": "2023-02-24T08:21:36.369508Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.1 ns ± 2.56 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:36.374950Z",
     "iopub.status.busy": "2023-02-24T08:21:36.374426Z",
     "iopub.status.idle": "2023-02-24T08:21:36.835604Z",
     "shell.execute_reply": "2023-02-24T08:21:36.834271Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:36.840136Z",
     "iopub.status.busy": "2023-02-24T08:21:36.839669Z",
     "iopub.status.idle": "2023-02-24T08:21:36.849395Z",
     "shell.execute_reply": "2023-02-24T08:21:36.848358Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:36.853313Z",
     "iopub.status.busy": "2023-02-24T08:21:36.853007Z",
     "iopub.status.idle": "2023-02-24T08:21:36.859878Z",
     "shell.execute_reply": "2023-02-24T08:21:36.858970Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.0598,  0.1059, -0.1148],\n",
       "        [-1.8377,  0.1462, -0.5735]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:36.863221Z",
     "iopub.status.busy": "2023-02-24T08:21:36.862729Z",
     "iopub.status.idle": "2023-02-24T08:21:42.081577Z",
     "shell.execute_reply": "2023-02-24T08:21:42.080532Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.3 ns ± 0.211 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:42.085672Z",
     "iopub.status.busy": "2023-02-24T08:21:42.085383Z",
     "iopub.status.idle": "2023-02-24T08:21:42.094582Z",
     "shell.execute_reply": "2023-02-24T08:21:42.093697Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3778, -0.0337, -1.7540],\n",
       "               [ 0.0477,  2.3110, -1.4531]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:42.097738Z",
     "iopub.status.busy": "2023-02-24T08:21:42.097265Z",
     "iopub.status.idle": "2023-02-24T08:21:46.921946Z",
     "shell.execute_reply": "2023-02-24T08:21:46.921015Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "594 ns ± 9.08 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:46.925582Z",
     "iopub.status.busy": "2023-02-24T08:21:46.925119Z",
     "iopub.status.idle": "2023-02-24T08:21:54.923324Z",
     "shell.execute_reply": "2023-02-24T08:21:54.922334Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "991 ns ± 11.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:21:54.927184Z",
     "iopub.status.busy": "2023-02-24T08:21:54.926467Z",
     "iopub.status.idle": "2023-02-24T08:22:05.871810Z",
     "shell.execute_reply": "2023-02-24T08:22:05.870780Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.5 µs ± 178 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:05.875484Z",
     "iopub.status.busy": "2023-02-24T08:22:05.874932Z",
     "iopub.status.idle": "2023-02-24T08:22:05.880227Z",
     "shell.execute_reply": "2023-02-24T08:22:05.879311Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:05.883655Z",
     "iopub.status.busy": "2023-02-24T08:22:05.883005Z",
     "iopub.status.idle": "2023-02-24T08:22:08.195920Z",
     "shell.execute_reply": "2023-02-24T08:22:08.195050Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "282 µs ± 5.26 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:08.199449Z",
     "iopub.status.busy": "2023-02-24T08:22:08.199154Z",
     "iopub.status.idle": "2023-02-24T08:22:10.369437Z",
     "shell.execute_reply": "2023-02-24T08:22:10.368458Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "266 µs ± 6.89 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:10.373133Z",
     "iopub.status.busy": "2023-02-24T08:22:10.372702Z",
     "iopub.status.idle": "2023-02-24T08:22:10.378477Z",
     "shell.execute_reply": "2023-02-24T08:22:10.377645Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:10.381597Z",
     "iopub.status.busy": "2023-02-24T08:22:10.381282Z",
     "iopub.status.idle": "2023-02-24T08:22:10.390486Z",
     "shell.execute_reply": "2023-02-24T08:22:10.389610Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb2e094deb0>\n",
       "├── 'a' --> tensor([[[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]],\n",
       "│           \n",
       "│                   [[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]],\n",
       "│           \n",
       "│                   [[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]],\n",
       "│           \n",
       "│                   [[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]],\n",
       "│           \n",
       "│                   [[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]],\n",
       "│           \n",
       "│                   [[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]],\n",
       "│           \n",
       "│                   [[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]],\n",
       "│           \n",
       "│                   [[ 1.0598,  0.1059, -0.1148],\n",
       "│                    [-1.8377,  0.1462, -0.5735]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb23559af40>\n",
       "    └── 'c' --> tensor([[[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "                \n",
       "                        [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "                \n",
       "                        [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "                \n",
       "                        [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "                \n",
       "                        [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "                \n",
       "                        [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "                \n",
       "                        [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "                \n",
       "                        [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                         [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                         [-0.7817,  0.6273, -0.0736, -0.2197]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:10.393996Z",
     "iopub.status.busy": "2023-02-24T08:22:10.393728Z",
     "iopub.status.idle": "2023-02-24T08:22:14.024856Z",
     "shell.execute_reply": "2023-02-24T08:22:14.023765Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44.7 µs ± 1.67 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:14.028547Z",
     "iopub.status.busy": "2023-02-24T08:22:14.028005Z",
     "iopub.status.idle": "2023-02-24T08:22:14.038353Z",
     "shell.execute_reply": "2023-02-24T08:22:14.037456Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb23557f4c0>\n",
       "├── 'a' --> tensor([[ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735],\n",
       "│                   [ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735],\n",
       "│                   [ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735],\n",
       "│                   [ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735],\n",
       "│                   [ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735],\n",
       "│                   [ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735],\n",
       "│                   [ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735],\n",
       "│                   [ 1.0598,  0.1059, -0.1148],\n",
       "│                   [-1.8377,  0.1462, -0.5735]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb23559bf40>\n",
       "    └── 'c' --> tensor([[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                        [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                        [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                        [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                        [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                        [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                        [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                        [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                        [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                        [-0.7817,  0.6273, -0.0736, -0.2197]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:14.042051Z",
     "iopub.status.busy": "2023-02-24T08:22:14.041546Z",
     "iopub.status.idle": "2023-02-24T08:22:17.434789Z",
     "shell.execute_reply": "2023-02-24T08:22:17.433787Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41.5 µs ± 927 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:17.438022Z",
     "iopub.status.busy": "2023-02-24T08:22:17.437596Z",
     "iopub.status.idle": "2023-02-24T08:22:23.614236Z",
     "shell.execute_reply": "2023-02-24T08:22:23.613198Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.8 µs ± 995 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:23.618576Z",
     "iopub.status.busy": "2023-02-24T08:22:23.617730Z",
     "iopub.status.idle": "2023-02-24T08:22:23.627316Z",
     "shell.execute_reply": "2023-02-24T08:22:23.626464Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]],\n",
       "       \n",
       "               [[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]],\n",
       "       \n",
       "               [[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]],\n",
       "       \n",
       "               [[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]],\n",
       "       \n",
       "               [[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]],\n",
       "       \n",
       "               [[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]],\n",
       "       \n",
       "               [[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]],\n",
       "       \n",
       "               [[ 1.0598,  0.1059, -0.1148],\n",
       "                [-1.8377,  0.1462, -0.5735]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "              \n",
       "                      [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "              \n",
       "                      [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "              \n",
       "                      [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "              \n",
       "                      [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "              \n",
       "                      [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "              \n",
       "                      [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]],\n",
       "              \n",
       "                      [[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                       [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                       [-0.7817,  0.6273, -0.0736, -0.2197]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:23.630570Z",
     "iopub.status.busy": "2023-02-24T08:22:23.630117Z",
     "iopub.status.idle": "2023-02-24T08:22:31.630817Z",
     "shell.execute_reply": "2023-02-24T08:22:31.629838Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "97.8 µs ± 1.3 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:31.634554Z",
     "iopub.status.busy": "2023-02-24T08:22:31.634286Z",
     "iopub.status.idle": "2023-02-24T08:22:31.643759Z",
     "shell.execute_reply": "2023-02-24T08:22:31.642676Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735],\n",
       "               [ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735],\n",
       "               [ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735],\n",
       "               [ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735],\n",
       "               [ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735],\n",
       "               [ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735],\n",
       "               [ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735],\n",
       "               [ 1.0598,  0.1059, -0.1148],\n",
       "               [-1.8377,  0.1462, -0.5735]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                      [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                      [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                      [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                      [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                      [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                      [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197],\n",
       "                      [-0.8571, -0.9131,  0.8059, -0.6705],\n",
       "                      [-2.3284,  0.8214,  2.7057,  0.3792],\n",
       "                      [-0.7817,  0.6273, -0.0736, -0.2197]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:31.646930Z",
     "iopub.status.busy": "2023-02-24T08:22:31.646666Z",
     "iopub.status.idle": "2023-02-24T08:22:46.016710Z",
     "shell.execute_reply": "2023-02-24T08:22:46.015670Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "177 µs ± 1.69 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:22:46.020634Z",
     "iopub.status.busy": "2023-02-24T08:22:46.020075Z",
     "iopub.status.idle": "2023-02-24T08:22:50.704476Z",
     "shell.execute_reply": "2023-02-24T08:22:50.703561Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "579 µs ± 14.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
