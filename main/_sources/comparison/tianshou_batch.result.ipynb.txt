{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:11.166149Z",
     "iopub.status.busy": "2023-02-25T18:10:11.165936Z",
     "iopub.status.idle": "2023-02-25T18:10:12.099063Z",
     "shell.execute_reply": "2023-02-25T18:10:12.098376Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:12.102838Z",
     "iopub.status.busy": "2023-02-25T18:10:12.101970Z",
     "iopub.status.idle": "2023-02-25T18:10:12.136016Z",
     "shell.execute_reply": "2023-02-25T18:10:12.135377Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:12.138951Z",
     "iopub.status.busy": "2023-02-25T18:10:12.138573Z",
     "iopub.status.idle": "2023-02-25T18:10:12.147952Z",
     "shell.execute_reply": "2023-02-25T18:10:12.147359Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f87d8d97430>\n",
       "├── 'a' --> tensor([[-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868]])\n",
       "└── 'x' --> <FastTreeValue 0x7f87d8d97880>\n",
       "    └── 'c' --> tensor([[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:12.151017Z",
     "iopub.status.busy": "2023-02-25T18:10:12.150512Z",
     "iopub.status.idle": "2023-02-25T18:10:12.156299Z",
     "shell.execute_reply": "2023-02-25T18:10:12.155703Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.5831,  0.6100,  0.5899],\n",
       "        [ 0.1787,  0.2271,  0.6868]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:12.158887Z",
     "iopub.status.busy": "2023-02-25T18:10:12.158556Z",
     "iopub.status.idle": "2023-02-25T18:10:17.176551Z",
     "shell.execute_reply": "2023-02-25T18:10:17.175807Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.1 ns ± 0.04 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:17.180307Z",
     "iopub.status.busy": "2023-02-25T18:10:17.179658Z",
     "iopub.status.idle": "2023-02-25T18:10:17.187169Z",
     "shell.execute_reply": "2023-02-25T18:10:17.186424Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f87d8d97430>\n",
       "├── 'a' --> tensor([[-1.0446,  0.5213,  2.1212],\n",
       "│                   [ 1.8777,  0.3220, -1.5666]])\n",
       "└── 'x' --> <FastTreeValue 0x7f87d8d97880>\n",
       "    └── 'c' --> tensor([[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:17.190540Z",
     "iopub.status.busy": "2023-02-25T18:10:17.189915Z",
     "iopub.status.idle": "2023-02-25T18:10:22.483857Z",
     "shell.execute_reply": "2023-02-25T18:10:22.483138Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.5 ns ± 0.0519 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:22.486714Z",
     "iopub.status.busy": "2023-02-25T18:10:22.486368Z",
     "iopub.status.idle": "2023-02-25T18:10:22.829444Z",
     "shell.execute_reply": "2023-02-25T18:10:22.828783Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:22.833121Z",
     "iopub.status.busy": "2023-02-25T18:10:22.832421Z",
     "iopub.status.idle": "2023-02-25T18:10:22.838870Z",
     "shell.execute_reply": "2023-02-25T18:10:22.838294Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:22.841825Z",
     "iopub.status.busy": "2023-02-25T18:10:22.841474Z",
     "iopub.status.idle": "2023-02-25T18:10:22.846285Z",
     "shell.execute_reply": "2023-02-25T18:10:22.845659Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.5831,  0.6100,  0.5899],\n",
       "        [ 0.1787,  0.2271,  0.6868]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:22.848970Z",
     "iopub.status.busy": "2023-02-25T18:10:22.848634Z",
     "iopub.status.idle": "2023-02-25T18:10:27.421290Z",
     "shell.execute_reply": "2023-02-25T18:10:27.420569Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.4 ns ± 0.0512 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:27.424366Z",
     "iopub.status.busy": "2023-02-25T18:10:27.423716Z",
     "iopub.status.idle": "2023-02-25T18:10:27.430252Z",
     "shell.execute_reply": "2023-02-25T18:10:27.429666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[1.1030, 0.3662, 0.7535],\n",
       "               [0.4963, 2.3701, 2.0947]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:27.432832Z",
     "iopub.status.busy": "2023-02-25T18:10:27.432482Z",
     "iopub.status.idle": "2023-02-25T18:10:31.376846Z",
     "shell.execute_reply": "2023-02-25T18:10:31.376132Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "485 ns ± 0.193 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:31.379993Z",
     "iopub.status.busy": "2023-02-25T18:10:31.379402Z",
     "iopub.status.idle": "2023-02-25T18:10:38.276944Z",
     "shell.execute_reply": "2023-02-25T18:10:38.276244Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "850 ns ± 0.471 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:38.280254Z",
     "iopub.status.busy": "2023-02-25T18:10:38.279686Z",
     "iopub.status.idle": "2023-02-25T18:10:47.329533Z",
     "shell.execute_reply": "2023-02-25T18:10:47.328875Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.1 µs ± 22 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:47.332859Z",
     "iopub.status.busy": "2023-02-25T18:10:47.332353Z",
     "iopub.status.idle": "2023-02-25T18:10:47.336334Z",
     "shell.execute_reply": "2023-02-25T18:10:47.335716Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:47.339873Z",
     "iopub.status.busy": "2023-02-25T18:10:47.338707Z",
     "iopub.status.idle": "2023-02-25T18:10:58.268691Z",
     "shell.execute_reply": "2023-02-25T18:10:58.268137Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135 µs ± 635 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:10:58.272058Z",
     "iopub.status.busy": "2023-02-25T18:10:58.271032Z",
     "iopub.status.idle": "2023-02-25T18:11:09.523416Z",
     "shell.execute_reply": "2023-02-25T18:11:09.522816Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 379 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:09.527459Z",
     "iopub.status.busy": "2023-02-25T18:11:09.526456Z",
     "iopub.status.idle": "2023-02-25T18:11:09.530829Z",
     "shell.execute_reply": "2023-02-25T18:11:09.530293Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:09.534558Z",
     "iopub.status.busy": "2023-02-25T18:11:09.533613Z",
     "iopub.status.idle": "2023-02-25T18:11:09.542504Z",
     "shell.execute_reply": "2023-02-25T18:11:09.541966Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f872da8bf10>\n",
       "├── 'a' --> tensor([[[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]],\n",
       "│           \n",
       "│                   [[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]],\n",
       "│           \n",
       "│                   [[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]],\n",
       "│           \n",
       "│                   [[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]],\n",
       "│           \n",
       "│                   [[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]],\n",
       "│           \n",
       "│                   [[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]],\n",
       "│           \n",
       "│                   [[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]],\n",
       "│           \n",
       "│                   [[-0.5831,  0.6100,  0.5899],\n",
       "│                    [ 0.1787,  0.2271,  0.6868]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f872da8bfa0>\n",
       "    └── 'c' --> tensor([[[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "                \n",
       "                        [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "                \n",
       "                        [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "                \n",
       "                        [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "                \n",
       "                        [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "                \n",
       "                        [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "                \n",
       "                        [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "                \n",
       "                        [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                         [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                         [ 1.0023, -1.1022, -0.9808,  1.6928]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:09.545201Z",
     "iopub.status.busy": "2023-02-25T18:11:09.544816Z",
     "iopub.status.idle": "2023-02-25T18:11:12.088699Z",
     "shell.execute_reply": "2023-02-25T18:11:12.087928Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.2 µs ± 51.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:12.092125Z",
     "iopub.status.busy": "2023-02-25T18:11:12.091615Z",
     "iopub.status.idle": "2023-02-25T18:11:12.099825Z",
     "shell.execute_reply": "2023-02-25T18:11:12.099187Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f87d8da0c70>\n",
       "├── 'a' --> tensor([[-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868],\n",
       "│                   [-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868],\n",
       "│                   [-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868],\n",
       "│                   [-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868],\n",
       "│                   [-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868],\n",
       "│                   [-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868],\n",
       "│                   [-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868],\n",
       "│                   [-0.5831,  0.6100,  0.5899],\n",
       "│                   [ 0.1787,  0.2271,  0.6868]])\n",
       "└── 'x' --> <FastTreeValue 0x7f872dad7f70>\n",
       "    └── 'c' --> tensor([[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                        [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                        [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                        [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                        [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                        [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                        [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                        [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                        [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                        [ 1.0023, -1.1022, -0.9808,  1.6928]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:12.103127Z",
     "iopub.status.busy": "2023-02-25T18:11:12.102463Z",
     "iopub.status.idle": "2023-02-25T18:11:14.517401Z",
     "shell.execute_reply": "2023-02-25T18:11:14.516725Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.6 µs ± 68.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:14.520505Z",
     "iopub.status.busy": "2023-02-25T18:11:14.519887Z",
     "iopub.status.idle": "2023-02-25T18:11:19.187512Z",
     "shell.execute_reply": "2023-02-25T18:11:19.186735Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.4 µs ± 20.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:19.190401Z",
     "iopub.status.busy": "2023-02-25T18:11:19.190051Z",
     "iopub.status.idle": "2023-02-25T18:11:19.198085Z",
     "shell.execute_reply": "2023-02-25T18:11:19.197458Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]],\n",
       "       \n",
       "               [[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]],\n",
       "       \n",
       "               [[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]],\n",
       "       \n",
       "               [[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]],\n",
       "       \n",
       "               [[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]],\n",
       "       \n",
       "               [[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]],\n",
       "       \n",
       "               [[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]],\n",
       "       \n",
       "               [[-0.5831,  0.6100,  0.5899],\n",
       "                [ 0.1787,  0.2271,  0.6868]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "              \n",
       "                      [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "              \n",
       "                      [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "              \n",
       "                      [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "              \n",
       "                      [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "              \n",
       "                      [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "              \n",
       "                      [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]],\n",
       "              \n",
       "                      [[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                       [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                       [ 1.0023, -1.1022, -0.9808,  1.6928]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:19.200672Z",
     "iopub.status.busy": "2023-02-25T18:11:19.200318Z",
     "iopub.status.idle": "2023-02-25T18:11:25.641221Z",
     "shell.execute_reply": "2023-02-25T18:11:25.640512Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.4 µs ± 156 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:25.644201Z",
     "iopub.status.busy": "2023-02-25T18:11:25.643670Z",
     "iopub.status.idle": "2023-02-25T18:11:25.651241Z",
     "shell.execute_reply": "2023-02-25T18:11:25.650618Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868],\n",
       "               [-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868],\n",
       "               [-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868],\n",
       "               [-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868],\n",
       "               [-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868],\n",
       "               [-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868],\n",
       "               [-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868],\n",
       "               [-0.5831,  0.6100,  0.5899],\n",
       "               [ 0.1787,  0.2271,  0.6868]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                      [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                      [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                      [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                      [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                      [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                      [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928],\n",
       "                      [ 0.8836,  0.2605, -0.4650,  0.1621],\n",
       "                      [ 0.1582,  0.8617,  0.0893, -0.4521],\n",
       "                      [ 1.0023, -1.1022, -0.9808,  1.6928]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:25.654259Z",
     "iopub.status.busy": "2023-02-25T18:11:25.653749Z",
     "iopub.status.idle": "2023-02-25T18:11:37.347421Z",
     "shell.execute_reply": "2023-02-25T18:11:37.346648Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 209 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:11:37.350490Z",
     "iopub.status.busy": "2023-02-25T18:11:37.349936Z",
     "iopub.status.idle": "2023-02-25T18:11:39.921029Z",
     "shell.execute_reply": "2023-02-25T18:11:39.920479Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "316 µs ± 437 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
