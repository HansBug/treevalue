{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:44.965816Z",
     "iopub.status.busy": "2023-01-20T07:38:44.965165Z",
     "iopub.status.idle": "2023-01-20T07:38:46.298001Z",
     "shell.execute_reply": "2023-01-20T07:38:46.296946Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:46.304399Z",
     "iopub.status.busy": "2023-01-20T07:38:46.303978Z",
     "iopub.status.idle": "2023-01-20T07:38:46.349246Z",
     "shell.execute_reply": "2023-01-20T07:38:46.348273Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:46.354293Z",
     "iopub.status.busy": "2023-01-20T07:38:46.354005Z",
     "iopub.status.idle": "2023-01-20T07:38:46.365408Z",
     "shell.execute_reply": "2023-01-20T07:38:46.364463Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa4a8eec520>\n",
       "├── 'a' --> tensor([[ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa4a8eec4c0>\n",
       "    └── 'c' --> tensor([[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:46.369763Z",
     "iopub.status.busy": "2023-01-20T07:38:46.369491Z",
     "iopub.status.idle": "2023-01-20T07:38:46.375196Z",
     "shell.execute_reply": "2023-01-20T07:38:46.374386Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.9223,  0.8296,  0.3704],\n",
       "        [-1.8741, -1.5719, -0.8765]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:46.379143Z",
     "iopub.status.busy": "2023-01-20T07:38:46.378790Z",
     "iopub.status.idle": "2023-01-20T07:38:52.487488Z",
     "shell.execute_reply": "2023-01-20T07:38:52.486449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75 ns ± 1.22 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:52.492193Z",
     "iopub.status.busy": "2023-01-20T07:38:52.491492Z",
     "iopub.status.idle": "2023-01-20T07:38:52.500189Z",
     "shell.execute_reply": "2023-01-20T07:38:52.499196Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa4a8eec520>\n",
       "├── 'a' --> tensor([[ 0.2447,  1.5870, -0.4561],\n",
       "│                   [-0.6478, -0.6055,  0.6983]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa4a8eec4c0>\n",
       "    └── 'c' --> tensor([[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:52.504434Z",
     "iopub.status.busy": "2023-01-20T07:38:52.503988Z",
     "iopub.status.idle": "2023-01-20T07:38:58.454505Z",
     "shell.execute_reply": "2023-01-20T07:38:58.453524Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.4 ns ± 1.75 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:58.458910Z",
     "iopub.status.busy": "2023-01-20T07:38:58.458146Z",
     "iopub.status.idle": "2023-01-20T07:38:58.937766Z",
     "shell.execute_reply": "2023-01-20T07:38:58.936770Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:58.942773Z",
     "iopub.status.busy": "2023-01-20T07:38:58.941985Z",
     "iopub.status.idle": "2023-01-20T07:38:58.950279Z",
     "shell.execute_reply": "2023-01-20T07:38:58.948719Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:58.954362Z",
     "iopub.status.busy": "2023-01-20T07:38:58.953865Z",
     "iopub.status.idle": "2023-01-20T07:38:58.960230Z",
     "shell.execute_reply": "2023-01-20T07:38:58.959096Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.9223,  0.8296,  0.3704],\n",
       "        [-1.8741, -1.5719, -0.8765]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:38:58.965090Z",
     "iopub.status.busy": "2023-01-20T07:38:58.964485Z",
     "iopub.status.idle": "2023-01-20T07:39:04.460864Z",
     "shell.execute_reply": "2023-01-20T07:39:04.458426Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.7 ns ± 1.54 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:04.468608Z",
     "iopub.status.busy": "2023-01-20T07:39:04.466723Z",
     "iopub.status.idle": "2023-01-20T07:39:04.478178Z",
     "shell.execute_reply": "2023-01-20T07:39:04.477206Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3812,  0.8124,  1.0280],\n",
       "               [ 0.3369, -1.2972, -0.6501]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:04.485768Z",
     "iopub.status.busy": "2023-01-20T07:39:04.485285Z",
     "iopub.status.idle": "2023-01-20T07:39:09.729912Z",
     "shell.execute_reply": "2023-01-20T07:39:09.729037Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "642 ns ± 17.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:09.734785Z",
     "iopub.status.busy": "2023-01-20T07:39:09.734007Z",
     "iopub.status.idle": "2023-01-20T07:39:18.301601Z",
     "shell.execute_reply": "2023-01-20T07:39:18.300589Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.05 µs ± 19.1 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:18.307889Z",
     "iopub.status.busy": "2023-01-20T07:39:18.307331Z",
     "iopub.status.idle": "2023-01-20T07:39:29.614464Z",
     "shell.execute_reply": "2023-01-20T07:39:29.613565Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.9 µs ± 238 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:29.619482Z",
     "iopub.status.busy": "2023-01-20T07:39:29.618653Z",
     "iopub.status.idle": "2023-01-20T07:39:29.623102Z",
     "shell.execute_reply": "2023-01-20T07:39:29.622102Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:29.627598Z",
     "iopub.status.busy": "2023-01-20T07:39:29.627302Z",
     "iopub.status.idle": "2023-01-20T07:39:31.976375Z",
     "shell.execute_reply": "2023-01-20T07:39:31.975388Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "289 µs ± 13.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:31.982110Z",
     "iopub.status.busy": "2023-01-20T07:39:31.980429Z",
     "iopub.status.idle": "2023-01-20T07:39:34.285114Z",
     "shell.execute_reply": "2023-01-20T07:39:34.284172Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "281 µs ± 7.71 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:34.289990Z",
     "iopub.status.busy": "2023-01-20T07:39:34.289085Z",
     "iopub.status.idle": "2023-01-20T07:39:34.294376Z",
     "shell.execute_reply": "2023-01-20T07:39:34.293322Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:34.298422Z",
     "iopub.status.busy": "2023-01-20T07:39:34.297912Z",
     "iopub.status.idle": "2023-01-20T07:39:34.311139Z",
     "shell.execute_reply": "2023-01-20T07:39:34.310175Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa400e79790>\n",
       "├── 'a' --> tensor([[[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]],\n",
       "│           \n",
       "│                   [[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]],\n",
       "│           \n",
       "│                   [[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]],\n",
       "│           \n",
       "│                   [[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]],\n",
       "│           \n",
       "│                   [[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]],\n",
       "│           \n",
       "│                   [[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]],\n",
       "│           \n",
       "│                   [[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]],\n",
       "│           \n",
       "│                   [[ 1.9223,  0.8296,  0.3704],\n",
       "│                    [-1.8741, -1.5719, -0.8765]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa400e794c0>\n",
       "    └── 'c' --> tensor([[[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "                \n",
       "                        [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "                \n",
       "                        [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "                \n",
       "                        [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "                \n",
       "                        [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "                \n",
       "                        [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "                \n",
       "                        [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "                \n",
       "                        [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                         [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                         [-0.3019,  0.4488, -0.7287,  0.6512]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:34.316386Z",
     "iopub.status.busy": "2023-01-20T07:39:34.316054Z",
     "iopub.status.idle": "2023-01-20T07:39:38.071477Z",
     "shell.execute_reply": "2023-01-20T07:39:38.070264Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46.3 µs ± 930 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:38.076788Z",
     "iopub.status.busy": "2023-01-20T07:39:38.076181Z",
     "iopub.status.idle": "2023-01-20T07:39:38.088916Z",
     "shell.execute_reply": "2023-01-20T07:39:38.087939Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa400b40f70>\n",
       "├── 'a' --> tensor([[ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765],\n",
       "│                   [ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765],\n",
       "│                   [ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765],\n",
       "│                   [ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765],\n",
       "│                   [ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765],\n",
       "│                   [ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765],\n",
       "│                   [ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765],\n",
       "│                   [ 1.9223,  0.8296,  0.3704],\n",
       "│                   [-1.8741, -1.5719, -0.8765]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa4843f8f10>\n",
       "    └── 'c' --> tensor([[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                        [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                        [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                        [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                        [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                        [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                        [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                        [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                        [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                        [-0.3019,  0.4488, -0.7287,  0.6512]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:38.093420Z",
     "iopub.status.busy": "2023-01-20T07:39:38.093050Z",
     "iopub.status.idle": "2023-01-20T07:39:41.531553Z",
     "shell.execute_reply": "2023-01-20T07:39:41.530492Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.1 µs ± 790 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:41.536603Z",
     "iopub.status.busy": "2023-01-20T07:39:41.536271Z",
     "iopub.status.idle": "2023-01-20T07:39:47.917607Z",
     "shell.execute_reply": "2023-01-20T07:39:47.916802Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 1.22 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:47.921611Z",
     "iopub.status.busy": "2023-01-20T07:39:47.921153Z",
     "iopub.status.idle": "2023-01-20T07:39:47.931234Z",
     "shell.execute_reply": "2023-01-20T07:39:47.930314Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]],\n",
       "       \n",
       "               [[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]],\n",
       "       \n",
       "               [[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]],\n",
       "       \n",
       "               [[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]],\n",
       "       \n",
       "               [[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]],\n",
       "       \n",
       "               [[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]],\n",
       "       \n",
       "               [[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]],\n",
       "       \n",
       "               [[ 1.9223,  0.8296,  0.3704],\n",
       "                [-1.8741, -1.5719, -0.8765]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "              \n",
       "                      [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "              \n",
       "                      [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "              \n",
       "                      [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "              \n",
       "                      [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "              \n",
       "                      [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "              \n",
       "                      [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]],\n",
       "              \n",
       "                      [[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                       [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                       [-0.3019,  0.4488, -0.7287,  0.6512]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:47.935148Z",
     "iopub.status.busy": "2023-01-20T07:39:47.934505Z",
     "iopub.status.idle": "2023-01-20T07:39:56.813292Z",
     "shell.execute_reply": "2023-01-20T07:39:56.812320Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "110 µs ± 2.17 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:56.817795Z",
     "iopub.status.busy": "2023-01-20T07:39:56.817024Z",
     "iopub.status.idle": "2023-01-20T07:39:56.826469Z",
     "shell.execute_reply": "2023-01-20T07:39:56.825591Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765],\n",
       "               [ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765],\n",
       "               [ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765],\n",
       "               [ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765],\n",
       "               [ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765],\n",
       "               [ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765],\n",
       "               [ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765],\n",
       "               [ 1.9223,  0.8296,  0.3704],\n",
       "               [-1.8741, -1.5719, -0.8765]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                      [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                      [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                      [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                      [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                      [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                      [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512],\n",
       "                      [ 0.1583, -0.8993,  0.7182, -0.3910],\n",
       "                      [ 0.8752, -1.8361,  1.1016,  0.1668],\n",
       "                      [-0.3019,  0.4488, -0.7287,  0.6512]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:39:56.830196Z",
     "iopub.status.busy": "2023-01-20T07:39:56.829932Z",
     "iopub.status.idle": "2023-01-20T07:40:12.357472Z",
     "shell.execute_reply": "2023-01-20T07:40:12.355747Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "191 µs ± 3.05 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:40:12.361768Z",
     "iopub.status.busy": "2023-01-20T07:40:12.361387Z",
     "iopub.status.idle": "2023-01-20T07:40:17.093034Z",
     "shell.execute_reply": "2023-01-20T07:40:17.092191Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "580 µs ± 12.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
