{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:32.422388Z",
     "iopub.status.busy": "2023-01-20T07:25:32.422100Z",
     "iopub.status.idle": "2023-01-20T07:25:33.550804Z",
     "shell.execute_reply": "2023-01-20T07:25:33.549493Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:33.556900Z",
     "iopub.status.busy": "2023-01-20T07:25:33.556538Z",
     "iopub.status.idle": "2023-01-20T07:25:33.594986Z",
     "shell.execute_reply": "2023-01-20T07:25:33.593788Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:33.598875Z",
     "iopub.status.busy": "2023-01-20T07:25:33.598596Z",
     "iopub.status.idle": "2023-01-20T07:25:33.608362Z",
     "shell.execute_reply": "2023-01-20T07:25:33.607516Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9ac0fd6fd0>\n",
       "├── 'a' --> tensor([[ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9ac0fd6fa0>\n",
       "    └── 'c' --> tensor([[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:33.612890Z",
     "iopub.status.busy": "2023-01-20T07:25:33.612366Z",
     "iopub.status.idle": "2023-01-20T07:25:33.618565Z",
     "shell.execute_reply": "2023-01-20T07:25:33.617756Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9751,  0.0312, -0.8180],\n",
       "        [-0.2948,  0.8449,  0.5180]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:33.622713Z",
     "iopub.status.busy": "2023-01-20T07:25:33.622243Z",
     "iopub.status.idle": "2023-01-20T07:25:39.778464Z",
     "shell.execute_reply": "2023-01-20T07:25:39.777039Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.8 ns ± 0.278 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:39.783263Z",
     "iopub.status.busy": "2023-01-20T07:25:39.782709Z",
     "iopub.status.idle": "2023-01-20T07:25:39.790314Z",
     "shell.execute_reply": "2023-01-20T07:25:39.789430Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9ac0fd6fd0>\n",
       "├── 'a' --> tensor([[ 0.4079,  0.2904, -0.9835],\n",
       "│                   [ 0.7797, -1.0047,  0.0436]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9ac0fd6fa0>\n",
       "    └── 'c' --> tensor([[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:39.795004Z",
     "iopub.status.busy": "2023-01-20T07:25:39.794164Z",
     "iopub.status.idle": "2023-01-20T07:25:46.558896Z",
     "shell.execute_reply": "2023-01-20T07:25:46.558095Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.2 ns ± 1.32 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:46.563125Z",
     "iopub.status.busy": "2023-01-20T07:25:46.562311Z",
     "iopub.status.idle": "2023-01-20T07:25:47.004817Z",
     "shell.execute_reply": "2023-01-20T07:25:47.003889Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:47.010143Z",
     "iopub.status.busy": "2023-01-20T07:25:47.009345Z",
     "iopub.status.idle": "2023-01-20T07:25:47.016315Z",
     "shell.execute_reply": "2023-01-20T07:25:47.015491Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:47.019866Z",
     "iopub.status.busy": "2023-01-20T07:25:47.019430Z",
     "iopub.status.idle": "2023-01-20T07:25:47.025497Z",
     "shell.execute_reply": "2023-01-20T07:25:47.024690Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9751,  0.0312, -0.8180],\n",
       "        [-0.2948,  0.8449,  0.5180]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:47.029225Z",
     "iopub.status.busy": "2023-01-20T07:25:47.028563Z",
     "iopub.status.idle": "2023-01-20T07:25:52.727479Z",
     "shell.execute_reply": "2023-01-20T07:25:52.726554Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.5 ns ± 0.979 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:52.731802Z",
     "iopub.status.busy": "2023-01-20T07:25:52.731019Z",
     "iopub.status.idle": "2023-01-20T07:25:52.740932Z",
     "shell.execute_reply": "2023-01-20T07:25:52.740131Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.5078,  1.7336, -1.1103],\n",
       "               [-0.5292,  0.1546,  0.5909]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:52.744825Z",
     "iopub.status.busy": "2023-01-20T07:25:52.744076Z",
     "iopub.status.idle": "2023-01-20T07:25:57.709898Z",
     "shell.execute_reply": "2023-01-20T07:25:57.709037Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "611 ns ± 5.39 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:25:57.714115Z",
     "iopub.status.busy": "2023-01-20T07:25:57.713457Z",
     "iopub.status.idle": "2023-01-20T07:26:06.093050Z",
     "shell.execute_reply": "2023-01-20T07:26:06.092272Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.03 µs ± 13.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:06.097385Z",
     "iopub.status.busy": "2023-01-20T07:26:06.096579Z",
     "iopub.status.idle": "2023-01-20T07:26:16.312082Z",
     "shell.execute_reply": "2023-01-20T07:26:16.298458Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.4 µs ± 376 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:16.321516Z",
     "iopub.status.busy": "2023-01-20T07:26:16.321167Z",
     "iopub.status.idle": "2023-01-20T07:26:16.327063Z",
     "shell.execute_reply": "2023-01-20T07:26:16.326217Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:16.332065Z",
     "iopub.status.busy": "2023-01-20T07:26:16.331267Z",
     "iopub.status.idle": "2023-01-20T07:26:30.030915Z",
     "shell.execute_reply": "2023-01-20T07:26:30.029759Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "169 µs ± 1.14 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:30.034993Z",
     "iopub.status.busy": "2023-01-20T07:26:30.034414Z",
     "iopub.status.idle": "2023-01-20T07:26:43.624636Z",
     "shell.execute_reply": "2023-01-20T07:26:43.623889Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 837 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:43.629183Z",
     "iopub.status.busy": "2023-01-20T07:26:43.628723Z",
     "iopub.status.idle": "2023-01-20T07:26:43.632314Z",
     "shell.execute_reply": "2023-01-20T07:26:43.631657Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:43.635662Z",
     "iopub.status.busy": "2023-01-20T07:26:43.635226Z",
     "iopub.status.idle": "2023-01-20T07:26:43.642960Z",
     "shell.execute_reply": "2023-01-20T07:26:43.642312Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9a2017e8b0>\n",
       "├── 'a' --> tensor([[[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]],\n",
       "│           \n",
       "│                   [[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]],\n",
       "│           \n",
       "│                   [[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]],\n",
       "│           \n",
       "│                   [[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]],\n",
       "│           \n",
       "│                   [[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]],\n",
       "│           \n",
       "│                   [[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]],\n",
       "│           \n",
       "│                   [[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]],\n",
       "│           \n",
       "│                   [[ 0.9751,  0.0312, -0.8180],\n",
       "│                    [-0.2948,  0.8449,  0.5180]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9a2017e430>\n",
       "    └── 'c' --> tensor([[[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "                \n",
       "                        [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "                \n",
       "                        [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "                \n",
       "                        [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "                \n",
       "                        [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "                \n",
       "                        [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "                \n",
       "                        [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "                \n",
       "                        [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                         [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                         [-1.7383,  0.4137,  0.2345,  0.6079]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:43.646256Z",
     "iopub.status.busy": "2023-01-20T07:26:43.645843Z",
     "iopub.status.idle": "2023-01-20T07:26:46.563813Z",
     "shell.execute_reply": "2023-01-20T07:26:46.562875Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35.9 µs ± 185 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:46.567724Z",
     "iopub.status.busy": "2023-01-20T07:26:46.567266Z",
     "iopub.status.idle": "2023-01-20T07:26:46.576025Z",
     "shell.execute_reply": "2023-01-20T07:26:46.575213Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9ac9048a30>\n",
       "├── 'a' --> tensor([[ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180],\n",
       "│                   [ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180],\n",
       "│                   [ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180],\n",
       "│                   [ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180],\n",
       "│                   [ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180],\n",
       "│                   [ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180],\n",
       "│                   [ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180],\n",
       "│                   [ 0.9751,  0.0312, -0.8180],\n",
       "│                   [-0.2948,  0.8449,  0.5180]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9ac9048d30>\n",
       "    └── 'c' --> tensor([[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                        [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                        [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                        [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                        [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                        [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                        [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                        [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                        [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                        [-1.7383,  0.4137,  0.2345,  0.6079]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:46.579645Z",
     "iopub.status.busy": "2023-01-20T07:26:46.579043Z",
     "iopub.status.idle": "2023-01-20T07:26:49.336187Z",
     "shell.execute_reply": "2023-01-20T07:26:49.334754Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.9 µs ± 232 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:49.340954Z",
     "iopub.status.busy": "2023-01-20T07:26:49.340671Z",
     "iopub.status.idle": "2023-01-20T07:26:54.509008Z",
     "shell.execute_reply": "2023-01-20T07:26:54.508036Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.6 µs ± 347 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:54.513562Z",
     "iopub.status.busy": "2023-01-20T07:26:54.512810Z",
     "iopub.status.idle": "2023-01-20T07:26:54.521497Z",
     "shell.execute_reply": "2023-01-20T07:26:54.520672Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "              \n",
       "                      [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "              \n",
       "                      [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "              \n",
       "                      [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "              \n",
       "                      [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "              \n",
       "                      [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "              \n",
       "                      [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]],\n",
       "              \n",
       "                      [[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                       [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                       [-1.7383,  0.4137,  0.2345,  0.6079]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]],\n",
       "       \n",
       "               [[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]],\n",
       "       \n",
       "               [[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]],\n",
       "       \n",
       "               [[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]],\n",
       "       \n",
       "               [[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]],\n",
       "       \n",
       "               [[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]],\n",
       "       \n",
       "               [[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]],\n",
       "       \n",
       "               [[ 0.9751,  0.0312, -0.8180],\n",
       "                [-0.2948,  0.8449,  0.5180]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:26:54.524978Z",
     "iopub.status.busy": "2023-01-20T07:26:54.524538Z",
     "iopub.status.idle": "2023-01-20T07:27:01.753209Z",
     "shell.execute_reply": "2023-01-20T07:27:01.752110Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89.1 µs ± 802 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:27:01.758024Z",
     "iopub.status.busy": "2023-01-20T07:27:01.757259Z",
     "iopub.status.idle": "2023-01-20T07:27:01.766784Z",
     "shell.execute_reply": "2023-01-20T07:27:01.765877Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                      [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                      [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                      [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                      [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                      [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                      [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079],\n",
       "                      [ 0.2618,  0.9832,  0.3218, -1.9537],\n",
       "                      [-1.0374,  0.9894,  0.7427, -0.7533],\n",
       "                      [-1.7383,  0.4137,  0.2345,  0.6079]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180],\n",
       "               [ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180],\n",
       "               [ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180],\n",
       "               [ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180],\n",
       "               [ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180],\n",
       "               [ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180],\n",
       "               [ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180],\n",
       "               [ 0.9751,  0.0312, -0.8180],\n",
       "               [-0.2948,  0.8449,  0.5180]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:27:01.770326Z",
     "iopub.status.busy": "2023-01-20T07:27:01.769854Z",
     "iopub.status.idle": "2023-01-20T07:27:16.104148Z",
     "shell.execute_reply": "2023-01-20T07:27:16.103363Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "176 µs ± 4.84 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T07:27:16.108213Z",
     "iopub.status.busy": "2023-01-20T07:27:16.107644Z",
     "iopub.status.idle": "2023-01-20T07:27:19.147123Z",
     "shell.execute_reply": "2023-01-20T07:27:19.146371Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "373 µs ± 5.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
