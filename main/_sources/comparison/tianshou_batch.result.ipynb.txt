{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:28.527558Z",
     "iopub.status.busy": "2023-02-12T17:08:28.527360Z",
     "iopub.status.idle": "2023-02-12T17:08:29.423257Z",
     "shell.execute_reply": "2023-02-12T17:08:29.422309Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:29.426533Z",
     "iopub.status.busy": "2023-02-12T17:08:29.426045Z",
     "iopub.status.idle": "2023-02-12T17:08:29.458380Z",
     "shell.execute_reply": "2023-02-12T17:08:29.457789Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:29.460836Z",
     "iopub.status.busy": "2023-02-12T17:08:29.460617Z",
     "iopub.status.idle": "2023-02-12T17:08:29.469452Z",
     "shell.execute_reply": "2023-02-12T17:08:29.468859Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9b6de2fcd0>\n",
       "├── 'a' --> tensor([[ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9b6de894c0>\n",
       "    └── 'c' --> tensor([[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:29.472306Z",
     "iopub.status.busy": "2023-02-12T17:08:29.471845Z",
     "iopub.status.idle": "2023-02-12T17:08:29.476391Z",
     "shell.execute_reply": "2023-02-12T17:08:29.475766Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.7557,  0.2245, -2.3674],\n",
       "        [-1.0940,  0.7099,  0.5304]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:29.479279Z",
     "iopub.status.busy": "2023-02-12T17:08:29.478816Z",
     "iopub.status.idle": "2023-02-12T17:08:34.805961Z",
     "shell.execute_reply": "2023-02-12T17:08:34.805210Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.8 ns ± 0.0254 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:34.809020Z",
     "iopub.status.busy": "2023-02-12T17:08:34.808624Z",
     "iopub.status.idle": "2023-02-12T17:08:34.815741Z",
     "shell.execute_reply": "2023-02-12T17:08:34.814781Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9b6de2fcd0>\n",
       "├── 'a' --> tensor([[-0.7584, -0.0110,  1.1087],\n",
       "│                   [-1.6367, -0.0956,  0.3471]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9b6de894c0>\n",
       "    └── 'c' --> tensor([[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:34.818377Z",
     "iopub.status.busy": "2023-02-12T17:08:34.817959Z",
     "iopub.status.idle": "2023-02-12T17:08:40.407416Z",
     "shell.execute_reply": "2023-02-12T17:08:40.406699Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.8 ns ± 0.0111 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:40.410455Z",
     "iopub.status.busy": "2023-02-12T17:08:40.409932Z",
     "iopub.status.idle": "2023-02-12T17:08:40.733107Z",
     "shell.execute_reply": "2023-02-12T17:08:40.732420Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:40.736695Z",
     "iopub.status.busy": "2023-02-12T17:08:40.736069Z",
     "iopub.status.idle": "2023-02-12T17:08:40.742152Z",
     "shell.execute_reply": "2023-02-12T17:08:40.741562Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:40.744628Z",
     "iopub.status.busy": "2023-02-12T17:08:40.744262Z",
     "iopub.status.idle": "2023-02-12T17:08:40.748929Z",
     "shell.execute_reply": "2023-02-12T17:08:40.748302Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.7557,  0.2245, -2.3674],\n",
       "        [-1.0940,  0.7099,  0.5304]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:40.751260Z",
     "iopub.status.busy": "2023-02-12T17:08:40.750937Z",
     "iopub.status.idle": "2023-02-12T17:08:45.248500Z",
     "shell.execute_reply": "2023-02-12T17:08:45.247775Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.2 ns ± 0.0411 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:45.251499Z",
     "iopub.status.busy": "2023-02-12T17:08:45.250977Z",
     "iopub.status.idle": "2023-02-12T17:08:45.257277Z",
     "shell.execute_reply": "2023-02-12T17:08:45.256692Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.4070, -0.7954, -1.0841],\n",
       "               [-0.2359,  1.5264, -1.9859]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:45.259871Z",
     "iopub.status.busy": "2023-02-12T17:08:45.259533Z",
     "iopub.status.idle": "2023-02-12T17:08:49.142984Z",
     "shell.execute_reply": "2023-02-12T17:08:49.142272Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "478 ns ± 0.22 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:49.146425Z",
     "iopub.status.busy": "2023-02-12T17:08:49.145891Z",
     "iopub.status.idle": "2023-02-12T17:08:56.107027Z",
     "shell.execute_reply": "2023-02-12T17:08:56.105955Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "857 ns ± 3.82 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:08:56.110095Z",
     "iopub.status.busy": "2023-02-12T17:08:56.109499Z",
     "iopub.status.idle": "2023-02-12T17:09:05.292428Z",
     "shell.execute_reply": "2023-02-12T17:09:05.291765Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 17.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:05.295535Z",
     "iopub.status.busy": "2023-02-12T17:09:05.295179Z",
     "iopub.status.idle": "2023-02-12T17:09:05.299169Z",
     "shell.execute_reply": "2023-02-12T17:09:05.298590Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:05.301850Z",
     "iopub.status.busy": "2023-02-12T17:09:05.301254Z",
     "iopub.status.idle": "2023-02-12T17:09:16.448237Z",
     "shell.execute_reply": "2023-02-12T17:09:16.447671Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 672 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:16.451580Z",
     "iopub.status.busy": "2023-02-12T17:09:16.450565Z",
     "iopub.status.idle": "2023-02-12T17:09:27.967957Z",
     "shell.execute_reply": "2023-02-12T17:09:27.967402Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 4.19 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:27.970901Z",
     "iopub.status.busy": "2023-02-12T17:09:27.970427Z",
     "iopub.status.idle": "2023-02-12T17:09:27.973797Z",
     "shell.execute_reply": "2023-02-12T17:09:27.973270Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:27.976479Z",
     "iopub.status.busy": "2023-02-12T17:09:27.976247Z",
     "iopub.status.idle": "2023-02-12T17:09:27.983128Z",
     "shell.execute_reply": "2023-02-12T17:09:27.982466Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9abea7dd00>\n",
       "├── 'a' --> tensor([[[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]],\n",
       "│           \n",
       "│                   [[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]],\n",
       "│           \n",
       "│                   [[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]],\n",
       "│           \n",
       "│                   [[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]],\n",
       "│           \n",
       "│                   [[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]],\n",
       "│           \n",
       "│                   [[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]],\n",
       "│           \n",
       "│                   [[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]],\n",
       "│           \n",
       "│                   [[ 1.7557,  0.2245, -2.3674],\n",
       "│                    [-1.0940,  0.7099,  0.5304]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9b4052e790>\n",
       "    └── 'c' --> tensor([[[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "                \n",
       "                        [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "                \n",
       "                        [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "                \n",
       "                        [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "                \n",
       "                        [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "                \n",
       "                        [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "                \n",
       "                        [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "                \n",
       "                        [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                         [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                         [ 0.9422,  0.5976,  0.4450, -1.7133]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:27.985827Z",
     "iopub.status.busy": "2023-02-12T17:09:27.985292Z",
     "iopub.status.idle": "2023-02-12T17:09:30.567679Z",
     "shell.execute_reply": "2023-02-12T17:09:30.566934Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.8 µs ± 75 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:30.570537Z",
     "iopub.status.busy": "2023-02-12T17:09:30.570191Z",
     "iopub.status.idle": "2023-02-12T17:09:30.578485Z",
     "shell.execute_reply": "2023-02-12T17:09:30.577381Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9b68dab0a0>\n",
       "├── 'a' --> tensor([[ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304],\n",
       "│                   [ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304],\n",
       "│                   [ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304],\n",
       "│                   [ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304],\n",
       "│                   [ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304],\n",
       "│                   [ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304],\n",
       "│                   [ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304],\n",
       "│                   [ 1.7557,  0.2245, -2.3674],\n",
       "│                   [-1.0940,  0.7099,  0.5304]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9b68dabbe0>\n",
       "    └── 'c' --> tensor([[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                        [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                        [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                        [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                        [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                        [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                        [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                        [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                        [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                        [ 0.9422,  0.5976,  0.4450, -1.7133]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:30.581117Z",
     "iopub.status.busy": "2023-02-12T17:09:30.580792Z",
     "iopub.status.idle": "2023-02-12T17:09:33.009240Z",
     "shell.execute_reply": "2023-02-12T17:09:33.008486Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.8 µs ± 48.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:33.012429Z",
     "iopub.status.busy": "2023-02-12T17:09:33.012065Z",
     "iopub.status.idle": "2023-02-12T17:09:37.623855Z",
     "shell.execute_reply": "2023-02-12T17:09:37.623182Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.7 µs ± 40.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:37.627067Z",
     "iopub.status.busy": "2023-02-12T17:09:37.626716Z",
     "iopub.status.idle": "2023-02-12T17:09:37.634674Z",
     "shell.execute_reply": "2023-02-12T17:09:37.634090Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]],\n",
       "       \n",
       "               [[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]],\n",
       "       \n",
       "               [[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]],\n",
       "       \n",
       "               [[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]],\n",
       "       \n",
       "               [[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]],\n",
       "       \n",
       "               [[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]],\n",
       "       \n",
       "               [[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]],\n",
       "       \n",
       "               [[ 1.7557,  0.2245, -2.3674],\n",
       "                [-1.0940,  0.7099,  0.5304]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "              \n",
       "                      [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "              \n",
       "                      [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "              \n",
       "                      [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "              \n",
       "                      [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "              \n",
       "                      [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "              \n",
       "                      [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]],\n",
       "              \n",
       "                      [[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                       [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                       [ 0.9422,  0.5976,  0.4450, -1.7133]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:37.637415Z",
     "iopub.status.busy": "2023-02-12T17:09:37.637086Z",
     "iopub.status.idle": "2023-02-12T17:09:40.272474Z",
     "shell.execute_reply": "2023-02-12T17:09:40.271705Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "324 µs ± 1.7 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:40.275577Z",
     "iopub.status.busy": "2023-02-12T17:09:40.275056Z",
     "iopub.status.idle": "2023-02-12T17:09:40.282663Z",
     "shell.execute_reply": "2023-02-12T17:09:40.282082Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304],\n",
       "               [ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304],\n",
       "               [ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304],\n",
       "               [ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304],\n",
       "               [ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304],\n",
       "               [ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304],\n",
       "               [ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304],\n",
       "               [ 1.7557,  0.2245, -2.3674],\n",
       "               [-1.0940,  0.7099,  0.5304]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                      [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                      [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                      [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                      [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                      [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                      [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133],\n",
       "                      [ 0.6741, -1.5215, -1.3430,  0.8374],\n",
       "                      [-0.8407, -0.3306, -0.4151,  0.4416],\n",
       "                      [ 0.9422,  0.5976,  0.4450, -1.7133]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:40.285331Z",
     "iopub.status.busy": "2023-02-12T17:09:40.284998Z",
     "iopub.status.idle": "2023-02-12T17:09:52.055497Z",
     "shell.execute_reply": "2023-02-12T17:09:52.054787Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 332 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:09:52.058664Z",
     "iopub.status.busy": "2023-02-12T17:09:52.058302Z",
     "iopub.status.idle": "2023-02-12T17:09:54.578072Z",
     "shell.execute_reply": "2023-02-12T17:09:54.577387Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "309 µs ± 855 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
