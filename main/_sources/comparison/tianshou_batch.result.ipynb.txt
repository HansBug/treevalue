{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:07.220860Z",
     "iopub.status.busy": "2023-02-25T08:06:07.220175Z",
     "iopub.status.idle": "2023-02-25T08:06:08.501371Z",
     "shell.execute_reply": "2023-02-25T08:06:08.500306Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:08.505889Z",
     "iopub.status.busy": "2023-02-25T08:06:08.505522Z",
     "iopub.status.idle": "2023-02-25T08:06:08.552711Z",
     "shell.execute_reply": "2023-02-25T08:06:08.551518Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:08.556541Z",
     "iopub.status.busy": "2023-02-25T08:06:08.556233Z",
     "iopub.status.idle": "2023-02-25T08:06:08.568609Z",
     "shell.execute_reply": "2023-02-25T08:06:08.567773Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0824592220>\n",
       "├── 'a' --> tensor([[-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495]])\n",
       "└── 'x' --> <FastTreeValue 0x7f082460c100>\n",
       "    └── 'c' --> tensor([[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:08.572212Z",
     "iopub.status.busy": "2023-02-25T08:06:08.571646Z",
     "iopub.status.idle": "2023-02-25T08:06:08.579091Z",
     "shell.execute_reply": "2023-02-25T08:06:08.577754Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9644,  0.2263,  1.6389],\n",
       "        [ 2.2063,  0.9034,  0.5495]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:08.582791Z",
     "iopub.status.busy": "2023-02-25T08:06:08.582481Z",
     "iopub.status.idle": "2023-02-25T08:06:14.542759Z",
     "shell.execute_reply": "2023-02-25T08:06:14.541228Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.6 ns ± 1.24 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:14.547224Z",
     "iopub.status.busy": "2023-02-25T08:06:14.546656Z",
     "iopub.status.idle": "2023-02-25T08:06:14.555857Z",
     "shell.execute_reply": "2023-02-25T08:06:14.554884Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0824592220>\n",
       "├── 'a' --> tensor([[-0.7348,  0.2381, -1.2934],\n",
       "│                   [ 0.9612, -0.6046,  0.4721]])\n",
       "└── 'x' --> <FastTreeValue 0x7f082460c100>\n",
       "    └── 'c' --> tensor([[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:14.560368Z",
     "iopub.status.busy": "2023-02-25T08:06:14.559814Z",
     "iopub.status.idle": "2023-02-25T08:06:20.724437Z",
     "shell.execute_reply": "2023-02-25T08:06:20.723214Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.6 ns ± 1.53 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:20.729253Z",
     "iopub.status.busy": "2023-02-25T08:06:20.728953Z",
     "iopub.status.idle": "2023-02-25T08:06:21.192629Z",
     "shell.execute_reply": "2023-02-25T08:06:21.191582Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:21.196485Z",
     "iopub.status.busy": "2023-02-25T08:06:21.196050Z",
     "iopub.status.idle": "2023-02-25T08:06:21.204863Z",
     "shell.execute_reply": "2023-02-25T08:06:21.203920Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:21.208147Z",
     "iopub.status.busy": "2023-02-25T08:06:21.207845Z",
     "iopub.status.idle": "2023-02-25T08:06:21.214249Z",
     "shell.execute_reply": "2023-02-25T08:06:21.213295Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9644,  0.2263,  1.6389],\n",
       "        [ 2.2063,  0.9034,  0.5495]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:21.217380Z",
     "iopub.status.busy": "2023-02-25T08:06:21.217090Z",
     "iopub.status.idle": "2023-02-25T08:06:27.157829Z",
     "shell.execute_reply": "2023-02-25T08:06:27.156939Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.8 ns ± 2.3 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:27.162302Z",
     "iopub.status.busy": "2023-02-25T08:06:27.161749Z",
     "iopub.status.idle": "2023-02-25T08:06:27.170665Z",
     "shell.execute_reply": "2023-02-25T08:06:27.169765Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.8040e-01, -7.4035e-01,  5.5940e-04],\n",
       "               [-8.3954e-01,  1.5531e+00,  9.2532e-02]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:27.174263Z",
     "iopub.status.busy": "2023-02-25T08:06:27.173965Z",
     "iopub.status.idle": "2023-02-25T08:06:32.253138Z",
     "shell.execute_reply": "2023-02-25T08:06:32.251726Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "626 ns ± 7.75 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:32.256942Z",
     "iopub.status.busy": "2023-02-25T08:06:32.256637Z",
     "iopub.status.idle": "2023-02-25T08:06:40.737715Z",
     "shell.execute_reply": "2023-02-25T08:06:40.736385Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.04 µs ± 20 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:40.741443Z",
     "iopub.status.busy": "2023-02-25T08:06:40.740978Z",
     "iopub.status.idle": "2023-02-25T08:06:51.739088Z",
     "shell.execute_reply": "2023-02-25T08:06:51.738191Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.5 µs ± 185 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:51.742996Z",
     "iopub.status.busy": "2023-02-25T08:06:51.742521Z",
     "iopub.status.idle": "2023-02-25T08:06:51.746638Z",
     "shell.execute_reply": "2023-02-25T08:06:51.745715Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:51.751075Z",
     "iopub.status.busy": "2023-02-25T08:06:51.749703Z",
     "iopub.status.idle": "2023-02-25T08:06:54.207630Z",
     "shell.execute_reply": "2023-02-25T08:06:54.206536Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "302 µs ± 14.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:54.211425Z",
     "iopub.status.busy": "2023-02-25T08:06:54.210961Z",
     "iopub.status.idle": "2023-02-25T08:06:56.678762Z",
     "shell.execute_reply": "2023-02-25T08:06:56.677747Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "305 µs ± 16.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:56.683130Z",
     "iopub.status.busy": "2023-02-25T08:06:56.682658Z",
     "iopub.status.idle": "2023-02-25T08:06:56.687795Z",
     "shell.execute_reply": "2023-02-25T08:06:56.686866Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:56.691123Z",
     "iopub.status.busy": "2023-02-25T08:06:56.690609Z",
     "iopub.status.idle": "2023-02-25T08:06:56.701512Z",
     "shell.execute_reply": "2023-02-25T08:06:56.700525Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f077a257040>\n",
       "├── 'a' --> tensor([[[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]],\n",
       "│           \n",
       "│                   [[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]],\n",
       "│           \n",
       "│                   [[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]],\n",
       "│           \n",
       "│                   [[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]],\n",
       "│           \n",
       "│                   [[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]],\n",
       "│           \n",
       "│                   [[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]],\n",
       "│           \n",
       "│                   [[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]],\n",
       "│           \n",
       "│                   [[-0.9644,  0.2263,  1.6389],\n",
       "│                    [ 2.2063,  0.9034,  0.5495]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f077a2572e0>\n",
       "    └── 'c' --> tensor([[[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "                \n",
       "                        [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "                \n",
       "                        [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "                \n",
       "                        [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "                \n",
       "                        [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "                \n",
       "                        [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "                \n",
       "                        [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "                \n",
       "                        [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                         [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                         [-0.1984, -0.1071, -0.6244, -0.4863]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:06:56.705112Z",
     "iopub.status.busy": "2023-02-25T08:06:56.704574Z",
     "iopub.status.idle": "2023-02-25T08:07:00.586547Z",
     "shell.execute_reply": "2023-02-25T08:07:00.585531Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47.8 µs ± 1.48 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:00.590529Z",
     "iopub.status.busy": "2023-02-25T08:07:00.590061Z",
     "iopub.status.idle": "2023-02-25T08:07:00.600078Z",
     "shell.execute_reply": "2023-02-25T08:07:00.599102Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f08245f8dc0>\n",
       "├── 'a' --> tensor([[-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495],\n",
       "│                   [-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495],\n",
       "│                   [-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495],\n",
       "│                   [-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495],\n",
       "│                   [-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495],\n",
       "│                   [-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495],\n",
       "│                   [-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495],\n",
       "│                   [-0.9644,  0.2263,  1.6389],\n",
       "│                   [ 2.2063,  0.9034,  0.5495]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0824563940>\n",
       "    └── 'c' --> tensor([[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                        [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                        [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                        [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                        [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                        [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                        [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                        [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                        [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                        [-0.1984, -0.1071, -0.6244, -0.4863]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:00.604570Z",
     "iopub.status.busy": "2023-02-25T08:07:00.604259Z",
     "iopub.status.idle": "2023-02-25T08:07:04.240228Z",
     "shell.execute_reply": "2023-02-25T08:07:04.239220Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43.3 µs ± 825 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:04.244783Z",
     "iopub.status.busy": "2023-02-25T08:07:04.244247Z",
     "iopub.status.idle": "2023-02-25T08:07:10.856264Z",
     "shell.execute_reply": "2023-02-25T08:07:10.855271Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81.5 µs ± 2.32 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:10.860365Z",
     "iopub.status.busy": "2023-02-25T08:07:10.859606Z",
     "iopub.status.idle": "2023-02-25T08:07:10.870464Z",
     "shell.execute_reply": "2023-02-25T08:07:10.869505Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]],\n",
       "       \n",
       "               [[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]],\n",
       "       \n",
       "               [[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]],\n",
       "       \n",
       "               [[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]],\n",
       "       \n",
       "               [[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]],\n",
       "       \n",
       "               [[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]],\n",
       "       \n",
       "               [[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]],\n",
       "       \n",
       "               [[-0.9644,  0.2263,  1.6389],\n",
       "                [ 2.2063,  0.9034,  0.5495]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "              \n",
       "                      [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "              \n",
       "                      [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "              \n",
       "                      [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "              \n",
       "                      [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "              \n",
       "                      [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "              \n",
       "                      [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]],\n",
       "              \n",
       "                      [[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                       [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                       [-0.1984, -0.1071, -0.6244, -0.4863]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:10.873589Z",
     "iopub.status.busy": "2023-02-25T08:07:10.873302Z",
     "iopub.status.idle": "2023-02-25T08:07:19.788406Z",
     "shell.execute_reply": "2023-02-25T08:07:19.786727Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "111 µs ± 4.01 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:19.791900Z",
     "iopub.status.busy": "2023-02-25T08:07:19.791574Z",
     "iopub.status.idle": "2023-02-25T08:07:19.801815Z",
     "shell.execute_reply": "2023-02-25T08:07:19.800761Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495],\n",
       "               [-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495],\n",
       "               [-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495],\n",
       "               [-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495],\n",
       "               [-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495],\n",
       "               [-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495],\n",
       "               [-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495],\n",
       "               [-0.9644,  0.2263,  1.6389],\n",
       "               [ 2.2063,  0.9034,  0.5495]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                      [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                      [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                      [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                      [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                      [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                      [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863],\n",
       "                      [-0.5243,  0.1891,  0.5116,  0.0893],\n",
       "                      [-0.7660,  2.2905,  1.3473, -0.3243],\n",
       "                      [-0.1984, -0.1071, -0.6244, -0.4863]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:19.805509Z",
     "iopub.status.busy": "2023-02-25T08:07:19.805039Z",
     "iopub.status.idle": "2023-02-25T08:07:35.948710Z",
     "shell.execute_reply": "2023-02-25T08:07:35.947705Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "198 µs ± 3.67 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T08:07:35.952825Z",
     "iopub.status.busy": "2023-02-25T08:07:35.952279Z",
     "iopub.status.idle": "2023-02-25T08:07:41.056743Z",
     "shell.execute_reply": "2023-02-25T08:07:41.055459Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "618 µs ± 41.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
