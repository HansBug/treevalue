{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:39.383787Z",
     "iopub.status.busy": "2023-02-24T07:58:39.383552Z",
     "iopub.status.idle": "2023-02-24T07:58:40.337376Z",
     "shell.execute_reply": "2023-02-24T07:58:40.336019Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:40.341882Z",
     "iopub.status.busy": "2023-02-24T07:58:40.340995Z",
     "iopub.status.idle": "2023-02-24T07:58:40.375403Z",
     "shell.execute_reply": "2023-02-24T07:58:40.374714Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:40.378658Z",
     "iopub.status.busy": "2023-02-24T07:58:40.378244Z",
     "iopub.status.idle": "2023-02-24T07:58:40.387895Z",
     "shell.execute_reply": "2023-02-24T07:58:40.387290Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f368cd952e0>\n",
       "├── 'a' --> tensor([[ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824]])\n",
       "└── 'x' --> <FastTreeValue 0x7f368cd95070>\n",
       "    └── 'c' --> tensor([[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:40.390838Z",
     "iopub.status.busy": "2023-02-24T07:58:40.390493Z",
     "iopub.status.idle": "2023-02-24T07:58:40.395127Z",
     "shell.execute_reply": "2023-02-24T07:58:40.394468Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.4802, -0.5345, -0.6261],\n",
       "        [-0.0249,  0.3292, -0.3824]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:40.398278Z",
     "iopub.status.busy": "2023-02-24T07:58:40.397664Z",
     "iopub.status.idle": "2023-02-24T07:58:45.581595Z",
     "shell.execute_reply": "2023-02-24T07:58:45.580717Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 ns ± 0.0507 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:45.584896Z",
     "iopub.status.busy": "2023-02-24T07:58:45.584519Z",
     "iopub.status.idle": "2023-02-24T07:58:45.592430Z",
     "shell.execute_reply": "2023-02-24T07:58:45.591242Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f368cd952e0>\n",
       "├── 'a' --> tensor([[-0.7819, -1.0343,  1.2912],\n",
       "│                   [-1.1933, -0.4996,  1.1648]])\n",
       "└── 'x' --> <FastTreeValue 0x7f368cd95070>\n",
       "    └── 'c' --> tensor([[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:45.595571Z",
     "iopub.status.busy": "2023-02-24T07:58:45.595019Z",
     "iopub.status.idle": "2023-02-24T07:58:50.989205Z",
     "shell.execute_reply": "2023-02-24T07:58:50.988349Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.4 ns ± 0.0858 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:50.992409Z",
     "iopub.status.busy": "2023-02-24T07:58:50.992021Z",
     "iopub.status.idle": "2023-02-24T07:58:51.351104Z",
     "shell.execute_reply": "2023-02-24T07:58:51.350350Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:51.354762Z",
     "iopub.status.busy": "2023-02-24T07:58:51.354227Z",
     "iopub.status.idle": "2023-02-24T07:58:51.360238Z",
     "shell.execute_reply": "2023-02-24T07:58:51.359567Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:51.363146Z",
     "iopub.status.busy": "2023-02-24T07:58:51.362533Z",
     "iopub.status.idle": "2023-02-24T07:58:51.367402Z",
     "shell.execute_reply": "2023-02-24T07:58:51.366749Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.4802, -0.5345, -0.6261],\n",
       "        [-0.0249,  0.3292, -0.3824]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:51.370556Z",
     "iopub.status.busy": "2023-02-24T07:58:51.370004Z",
     "iopub.status.idle": "2023-02-24T07:58:56.107660Z",
     "shell.execute_reply": "2023-02-24T07:58:56.106813Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 ns ± 0.111 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:56.111152Z",
     "iopub.status.busy": "2023-02-24T07:58:56.110737Z",
     "iopub.status.idle": "2023-02-24T07:58:56.118238Z",
     "shell.execute_reply": "2023-02-24T07:58:56.117328Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.2638,  0.9770,  1.8512],\n",
       "               [ 0.8206, -0.1424,  0.9728]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:58:56.121132Z",
     "iopub.status.busy": "2023-02-24T07:58:56.120514Z",
     "iopub.status.idle": "2023-02-24T07:59:00.222450Z",
     "shell.execute_reply": "2023-02-24T07:59:00.221677Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "504 ns ± 5.21 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:00.225926Z",
     "iopub.status.busy": "2023-02-24T07:59:00.225524Z",
     "iopub.status.idle": "2023-02-24T07:59:06.899542Z",
     "shell.execute_reply": "2023-02-24T07:59:06.898694Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "821 ns ± 0.324 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:06.903039Z",
     "iopub.status.busy": "2023-02-24T07:59:06.902541Z",
     "iopub.status.idle": "2023-02-24T07:59:15.583705Z",
     "shell.execute_reply": "2023-02-24T07:59:15.582970Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 34.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:15.586750Z",
     "iopub.status.busy": "2023-02-24T07:59:15.586236Z",
     "iopub.status.idle": "2023-02-24T07:59:15.590345Z",
     "shell.execute_reply": "2023-02-24T07:59:15.589152Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:15.593474Z",
     "iopub.status.busy": "2023-02-24T07:59:15.592900Z",
     "iopub.status.idle": "2023-02-24T07:59:27.339882Z",
     "shell.execute_reply": "2023-02-24T07:59:27.339251Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 1.46 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:27.343399Z",
     "iopub.status.busy": "2023-02-24T07:59:27.342767Z",
     "iopub.status.idle": "2023-02-24T07:59:39.063904Z",
     "shell.execute_reply": "2023-02-24T07:59:39.062850Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 2.65 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:39.067086Z",
     "iopub.status.busy": "2023-02-24T07:59:39.066700Z",
     "iopub.status.idle": "2023-02-24T07:59:39.070429Z",
     "shell.execute_reply": "2023-02-24T07:59:39.069656Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:39.073265Z",
     "iopub.status.busy": "2023-02-24T07:59:39.072822Z",
     "iopub.status.idle": "2023-02-24T07:59:39.080292Z",
     "shell.execute_reply": "2023-02-24T07:59:39.079646Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f368cd9b430>\n",
       "├── 'a' --> tensor([[[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]],\n",
       "│           \n",
       "│                   [[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]],\n",
       "│           \n",
       "│                   [[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]],\n",
       "│           \n",
       "│                   [[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]],\n",
       "│           \n",
       "│                   [[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]],\n",
       "│           \n",
       "│                   [[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]],\n",
       "│           \n",
       "│                   [[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]],\n",
       "│           \n",
       "│                   [[ 1.4802, -0.5345, -0.6261],\n",
       "│                    [-0.0249,  0.3292, -0.3824]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f35dfa0c3d0>\n",
       "    └── 'c' --> tensor([[[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "                \n",
       "                        [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "                \n",
       "                        [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "                \n",
       "                        [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "                \n",
       "                        [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "                \n",
       "                        [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "                \n",
       "                        [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "                \n",
       "                        [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                         [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                         [-1.0775,  0.1098, -1.5331,  0.5423]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:39.082897Z",
     "iopub.status.busy": "2023-02-24T07:59:39.082546Z",
     "iopub.status.idle": "2023-02-24T07:59:41.693738Z",
     "shell.execute_reply": "2023-02-24T07:59:41.692883Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 84.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:41.696911Z",
     "iopub.status.busy": "2023-02-24T07:59:41.696513Z",
     "iopub.status.idle": "2023-02-24T07:59:41.704728Z",
     "shell.execute_reply": "2023-02-24T07:59:41.704114Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f35dfa74fa0>\n",
       "├── 'a' --> tensor([[ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824],\n",
       "│                   [ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824],\n",
       "│                   [ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824],\n",
       "│                   [ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824],\n",
       "│                   [ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824],\n",
       "│                   [ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824],\n",
       "│                   [ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824],\n",
       "│                   [ 1.4802, -0.5345, -0.6261],\n",
       "│                   [-0.0249,  0.3292, -0.3824]])\n",
       "└── 'x' --> <FastTreeValue 0x7f35dfa0cb80>\n",
       "    └── 'c' --> tensor([[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                        [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                        [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                        [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                        [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                        [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                        [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                        [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                        [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                        [-1.0775,  0.1098, -1.5331,  0.5423]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:41.707751Z",
     "iopub.status.busy": "2023-02-24T07:59:41.707233Z",
     "iopub.status.idle": "2023-02-24T07:59:44.138939Z",
     "shell.execute_reply": "2023-02-24T07:59:44.138064Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.9 µs ± 103 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:44.142300Z",
     "iopub.status.busy": "2023-02-24T07:59:44.141754Z",
     "iopub.status.idle": "2023-02-24T07:59:48.771731Z",
     "shell.execute_reply": "2023-02-24T07:59:48.770864Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.9 µs ± 33.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:48.775661Z",
     "iopub.status.busy": "2023-02-24T07:59:48.775057Z",
     "iopub.status.idle": "2023-02-24T07:59:48.783720Z",
     "shell.execute_reply": "2023-02-24T07:59:48.783106Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "              \n",
       "                      [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "              \n",
       "                      [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "              \n",
       "                      [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "              \n",
       "                      [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "              \n",
       "                      [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "              \n",
       "                      [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]],\n",
       "              \n",
       "                      [[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                       [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                       [-1.0775,  0.1098, -1.5331,  0.5423]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]],\n",
       "       \n",
       "               [[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]],\n",
       "       \n",
       "               [[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]],\n",
       "       \n",
       "               [[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]],\n",
       "       \n",
       "               [[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]],\n",
       "       \n",
       "               [[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]],\n",
       "       \n",
       "               [[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]],\n",
       "       \n",
       "               [[ 1.4802, -0.5345, -0.6261],\n",
       "                [-0.0249,  0.3292, -0.3824]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:48.787365Z",
     "iopub.status.busy": "2023-02-24T07:59:48.786287Z",
     "iopub.status.idle": "2023-02-24T07:59:55.191056Z",
     "shell.execute_reply": "2023-02-24T07:59:55.190207Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.8 µs ± 140 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:55.194497Z",
     "iopub.status.busy": "2023-02-24T07:59:55.193920Z",
     "iopub.status.idle": "2023-02-24T07:59:55.201767Z",
     "shell.execute_reply": "2023-02-24T07:59:55.201127Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                      [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                      [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                      [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                      [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                      [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                      [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423],\n",
       "                      [ 0.4200,  0.2607, -1.0204,  0.5231],\n",
       "                      [ 1.3962, -0.5990,  0.0647, -0.1122],\n",
       "                      [-1.0775,  0.1098, -1.5331,  0.5423]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824],\n",
       "               [ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824],\n",
       "               [ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824],\n",
       "               [ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824],\n",
       "               [ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824],\n",
       "               [ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824],\n",
       "               [ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824],\n",
       "               [ 1.4802, -0.5345, -0.6261],\n",
       "               [-0.0249,  0.3292, -0.3824]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T07:59:55.204633Z",
     "iopub.status.busy": "2023-02-24T07:59:55.204274Z",
     "iopub.status.idle": "2023-02-24T08:00:06.960216Z",
     "shell.execute_reply": "2023-02-24T08:00:06.959377Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 297 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:00:06.963411Z",
     "iopub.status.busy": "2023-02-24T08:00:06.963025Z",
     "iopub.status.idle": "2023-02-24T08:00:09.598786Z",
     "shell.execute_reply": "2023-02-24T08:00:09.597679Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "323 µs ± 849 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
