{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:36.477973Z",
     "iopub.status.busy": "2023-01-20T05:22:36.477760Z",
     "iopub.status.idle": "2023-01-20T05:22:37.387193Z",
     "shell.execute_reply": "2023-01-20T05:22:37.386529Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:37.391451Z",
     "iopub.status.busy": "2023-01-20T05:22:37.390839Z",
     "iopub.status.idle": "2023-01-20T05:22:37.422666Z",
     "shell.execute_reply": "2023-01-20T05:22:37.422060Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:37.425720Z",
     "iopub.status.busy": "2023-01-20T05:22:37.425190Z",
     "iopub.status.idle": "2023-01-20T05:22:37.433328Z",
     "shell.execute_reply": "2023-01-20T05:22:37.432705Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd608d360a0>\n",
       "├── 'a' --> tensor([[-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd5648f50d0>\n",
       "    └── 'c' --> tensor([[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:37.436347Z",
     "iopub.status.busy": "2023-01-20T05:22:37.436139Z",
     "iopub.status.idle": "2023-01-20T05:22:37.440750Z",
     "shell.execute_reply": "2023-01-20T05:22:37.440146Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2878, -0.1535,  0.4193],\n",
       "        [-1.3451, -0.3741, -0.5474]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:37.443731Z",
     "iopub.status.busy": "2023-01-20T05:22:37.443521Z",
     "iopub.status.idle": "2023-01-20T05:22:42.580351Z",
     "shell.execute_reply": "2023-01-20T05:22:42.579267Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.8 ns ± 0.0143 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:42.583423Z",
     "iopub.status.busy": "2023-01-20T05:22:42.583188Z",
     "iopub.status.idle": "2023-01-20T05:22:42.589019Z",
     "shell.execute_reply": "2023-01-20T05:22:42.588389Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd608d360a0>\n",
       "├── 'a' --> tensor([[ 1.0847,  0.7586,  1.3686],\n",
       "│                   [-0.3474, -0.9058,  0.3979]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd5648f50d0>\n",
       "    └── 'c' --> tensor([[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:42.591821Z",
     "iopub.status.busy": "2023-01-20T05:22:42.591601Z",
     "iopub.status.idle": "2023-01-20T05:22:47.521490Z",
     "shell.execute_reply": "2023-01-20T05:22:47.520900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.4 ns ± 0.0281 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:47.524537Z",
     "iopub.status.busy": "2023-01-20T05:22:47.524307Z",
     "iopub.status.idle": "2023-01-20T05:22:47.854938Z",
     "shell.execute_reply": "2023-01-20T05:22:47.854274Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:47.858714Z",
     "iopub.status.busy": "2023-01-20T05:22:47.857985Z",
     "iopub.status.idle": "2023-01-20T05:22:47.863509Z",
     "shell.execute_reply": "2023-01-20T05:22:47.862889Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:47.866306Z",
     "iopub.status.busy": "2023-01-20T05:22:47.865941Z",
     "iopub.status.idle": "2023-01-20T05:22:47.870531Z",
     "shell.execute_reply": "2023-01-20T05:22:47.869901Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2878, -0.1535,  0.4193],\n",
       "        [-1.3451, -0.3741, -0.5474]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:47.873514Z",
     "iopub.status.busy": "2023-01-20T05:22:47.873306Z",
     "iopub.status.idle": "2023-01-20T05:22:52.587149Z",
     "shell.execute_reply": "2023-01-20T05:22:52.586572Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.9 ns ± 0.104 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:52.590490Z",
     "iopub.status.busy": "2023-01-20T05:22:52.589825Z",
     "iopub.status.idle": "2023-01-20T05:22:52.595789Z",
     "shell.execute_reply": "2023-01-20T05:22:52.595134Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.8270, -0.8417,  0.3893],\n",
       "               [-0.4272, -0.7234, -0.6946]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:52.598696Z",
     "iopub.status.busy": "2023-01-20T05:22:52.598471Z",
     "iopub.status.idle": "2023-01-20T05:22:56.557972Z",
     "shell.execute_reply": "2023-01-20T05:22:56.557233Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.127 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:22:56.561428Z",
     "iopub.status.busy": "2023-01-20T05:22:56.560890Z",
     "iopub.status.idle": "2023-01-20T05:23:04.392702Z",
     "shell.execute_reply": "2023-01-20T05:23:04.392129Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "964 ns ± 11.9 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:04.395796Z",
     "iopub.status.busy": "2023-01-20T05:23:04.395567Z",
     "iopub.status.idle": "2023-01-20T05:23:13.788153Z",
     "shell.execute_reply": "2023-01-20T05:23:13.787059Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.5 µs ± 29.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:13.791275Z",
     "iopub.status.busy": "2023-01-20T05:23:13.791048Z",
     "iopub.status.idle": "2023-01-20T05:23:13.795130Z",
     "shell.execute_reply": "2023-01-20T05:23:13.794539Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:13.797778Z",
     "iopub.status.busy": "2023-01-20T05:23:13.797569Z",
     "iopub.status.idle": "2023-01-20T05:23:25.083923Z",
     "shell.execute_reply": "2023-01-20T05:23:25.083354Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 426 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:25.087953Z",
     "iopub.status.busy": "2023-01-20T05:23:25.086649Z",
     "iopub.status.idle": "2023-01-20T05:23:36.475889Z",
     "shell.execute_reply": "2023-01-20T05:23:36.475313Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 387 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:36.480775Z",
     "iopub.status.busy": "2023-01-20T05:23:36.479555Z",
     "iopub.status.idle": "2023-01-20T05:23:36.484357Z",
     "shell.execute_reply": "2023-01-20T05:23:36.483834Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:36.487273Z",
     "iopub.status.busy": "2023-01-20T05:23:36.487031Z",
     "iopub.status.idle": "2023-01-20T05:23:36.494307Z",
     "shell.execute_reply": "2023-01-20T05:23:36.493661Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd561e80430>\n",
       "├── 'a' --> tensor([[[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]],\n",
       "│           \n",
       "│                   [[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]],\n",
       "│           \n",
       "│                   [[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]],\n",
       "│           \n",
       "│                   [[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]],\n",
       "│           \n",
       "│                   [[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]],\n",
       "│           \n",
       "│                   [[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]],\n",
       "│           \n",
       "│                   [[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]],\n",
       "│           \n",
       "│                   [[-0.2878, -0.1535,  0.4193],\n",
       "│                    [-1.3451, -0.3741, -0.5474]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd561e80580>\n",
       "    └── 'c' --> tensor([[[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "                \n",
       "                        [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "                \n",
       "                        [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "                \n",
       "                        [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "                \n",
       "                        [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "                \n",
       "                        [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "                \n",
       "                        [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "                \n",
       "                        [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                         [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                         [-0.9468,  0.5904, -0.4213,  1.7722]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:36.497056Z",
     "iopub.status.busy": "2023-01-20T05:23:36.496831Z",
     "iopub.status.idle": "2023-01-20T05:23:39.077518Z",
     "shell.execute_reply": "2023-01-20T05:23:39.076793Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.7 µs ± 51.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:39.080648Z",
     "iopub.status.busy": "2023-01-20T05:23:39.080276Z",
     "iopub.status.idle": "2023-01-20T05:23:39.087597Z",
     "shell.execute_reply": "2023-01-20T05:23:39.086908Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd56467eac0>\n",
       "├── 'a' --> tensor([[-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474],\n",
       "│                   [-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474],\n",
       "│                   [-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474],\n",
       "│                   [-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474],\n",
       "│                   [-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474],\n",
       "│                   [-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474],\n",
       "│                   [-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474],\n",
       "│                   [-0.2878, -0.1535,  0.4193],\n",
       "│                   [-1.3451, -0.3741, -0.5474]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd56467eeb0>\n",
       "    └── 'c' --> tensor([[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                        [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                        [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                        [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                        [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                        [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                        [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                        [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                        [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                        [-0.9468,  0.5904, -0.4213,  1.7722]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:39.090458Z",
     "iopub.status.busy": "2023-01-20T05:23:39.090225Z",
     "iopub.status.idle": "2023-01-20T05:23:41.512545Z",
     "shell.execute_reply": "2023-01-20T05:23:41.511816Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.8 µs ± 88.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:41.515660Z",
     "iopub.status.busy": "2023-01-20T05:23:41.515432Z",
     "iopub.status.idle": "2023-01-20T05:23:46.336844Z",
     "shell.execute_reply": "2023-01-20T05:23:46.335788Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.3 µs ± 83.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:46.339954Z",
     "iopub.status.busy": "2023-01-20T05:23:46.339715Z",
     "iopub.status.idle": "2023-01-20T05:23:46.346615Z",
     "shell.execute_reply": "2023-01-20T05:23:46.345984Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]],\n",
       "       \n",
       "               [[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]],\n",
       "       \n",
       "               [[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]],\n",
       "       \n",
       "               [[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]],\n",
       "       \n",
       "               [[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]],\n",
       "       \n",
       "               [[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]],\n",
       "       \n",
       "               [[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]],\n",
       "       \n",
       "               [[-0.2878, -0.1535,  0.4193],\n",
       "                [-1.3451, -0.3741, -0.5474]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "              \n",
       "                      [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "              \n",
       "                      [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "              \n",
       "                      [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "              \n",
       "                      [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "              \n",
       "                      [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "              \n",
       "                      [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]],\n",
       "              \n",
       "                      [[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                       [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                       [-0.9468,  0.5904, -0.4213,  1.7722]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:46.349397Z",
     "iopub.status.busy": "2023-01-20T05:23:46.349045Z",
     "iopub.status.idle": "2023-01-20T05:23:52.687765Z",
     "shell.execute_reply": "2023-01-20T05:23:52.687193Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78 µs ± 134 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:52.690686Z",
     "iopub.status.busy": "2023-01-20T05:23:52.690458Z",
     "iopub.status.idle": "2023-01-20T05:23:52.697281Z",
     "shell.execute_reply": "2023-01-20T05:23:52.696659Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474],\n",
       "               [-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474],\n",
       "               [-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474],\n",
       "               [-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474],\n",
       "               [-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474],\n",
       "               [-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474],\n",
       "               [-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474],\n",
       "               [-0.2878, -0.1535,  0.4193],\n",
       "               [-1.3451, -0.3741, -0.5474]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                      [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                      [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                      [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                      [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                      [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                      [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722],\n",
       "                      [-0.6395, -0.8036, -1.8306,  1.0904],\n",
       "                      [ 0.3673, -0.8377,  0.3931, -0.9329],\n",
       "                      [-0.9468,  0.5904, -0.4213,  1.7722]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:23:52.700179Z",
     "iopub.status.busy": "2023-01-20T05:23:52.699830Z",
     "iopub.status.idle": "2023-01-20T05:24:04.195080Z",
     "shell.execute_reply": "2023-01-20T05:24:04.193968Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 138 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T05:24:04.198197Z",
     "iopub.status.busy": "2023-01-20T05:24:04.197964Z",
     "iopub.status.idle": "2023-01-20T05:24:06.705007Z",
     "shell.execute_reply": "2023-01-20T05:24:06.704456Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "308 µs ± 1.62 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
