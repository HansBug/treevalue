{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:42.659900Z",
     "iopub.status.busy": "2023-02-24T11:11:42.659042Z",
     "iopub.status.idle": "2023-02-24T11:11:44.062532Z",
     "shell.execute_reply": "2023-02-24T11:11:44.061431Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:44.067792Z",
     "iopub.status.busy": "2023-02-24T11:11:44.066948Z",
     "iopub.status.idle": "2023-02-24T11:11:44.124653Z",
     "shell.execute_reply": "2023-02-24T11:11:44.123548Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:44.128998Z",
     "iopub.status.busy": "2023-02-24T11:11:44.128657Z",
     "iopub.status.idle": "2023-02-24T11:11:44.142163Z",
     "shell.execute_reply": "2023-02-24T11:11:44.141156Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0aa071b580>\n",
       "├── 'a' --> tensor([[ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0aa071bc70>\n",
       "    └── 'c' --> tensor([[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:44.145775Z",
     "iopub.status.busy": "2023-02-24T11:11:44.145476Z",
     "iopub.status.idle": "2023-02-24T11:11:44.152397Z",
     "shell.execute_reply": "2023-02-24T11:11:44.151351Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.4794,  1.7100,  0.6268],\n",
       "        [-1.0732,  0.0019,  0.0636]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:44.155740Z",
     "iopub.status.busy": "2023-02-24T11:11:44.155427Z",
     "iopub.status.idle": "2023-02-24T11:11:50.721810Z",
     "shell.execute_reply": "2023-02-24T11:11:50.719149Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81 ns ± 1.1 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:50.725769Z",
     "iopub.status.busy": "2023-02-24T11:11:50.725416Z",
     "iopub.status.idle": "2023-02-24T11:11:50.735189Z",
     "shell.execute_reply": "2023-02-24T11:11:50.734155Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0aa071b580>\n",
       "├── 'a' --> tensor([[ 0.8041,  1.0754, -0.3490],\n",
       "│                   [ 0.0526, -0.0737, -0.8851]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0aa071bc70>\n",
       "    └── 'c' --> tensor([[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:50.738891Z",
     "iopub.status.busy": "2023-02-24T11:11:50.738496Z",
     "iopub.status.idle": "2023-02-24T11:11:57.488123Z",
     "shell.execute_reply": "2023-02-24T11:11:57.486972Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.9 ns ± 0.83 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:57.492353Z",
     "iopub.status.busy": "2023-02-24T11:11:57.491651Z",
     "iopub.status.idle": "2023-02-24T11:11:57.997682Z",
     "shell.execute_reply": "2023-02-24T11:11:57.996542Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:58.002175Z",
     "iopub.status.busy": "2023-02-24T11:11:58.001511Z",
     "iopub.status.idle": "2023-02-24T11:11:58.010590Z",
     "shell.execute_reply": "2023-02-24T11:11:58.009451Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:58.014085Z",
     "iopub.status.busy": "2023-02-24T11:11:58.013728Z",
     "iopub.status.idle": "2023-02-24T11:11:58.022036Z",
     "shell.execute_reply": "2023-02-24T11:11:58.021059Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.4794,  1.7100,  0.6268],\n",
       "        [-1.0732,  0.0019,  0.0636]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:11:58.025619Z",
     "iopub.status.busy": "2023-02-24T11:11:58.025302Z",
     "iopub.status.idle": "2023-02-24T11:12:03.818861Z",
     "shell.execute_reply": "2023-02-24T11:12:03.817772Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.6 ns ± 0.646 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:03.822576Z",
     "iopub.status.busy": "2023-02-24T11:12:03.822252Z",
     "iopub.status.idle": "2023-02-24T11:12:03.831393Z",
     "shell.execute_reply": "2023-02-24T11:12:03.830441Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.0974, -0.1633,  0.6595],\n",
       "               [ 1.7725,  1.4343, -1.5367]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:03.835007Z",
     "iopub.status.busy": "2023-02-24T11:12:03.834349Z",
     "iopub.status.idle": "2023-02-24T11:12:09.290767Z",
     "shell.execute_reply": "2023-02-24T11:12:09.289876Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "673 ns ± 10.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:09.294864Z",
     "iopub.status.busy": "2023-02-24T11:12:09.294397Z",
     "iopub.status.idle": "2023-02-24T11:12:18.161994Z",
     "shell.execute_reply": "2023-02-24T11:12:18.160709Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.09 µs ± 9.34 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:18.165765Z",
     "iopub.status.busy": "2023-02-24T11:12:18.165476Z",
     "iopub.status.idle": "2023-02-24T11:12:29.487011Z",
     "shell.execute_reply": "2023-02-24T11:12:29.485805Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14 µs ± 111 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:29.491348Z",
     "iopub.status.busy": "2023-02-24T11:12:29.490663Z",
     "iopub.status.idle": "2023-02-24T11:12:29.496894Z",
     "shell.execute_reply": "2023-02-24T11:12:29.495879Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:29.501537Z",
     "iopub.status.busy": "2023-02-24T11:12:29.500662Z",
     "iopub.status.idle": "2023-02-24T11:12:31.854488Z",
     "shell.execute_reply": "2023-02-24T11:12:31.853605Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "293 µs ± 20.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:31.858829Z",
     "iopub.status.busy": "2023-02-24T11:12:31.857874Z",
     "iopub.status.idle": "2023-02-24T11:12:34.241723Z",
     "shell.execute_reply": "2023-02-24T11:12:34.240743Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "285 µs ± 21.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:34.246484Z",
     "iopub.status.busy": "2023-02-24T11:12:34.245854Z",
     "iopub.status.idle": "2023-02-24T11:12:34.251109Z",
     "shell.execute_reply": "2023-02-24T11:12:34.250149Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:34.254821Z",
     "iopub.status.busy": "2023-02-24T11:12:34.254237Z",
     "iopub.status.idle": "2023-02-24T11:12:34.265607Z",
     "shell.execute_reply": "2023-02-24T11:12:34.264744Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f09f33cc370>\n",
       "├── 'a' --> tensor([[[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]],\n",
       "│           \n",
       "│                   [[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]],\n",
       "│           \n",
       "│                   [[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]],\n",
       "│           \n",
       "│                   [[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]],\n",
       "│           \n",
       "│                   [[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]],\n",
       "│           \n",
       "│                   [[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]],\n",
       "│           \n",
       "│                   [[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]],\n",
       "│           \n",
       "│                   [[ 1.4794,  1.7100,  0.6268],\n",
       "│                    [-1.0732,  0.0019,  0.0636]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0a7c39c2b0>\n",
       "    └── 'c' --> tensor([[[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "                \n",
       "                        [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "                \n",
       "                        [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "                \n",
       "                        [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "                \n",
       "                        [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "                \n",
       "                        [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "                \n",
       "                        [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "                \n",
       "                        [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                         [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                         [-1.7012,  0.6065, -0.4685,  0.5269]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:34.268921Z",
     "iopub.status.busy": "2023-02-24T11:12:34.268450Z",
     "iopub.status.idle": "2023-02-24T11:12:38.188637Z",
     "shell.execute_reply": "2023-02-24T11:12:38.187513Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48.4 µs ± 696 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:38.192663Z",
     "iopub.status.busy": "2023-02-24T11:12:38.192084Z",
     "iopub.status.idle": "2023-02-24T11:12:38.203509Z",
     "shell.execute_reply": "2023-02-24T11:12:38.202293Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f09f33cc220>\n",
       "├── 'a' --> tensor([[ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636],\n",
       "│                   [ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636],\n",
       "│                   [ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636],\n",
       "│                   [ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636],\n",
       "│                   [ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636],\n",
       "│                   [ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636],\n",
       "│                   [ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636],\n",
       "│                   [ 1.4794,  1.7100,  0.6268],\n",
       "│                   [-1.0732,  0.0019,  0.0636]])\n",
       "└── 'x' --> <FastTreeValue 0x7f09f33cc520>\n",
       "    └── 'c' --> tensor([[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                        [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                        [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                        [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                        [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                        [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                        [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                        [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                        [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                        [-1.7012,  0.6065, -0.4685,  0.5269]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:38.207552Z",
     "iopub.status.busy": "2023-02-24T11:12:38.206997Z",
     "iopub.status.idle": "2023-02-24T11:12:41.915173Z",
     "shell.execute_reply": "2023-02-24T11:12:41.912775Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.8 µs ± 2.22 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:41.919777Z",
     "iopub.status.busy": "2023-02-24T11:12:41.919391Z",
     "iopub.status.idle": "2023-02-24T11:12:49.004692Z",
     "shell.execute_reply": "2023-02-24T11:12:49.003573Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88 µs ± 3.2 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:49.008727Z",
     "iopub.status.busy": "2023-02-24T11:12:49.008321Z",
     "iopub.status.idle": "2023-02-24T11:12:49.019414Z",
     "shell.execute_reply": "2023-02-24T11:12:49.018304Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]],\n",
       "       \n",
       "               [[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]],\n",
       "       \n",
       "               [[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]],\n",
       "       \n",
       "               [[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]],\n",
       "       \n",
       "               [[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]],\n",
       "       \n",
       "               [[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]],\n",
       "       \n",
       "               [[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]],\n",
       "       \n",
       "               [[ 1.4794,  1.7100,  0.6268],\n",
       "                [-1.0732,  0.0019,  0.0636]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "              \n",
       "                      [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "              \n",
       "                      [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "              \n",
       "                      [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "              \n",
       "                      [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "              \n",
       "                      [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "              \n",
       "                      [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]],\n",
       "              \n",
       "                      [[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                       [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                       [-1.7012,  0.6065, -0.4685,  0.5269]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:49.023237Z",
     "iopub.status.busy": "2023-02-24T11:12:49.022697Z",
     "iopub.status.idle": "2023-02-24T11:12:58.040486Z",
     "shell.execute_reply": "2023-02-24T11:12:58.039436Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "111 µs ± 2.06 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:58.044588Z",
     "iopub.status.busy": "2023-02-24T11:12:58.044276Z",
     "iopub.status.idle": "2023-02-24T11:12:58.056718Z",
     "shell.execute_reply": "2023-02-24T11:12:58.055752Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636],\n",
       "               [ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636],\n",
       "               [ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636],\n",
       "               [ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636],\n",
       "               [ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636],\n",
       "               [ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636],\n",
       "               [ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636],\n",
       "               [ 1.4794,  1.7100,  0.6268],\n",
       "               [-1.0732,  0.0019,  0.0636]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                      [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                      [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                      [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                      [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                      [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                      [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269],\n",
       "                      [-1.3508, -0.6953,  1.4640,  0.6149],\n",
       "                      [-0.1658,  0.5390, -2.5809,  1.6433],\n",
       "                      [-1.7012,  0.6065, -0.4685,  0.5269]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:58.062710Z",
     "iopub.status.busy": "2023-02-24T11:12:58.062353Z",
     "iopub.status.idle": "2023-02-24T11:12:59.684771Z",
     "shell.execute_reply": "2023-02-24T11:12:59.683691Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "198 µs ± 2.62 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:12:59.688570Z",
     "iopub.status.busy": "2023-02-24T11:12:59.688049Z",
     "iopub.status.idle": "2023-02-24T11:13:04.311943Z",
     "shell.execute_reply": "2023-02-24T11:13:04.310944Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "568 µs ± 6.61 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
