{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:08.637045Z",
     "iopub.status.busy": "2023-03-06T11:27:08.636816Z",
     "iopub.status.idle": "2023-03-06T11:27:09.548373Z",
     "shell.execute_reply": "2023-03-06T11:27:09.547709Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:09.551769Z",
     "iopub.status.busy": "2023-03-06T11:27:09.551191Z",
     "iopub.status.idle": "2023-03-06T11:27:09.829083Z",
     "shell.execute_reply": "2023-03-06T11:27:09.828400Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:09.832332Z",
     "iopub.status.busy": "2023-03-06T11:27:09.831723Z",
     "iopub.status.idle": "2023-03-06T11:27:09.840681Z",
     "shell.execute_reply": "2023-03-06T11:27:09.840023Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb5867b2760>\n",
       "├── 'a' --> tensor([[-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb5867b2460>\n",
       "    └── 'c' --> tensor([[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:09.843534Z",
     "iopub.status.busy": "2023-03-06T11:27:09.842990Z",
     "iopub.status.idle": "2023-03-06T11:27:09.848335Z",
     "shell.execute_reply": "2023-03-06T11:27:09.847760Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9495, -0.9121,  0.2840],\n",
       "        [ 0.3466, -2.0370,  0.9236]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:09.851178Z",
     "iopub.status.busy": "2023-03-06T11:27:09.850718Z",
     "iopub.status.idle": "2023-03-06T11:27:14.978049Z",
     "shell.execute_reply": "2023-03-06T11:27:14.977306Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.2 ns ± 0.0461 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:14.981011Z",
     "iopub.status.busy": "2023-03-06T11:27:14.980445Z",
     "iopub.status.idle": "2023-03-06T11:27:14.987106Z",
     "shell.execute_reply": "2023-03-06T11:27:14.986539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb5867b2760>\n",
       "├── 'a' --> tensor([[-0.4619, -1.0853, -0.7348],\n",
       "│                   [ 0.5633, -0.3093,  1.5866]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb5867b2460>\n",
       "    └── 'c' --> tensor([[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:14.989626Z",
     "iopub.status.busy": "2023-03-06T11:27:14.989282Z",
     "iopub.status.idle": "2023-03-06T11:27:20.189001Z",
     "shell.execute_reply": "2023-03-06T11:27:20.188268Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64 ns ± 0.0282 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:20.192088Z",
     "iopub.status.busy": "2023-03-06T11:27:20.191557Z",
     "iopub.status.idle": "2023-03-06T11:27:20.515789Z",
     "shell.execute_reply": "2023-03-06T11:27:20.514595Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:20.519232Z",
     "iopub.status.busy": "2023-03-06T11:27:20.518673Z",
     "iopub.status.idle": "2023-03-06T11:27:20.524134Z",
     "shell.execute_reply": "2023-03-06T11:27:20.523518Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:20.526791Z",
     "iopub.status.busy": "2023-03-06T11:27:20.526460Z",
     "iopub.status.idle": "2023-03-06T11:27:20.531161Z",
     "shell.execute_reply": "2023-03-06T11:27:20.530549Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9495, -0.9121,  0.2840],\n",
       "        [ 0.3466, -2.0370,  0.9236]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:20.533584Z",
     "iopub.status.busy": "2023-03-06T11:27:20.533260Z",
     "iopub.status.idle": "2023-03-06T11:27:25.200193Z",
     "shell.execute_reply": "2023-03-06T11:27:25.199477Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.9 ns ± 0.0428 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:25.203176Z",
     "iopub.status.busy": "2023-03-06T11:27:25.202595Z",
     "iopub.status.idle": "2023-03-06T11:27:25.208335Z",
     "shell.execute_reply": "2023-03-06T11:27:25.207711Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.2116,  0.7842,  0.7885],\n",
       "               [-0.4679, -0.6494,  0.6595]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:25.210963Z",
     "iopub.status.busy": "2023-03-06T11:27:25.210471Z",
     "iopub.status.idle": "2023-03-06T11:27:29.111494Z",
     "shell.execute_reply": "2023-03-06T11:27:29.110764Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "480 ns ± 0.877 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:29.114848Z",
     "iopub.status.busy": "2023-03-06T11:27:29.114286Z",
     "iopub.status.idle": "2023-03-06T11:27:35.860742Z",
     "shell.execute_reply": "2023-03-06T11:27:35.860097Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "831 ns ± 0.165 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:35.863589Z",
     "iopub.status.busy": "2023-03-06T11:27:35.863116Z",
     "iopub.status.idle": "2023-03-06T11:27:45.156839Z",
     "shell.execute_reply": "2023-03-06T11:27:45.156111Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 10 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:45.160079Z",
     "iopub.status.busy": "2023-03-06T11:27:45.159489Z",
     "iopub.status.idle": "2023-03-06T11:27:45.163626Z",
     "shell.execute_reply": "2023-03-06T11:27:45.163010Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:45.166598Z",
     "iopub.status.busy": "2023-03-06T11:27:45.166121Z",
     "iopub.status.idle": "2023-03-06T11:27:56.177249Z",
     "shell.execute_reply": "2023-03-06T11:27:56.176645Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "136 µs ± 769 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:27:56.180840Z",
     "iopub.status.busy": "2023-03-06T11:27:56.179963Z",
     "iopub.status.idle": "2023-03-06T11:28:07.393602Z",
     "shell.execute_reply": "2023-03-06T11:28:07.392941Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 446 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:07.397603Z",
     "iopub.status.busy": "2023-03-06T11:28:07.396642Z",
     "iopub.status.idle": "2023-03-06T11:28:07.400895Z",
     "shell.execute_reply": "2023-03-06T11:28:07.400362Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:07.404452Z",
     "iopub.status.busy": "2023-03-06T11:28:07.403521Z",
     "iopub.status.idle": "2023-03-06T11:28:07.412219Z",
     "shell.execute_reply": "2023-03-06T11:28:07.411694Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb4cc9eefd0>\n",
       "├── 'a' --> tensor([[[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]],\n",
       "│           \n",
       "│                   [[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]],\n",
       "│           \n",
       "│                   [[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]],\n",
       "│           \n",
       "│                   [[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]],\n",
       "│           \n",
       "│                   [[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]],\n",
       "│           \n",
       "│                   [[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]],\n",
       "│           \n",
       "│                   [[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]],\n",
       "│           \n",
       "│                   [[-0.9495, -0.9121,  0.2840],\n",
       "│                    [ 0.3466, -2.0370,  0.9236]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb4cc9eefa0>\n",
       "    └── 'c' --> tensor([[[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "                \n",
       "                        [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "                \n",
       "                        [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "                \n",
       "                        [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "                \n",
       "                        [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "                \n",
       "                        [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "                \n",
       "                        [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "                \n",
       "                        [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                         [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                         [ 0.2312,  0.4265, -1.7423,  1.2478]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:07.415706Z",
     "iopub.status.busy": "2023-03-06T11:28:07.414757Z",
     "iopub.status.idle": "2023-03-06T11:28:10.013831Z",
     "shell.execute_reply": "2023-03-06T11:28:10.013086Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.9 µs ± 108 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:10.016682Z",
     "iopub.status.busy": "2023-03-06T11:28:10.016243Z",
     "iopub.status.idle": "2023-03-06T11:28:10.024042Z",
     "shell.execute_reply": "2023-03-06T11:28:10.023463Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb4cc9cd1c0>\n",
       "├── 'a' --> tensor([[-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236],\n",
       "│                   [-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236],\n",
       "│                   [-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236],\n",
       "│                   [-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236],\n",
       "│                   [-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236],\n",
       "│                   [-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236],\n",
       "│                   [-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236],\n",
       "│                   [-0.9495, -0.9121,  0.2840],\n",
       "│                   [ 0.3466, -2.0370,  0.9236]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb4cc9cd2b0>\n",
       "    └── 'c' --> tensor([[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                        [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                        [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                        [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                        [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                        [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                        [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                        [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                        [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                        [ 0.2312,  0.4265, -1.7423,  1.2478]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:10.026430Z",
     "iopub.status.busy": "2023-03-06T11:28:10.026094Z",
     "iopub.status.idle": "2023-03-06T11:28:12.463846Z",
     "shell.execute_reply": "2023-03-06T11:28:12.463124Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 µs ± 35.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:12.466551Z",
     "iopub.status.busy": "2023-03-06T11:28:12.466194Z",
     "iopub.status.idle": "2023-03-06T11:28:17.271933Z",
     "shell.execute_reply": "2023-03-06T11:28:17.271207Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.1 µs ± 57.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:17.275168Z",
     "iopub.status.busy": "2023-03-06T11:28:17.274670Z",
     "iopub.status.idle": "2023-03-06T11:28:17.282505Z",
     "shell.execute_reply": "2023-03-06T11:28:17.281920Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "              \n",
       "                      [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "              \n",
       "                      [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "              \n",
       "                      [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "              \n",
       "                      [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "              \n",
       "                      [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "              \n",
       "                      [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]],\n",
       "              \n",
       "                      [[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                       [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                       [ 0.2312,  0.4265, -1.7423,  1.2478]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]],\n",
       "       \n",
       "               [[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]],\n",
       "       \n",
       "               [[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]],\n",
       "       \n",
       "               [[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]],\n",
       "       \n",
       "               [[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]],\n",
       "       \n",
       "               [[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]],\n",
       "       \n",
       "               [[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]],\n",
       "       \n",
       "               [[-0.9495, -0.9121,  0.2840],\n",
       "                [ 0.3466, -2.0370,  0.9236]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:17.285410Z",
     "iopub.status.busy": "2023-03-06T11:28:17.284936Z",
     "iopub.status.idle": "2023-03-06T11:28:23.589569Z",
     "shell.execute_reply": "2023-03-06T11:28:23.588726Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.6 µs ± 89 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:23.592588Z",
     "iopub.status.busy": "2023-03-06T11:28:23.592234Z",
     "iopub.status.idle": "2023-03-06T11:28:23.599660Z",
     "shell.execute_reply": "2023-03-06T11:28:23.599074Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                      [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                      [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                      [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                      [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                      [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                      [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478],\n",
       "                      [-0.7088, -1.3532, -0.1619, -0.0424],\n",
       "                      [-0.2551,  0.1596, -1.1913,  1.3623],\n",
       "                      [ 0.2312,  0.4265, -1.7423,  1.2478]]),\n",
       "       ),\n",
       "    a: tensor([[-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236],\n",
       "               [-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236],\n",
       "               [-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236],\n",
       "               [-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236],\n",
       "               [-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236],\n",
       "               [-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236],\n",
       "               [-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236],\n",
       "               [-0.9495, -0.9121,  0.2840],\n",
       "               [ 0.3466, -2.0370,  0.9236]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:23.602305Z",
     "iopub.status.busy": "2023-03-06T11:28:23.601972Z",
     "iopub.status.idle": "2023-03-06T11:28:35.103576Z",
     "shell.execute_reply": "2023-03-06T11:28:35.102888Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 251 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:28:35.106574Z",
     "iopub.status.busy": "2023-03-06T11:28:35.106226Z",
     "iopub.status.idle": "2023-03-06T11:28:37.572236Z",
     "shell.execute_reply": "2023-03-06T11:28:37.571666Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "303 µs ± 1.71 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
