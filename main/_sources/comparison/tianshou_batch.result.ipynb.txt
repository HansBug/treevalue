{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:34.362658Z",
     "iopub.status.busy": "2023-02-26T14:41:34.362401Z",
     "iopub.status.idle": "2023-02-26T14:41:35.448982Z",
     "shell.execute_reply": "2023-02-26T14:41:35.447770Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:35.453681Z",
     "iopub.status.busy": "2023-02-26T14:41:35.452996Z",
     "iopub.status.idle": "2023-02-26T14:41:35.493726Z",
     "shell.execute_reply": "2023-02-26T14:41:35.492621Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:35.498012Z",
     "iopub.status.busy": "2023-02-26T14:41:35.496468Z",
     "iopub.status.idle": "2023-02-26T14:41:35.508143Z",
     "shell.execute_reply": "2023-02-26T14:41:35.507268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff384dd9400>\n",
       "├── 'a' --> tensor([[-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff384dd9b50>\n",
       "    └── 'c' --> tensor([[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:35.511549Z",
     "iopub.status.busy": "2023-02-26T14:41:35.511302Z",
     "iopub.status.idle": "2023-02-26T14:41:35.517608Z",
     "shell.execute_reply": "2023-02-26T14:41:35.516516Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.3283, -1.0591, -1.3756],\n",
       "        [ 0.3170,  2.2281, -0.8048]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:35.520521Z",
     "iopub.status.busy": "2023-02-26T14:41:35.520271Z",
     "iopub.status.idle": "2023-02-26T14:41:41.080213Z",
     "shell.execute_reply": "2023-02-26T14:41:41.079244Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.3 ns ± 0.994 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:41.084048Z",
     "iopub.status.busy": "2023-02-26T14:41:41.083175Z",
     "iopub.status.idle": "2023-02-26T14:41:41.091104Z",
     "shell.execute_reply": "2023-02-26T14:41:41.090218Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff384dd9400>\n",
       "├── 'a' --> tensor([[ 0.6648, -1.5039, -0.0675],\n",
       "│                   [-0.3613, -0.2289,  1.3788]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff384dd9b50>\n",
       "    └── 'c' --> tensor([[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:41.094230Z",
     "iopub.status.busy": "2023-02-26T14:41:41.093730Z",
     "iopub.status.idle": "2023-02-26T14:41:47.862006Z",
     "shell.execute_reply": "2023-02-26T14:41:47.861046Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.5 ns ± 1.08 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:47.865536Z",
     "iopub.status.busy": "2023-02-26T14:41:47.865040Z",
     "iopub.status.idle": "2023-02-26T14:41:48.260640Z",
     "shell.execute_reply": "2023-02-26T14:41:48.259629Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:48.264260Z",
     "iopub.status.busy": "2023-02-26T14:41:48.263884Z",
     "iopub.status.idle": "2023-02-26T14:41:48.272085Z",
     "shell.execute_reply": "2023-02-26T14:41:48.270880Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:48.275322Z",
     "iopub.status.busy": "2023-02-26T14:41:48.274780Z",
     "iopub.status.idle": "2023-02-26T14:41:48.281934Z",
     "shell.execute_reply": "2023-02-26T14:41:48.280933Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.3283, -1.0591, -1.3756],\n",
       "        [ 0.3170,  2.2281, -0.8048]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:48.285143Z",
     "iopub.status.busy": "2023-02-26T14:41:48.284645Z",
     "iopub.status.idle": "2023-02-26T14:41:53.246206Z",
     "shell.execute_reply": "2023-02-26T14:41:53.245228Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.1 ns ± 1.37 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:53.249578Z",
     "iopub.status.busy": "2023-02-26T14:41:53.249149Z",
     "iopub.status.idle": "2023-02-26T14:41:53.265704Z",
     "shell.execute_reply": "2023-02-26T14:41:53.260254Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.7161,  0.0428,  0.2370],\n",
       "               [ 0.6036, -1.4366,  1.1933]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:53.268886Z",
     "iopub.status.busy": "2023-02-26T14:41:53.268541Z",
     "iopub.status.idle": "2023-02-26T14:41:57.913917Z",
     "shell.execute_reply": "2023-02-26T14:41:57.912875Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "570 ns ± 10.6 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:41:57.918191Z",
     "iopub.status.busy": "2023-02-26T14:41:57.917675Z",
     "iopub.status.idle": "2023-02-26T14:42:05.567469Z",
     "shell.execute_reply": "2023-02-26T14:42:05.566520Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "941 ns ± 20.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:05.571619Z",
     "iopub.status.busy": "2023-02-26T14:42:05.571094Z",
     "iopub.status.idle": "2023-02-26T14:42:15.625069Z",
     "shell.execute_reply": "2023-02-26T14:42:15.624133Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.4 µs ± 300 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:15.628663Z",
     "iopub.status.busy": "2023-02-26T14:42:15.627953Z",
     "iopub.status.idle": "2023-02-26T14:42:15.632331Z",
     "shell.execute_reply": "2023-02-26T14:42:15.631443Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:15.635739Z",
     "iopub.status.busy": "2023-02-26T14:42:15.635244Z",
     "iopub.status.idle": "2023-02-26T14:42:17.763600Z",
     "shell.execute_reply": "2023-02-26T14:42:17.762756Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "261 µs ± 7.1 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:17.768042Z",
     "iopub.status.busy": "2023-02-26T14:42:17.767447Z",
     "iopub.status.idle": "2023-02-26T14:42:19.906286Z",
     "shell.execute_reply": "2023-02-26T14:42:19.905430Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "264 µs ± 10.5 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:19.909771Z",
     "iopub.status.busy": "2023-02-26T14:42:19.909190Z",
     "iopub.status.idle": "2023-02-26T14:42:19.914249Z",
     "shell.execute_reply": "2023-02-26T14:42:19.913219Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:19.917335Z",
     "iopub.status.busy": "2023-02-26T14:42:19.917059Z",
     "iopub.status.idle": "2023-02-26T14:42:19.925633Z",
     "shell.execute_reply": "2023-02-26T14:42:19.924753Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff35c2c00a0>\n",
       "├── 'a' --> tensor([[[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]],\n",
       "│           \n",
       "│                   [[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]],\n",
       "│           \n",
       "│                   [[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]],\n",
       "│           \n",
       "│                   [[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]],\n",
       "│           \n",
       "│                   [[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]],\n",
       "│           \n",
       "│                   [[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]],\n",
       "│           \n",
       "│                   [[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]],\n",
       "│           \n",
       "│                   [[-1.3283, -1.0591, -1.3756],\n",
       "│                    [ 0.3170,  2.2281, -0.8048]]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff2d8ab8850>\n",
       "    └── 'c' --> tensor([[[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "                \n",
       "                        [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "                \n",
       "                        [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "                \n",
       "                        [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "                \n",
       "                        [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "                \n",
       "                        [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "                \n",
       "                        [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "                \n",
       "                        [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                         [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                         [-0.0104, -0.3855,  0.2148,  1.5169]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:19.928629Z",
     "iopub.status.busy": "2023-02-26T14:42:19.928373Z",
     "iopub.status.idle": "2023-02-26T14:42:23.454323Z",
     "shell.execute_reply": "2023-02-26T14:42:23.453307Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43.6 µs ± 1.19 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:23.457736Z",
     "iopub.status.busy": "2023-02-26T14:42:23.457439Z",
     "iopub.status.idle": "2023-02-26T14:42:23.468860Z",
     "shell.execute_reply": "2023-02-26T14:42:23.467754Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff35c3a8160>\n",
       "├── 'a' --> tensor([[-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048],\n",
       "│                   [-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048],\n",
       "│                   [-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048],\n",
       "│                   [-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048],\n",
       "│                   [-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048],\n",
       "│                   [-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048],\n",
       "│                   [-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048],\n",
       "│                   [-1.3283, -1.0591, -1.3756],\n",
       "│                   [ 0.3170,  2.2281, -0.8048]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff2d8ad4d30>\n",
       "    └── 'c' --> tensor([[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                        [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                        [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                        [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                        [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                        [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                        [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                        [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                        [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                        [-0.0104, -0.3855,  0.2148,  1.5169]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:23.471946Z",
     "iopub.status.busy": "2023-02-26T14:42:23.471697Z",
     "iopub.status.idle": "2023-02-26T14:42:26.606152Z",
     "shell.execute_reply": "2023-02-26T14:42:26.605096Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38.3 µs ± 862 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:26.609707Z",
     "iopub.status.busy": "2023-02-26T14:42:26.609111Z",
     "iopub.status.idle": "2023-02-26T14:42:32.635746Z",
     "shell.execute_reply": "2023-02-26T14:42:32.634807Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.2 µs ± 525 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:32.639141Z",
     "iopub.status.busy": "2023-02-26T14:42:32.638657Z",
     "iopub.status.idle": "2023-02-26T14:42:32.648342Z",
     "shell.execute_reply": "2023-02-26T14:42:32.647289Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "              \n",
       "                      [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "              \n",
       "                      [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "              \n",
       "                      [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "              \n",
       "                      [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "              \n",
       "                      [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "              \n",
       "                      [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]],\n",
       "              \n",
       "                      [[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                       [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                       [-0.0104, -0.3855,  0.2148,  1.5169]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]],\n",
       "       \n",
       "               [[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]],\n",
       "       \n",
       "               [[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]],\n",
       "       \n",
       "               [[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]],\n",
       "       \n",
       "               [[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]],\n",
       "       \n",
       "               [[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]],\n",
       "       \n",
       "               [[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]],\n",
       "       \n",
       "               [[-1.3283, -1.0591, -1.3756],\n",
       "                [ 0.3170,  2.2281, -0.8048]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:32.651953Z",
     "iopub.status.busy": "2023-02-26T14:42:32.651397Z",
     "iopub.status.idle": "2023-02-26T14:42:40.539065Z",
     "shell.execute_reply": "2023-02-26T14:42:40.538114Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "96.2 µs ± 1.64 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:40.542677Z",
     "iopub.status.busy": "2023-02-26T14:42:40.542190Z",
     "iopub.status.idle": "2023-02-26T14:42:40.552173Z",
     "shell.execute_reply": "2023-02-26T14:42:40.550813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                      [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                      [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                      [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                      [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                      [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                      [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169],\n",
       "                      [-0.4544, -1.1829, -1.1726,  1.7738],\n",
       "                      [ 0.9765,  0.7680,  1.3578,  0.3508],\n",
       "                      [-0.0104, -0.3855,  0.2148,  1.5169]]),\n",
       "       ),\n",
       "    a: tensor([[-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048],\n",
       "               [-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048],\n",
       "               [-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048],\n",
       "               [-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048],\n",
       "               [-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048],\n",
       "               [-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048],\n",
       "               [-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048],\n",
       "               [-1.3283, -1.0591, -1.3756],\n",
       "               [ 0.3170,  2.2281, -0.8048]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:40.555680Z",
     "iopub.status.busy": "2023-02-26T14:42:40.555142Z",
     "iopub.status.idle": "2023-02-26T14:42:54.636709Z",
     "shell.execute_reply": "2023-02-26T14:42:54.635377Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175 µs ± 11.1 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T14:42:54.642723Z",
     "iopub.status.busy": "2023-02-26T14:42:54.641809Z",
     "iopub.status.idle": "2023-02-26T14:42:59.420500Z",
     "shell.execute_reply": "2023-02-26T14:42:59.419426Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "554 µs ± 26 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
