{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:23.754011Z",
     "iopub.status.busy": "2023-01-19T16:56:23.753618Z",
     "iopub.status.idle": "2023-01-19T16:56:24.683317Z",
     "shell.execute_reply": "2023-01-19T16:56:24.682631Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:24.686814Z",
     "iopub.status.busy": "2023-01-19T16:56:24.686534Z",
     "iopub.status.idle": "2023-01-19T16:56:24.719091Z",
     "shell.execute_reply": "2023-01-19T16:56:24.718475Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:24.722115Z",
     "iopub.status.busy": "2023-01-19T16:56:24.721895Z",
     "iopub.status.idle": "2023-01-19T16:56:24.729891Z",
     "shell.execute_reply": "2023-01-19T16:56:24.729252Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f30a8478ee0>\n",
       "├── 'a' --> tensor([[-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538]])\n",
       "└── 'x' --> <FastTreeValue 0x7f30a8478fd0>\n",
       "    └── 'c' --> tensor([[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:24.733074Z",
     "iopub.status.busy": "2023-01-19T16:56:24.732738Z",
     "iopub.status.idle": "2023-01-19T16:56:24.738042Z",
     "shell.execute_reply": "2023-01-19T16:56:24.737413Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1529, -0.4003,  2.1798],\n",
       "        [ 0.4679, -0.5996,  0.8538]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:24.740848Z",
     "iopub.status.busy": "2023-01-19T16:56:24.740638Z",
     "iopub.status.idle": "2023-01-19T16:56:30.240278Z",
     "shell.execute_reply": "2023-01-19T16:56:30.239685Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.3 ns ± 0.0173 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:30.243381Z",
     "iopub.status.busy": "2023-01-19T16:56:30.242815Z",
     "iopub.status.idle": "2023-01-19T16:56:30.248789Z",
     "shell.execute_reply": "2023-01-19T16:56:30.248137Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f30a8478ee0>\n",
       "├── 'a' --> tensor([[ 1.3022,  0.1607,  0.6763],\n",
       "│                   [-1.6091, -2.7825,  0.7741]])\n",
       "└── 'x' --> <FastTreeValue 0x7f30a8478fd0>\n",
       "    └── 'c' --> tensor([[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:30.251715Z",
     "iopub.status.busy": "2023-01-19T16:56:30.251377Z",
     "iopub.status.idle": "2023-01-19T16:56:35.471558Z",
     "shell.execute_reply": "2023-01-19T16:56:35.470962Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.2 ns ± 0.068 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:35.474696Z",
     "iopub.status.busy": "2023-01-19T16:56:35.474469Z",
     "iopub.status.idle": "2023-01-19T16:56:35.816706Z",
     "shell.execute_reply": "2023-01-19T16:56:35.816025Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:35.820223Z",
     "iopub.status.busy": "2023-01-19T16:56:35.819899Z",
     "iopub.status.idle": "2023-01-19T16:56:35.825224Z",
     "shell.execute_reply": "2023-01-19T16:56:35.824578Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:35.828215Z",
     "iopub.status.busy": "2023-01-19T16:56:35.827998Z",
     "iopub.status.idle": "2023-01-19T16:56:35.832530Z",
     "shell.execute_reply": "2023-01-19T16:56:35.831878Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1529, -0.4003,  2.1798],\n",
       "        [ 0.4679, -0.5996,  0.8538]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:35.835573Z",
     "iopub.status.busy": "2023-01-19T16:56:35.835362Z",
     "iopub.status.idle": "2023-01-19T16:56:40.176023Z",
     "shell.execute_reply": "2023-01-19T16:56:40.175434Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53.6 ns ± 0.0771 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:40.179195Z",
     "iopub.status.busy": "2023-01-19T16:56:40.178560Z",
     "iopub.status.idle": "2023-01-19T16:56:40.184470Z",
     "shell.execute_reply": "2023-01-19T16:56:40.183845Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8562, -1.1605, -1.6153],\n",
       "               [ 0.0591,  0.5056,  0.1903]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:40.187244Z",
     "iopub.status.busy": "2023-01-19T16:56:40.187015Z",
     "iopub.status.idle": "2023-01-19T16:56:44.076269Z",
     "shell.execute_reply": "2023-01-19T16:56:44.075680Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "479 ns ± 0.41 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:44.079523Z",
     "iopub.status.busy": "2023-01-19T16:56:44.078928Z",
     "iopub.status.idle": "2023-01-19T16:56:50.931832Z",
     "shell.execute_reply": "2023-01-19T16:56:50.931129Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "844 ns ± 0.877 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:56:50.934873Z",
     "iopub.status.busy": "2023-01-19T16:56:50.934642Z",
     "iopub.status.idle": "2023-01-19T16:57:00.269778Z",
     "shell.execute_reply": "2023-01-19T16:57:00.269189Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.5 µs ± 8.37 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:00.273018Z",
     "iopub.status.busy": "2023-01-19T16:57:00.272388Z",
     "iopub.status.idle": "2023-01-19T16:57:00.275680Z",
     "shell.execute_reply": "2023-01-19T16:57:00.275040Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:00.278517Z",
     "iopub.status.busy": "2023-01-19T16:57:00.278305Z",
     "iopub.status.idle": "2023-01-19T16:57:11.301845Z",
     "shell.execute_reply": "2023-01-19T16:57:11.301282Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "136 µs ± 1.4 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:11.309102Z",
     "iopub.status.busy": "2023-01-19T16:57:11.307693Z",
     "iopub.status.idle": "2023-01-19T16:57:22.584282Z",
     "shell.execute_reply": "2023-01-19T16:57:22.583693Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 667 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:22.588977Z",
     "iopub.status.busy": "2023-01-19T16:57:22.587926Z",
     "iopub.status.idle": "2023-01-19T16:57:22.592619Z",
     "shell.execute_reply": "2023-01-19T16:57:22.592024Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:22.595482Z",
     "iopub.status.busy": "2023-01-19T16:57:22.595276Z",
     "iopub.status.idle": "2023-01-19T16:57:22.602213Z",
     "shell.execute_reply": "2023-01-19T16:57:22.601598Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f307c8c5190>\n",
       "├── 'a' --> tensor([[[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]],\n",
       "│           \n",
       "│                   [[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]],\n",
       "│           \n",
       "│                   [[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]],\n",
       "│           \n",
       "│                   [[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]],\n",
       "│           \n",
       "│                   [[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]],\n",
       "│           \n",
       "│                   [[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]],\n",
       "│           \n",
       "│                   [[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]],\n",
       "│           \n",
       "│                   [[-0.1529, -0.4003,  2.1798],\n",
       "│                    [ 0.4679, -0.5996,  0.8538]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f307c8c52b0>\n",
       "    └── 'c' --> tensor([[[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "                \n",
       "                        [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "                \n",
       "                        [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "                \n",
       "                        [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "                \n",
       "                        [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "                \n",
       "                        [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "                \n",
       "                        [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "                \n",
       "                        [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                         [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                         [-1.2049, -1.0288, -0.1979,  1.5876]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:22.604860Z",
     "iopub.status.busy": "2023-01-19T16:57:22.604648Z",
     "iopub.status.idle": "2023-01-19T16:57:25.213530Z",
     "shell.execute_reply": "2023-01-19T16:57:25.212760Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 60.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:25.216728Z",
     "iopub.status.busy": "2023-01-19T16:57:25.216503Z",
     "iopub.status.idle": "2023-01-19T16:57:25.223313Z",
     "shell.execute_reply": "2023-01-19T16:57:25.222657Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2fff7803d0>\n",
       "├── 'a' --> tensor([[-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538],\n",
       "│                   [-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538],\n",
       "│                   [-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538],\n",
       "│                   [-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538],\n",
       "│                   [-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538],\n",
       "│                   [-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538],\n",
       "│                   [-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538],\n",
       "│                   [-0.1529, -0.4003,  2.1798],\n",
       "│                   [ 0.4679, -0.5996,  0.8538]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3000256f40>\n",
       "    └── 'c' --> tensor([[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                        [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                        [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                        [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                        [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                        [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                        [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                        [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                        [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                        [-1.2049, -1.0288, -0.1979,  1.5876]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:25.226062Z",
     "iopub.status.busy": "2023-01-19T16:57:25.225847Z",
     "iopub.status.idle": "2023-01-19T16:57:27.631297Z",
     "shell.execute_reply": "2023-01-19T16:57:27.630703Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.6 µs ± 48.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:27.634311Z",
     "iopub.status.busy": "2023-01-19T16:57:27.634084Z",
     "iopub.status.idle": "2023-01-19T16:57:32.227287Z",
     "shell.execute_reply": "2023-01-19T16:57:32.226510Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.5 µs ± 100 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:32.230876Z",
     "iopub.status.busy": "2023-01-19T16:57:32.230383Z",
     "iopub.status.idle": "2023-01-19T16:57:32.237611Z",
     "shell.execute_reply": "2023-01-19T16:57:32.236962Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]],\n",
       "       \n",
       "               [[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]],\n",
       "       \n",
       "               [[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]],\n",
       "       \n",
       "               [[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]],\n",
       "       \n",
       "               [[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]],\n",
       "       \n",
       "               [[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]],\n",
       "       \n",
       "               [[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]],\n",
       "       \n",
       "               [[-0.1529, -0.4003,  2.1798],\n",
       "                [ 0.4679, -0.5996,  0.8538]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "              \n",
       "                      [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "              \n",
       "                      [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "              \n",
       "                      [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "              \n",
       "                      [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "              \n",
       "                      [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "              \n",
       "                      [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]],\n",
       "              \n",
       "                      [[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                       [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                       [-1.2049, -1.0288, -0.1979,  1.5876]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:32.240451Z",
     "iopub.status.busy": "2023-01-19T16:57:32.240235Z",
     "iopub.status.idle": "2023-01-19T16:57:38.681777Z",
     "shell.execute_reply": "2023-01-19T16:57:38.680731Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.3 µs ± 314 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:38.684928Z",
     "iopub.status.busy": "2023-01-19T16:57:38.684701Z",
     "iopub.status.idle": "2023-01-19T16:57:38.692085Z",
     "shell.execute_reply": "2023-01-19T16:57:38.691488Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538],\n",
       "               [-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538],\n",
       "               [-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538],\n",
       "               [-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538],\n",
       "               [-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538],\n",
       "               [-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538],\n",
       "               [-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538],\n",
       "               [-0.1529, -0.4003,  2.1798],\n",
       "               [ 0.4679, -0.5996,  0.8538]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                      [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                      [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                      [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                      [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                      [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                      [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876],\n",
       "                      [ 0.4168, -0.3822,  0.4341,  1.0682],\n",
       "                      [-0.6069, -0.8211,  0.2082, -0.8740],\n",
       "                      [-1.2049, -1.0288, -0.1979,  1.5876]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:38.695201Z",
     "iopub.status.busy": "2023-01-19T16:57:38.694852Z",
     "iopub.status.idle": "2023-01-19T16:57:50.273515Z",
     "shell.execute_reply": "2023-01-19T16:57:50.272512Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 383 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T16:57:50.276508Z",
     "iopub.status.busy": "2023-01-19T16:57:50.276279Z",
     "iopub.status.idle": "2023-01-19T16:57:52.762056Z",
     "shell.execute_reply": "2023-01-19T16:57:52.761382Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "305 µs ± 3.78 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
