{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:10.036973Z",
     "iopub.status.busy": "2023-02-27T08:33:10.036544Z",
     "iopub.status.idle": "2023-02-27T08:33:10.940381Z",
     "shell.execute_reply": "2023-02-27T08:33:10.939747Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:10.943860Z",
     "iopub.status.busy": "2023-02-27T08:33:10.943463Z",
     "iopub.status.idle": "2023-02-27T08:33:11.219342Z",
     "shell.execute_reply": "2023-02-27T08:33:11.218669Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:11.222773Z",
     "iopub.status.busy": "2023-02-27T08:33:11.222209Z",
     "iopub.status.idle": "2023-02-27T08:33:11.232782Z",
     "shell.execute_reply": "2023-02-27T08:33:11.231918Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f182ca98310>\n",
       "├── 'a' --> tensor([[-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884]])\n",
       "└── 'x' --> <FastTreeValue 0x7f182ca98430>\n",
       "    └── 'c' --> tensor([[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:11.235265Z",
     "iopub.status.busy": "2023-02-27T08:33:11.234899Z",
     "iopub.status.idle": "2023-02-27T08:33:11.241425Z",
     "shell.execute_reply": "2023-02-27T08:33:11.240359Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3389,  2.8225,  0.7187],\n",
       "        [-0.9093,  0.5042,  1.1884]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:11.244248Z",
     "iopub.status.busy": "2023-02-27T08:33:11.243788Z",
     "iopub.status.idle": "2023-02-27T08:33:16.086901Z",
     "shell.execute_reply": "2023-02-27T08:33:16.085626Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.7 ns ± 0.0599 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:16.089939Z",
     "iopub.status.busy": "2023-02-27T08:33:16.089599Z",
     "iopub.status.idle": "2023-02-27T08:33:16.096608Z",
     "shell.execute_reply": "2023-02-27T08:33:16.096020Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f182ca98310>\n",
       "├── 'a' --> tensor([[-0.7186,  2.1170, -0.2077],\n",
       "│                   [ 0.4794, -0.2341, -0.2752]])\n",
       "└── 'x' --> <FastTreeValue 0x7f182ca98430>\n",
       "    └── 'c' --> tensor([[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:16.099562Z",
     "iopub.status.busy": "2023-02-27T08:33:16.099029Z",
     "iopub.status.idle": "2023-02-27T08:33:20.853241Z",
     "shell.execute_reply": "2023-02-27T08:33:20.852470Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.6 ns ± 0.0269 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:20.856258Z",
     "iopub.status.busy": "2023-02-27T08:33:20.855712Z",
     "iopub.status.idle": "2023-02-27T08:33:21.181604Z",
     "shell.execute_reply": "2023-02-27T08:33:21.180942Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:21.185690Z",
     "iopub.status.busy": "2023-02-27T08:33:21.184486Z",
     "iopub.status.idle": "2023-02-27T08:33:21.191655Z",
     "shell.execute_reply": "2023-02-27T08:33:21.191084Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:21.195163Z",
     "iopub.status.busy": "2023-02-27T08:33:21.194090Z",
     "iopub.status.idle": "2023-02-27T08:33:21.200365Z",
     "shell.execute_reply": "2023-02-27T08:33:21.199788Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3389,  2.8225,  0.7187],\n",
       "        [-0.9093,  0.5042,  1.1884]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:21.203182Z",
     "iopub.status.busy": "2023-02-27T08:33:21.202732Z",
     "iopub.status.idle": "2023-02-27T08:33:26.460402Z",
     "shell.execute_reply": "2023-02-27T08:33:26.459725Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.5 ns ± 0.0396 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:26.463370Z",
     "iopub.status.busy": "2023-02-27T08:33:26.463007Z",
     "iopub.status.idle": "2023-02-27T08:33:26.469360Z",
     "shell.execute_reply": "2023-02-27T08:33:26.468780Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.0751, -0.7540, -0.3041],\n",
       "               [ 0.9395,  0.6784,  0.3188]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:26.471961Z",
     "iopub.status.busy": "2023-02-27T08:33:26.471412Z",
     "iopub.status.idle": "2023-02-27T08:33:30.481677Z",
     "shell.execute_reply": "2023-02-27T08:33:30.480948Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "494 ns ± 0.155 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:30.484916Z",
     "iopub.status.busy": "2023-02-27T08:33:30.484564Z",
     "iopub.status.idle": "2023-02-27T08:33:37.381714Z",
     "shell.execute_reply": "2023-02-27T08:33:37.380999Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "851 ns ± 0.811 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:37.384997Z",
     "iopub.status.busy": "2023-02-27T08:33:37.384492Z",
     "iopub.status.idle": "2023-02-27T08:33:46.608689Z",
     "shell.execute_reply": "2023-02-27T08:33:46.607929Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 29.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:46.611797Z",
     "iopub.status.busy": "2023-02-27T08:33:46.611439Z",
     "iopub.status.idle": "2023-02-27T08:33:46.615427Z",
     "shell.execute_reply": "2023-02-27T08:33:46.614837Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:46.618216Z",
     "iopub.status.busy": "2023-02-27T08:33:46.617850Z",
     "iopub.status.idle": "2023-02-27T08:33:57.770223Z",
     "shell.execute_reply": "2023-02-27T08:33:57.769636Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 484 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:33:57.773811Z",
     "iopub.status.busy": "2023-02-27T08:33:57.772727Z",
     "iopub.status.idle": "2023-02-27T08:34:09.082779Z",
     "shell.execute_reply": "2023-02-27T08:34:09.082182Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 335 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:09.086346Z",
     "iopub.status.busy": "2023-02-27T08:34:09.085304Z",
     "iopub.status.idle": "2023-02-27T08:34:09.089163Z",
     "shell.execute_reply": "2023-02-27T08:34:09.088637Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:09.091591Z",
     "iopub.status.busy": "2023-02-27T08:34:09.091161Z",
     "iopub.status.idle": "2023-02-27T08:34:09.098945Z",
     "shell.execute_reply": "2023-02-27T08:34:09.097550Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1777d8e130>\n",
       "├── 'a' --> tensor([[[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]],\n",
       "│           \n",
       "│                   [[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]],\n",
       "│           \n",
       "│                   [[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]],\n",
       "│           \n",
       "│                   [[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]],\n",
       "│           \n",
       "│                   [[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]],\n",
       "│           \n",
       "│                   [[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]],\n",
       "│           \n",
       "│                   [[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]],\n",
       "│           \n",
       "│                   [[-0.3389,  2.8225,  0.7187],\n",
       "│                    [-0.9093,  0.5042,  1.1884]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1777d8efa0>\n",
       "    └── 'c' --> tensor([[[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "                \n",
       "                        [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "                \n",
       "                        [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "                \n",
       "                        [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "                \n",
       "                        [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "                \n",
       "                        [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "                \n",
       "                        [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "                \n",
       "                        [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                         [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                         [-1.3072, -0.4704,  0.1927,  0.5034]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:09.101324Z",
     "iopub.status.busy": "2023-02-27T08:34:09.100927Z",
     "iopub.status.idle": "2023-02-27T08:34:11.785161Z",
     "shell.execute_reply": "2023-02-27T08:34:11.784441Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33 µs ± 28.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:11.788432Z",
     "iopub.status.busy": "2023-02-27T08:34:11.787923Z",
     "iopub.status.idle": "2023-02-27T08:34:11.795620Z",
     "shell.execute_reply": "2023-02-27T08:34:11.794954Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f182ca98c10>\n",
       "├── 'a' --> tensor([[-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884],\n",
       "│                   [-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884],\n",
       "│                   [-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884],\n",
       "│                   [-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884],\n",
       "│                   [-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884],\n",
       "│                   [-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884],\n",
       "│                   [-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884],\n",
       "│                   [-0.3389,  2.8225,  0.7187],\n",
       "│                   [-0.9093,  0.5042,  1.1884]])\n",
       "└── 'x' --> <FastTreeValue 0x7f182ca98b80>\n",
       "    └── 'c' --> tensor([[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                        [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                        [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                        [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                        [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                        [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                        [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                        [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                        [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                        [-1.3072, -0.4704,  0.1927,  0.5034]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:11.798325Z",
     "iopub.status.busy": "2023-02-27T08:34:11.797974Z",
     "iopub.status.idle": "2023-02-27T08:34:14.323770Z",
     "shell.execute_reply": "2023-02-27T08:34:14.323003Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31 µs ± 41.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:14.326587Z",
     "iopub.status.busy": "2023-02-27T08:34:14.326227Z",
     "iopub.status.idle": "2023-02-27T08:34:19.061285Z",
     "shell.execute_reply": "2023-02-27T08:34:19.060561Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 µs ± 197 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:19.064327Z",
     "iopub.status.busy": "2023-02-27T08:34:19.063781Z",
     "iopub.status.idle": "2023-02-27T08:34:19.071758Z",
     "shell.execute_reply": "2023-02-27T08:34:19.071175Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]],\n",
       "       \n",
       "               [[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]],\n",
       "       \n",
       "               [[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]],\n",
       "       \n",
       "               [[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]],\n",
       "       \n",
       "               [[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]],\n",
       "       \n",
       "               [[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]],\n",
       "       \n",
       "               [[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]],\n",
       "       \n",
       "               [[-0.3389,  2.8225,  0.7187],\n",
       "                [-0.9093,  0.5042,  1.1884]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "              \n",
       "                      [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "              \n",
       "                      [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "              \n",
       "                      [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "              \n",
       "                      [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "              \n",
       "                      [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "              \n",
       "                      [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]],\n",
       "              \n",
       "                      [[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                       [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                       [-1.3072, -0.4704,  0.1927,  0.5034]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:19.074224Z",
     "iopub.status.busy": "2023-02-27T08:34:19.073870Z",
     "iopub.status.idle": "2023-02-27T08:34:25.470701Z",
     "shell.execute_reply": "2023-02-27T08:34:25.469924Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.8 µs ± 143 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:25.473937Z",
     "iopub.status.busy": "2023-02-27T08:34:25.473409Z",
     "iopub.status.idle": "2023-02-27T08:34:25.481047Z",
     "shell.execute_reply": "2023-02-27T08:34:25.480280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884],\n",
       "               [-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884],\n",
       "               [-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884],\n",
       "               [-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884],\n",
       "               [-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884],\n",
       "               [-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884],\n",
       "               [-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884],\n",
       "               [-0.3389,  2.8225,  0.7187],\n",
       "               [-0.9093,  0.5042,  1.1884]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                      [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                      [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                      [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                      [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                      [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                      [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034],\n",
       "                      [ 0.0424, -0.3420, -0.9153, -0.8614],\n",
       "                      [-0.7719,  0.7121, -0.7738,  0.9402],\n",
       "                      [-1.3072, -0.4704,  0.1927,  0.5034]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:25.485347Z",
     "iopub.status.busy": "2023-02-27T08:34:25.484417Z",
     "iopub.status.idle": "2023-02-27T08:34:37.095764Z",
     "shell.execute_reply": "2023-02-27T08:34:37.095119Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 328 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:34:37.098499Z",
     "iopub.status.busy": "2023-02-27T08:34:37.098109Z",
     "iopub.status.idle": "2023-02-27T08:34:39.579285Z",
     "shell.execute_reply": "2023-02-27T08:34:39.578630Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "305 µs ± 1.42 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
