{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:27.405182Z",
     "iopub.status.busy": "2023-02-27T10:30:27.404961Z",
     "iopub.status.idle": "2023-02-27T10:30:28.305751Z",
     "shell.execute_reply": "2023-02-27T10:30:28.305102Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:28.308960Z",
     "iopub.status.busy": "2023-02-27T10:30:28.308380Z",
     "iopub.status.idle": "2023-02-27T10:30:28.583504Z",
     "shell.execute_reply": "2023-02-27T10:30:28.582836Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:28.586546Z",
     "iopub.status.busy": "2023-02-27T10:30:28.586059Z",
     "iopub.status.idle": "2023-02-27T10:30:28.595303Z",
     "shell.execute_reply": "2023-02-27T10:30:28.594736Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8d8f58a30>\n",
       "├── 'a' --> tensor([[-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8d8f58b80>\n",
       "    └── 'c' --> tensor([[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:28.598004Z",
     "iopub.status.busy": "2023-02-27T10:30:28.597686Z",
     "iopub.status.idle": "2023-02-27T10:30:28.602394Z",
     "shell.execute_reply": "2023-02-27T10:30:28.601768Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.4328,  0.2473,  0.6971],\n",
       "        [ 0.3075, -0.3665, -0.5581]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:28.605029Z",
     "iopub.status.busy": "2023-02-27T10:30:28.604497Z",
     "iopub.status.idle": "2023-02-27T10:30:33.581466Z",
     "shell.execute_reply": "2023-02-27T10:30:33.580722Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.3 ns ± 0.0288 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:33.584342Z",
     "iopub.status.busy": "2023-02-27T10:30:33.583987Z",
     "iopub.status.idle": "2023-02-27T10:30:33.591276Z",
     "shell.execute_reply": "2023-02-27T10:30:33.590202Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8d8f58a30>\n",
       "├── 'a' --> tensor([[-0.7961, -0.6313,  1.5832],\n",
       "│                   [-0.3406, -0.3316, -1.2560]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8d8f58b80>\n",
       "    └── 'c' --> tensor([[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:33.593701Z",
     "iopub.status.busy": "2023-02-27T10:30:33.593364Z",
     "iopub.status.idle": "2023-02-27T10:30:38.781701Z",
     "shell.execute_reply": "2023-02-27T10:30:38.780974Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.9 ns ± 0.0162 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:38.784853Z",
     "iopub.status.busy": "2023-02-27T10:30:38.784393Z",
     "iopub.status.idle": "2023-02-27T10:30:39.111128Z",
     "shell.execute_reply": "2023-02-27T10:30:39.110140Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:39.114368Z",
     "iopub.status.busy": "2023-02-27T10:30:39.113696Z",
     "iopub.status.idle": "2023-02-27T10:30:39.119782Z",
     "shell.execute_reply": "2023-02-27T10:30:39.119217Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:39.122486Z",
     "iopub.status.busy": "2023-02-27T10:30:39.121920Z",
     "iopub.status.idle": "2023-02-27T10:30:39.127212Z",
     "shell.execute_reply": "2023-02-27T10:30:39.126642Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.4328,  0.2473,  0.6971],\n",
       "        [ 0.3075, -0.3665, -0.5581]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:39.129800Z",
     "iopub.status.busy": "2023-02-27T10:30:39.129481Z",
     "iopub.status.idle": "2023-02-27T10:30:43.700086Z",
     "shell.execute_reply": "2023-02-27T10:30:43.699349Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.4 ns ± 0.0282 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:43.703263Z",
     "iopub.status.busy": "2023-02-27T10:30:43.702717Z",
     "iopub.status.idle": "2023-02-27T10:30:43.709403Z",
     "shell.execute_reply": "2023-02-27T10:30:43.708531Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0800, -0.9077, -0.3900],\n",
       "               [-2.0270,  0.7967,  0.8864]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:43.711787Z",
     "iopub.status.busy": "2023-02-27T10:30:43.711443Z",
     "iopub.status.idle": "2023-02-27T10:30:47.672957Z",
     "shell.execute_reply": "2023-02-27T10:30:47.672203Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.104 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:47.675783Z",
     "iopub.status.busy": "2023-02-27T10:30:47.675431Z",
     "iopub.status.idle": "2023-02-27T10:30:54.555150Z",
     "shell.execute_reply": "2023-02-27T10:30:54.554333Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "847 ns ± 0.224 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:30:54.558191Z",
     "iopub.status.busy": "2023-02-27T10:30:54.557847Z",
     "iopub.status.idle": "2023-02-27T10:31:03.669520Z",
     "shell.execute_reply": "2023-02-27T10:31:03.668771Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 50.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:03.672544Z",
     "iopub.status.busy": "2023-02-27T10:31:03.672194Z",
     "iopub.status.idle": "2023-02-27T10:31:03.676547Z",
     "shell.execute_reply": "2023-02-27T10:31:03.675588Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:03.679410Z",
     "iopub.status.busy": "2023-02-27T10:31:03.678897Z",
     "iopub.status.idle": "2023-02-27T10:31:14.990932Z",
     "shell.execute_reply": "2023-02-27T10:31:14.990382Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 1.15 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:14.993879Z",
     "iopub.status.busy": "2023-02-27T10:31:14.993255Z",
     "iopub.status.idle": "2023-02-27T10:31:26.434461Z",
     "shell.execute_reply": "2023-02-27T10:31:26.433909Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 673 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:26.437356Z",
     "iopub.status.busy": "2023-02-27T10:31:26.436889Z",
     "iopub.status.idle": "2023-02-27T10:31:26.440148Z",
     "shell.execute_reply": "2023-02-27T10:31:26.439629Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:26.442545Z",
     "iopub.status.busy": "2023-02-27T10:31:26.442309Z",
     "iopub.status.idle": "2023-02-27T10:31:26.450819Z",
     "shell.execute_reply": "2023-02-27T10:31:26.450252Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8d8fcc550>\n",
       "├── 'a' --> tensor([[[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]],\n",
       "│           \n",
       "│                   [[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]],\n",
       "│           \n",
       "│                   [[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]],\n",
       "│           \n",
       "│                   [[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]],\n",
       "│           \n",
       "│                   [[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]],\n",
       "│           \n",
       "│                   [[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]],\n",
       "│           \n",
       "│                   [[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]],\n",
       "│           \n",
       "│                   [[-2.4328,  0.2473,  0.6971],\n",
       "│                    [ 0.3075, -0.3665, -0.5581]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8d8fcc0a0>\n",
       "    └── 'c' --> tensor([[[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "                \n",
       "                        [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "                \n",
       "                        [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "                \n",
       "                        [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "                \n",
       "                        [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "                \n",
       "                        [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "                \n",
       "                        [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "                \n",
       "                        [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                         [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                         [-1.6953, -2.0327,  0.6113,  1.9314]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:26.453504Z",
     "iopub.status.busy": "2023-02-27T10:31:26.453291Z",
     "iopub.status.idle": "2023-02-27T10:31:29.074930Z",
     "shell.execute_reply": "2023-02-27T10:31:29.074260Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.2 µs ± 30.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:29.078158Z",
     "iopub.status.busy": "2023-02-27T10:31:29.077545Z",
     "iopub.status.idle": "2023-02-27T10:31:29.085425Z",
     "shell.execute_reply": "2023-02-27T10:31:29.084847Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fb8232b1b20>\n",
       "├── 'a' --> tensor([[-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581],\n",
       "│                   [-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581],\n",
       "│                   [-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581],\n",
       "│                   [-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581],\n",
       "│                   [-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581],\n",
       "│                   [-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581],\n",
       "│                   [-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581],\n",
       "│                   [-2.4328,  0.2473,  0.6971],\n",
       "│                   [ 0.3075, -0.3665, -0.5581]])\n",
       "└── 'x' --> <FastTreeValue 0x7fb8d8f53190>\n",
       "    └── 'c' --> tensor([[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                        [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                        [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                        [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                        [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                        [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                        [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                        [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                        [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                        [-1.6953, -2.0327,  0.6113,  1.9314]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:29.088009Z",
     "iopub.status.busy": "2023-02-27T10:31:29.087686Z",
     "iopub.status.idle": "2023-02-27T10:31:31.550634Z",
     "shell.execute_reply": "2023-02-27T10:31:31.549967Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.3 µs ± 109 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:31.553866Z",
     "iopub.status.busy": "2023-02-27T10:31:31.553347Z",
     "iopub.status.idle": "2023-02-27T10:31:36.280300Z",
     "shell.execute_reply": "2023-02-27T10:31:36.279551Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 µs ± 206 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:36.283133Z",
     "iopub.status.busy": "2023-02-27T10:31:36.282767Z",
     "iopub.status.idle": "2023-02-27T10:31:36.291528Z",
     "shell.execute_reply": "2023-02-27T10:31:36.290942Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]],\n",
       "       \n",
       "               [[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]],\n",
       "       \n",
       "               [[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]],\n",
       "       \n",
       "               [[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]],\n",
       "       \n",
       "               [[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]],\n",
       "       \n",
       "               [[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]],\n",
       "       \n",
       "               [[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]],\n",
       "       \n",
       "               [[-2.4328,  0.2473,  0.6971],\n",
       "                [ 0.3075, -0.3665, -0.5581]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "              \n",
       "                      [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "              \n",
       "                      [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "              \n",
       "                      [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "              \n",
       "                      [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "              \n",
       "                      [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "              \n",
       "                      [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]],\n",
       "              \n",
       "                      [[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                       [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                       [-1.6953, -2.0327,  0.6113,  1.9314]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:36.294809Z",
     "iopub.status.busy": "2023-02-27T10:31:36.293706Z",
     "iopub.status.idle": "2023-02-27T10:31:42.735381Z",
     "shell.execute_reply": "2023-02-27T10:31:42.734715Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.2 µs ± 348 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:42.738222Z",
     "iopub.status.busy": "2023-02-27T10:31:42.737684Z",
     "iopub.status.idle": "2023-02-27T10:31:42.745619Z",
     "shell.execute_reply": "2023-02-27T10:31:42.744537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581],\n",
       "               [-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581],\n",
       "               [-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581],\n",
       "               [-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581],\n",
       "               [-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581],\n",
       "               [-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581],\n",
       "               [-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581],\n",
       "               [-2.4328,  0.2473,  0.6971],\n",
       "               [ 0.3075, -0.3665, -0.5581]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                      [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                      [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                      [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                      [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                      [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                      [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314],\n",
       "                      [-0.0972, -0.8011,  1.0930,  0.5326],\n",
       "                      [ 1.1623,  0.4502, -0.5144, -1.6165],\n",
       "                      [-1.6953, -2.0327,  0.6113,  1.9314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:42.748220Z",
     "iopub.status.busy": "2023-02-27T10:31:42.747902Z",
     "iopub.status.idle": "2023-02-27T10:31:54.405786Z",
     "shell.execute_reply": "2023-02-27T10:31:54.405155Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 186 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:31:54.408427Z",
     "iopub.status.busy": "2023-02-27T10:31:54.408019Z",
     "iopub.status.idle": "2023-02-27T10:31:56.998838Z",
     "shell.execute_reply": "2023-02-27T10:31:56.998266Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "318 µs ± 665 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
