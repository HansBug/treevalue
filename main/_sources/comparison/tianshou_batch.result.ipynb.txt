{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:32:48.659815Z",
     "iopub.status.busy": "2023-02-24T08:32:48.659350Z",
     "iopub.status.idle": "2023-02-24T08:32:49.653121Z",
     "shell.execute_reply": "2023-02-24T08:32:49.652297Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:32:49.657344Z",
     "iopub.status.busy": "2023-02-24T08:32:49.656818Z",
     "iopub.status.idle": "2023-02-24T08:32:49.691575Z",
     "shell.execute_reply": "2023-02-24T08:32:49.690845Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:32:49.695586Z",
     "iopub.status.busy": "2023-02-24T08:32:49.694961Z",
     "iopub.status.idle": "2023-02-24T08:32:49.705038Z",
     "shell.execute_reply": "2023-02-24T08:32:49.704385Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f27fc47bfd0>\n",
       "├── 'a' --> tensor([[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00]])\n",
       "└── 'x' --> <FastTreeValue 0x7f27fc47bc70>\n",
       "    └── 'c' --> tensor([[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:32:49.708051Z",
     "iopub.status.busy": "2023-02-24T08:32:49.707589Z",
     "iopub.status.idle": "2023-02-24T08:32:49.712802Z",
     "shell.execute_reply": "2023-02-24T08:32:49.712098Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "        [-3.4293e-04, -3.7221e-01,  1.2434e+00]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:32:49.715919Z",
     "iopub.status.busy": "2023-02-24T08:32:49.715361Z",
     "iopub.status.idle": "2023-02-24T08:32:54.971040Z",
     "shell.execute_reply": "2023-02-24T08:32:54.969993Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.7 ns ± 0.0421 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:32:54.974693Z",
     "iopub.status.busy": "2023-02-24T08:32:54.973919Z",
     "iopub.status.idle": "2023-02-24T08:32:54.981862Z",
     "shell.execute_reply": "2023-02-24T08:32:54.981198Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f27fc47bfd0>\n",
       "├── 'a' --> tensor([[ 0.9315,  0.8681,  0.1637],\n",
       "│                   [-0.1535,  0.7065,  0.0133]])\n",
       "└── 'x' --> <FastTreeValue 0x7f27fc47bc70>\n",
       "    └── 'c' --> tensor([[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:32:54.984804Z",
     "iopub.status.busy": "2023-02-24T08:32:54.984307Z",
     "iopub.status.idle": "2023-02-24T08:33:00.362325Z",
     "shell.execute_reply": "2023-02-24T08:33:00.361431Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.2 ns ± 0.0746 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:00.365715Z",
     "iopub.status.busy": "2023-02-24T08:33:00.365189Z",
     "iopub.status.idle": "2023-02-24T08:33:00.748613Z",
     "shell.execute_reply": "2023-02-24T08:33:00.747798Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:00.752760Z",
     "iopub.status.busy": "2023-02-24T08:33:00.752127Z",
     "iopub.status.idle": "2023-02-24T08:33:00.759407Z",
     "shell.execute_reply": "2023-02-24T08:33:00.758748Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:00.762692Z",
     "iopub.status.busy": "2023-02-24T08:33:00.761999Z",
     "iopub.status.idle": "2023-02-24T08:33:00.767511Z",
     "shell.execute_reply": "2023-02-24T08:33:00.766721Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "        [-3.4293e-04, -3.7221e-01,  1.2434e+00]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:00.770766Z",
     "iopub.status.busy": "2023-02-24T08:33:00.770182Z",
     "iopub.status.idle": "2023-02-24T08:33:05.629194Z",
     "shell.execute_reply": "2023-02-24T08:33:05.628109Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.8 ns ± 0.0708 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:05.632647Z",
     "iopub.status.busy": "2023-02-24T08:33:05.632155Z",
     "iopub.status.idle": "2023-02-24T08:33:05.639303Z",
     "shell.execute_reply": "2023-02-24T08:33:05.638653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.7294, -2.3945, -0.0914],\n",
       "               [-0.6944,  1.7159, -0.2545]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:05.642252Z",
     "iopub.status.busy": "2023-02-24T08:33:05.641697Z",
     "iopub.status.idle": "2023-02-24T08:33:09.669962Z",
     "shell.execute_reply": "2023-02-24T08:33:09.669128Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "495 ns ± 0.183 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:09.673618Z",
     "iopub.status.busy": "2023-02-24T08:33:09.672893Z",
     "iopub.status.idle": "2023-02-24T08:33:16.285134Z",
     "shell.execute_reply": "2023-02-24T08:33:16.284249Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "812 ns ± 0.541 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:16.288583Z",
     "iopub.status.busy": "2023-02-24T08:33:16.288150Z",
     "iopub.status.idle": "2023-02-24T08:33:25.063062Z",
     "shell.execute_reply": "2023-02-24T08:33:25.062032Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.8 µs ± 30.8 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:25.066881Z",
     "iopub.status.busy": "2023-02-24T08:33:25.066348Z",
     "iopub.status.idle": "2023-02-24T08:33:25.071225Z",
     "shell.execute_reply": "2023-02-24T08:33:25.070489Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:25.074686Z",
     "iopub.status.busy": "2023-02-24T08:33:25.074162Z",
     "iopub.status.idle": "2023-02-24T08:33:36.724398Z",
     "shell.execute_reply": "2023-02-24T08:33:36.723723Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 917 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:36.727480Z",
     "iopub.status.busy": "2023-02-24T08:33:36.726942Z",
     "iopub.status.idle": "2023-02-24T08:33:48.215719Z",
     "shell.execute_reply": "2023-02-24T08:33:48.215073Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 385 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:48.218839Z",
     "iopub.status.busy": "2023-02-24T08:33:48.218313Z",
     "iopub.status.idle": "2023-02-24T08:33:48.221998Z",
     "shell.execute_reply": "2023-02-24T08:33:48.221431Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:48.224782Z",
     "iopub.status.busy": "2023-02-24T08:33:48.224083Z",
     "iopub.status.idle": "2023-02-24T08:33:48.231567Z",
     "shell.execute_reply": "2023-02-24T08:33:48.231011Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f274f0e3e50>\n",
       "├── 'a' --> tensor([[[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "│           \n",
       "│                   [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "│           \n",
       "│                   [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "│           \n",
       "│                   [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "│           \n",
       "│                   [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "│           \n",
       "│                   [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "│           \n",
       "│                   [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "│           \n",
       "│                   [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                    [-3.4293e-04, -3.7221e-01,  1.2434e+00]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f274f0e3130>\n",
       "    └── 'c' --> tensor([[[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "                \n",
       "                        [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "                \n",
       "                        [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "                \n",
       "                        [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "                \n",
       "                        [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "                \n",
       "                        [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "                \n",
       "                        [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "                \n",
       "                        [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                         [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                         [ 1.2659,  0.1843, -0.2799, -0.4836]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:48.234353Z",
     "iopub.status.busy": "2023-02-24T08:33:48.233651Z",
     "iopub.status.idle": "2023-02-24T08:33:50.803365Z",
     "shell.execute_reply": "2023-02-24T08:33:50.802455Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.6 µs ± 51.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:50.806546Z",
     "iopub.status.busy": "2023-02-24T08:33:50.806131Z",
     "iopub.status.idle": "2023-02-24T08:33:50.814868Z",
     "shell.execute_reply": "2023-02-24T08:33:50.814210Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f274f0c7a60>\n",
       "├── 'a' --> tensor([[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "│                   [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "│                   [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "│                   [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "│                   [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "│                   [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "│                   [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "│                   [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "│                   [-3.4293e-04, -3.7221e-01,  1.2434e+00]])\n",
       "└── 'x' --> <FastTreeValue 0x7f274f0c7760>\n",
       "    └── 'c' --> tensor([[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                        [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                        [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                        [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                        [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                        [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                        [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                        [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                        [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                        [ 1.2659,  0.1843, -0.2799, -0.4836]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:50.818286Z",
     "iopub.status.busy": "2023-02-24T08:33:50.817718Z",
     "iopub.status.idle": "2023-02-24T08:33:53.236758Z",
     "shell.execute_reply": "2023-02-24T08:33:53.235918Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.7 µs ± 36.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:53.241162Z",
     "iopub.status.busy": "2023-02-24T08:33:53.239864Z",
     "iopub.status.idle": "2023-02-24T08:33:57.951983Z",
     "shell.execute_reply": "2023-02-24T08:33:57.951105Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 µs ± 25.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:57.955779Z",
     "iopub.status.busy": "2023-02-24T08:33:57.955345Z",
     "iopub.status.idle": "2023-02-24T08:33:57.964344Z",
     "shell.execute_reply": "2023-02-24T08:33:57.963667Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "              \n",
       "                      [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "              \n",
       "                      [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "              \n",
       "                      [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "              \n",
       "                      [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "              \n",
       "                      [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "              \n",
       "                      [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]],\n",
       "              \n",
       "                      [[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                       [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                       [ 1.2659,  0.1843, -0.2799, -0.4836]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "       \n",
       "               [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "       \n",
       "               [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "       \n",
       "               [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "       \n",
       "               [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "       \n",
       "               [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "       \n",
       "               [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]],\n",
       "       \n",
       "               [[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "                [-3.4293e-04, -3.7221e-01,  1.2434e+00]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:33:57.967298Z",
     "iopub.status.busy": "2023-02-24T08:33:57.966900Z",
     "iopub.status.idle": "2023-02-24T08:34:04.378165Z",
     "shell.execute_reply": "2023-02-24T08:34:04.377279Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79 µs ± 81.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:34:04.382174Z",
     "iopub.status.busy": "2023-02-24T08:34:04.381523Z",
     "iopub.status.idle": "2023-02-24T08:34:04.389925Z",
     "shell.execute_reply": "2023-02-24T08:34:04.389250Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                      [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                      [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                      [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                      [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                      [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                      [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836],\n",
       "                      [-1.5735, -0.1043,  0.4718,  1.0031],\n",
       "                      [ 0.1137, -0.9231,  0.4315, -0.6561],\n",
       "                      [ 1.2659,  0.1843, -0.2799, -0.4836]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "               [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "               [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "               [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "               [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "               [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "               [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00],\n",
       "               [ 1.3239e+00, -1.1471e+00,  3.9902e-02],\n",
       "               [-3.4293e-04, -3.7221e-01,  1.2434e+00]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:34:04.393218Z",
     "iopub.status.busy": "2023-02-24T08:34:04.392807Z",
     "iopub.status.idle": "2023-02-24T08:34:16.104642Z",
     "shell.execute_reply": "2023-02-24T08:34:16.103670Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 91.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T08:34:16.108712Z",
     "iopub.status.busy": "2023-02-24T08:34:16.108151Z",
     "iopub.status.idle": "2023-02-24T08:34:18.836993Z",
     "shell.execute_reply": "2023-02-24T08:34:18.836354Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "335 µs ± 744 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
