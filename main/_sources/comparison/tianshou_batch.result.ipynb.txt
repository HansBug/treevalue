{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:05.602989Z",
     "iopub.status.busy": "2023-02-12T17:22:05.602700Z",
     "iopub.status.idle": "2023-02-12T17:22:06.748779Z",
     "shell.execute_reply": "2023-02-12T17:22:06.747696Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:06.753508Z",
     "iopub.status.busy": "2023-02-12T17:22:06.752871Z",
     "iopub.status.idle": "2023-02-12T17:22:06.793913Z",
     "shell.execute_reply": "2023-02-12T17:22:06.793135Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:06.797665Z",
     "iopub.status.busy": "2023-02-12T17:22:06.797115Z",
     "iopub.status.idle": "2023-02-12T17:22:06.808562Z",
     "shell.execute_reply": "2023-02-12T17:22:06.807867Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe82416feb0>\n",
       "├── 'a' --> tensor([[ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe82416f9a0>\n",
       "    └── 'c' --> tensor([[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:06.812197Z",
     "iopub.status.busy": "2023-02-12T17:22:06.811515Z",
     "iopub.status.idle": "2023-02-12T17:22:06.818872Z",
     "shell.execute_reply": "2023-02-12T17:22:06.818180Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6878, -0.0334,  1.2293],\n",
       "        [ 0.6935, -0.6508,  0.0158]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:06.822084Z",
     "iopub.status.busy": "2023-02-12T17:22:06.821817Z",
     "iopub.status.idle": "2023-02-12T17:22:12.904065Z",
     "shell.execute_reply": "2023-02-12T17:22:12.902855Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.6 ns ± 0.834 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:12.908264Z",
     "iopub.status.busy": "2023-02-12T17:22:12.907752Z",
     "iopub.status.idle": "2023-02-12T17:22:12.917219Z",
     "shell.execute_reply": "2023-02-12T17:22:12.916552Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe82416feb0>\n",
       "├── 'a' --> tensor([[-1.0723, -0.1093, -3.5996],\n",
       "│                   [ 0.2824, -1.4736,  0.4451]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe82416f9a0>\n",
       "    └── 'c' --> tensor([[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:12.920361Z",
     "iopub.status.busy": "2023-02-12T17:22:12.919852Z",
     "iopub.status.idle": "2023-02-12T17:22:19.262561Z",
     "shell.execute_reply": "2023-02-12T17:22:19.261537Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 ns ± 0.412 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:19.266907Z",
     "iopub.status.busy": "2023-02-12T17:22:19.266419Z",
     "iopub.status.idle": "2023-02-12T17:22:19.689803Z",
     "shell.execute_reply": "2023-02-12T17:22:19.688875Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:19.693892Z",
     "iopub.status.busy": "2023-02-12T17:22:19.693176Z",
     "iopub.status.idle": "2023-02-12T17:22:19.700848Z",
     "shell.execute_reply": "2023-02-12T17:22:19.700085Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:19.704729Z",
     "iopub.status.busy": "2023-02-12T17:22:19.704187Z",
     "iopub.status.idle": "2023-02-12T17:22:19.711005Z",
     "shell.execute_reply": "2023-02-12T17:22:19.710289Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.6878, -0.0334,  1.2293],\n",
       "        [ 0.6935, -0.6508,  0.0158]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:19.714969Z",
     "iopub.status.busy": "2023-02-12T17:22:19.713960Z",
     "iopub.status.idle": "2023-02-12T17:22:25.269593Z",
     "shell.execute_reply": "2023-02-12T17:22:25.267235Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.5 ns ± 0.893 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:25.273437Z",
     "iopub.status.busy": "2023-02-12T17:22:25.272860Z",
     "iopub.status.idle": "2023-02-12T17:22:25.280613Z",
     "shell.execute_reply": "2023-02-12T17:22:25.279908Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.2017,  0.0075, -0.2302],\n",
       "               [ 1.0406,  0.1865,  0.0732]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:25.289138Z",
     "iopub.status.busy": "2023-02-12T17:22:25.285718Z",
     "iopub.status.idle": "2023-02-12T17:22:30.315820Z",
     "shell.execute_reply": "2023-02-12T17:22:30.314710Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "613 ns ± 6.15 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:30.320328Z",
     "iopub.status.busy": "2023-02-12T17:22:30.319827Z",
     "iopub.status.idle": "2023-02-12T17:22:38.074289Z",
     "shell.execute_reply": "2023-02-12T17:22:38.073307Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "954 ns ± 12 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:38.078681Z",
     "iopub.status.busy": "2023-02-12T17:22:38.078090Z",
     "iopub.status.idle": "2023-02-12T17:22:47.922643Z",
     "shell.execute_reply": "2023-02-12T17:22:47.921544Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.1 µs ± 50.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:47.927558Z",
     "iopub.status.busy": "2023-02-12T17:22:47.927060Z",
     "iopub.status.idle": "2023-02-12T17:22:47.932235Z",
     "shell.execute_reply": "2023-02-12T17:22:47.931456Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:47.937113Z",
     "iopub.status.busy": "2023-02-12T17:22:47.936386Z",
     "iopub.status.idle": "2023-02-12T17:22:49.630347Z",
     "shell.execute_reply": "2023-02-12T17:22:49.629633Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "206 µs ± 9.97 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:22:49.633942Z",
     "iopub.status.busy": "2023-02-12T17:22:49.633396Z",
     "iopub.status.idle": "2023-02-12T17:23:03.297529Z",
     "shell.execute_reply": "2023-02-12T17:23:03.296569Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 949 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:03.301337Z",
     "iopub.status.busy": "2023-02-12T17:23:03.300767Z",
     "iopub.status.idle": "2023-02-12T17:23:03.305084Z",
     "shell.execute_reply": "2023-02-12T17:23:03.304224Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:03.308261Z",
     "iopub.status.busy": "2023-02-12T17:23:03.307824Z",
     "iopub.status.idle": "2023-02-12T17:23:03.317432Z",
     "shell.execute_reply": "2023-02-12T17:23:03.316723Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe8200e7ac0>\n",
       "├── 'a' --> tensor([[[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]],\n",
       "│           \n",
       "│                   [[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]],\n",
       "│           \n",
       "│                   [[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]],\n",
       "│           \n",
       "│                   [[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]],\n",
       "│           \n",
       "│                   [[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]],\n",
       "│           \n",
       "│                   [[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]],\n",
       "│           \n",
       "│                   [[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]],\n",
       "│           \n",
       "│                   [[ 0.6878, -0.0334,  1.2293],\n",
       "│                    [ 0.6935, -0.6508,  0.0158]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe774dc31f0>\n",
       "    └── 'c' --> tensor([[[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "                \n",
       "                        [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "                \n",
       "                        [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "                \n",
       "                        [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "                \n",
       "                        [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "                \n",
       "                        [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "                \n",
       "                        [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "                \n",
       "                        [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                         [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                         [-0.4267,  0.9315,  0.4827,  0.8824]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:03.320545Z",
     "iopub.status.busy": "2023-02-12T17:23:03.320036Z",
     "iopub.status.idle": "2023-02-12T17:23:06.330793Z",
     "shell.execute_reply": "2023-02-12T17:23:06.329009Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37 µs ± 198 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:06.334966Z",
     "iopub.status.busy": "2023-02-12T17:23:06.334236Z",
     "iopub.status.idle": "2023-02-12T17:23:06.345174Z",
     "shell.execute_reply": "2023-02-12T17:23:06.344446Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe774de5f40>\n",
       "├── 'a' --> tensor([[ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158],\n",
       "│                   [ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158],\n",
       "│                   [ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158],\n",
       "│                   [ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158],\n",
       "│                   [ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158],\n",
       "│                   [ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158],\n",
       "│                   [ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158],\n",
       "│                   [ 0.6878, -0.0334,  1.2293],\n",
       "│                   [ 0.6935, -0.6508,  0.0158]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe774de6f40>\n",
       "    └── 'c' --> tensor([[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                        [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                        [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                        [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                        [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                        [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                        [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                        [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                        [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                        [-0.4267,  0.9315,  0.4827,  0.8824]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:06.349052Z",
     "iopub.status.busy": "2023-02-12T17:23:06.348619Z",
     "iopub.status.idle": "2023-02-12T17:23:09.314562Z",
     "shell.execute_reply": "2023-02-12T17:23:09.313538Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 µs ± 1.49 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:09.318431Z",
     "iopub.status.busy": "2023-02-12T17:23:09.317748Z",
     "iopub.status.idle": "2023-02-12T17:23:14.610559Z",
     "shell.execute_reply": "2023-02-12T17:23:14.609813Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65 µs ± 379 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:14.614958Z",
     "iopub.status.busy": "2023-02-12T17:23:14.614228Z",
     "iopub.status.idle": "2023-02-12T17:23:14.623973Z",
     "shell.execute_reply": "2023-02-12T17:23:14.623098Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "              \n",
       "                      [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "              \n",
       "                      [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "              \n",
       "                      [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "              \n",
       "                      [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "              \n",
       "                      [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "              \n",
       "                      [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]],\n",
       "              \n",
       "                      [[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                       [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                       [-0.4267,  0.9315,  0.4827,  0.8824]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]],\n",
       "       \n",
       "               [[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]],\n",
       "       \n",
       "               [[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]],\n",
       "       \n",
       "               [[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]],\n",
       "       \n",
       "               [[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]],\n",
       "       \n",
       "               [[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]],\n",
       "       \n",
       "               [[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]],\n",
       "       \n",
       "               [[ 0.6878, -0.0334,  1.2293],\n",
       "                [ 0.6935, -0.6508,  0.0158]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:14.627489Z",
     "iopub.status.busy": "2023-02-12T17:23:14.626801Z",
     "iopub.status.idle": "2023-02-12T17:23:17.360231Z",
     "shell.execute_reply": "2023-02-12T17:23:17.359180Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "330 µs ± 1.52 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:17.364169Z",
     "iopub.status.busy": "2023-02-12T17:23:17.363731Z",
     "iopub.status.idle": "2023-02-12T17:23:17.374109Z",
     "shell.execute_reply": "2023-02-12T17:23:17.373403Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                      [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                      [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                      [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                      [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                      [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                      [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824],\n",
       "                      [-0.2535,  0.8150,  0.2030,  0.2098],\n",
       "                      [-1.9460,  0.0126, -0.7483,  0.6078],\n",
       "                      [-0.4267,  0.9315,  0.4827,  0.8824]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158],\n",
       "               [ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158],\n",
       "               [ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158],\n",
       "               [ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158],\n",
       "               [ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158],\n",
       "               [ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158],\n",
       "               [ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158],\n",
       "               [ 0.6878, -0.0334,  1.2293],\n",
       "               [ 0.6935, -0.6508,  0.0158]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:17.377712Z",
     "iopub.status.busy": "2023-02-12T17:23:17.377190Z",
     "iopub.status.idle": "2023-02-12T17:23:30.749637Z",
     "shell.execute_reply": "2023-02-12T17:23:30.748430Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "165 µs ± 818 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-12T17:23:30.753632Z",
     "iopub.status.busy": "2023-02-12T17:23:30.753159Z",
     "iopub.status.idle": "2023-02-12T17:23:33.858318Z",
     "shell.execute_reply": "2023-02-12T17:23:33.857590Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "381 µs ± 2.19 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
