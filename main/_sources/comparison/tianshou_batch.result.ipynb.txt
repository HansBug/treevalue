{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:39.356385Z",
     "iopub.status.busy": "2023-01-20T08:50:39.355997Z",
     "iopub.status.idle": "2023-01-20T08:50:40.256288Z",
     "shell.execute_reply": "2023-01-20T08:50:40.255293Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:40.259743Z",
     "iopub.status.busy": "2023-01-20T08:50:40.259250Z",
     "iopub.status.idle": "2023-01-20T08:50:40.291551Z",
     "shell.execute_reply": "2023-01-20T08:50:40.290661Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:40.294236Z",
     "iopub.status.busy": "2023-01-20T08:50:40.294025Z",
     "iopub.status.idle": "2023-01-20T08:50:40.304226Z",
     "shell.execute_reply": "2023-01-20T08:50:40.303635Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f66d87eb2e0>\n",
       "├── 'a' --> tensor([[-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756]])\n",
       "└── 'x' --> <FastTreeValue 0x7f66aff75160>\n",
       "    └── 'c' --> tensor([[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:40.307506Z",
     "iopub.status.busy": "2023-01-20T08:50:40.307031Z",
     "iopub.status.idle": "2023-01-20T08:50:40.311565Z",
     "shell.execute_reply": "2023-01-20T08:50:40.310951Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.5305,  0.0568,  2.2270],\n",
       "        [-0.3141,  0.0712,  0.9756]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:40.314808Z",
     "iopub.status.busy": "2023-01-20T08:50:40.314469Z",
     "iopub.status.idle": "2023-01-20T08:50:45.451327Z",
     "shell.execute_reply": "2023-01-20T08:50:45.450752Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.3 ns ± 0.0413 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:45.454723Z",
     "iopub.status.busy": "2023-01-20T08:50:45.454148Z",
     "iopub.status.idle": "2023-01-20T08:50:45.460176Z",
     "shell.execute_reply": "2023-01-20T08:50:45.459532Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f66d87eb2e0>\n",
       "├── 'a' --> tensor([[-0.1896, -0.7142,  0.7458],\n",
       "│                   [ 0.0411,  2.1006, -0.5813]])\n",
       "└── 'x' --> <FastTreeValue 0x7f66aff75160>\n",
       "    └── 'c' --> tensor([[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:45.462756Z",
     "iopub.status.busy": "2023-01-20T08:50:45.462544Z",
     "iopub.status.idle": "2023-01-20T08:50:50.235579Z",
     "shell.execute_reply": "2023-01-20T08:50:50.234516Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.8 ns ± 0.0229 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:50.238621Z",
     "iopub.status.busy": "2023-01-20T08:50:50.238393Z",
     "iopub.status.idle": "2023-01-20T08:50:50.566457Z",
     "shell.execute_reply": "2023-01-20T08:50:50.565602Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:50.569935Z",
     "iopub.status.busy": "2023-01-20T08:50:50.569296Z",
     "iopub.status.idle": "2023-01-20T08:50:50.576315Z",
     "shell.execute_reply": "2023-01-20T08:50:50.575268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:50.579427Z",
     "iopub.status.busy": "2023-01-20T08:50:50.579092Z",
     "iopub.status.idle": "2023-01-20T08:50:50.584428Z",
     "shell.execute_reply": "2023-01-20T08:50:50.583807Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.5305,  0.0568,  2.2270],\n",
       "        [-0.3141,  0.0712,  0.9756]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:50.587255Z",
     "iopub.status.busy": "2023-01-20T08:50:50.586908Z",
     "iopub.status.idle": "2023-01-20T08:50:55.409886Z",
     "shell.execute_reply": "2023-01-20T08:50:55.409294Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.6 ns ± 0.0207 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:55.412827Z",
     "iopub.status.busy": "2023-01-20T08:50:55.412598Z",
     "iopub.status.idle": "2023-01-20T08:50:55.418298Z",
     "shell.execute_reply": "2023-01-20T08:50:55.417659Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.4810, -0.8100,  1.1806],\n",
       "               [ 1.0253, -1.4430, -0.1589]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:55.420853Z",
     "iopub.status.busy": "2023-01-20T08:50:55.420642Z",
     "iopub.status.idle": "2023-01-20T08:50:59.410986Z",
     "shell.execute_reply": "2023-01-20T08:50:59.410408Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "491 ns ± 0.105 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:50:59.414276Z",
     "iopub.status.busy": "2023-01-20T08:50:59.414058Z",
     "iopub.status.idle": "2023-01-20T08:51:06.320879Z",
     "shell.execute_reply": "2023-01-20T08:51:06.320293Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "849 ns ± 0.132 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:06.324035Z",
     "iopub.status.busy": "2023-01-20T08:51:06.323601Z",
     "iopub.status.idle": "2023-01-20T08:51:15.634224Z",
     "shell.execute_reply": "2023-01-20T08:51:15.633634Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.5 µs ± 26.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:15.637367Z",
     "iopub.status.busy": "2023-01-20T08:51:15.637004Z",
     "iopub.status.idle": "2023-01-20T08:51:15.640148Z",
     "shell.execute_reply": "2023-01-20T08:51:15.639504Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:15.642988Z",
     "iopub.status.busy": "2023-01-20T08:51:15.642773Z",
     "iopub.status.idle": "2023-01-20T08:51:26.837258Z",
     "shell.execute_reply": "2023-01-20T08:51:26.836702Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 2.96 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:26.840400Z",
     "iopub.status.busy": "2023-01-20T08:51:26.840050Z",
     "iopub.status.idle": "2023-01-20T08:51:37.988566Z",
     "shell.execute_reply": "2023-01-20T08:51:37.988017Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 610 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:37.992005Z",
     "iopub.status.busy": "2023-01-20T08:51:37.991746Z",
     "iopub.status.idle": "2023-01-20T08:51:37.995537Z",
     "shell.execute_reply": "2023-01-20T08:51:37.994910Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:37.998157Z",
     "iopub.status.busy": "2023-01-20T08:51:37.997937Z",
     "iopub.status.idle": "2023-01-20T08:51:38.005068Z",
     "shell.execute_reply": "2023-01-20T08:51:38.004416Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f66acc74130>\n",
       "├── 'a' --> tensor([[[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]],\n",
       "│           \n",
       "│                   [[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]],\n",
       "│           \n",
       "│                   [[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]],\n",
       "│           \n",
       "│                   [[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]],\n",
       "│           \n",
       "│                   [[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]],\n",
       "│           \n",
       "│                   [[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]],\n",
       "│           \n",
       "│                   [[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]],\n",
       "│           \n",
       "│                   [[-0.5305,  0.0568,  2.2270],\n",
       "│                    [-0.3141,  0.0712,  0.9756]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f66acc74940>\n",
       "    └── 'c' --> tensor([[[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "                \n",
       "                        [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "                \n",
       "                        [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "                \n",
       "                        [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "                \n",
       "                        [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "                \n",
       "                        [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "                \n",
       "                        [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "                \n",
       "                        [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                         [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                         [ 0.1230,  1.6142, -0.8124,  0.9983]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:38.007614Z",
     "iopub.status.busy": "2023-01-20T08:51:38.007393Z",
     "iopub.status.idle": "2023-01-20T08:51:40.664711Z",
     "shell.execute_reply": "2023-01-20T08:51:40.663660Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.6 µs ± 76.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:40.668310Z",
     "iopub.status.busy": "2023-01-20T08:51:40.667936Z",
     "iopub.status.idle": "2023-01-20T08:51:40.676392Z",
     "shell.execute_reply": "2023-01-20T08:51:40.675460Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f662ff80a90>\n",
       "├── 'a' --> tensor([[-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756],\n",
       "│                   [-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756],\n",
       "│                   [-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756],\n",
       "│                   [-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756],\n",
       "│                   [-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756],\n",
       "│                   [-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756],\n",
       "│                   [-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756],\n",
       "│                   [-0.5305,  0.0568,  2.2270],\n",
       "│                   [-0.3141,  0.0712,  0.9756]])\n",
       "└── 'x' --> <FastTreeValue 0x7f662ff804c0>\n",
       "    └── 'c' --> tensor([[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                        [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                        [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                        [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                        [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                        [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                        [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                        [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                        [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                        [ 0.1230,  1.6142, -0.8124,  0.9983]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:40.679043Z",
     "iopub.status.busy": "2023-01-20T08:51:40.678836Z",
     "iopub.status.idle": "2023-01-20T08:51:43.169837Z",
     "shell.execute_reply": "2023-01-20T08:51:43.169235Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.6 µs ± 296 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:43.172853Z",
     "iopub.status.busy": "2023-01-20T08:51:43.172403Z",
     "iopub.status.idle": "2023-01-20T08:51:47.758784Z",
     "shell.execute_reply": "2023-01-20T08:51:47.758109Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.4 µs ± 56.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:47.762059Z",
     "iopub.status.busy": "2023-01-20T08:51:47.761505Z",
     "iopub.status.idle": "2023-01-20T08:51:47.768764Z",
     "shell.execute_reply": "2023-01-20T08:51:47.768127Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "              \n",
       "                      [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "              \n",
       "                      [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "              \n",
       "                      [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "              \n",
       "                      [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "              \n",
       "                      [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "              \n",
       "                      [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]],\n",
       "              \n",
       "                      [[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                       [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                       [ 0.1230,  1.6142, -0.8124,  0.9983]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]],\n",
       "       \n",
       "               [[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]],\n",
       "       \n",
       "               [[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]],\n",
       "       \n",
       "               [[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]],\n",
       "       \n",
       "               [[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]],\n",
       "       \n",
       "               [[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]],\n",
       "       \n",
       "               [[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]],\n",
       "       \n",
       "               [[-0.5305,  0.0568,  2.2270],\n",
       "                [-0.3141,  0.0712,  0.9756]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:47.771409Z",
     "iopub.status.busy": "2023-01-20T08:51:47.771200Z",
     "iopub.status.idle": "2023-01-20T08:51:54.118885Z",
     "shell.execute_reply": "2023-01-20T08:51:54.118306Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.2 µs ± 162 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:54.121921Z",
     "iopub.status.busy": "2023-01-20T08:51:54.121699Z",
     "iopub.status.idle": "2023-01-20T08:51:54.128218Z",
     "shell.execute_reply": "2023-01-20T08:51:54.127567Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                      [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                      [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                      [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                      [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                      [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                      [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983],\n",
       "                      [ 0.5222, -0.0936, -0.3602, -1.5169],\n",
       "                      [ 0.1019,  0.9881, -0.6978,  0.7938],\n",
       "                      [ 0.1230,  1.6142, -0.8124,  0.9983]]),\n",
       "       ),\n",
       "    a: tensor([[-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756],\n",
       "               [-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756],\n",
       "               [-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756],\n",
       "               [-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756],\n",
       "               [-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756],\n",
       "               [-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756],\n",
       "               [-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756],\n",
       "               [-0.5305,  0.0568,  2.2270],\n",
       "               [-0.3141,  0.0712,  0.9756]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:51:54.130923Z",
     "iopub.status.busy": "2023-01-20T08:51:54.130699Z",
     "iopub.status.idle": "2023-01-20T08:52:05.668622Z",
     "shell.execute_reply": "2023-01-20T08:52:05.667632Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 163 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T08:52:05.671849Z",
     "iopub.status.busy": "2023-01-20T08:52:05.671608Z",
     "iopub.status.idle": "2023-01-20T08:52:08.205301Z",
     "shell.execute_reply": "2023-01-20T08:52:08.204715Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "311 µs ± 1.37 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
