{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:36.378444Z",
     "iopub.status.busy": "2023-01-20T09:07:36.377932Z",
     "iopub.status.idle": "2023-01-20T09:07:37.599998Z",
     "shell.execute_reply": "2023-01-20T09:07:37.598722Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:37.605785Z",
     "iopub.status.busy": "2023-01-20T09:07:37.605275Z",
     "iopub.status.idle": "2023-01-20T09:07:37.648742Z",
     "shell.execute_reply": "2023-01-20T09:07:37.647768Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:37.653561Z",
     "iopub.status.busy": "2023-01-20T09:07:37.653285Z",
     "iopub.status.idle": "2023-01-20T09:07:37.664000Z",
     "shell.execute_reply": "2023-01-20T09:07:37.662974Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9a300b5d60>\n",
       "├── 'a' --> tensor([[ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9a300b0730>\n",
       "    └── 'c' --> tensor([[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:37.668665Z",
     "iopub.status.busy": "2023-01-20T09:07:37.668355Z",
     "iopub.status.idle": "2023-01-20T09:07:37.677210Z",
     "shell.execute_reply": "2023-01-20T09:07:37.676078Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.8233,  1.8797,  0.5529],\n",
       "        [ 0.8785,  0.0226, -0.0291]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:37.681257Z",
     "iopub.status.busy": "2023-01-20T09:07:37.680910Z",
     "iopub.status.idle": "2023-01-20T09:07:43.708039Z",
     "shell.execute_reply": "2023-01-20T09:07:43.706213Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.3 ns ± 1.28 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:43.711933Z",
     "iopub.status.busy": "2023-01-20T09:07:43.711652Z",
     "iopub.status.idle": "2023-01-20T09:07:43.722113Z",
     "shell.execute_reply": "2023-01-20T09:07:43.721095Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9a300b5d60>\n",
       "├── 'a' --> tensor([[-0.5936,  0.7525,  0.2261],\n",
       "│                   [-0.3006, -0.8028,  0.5452]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9a300b0730>\n",
       "    └── 'c' --> tensor([[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:43.725685Z",
     "iopub.status.busy": "2023-01-20T09:07:43.725430Z",
     "iopub.status.idle": "2023-01-20T09:07:49.795461Z",
     "shell.execute_reply": "2023-01-20T09:07:49.793401Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.9 ns ± 0.947 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:49.799881Z",
     "iopub.status.busy": "2023-01-20T09:07:49.799599Z",
     "iopub.status.idle": "2023-01-20T09:07:50.241588Z",
     "shell.execute_reply": "2023-01-20T09:07:50.240572Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:50.246448Z",
     "iopub.status.busy": "2023-01-20T09:07:50.246020Z",
     "iopub.status.idle": "2023-01-20T09:07:50.253307Z",
     "shell.execute_reply": "2023-01-20T09:07:50.252344Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:50.257184Z",
     "iopub.status.busy": "2023-01-20T09:07:50.256745Z",
     "iopub.status.idle": "2023-01-20T09:07:50.262840Z",
     "shell.execute_reply": "2023-01-20T09:07:50.261982Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.8233,  1.8797,  0.5529],\n",
       "        [ 0.8785,  0.0226, -0.0291]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:50.266351Z",
     "iopub.status.busy": "2023-01-20T09:07:50.266099Z",
     "iopub.status.idle": "2023-01-20T09:07:55.710954Z",
     "shell.execute_reply": "2023-01-20T09:07:55.709867Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.1 ns ± 1.75 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:55.715505Z",
     "iopub.status.busy": "2023-01-20T09:07:55.714759Z",
     "iopub.status.idle": "2023-01-20T09:07:55.724229Z",
     "shell.execute_reply": "2023-01-20T09:07:55.723258Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5407,  0.4479,  0.1974],\n",
       "               [-0.1209, -1.8872, -1.4772]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:07:55.728142Z",
     "iopub.status.busy": "2023-01-20T09:07:55.727874Z",
     "iopub.status.idle": "2023-01-20T09:08:01.072061Z",
     "shell.execute_reply": "2023-01-20T09:08:01.071084Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "659 ns ± 12.4 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:01.078039Z",
     "iopub.status.busy": "2023-01-20T09:08:01.076249Z",
     "iopub.status.idle": "2023-01-20T09:08:09.504905Z",
     "shell.execute_reply": "2023-01-20T09:08:09.504016Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.04 µs ± 15.6 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:09.509106Z",
     "iopub.status.busy": "2023-01-20T09:08:09.508640Z",
     "iopub.status.idle": "2023-01-20T09:08:21.132809Z",
     "shell.execute_reply": "2023-01-20T09:08:21.131859Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.3 µs ± 453 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:21.137248Z",
     "iopub.status.busy": "2023-01-20T09:08:21.136668Z",
     "iopub.status.idle": "2023-01-20T09:08:21.141238Z",
     "shell.execute_reply": "2023-01-20T09:08:21.140355Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:21.145620Z",
     "iopub.status.busy": "2023-01-20T09:08:21.145021Z",
     "iopub.status.idle": "2023-01-20T09:08:23.359040Z",
     "shell.execute_reply": "2023-01-20T09:08:23.358211Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "272 µs ± 20.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:23.363775Z",
     "iopub.status.busy": "2023-01-20T09:08:23.362835Z",
     "iopub.status.idle": "2023-01-20T09:08:25.582175Z",
     "shell.execute_reply": "2023-01-20T09:08:25.581290Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "276 µs ± 16.2 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:25.588340Z",
     "iopub.status.busy": "2023-01-20T09:08:25.586545Z",
     "iopub.status.idle": "2023-01-20T09:08:25.592471Z",
     "shell.execute_reply": "2023-01-20T09:08:25.591353Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:25.596458Z",
     "iopub.status.busy": "2023-01-20T09:08:25.595932Z",
     "iopub.status.idle": "2023-01-20T09:08:25.605899Z",
     "shell.execute_reply": "2023-01-20T09:08:25.604927Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f998947fd30>\n",
       "├── 'a' --> tensor([[[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]],\n",
       "│           \n",
       "│                   [[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]],\n",
       "│           \n",
       "│                   [[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]],\n",
       "│           \n",
       "│                   [[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]],\n",
       "│           \n",
       "│                   [[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]],\n",
       "│           \n",
       "│                   [[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]],\n",
       "│           \n",
       "│                   [[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]],\n",
       "│           \n",
       "│                   [[ 1.8233,  1.8797,  0.5529],\n",
       "│                    [ 0.8785,  0.0226, -0.0291]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f99891e8fd0>\n",
       "    └── 'c' --> tensor([[[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "                \n",
       "                        [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "                \n",
       "                        [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "                \n",
       "                        [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "                \n",
       "                        [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "                \n",
       "                        [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "                \n",
       "                        [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "                \n",
       "                        [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                         [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                         [ 0.3750,  0.3536, -1.1666, -1.0291]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:25.610295Z",
     "iopub.status.busy": "2023-01-20T09:08:25.609681Z",
     "iopub.status.idle": "2023-01-20T09:08:29.620985Z",
     "shell.execute_reply": "2023-01-20T09:08:29.619836Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49.5 µs ± 1.84 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:29.625489Z",
     "iopub.status.busy": "2023-01-20T09:08:29.625150Z",
     "iopub.status.idle": "2023-01-20T09:08:29.635929Z",
     "shell.execute_reply": "2023-01-20T09:08:29.634867Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9a300a6640>\n",
       "├── 'a' --> tensor([[ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291],\n",
       "│                   [ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291],\n",
       "│                   [ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291],\n",
       "│                   [ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291],\n",
       "│                   [ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291],\n",
       "│                   [ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291],\n",
       "│                   [ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291],\n",
       "│                   [ 1.8233,  1.8797,  0.5529],\n",
       "│                   [ 0.8785,  0.0226, -0.0291]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9a30060940>\n",
       "    └── 'c' --> tensor([[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                        [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                        [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                        [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                        [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                        [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                        [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                        [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                        [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                        [ 0.3750,  0.3536, -1.1666, -1.0291]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:29.639917Z",
     "iopub.status.busy": "2023-01-20T09:08:29.639599Z",
     "iopub.status.idle": "2023-01-20T09:08:33.324290Z",
     "shell.execute_reply": "2023-01-20T09:08:33.323397Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44.7 µs ± 5.18 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:33.328284Z",
     "iopub.status.busy": "2023-01-20T09:08:33.327827Z",
     "iopub.status.idle": "2023-01-20T09:08:39.785209Z",
     "shell.execute_reply": "2023-01-20T09:08:39.784236Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.4 µs ± 4.72 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:39.791321Z",
     "iopub.status.busy": "2023-01-20T09:08:39.790472Z",
     "iopub.status.idle": "2023-01-20T09:08:39.800010Z",
     "shell.execute_reply": "2023-01-20T09:08:39.798924Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]],\n",
       "       \n",
       "               [[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]],\n",
       "       \n",
       "               [[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]],\n",
       "       \n",
       "               [[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]],\n",
       "       \n",
       "               [[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]],\n",
       "       \n",
       "               [[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]],\n",
       "       \n",
       "               [[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]],\n",
       "       \n",
       "               [[ 1.8233,  1.8797,  0.5529],\n",
       "                [ 0.8785,  0.0226, -0.0291]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "              \n",
       "                      [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "              \n",
       "                      [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "              \n",
       "                      [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "              \n",
       "                      [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "              \n",
       "                      [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "              \n",
       "                      [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]],\n",
       "              \n",
       "                      [[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                       [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                       [ 0.3750,  0.3536, -1.1666, -1.0291]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:39.804056Z",
     "iopub.status.busy": "2023-01-20T09:08:39.803632Z",
     "iopub.status.idle": "2023-01-20T09:08:48.029314Z",
     "shell.execute_reply": "2023-01-20T09:08:48.028158Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "101 µs ± 4.35 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:48.033431Z",
     "iopub.status.busy": "2023-01-20T09:08:48.032997Z",
     "iopub.status.idle": "2023-01-20T09:08:48.042116Z",
     "shell.execute_reply": "2023-01-20T09:08:48.041142Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291],\n",
       "               [ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291],\n",
       "               [ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291],\n",
       "               [ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291],\n",
       "               [ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291],\n",
       "               [ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291],\n",
       "               [ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291],\n",
       "               [ 1.8233,  1.8797,  0.5529],\n",
       "               [ 0.8785,  0.0226, -0.0291]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                      [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                      [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                      [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                      [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                      [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                      [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291],\n",
       "                      [-1.8315,  0.0333, -0.8968,  0.2700],\n",
       "                      [ 0.7539, -0.5187, -1.1926,  1.4196],\n",
       "                      [ 0.3750,  0.3536, -1.1666, -1.0291]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:08:48.046117Z",
     "iopub.status.busy": "2023-01-20T09:08:48.045553Z",
     "iopub.status.idle": "2023-01-20T09:09:03.073913Z",
     "shell.execute_reply": "2023-01-20T09:09:03.072948Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "184 µs ± 7.39 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-20T09:09:03.078440Z",
     "iopub.status.busy": "2023-01-20T09:09:03.077861Z",
     "iopub.status.idle": "2023-01-20T09:09:07.814955Z",
     "shell.execute_reply": "2023-01-20T09:09:07.814023Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "591 µs ± 83.5 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
