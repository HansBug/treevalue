{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:31.317659Z",
     "iopub.status.busy": "2023-02-27T08:18:31.317293Z",
     "iopub.status.idle": "2023-02-27T08:18:32.723356Z",
     "shell.execute_reply": "2023-02-27T08:18:32.722297Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:32.728544Z",
     "iopub.status.busy": "2023-02-27T08:18:32.727899Z",
     "iopub.status.idle": "2023-02-27T08:18:33.145356Z",
     "shell.execute_reply": "2023-02-27T08:18:33.144188Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:33.150144Z",
     "iopub.status.busy": "2023-02-27T08:18:33.149683Z",
     "iopub.status.idle": "2023-02-27T08:18:33.164886Z",
     "shell.execute_reply": "2023-02-27T08:18:33.163905Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5374f0efa0>\n",
       "├── 'a' --> tensor([[-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5374f0e160>\n",
       "    └── 'c' --> tensor([[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:33.169702Z",
     "iopub.status.busy": "2023-02-27T08:18:33.169038Z",
     "iopub.status.idle": "2023-02-27T08:18:33.177688Z",
     "shell.execute_reply": "2023-02-27T08:18:33.176607Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.1131,  1.1599, -1.0047],\n",
       "        [ 0.2957,  0.9710, -0.5843]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:33.181767Z",
     "iopub.status.busy": "2023-02-27T08:18:33.181218Z",
     "iopub.status.idle": "2023-02-27T08:18:39.956876Z",
     "shell.execute_reply": "2023-02-27T08:18:39.955789Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.7 ns ± 0.614 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:39.961298Z",
     "iopub.status.busy": "2023-02-27T08:18:39.960622Z",
     "iopub.status.idle": "2023-02-27T08:18:39.970398Z",
     "shell.execute_reply": "2023-02-27T08:18:39.969357Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5374f0efa0>\n",
       "├── 'a' --> tensor([[-0.9958, -0.4824,  0.3217],\n",
       "│                   [-0.6671,  0.3794, -0.6759]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5374f0e160>\n",
       "    └── 'c' --> tensor([[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:39.974727Z",
     "iopub.status.busy": "2023-02-27T08:18:39.974096Z",
     "iopub.status.idle": "2023-02-27T08:18:47.196676Z",
     "shell.execute_reply": "2023-02-27T08:18:47.195577Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89.2 ns ± 0.891 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:47.201259Z",
     "iopub.status.busy": "2023-02-27T08:18:47.200552Z",
     "iopub.status.idle": "2023-02-27T08:18:47.733594Z",
     "shell.execute_reply": "2023-02-27T08:18:47.732351Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:47.738547Z",
     "iopub.status.busy": "2023-02-27T08:18:47.738029Z",
     "iopub.status.idle": "2023-02-27T08:18:47.747916Z",
     "shell.execute_reply": "2023-02-27T08:18:47.746961Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:47.752657Z",
     "iopub.status.busy": "2023-02-27T08:18:47.752002Z",
     "iopub.status.idle": "2023-02-27T08:18:47.761414Z",
     "shell.execute_reply": "2023-02-27T08:18:47.760402Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.1131,  1.1599, -1.0047],\n",
       "        [ 0.2957,  0.9710, -0.5843]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:47.765773Z",
     "iopub.status.busy": "2023-02-27T08:18:47.765117Z",
     "iopub.status.idle": "2023-02-27T08:18:53.482849Z",
     "shell.execute_reply": "2023-02-27T08:18:53.481620Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.7 ns ± 0.824 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:53.486959Z",
     "iopub.status.busy": "2023-02-27T08:18:53.486342Z",
     "iopub.status.idle": "2023-02-27T08:18:53.496069Z",
     "shell.execute_reply": "2023-02-27T08:18:53.495046Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9120, -1.3238, -1.9095],\n",
       "               [ 0.8458, -0.5200,  1.8140]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:53.499901Z",
     "iopub.status.busy": "2023-02-27T08:18:53.499525Z",
     "iopub.status.idle": "2023-02-27T08:18:58.817425Z",
     "shell.execute_reply": "2023-02-27T08:18:58.816440Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "652 ns ± 5.27 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:18:58.822137Z",
     "iopub.status.busy": "2023-02-27T08:18:58.821267Z",
     "iopub.status.idle": "2023-02-27T08:19:08.047381Z",
     "shell.execute_reply": "2023-02-27T08:19:08.046428Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.14 µs ± 18.6 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:08.052471Z",
     "iopub.status.busy": "2023-02-27T08:19:08.051497Z",
     "iopub.status.idle": "2023-02-27T08:19:20.354257Z",
     "shell.execute_reply": "2023-02-27T08:19:20.353101Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15.1 µs ± 91.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:20.358246Z",
     "iopub.status.busy": "2023-02-27T08:19:20.357644Z",
     "iopub.status.idle": "2023-02-27T08:19:20.363293Z",
     "shell.execute_reply": "2023-02-27T08:19:20.362357Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:20.368008Z",
     "iopub.status.busy": "2023-02-27T08:19:20.367289Z",
     "iopub.status.idle": "2023-02-27T08:19:22.621770Z",
     "shell.execute_reply": "2023-02-27T08:19:22.620433Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "274 µs ± 10.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:22.626113Z",
     "iopub.status.busy": "2023-02-27T08:19:22.625466Z",
     "iopub.status.idle": "2023-02-27T08:19:24.702420Z",
     "shell.execute_reply": "2023-02-27T08:19:24.701523Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "255 µs ± 8.31 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:24.706805Z",
     "iopub.status.busy": "2023-02-27T08:19:24.705764Z",
     "iopub.status.idle": "2023-02-27T08:19:24.711980Z",
     "shell.execute_reply": "2023-02-27T08:19:24.710951Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:24.716199Z",
     "iopub.status.busy": "2023-02-27T08:19:24.715588Z",
     "iopub.status.idle": "2023-02-27T08:19:24.725676Z",
     "shell.execute_reply": "2023-02-27T08:19:24.724707Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5374e98340>\n",
       "├── 'a' --> tensor([[[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]],\n",
       "│           \n",
       "│                   [[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]],\n",
       "│           \n",
       "│                   [[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]],\n",
       "│           \n",
       "│                   [[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]],\n",
       "│           \n",
       "│                   [[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]],\n",
       "│           \n",
       "│                   [[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]],\n",
       "│           \n",
       "│                   [[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]],\n",
       "│           \n",
       "│                   [[-1.1131,  1.1599, -1.0047],\n",
       "│                    [ 0.2957,  0.9710, -0.5843]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5374e98820>\n",
       "    └── 'c' --> tensor([[[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "                \n",
       "                        [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "                \n",
       "                        [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "                \n",
       "                        [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "                \n",
       "                        [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "                \n",
       "                        [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "                \n",
       "                        [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "                \n",
       "                        [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                         [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                         [ 0.0912, -0.0262, -0.0694,  2.1092]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:24.730484Z",
     "iopub.status.busy": "2023-02-27T08:19:24.729749Z",
     "iopub.status.idle": "2023-02-27T08:19:28.515867Z",
     "shell.execute_reply": "2023-02-27T08:19:28.514304Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46.5 µs ± 796 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:28.520446Z",
     "iopub.status.busy": "2023-02-27T08:19:28.520081Z",
     "iopub.status.idle": "2023-02-27T08:19:28.533520Z",
     "shell.execute_reply": "2023-02-27T08:19:28.532428Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f52be146100>\n",
       "├── 'a' --> tensor([[-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843],\n",
       "│                   [-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843],\n",
       "│                   [-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843],\n",
       "│                   [-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843],\n",
       "│                   [-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843],\n",
       "│                   [-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843],\n",
       "│                   [-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843],\n",
       "│                   [-1.1131,  1.1599, -1.0047],\n",
       "│                   [ 0.2957,  0.9710, -0.5843]])\n",
       "└── 'x' --> <FastTreeValue 0x7f535063a2b0>\n",
       "    └── 'c' --> tensor([[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                        [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                        [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                        [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                        [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                        [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                        [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                        [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                        [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                        [ 0.0912, -0.0262, -0.0694,  2.1092]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:28.537588Z",
     "iopub.status.busy": "2023-02-27T08:19:28.537228Z",
     "iopub.status.idle": "2023-02-27T08:19:32.069336Z",
     "shell.execute_reply": "2023-02-27T08:19:32.068151Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43.7 µs ± 924 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:32.073287Z",
     "iopub.status.busy": "2023-02-27T08:19:32.072960Z",
     "iopub.status.idle": "2023-02-27T08:19:38.869630Z",
     "shell.execute_reply": "2023-02-27T08:19:38.868515Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "83.7 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:38.874362Z",
     "iopub.status.busy": "2023-02-27T08:19:38.873704Z",
     "iopub.status.idle": "2023-02-27T08:19:38.885471Z",
     "shell.execute_reply": "2023-02-27T08:19:38.884387Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]],\n",
       "       \n",
       "               [[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]],\n",
       "       \n",
       "               [[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]],\n",
       "       \n",
       "               [[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]],\n",
       "       \n",
       "               [[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]],\n",
       "       \n",
       "               [[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]],\n",
       "       \n",
       "               [[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]],\n",
       "       \n",
       "               [[-1.1131,  1.1599, -1.0047],\n",
       "                [ 0.2957,  0.9710, -0.5843]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "              \n",
       "                      [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "              \n",
       "                      [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "              \n",
       "                      [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "              \n",
       "                      [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "              \n",
       "                      [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "              \n",
       "                      [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]],\n",
       "              \n",
       "                      [[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                       [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                       [ 0.0912, -0.0262, -0.0694,  2.1092]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:38.889803Z",
     "iopub.status.busy": "2023-02-27T08:19:38.888904Z",
     "iopub.status.idle": "2023-02-27T08:19:47.853605Z",
     "shell.execute_reply": "2023-02-27T08:19:47.852010Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "110 µs ± 1.67 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:47.857965Z",
     "iopub.status.busy": "2023-02-27T08:19:47.857416Z",
     "iopub.status.idle": "2023-02-27T08:19:47.869252Z",
     "shell.execute_reply": "2023-02-27T08:19:47.868218Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843],\n",
       "               [-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843],\n",
       "               [-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843],\n",
       "               [-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843],\n",
       "               [-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843],\n",
       "               [-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843],\n",
       "               [-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843],\n",
       "               [-1.1131,  1.1599, -1.0047],\n",
       "               [ 0.2957,  0.9710, -0.5843]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                      [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                      [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                      [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                      [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                      [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                      [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092],\n",
       "                      [ 1.3360, -1.8095,  0.5753, -0.8069],\n",
       "                      [-1.0308,  0.4240, -0.6239, -0.2926],\n",
       "                      [ 0.0912, -0.0262, -0.0694,  2.1092]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:19:47.873938Z",
     "iopub.status.busy": "2023-02-27T08:19:47.873127Z",
     "iopub.status.idle": "2023-02-27T08:20:03.762533Z",
     "shell.execute_reply": "2023-02-27T08:20:03.761285Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "195 µs ± 1.32 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:20:03.766745Z",
     "iopub.status.busy": "2023-02-27T08:20:03.766221Z",
     "iopub.status.idle": "2023-02-27T08:20:08.206594Z",
     "shell.execute_reply": "2023-02-27T08:20:08.205553Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "546 µs ± 12.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
