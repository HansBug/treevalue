{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:26.266368Z",
     "iopub.status.busy": "2023-01-19T14:30:26.266091Z",
     "iopub.status.idle": "2023-01-19T14:30:27.287483Z",
     "shell.execute_reply": "2023-01-19T14:30:27.286668Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:27.292437Z",
     "iopub.status.busy": "2023-01-19T14:30:27.291815Z",
     "iopub.status.idle": "2023-01-19T14:30:27.328984Z",
     "shell.execute_reply": "2023-01-19T14:30:27.328197Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:27.333173Z",
     "iopub.status.busy": "2023-01-19T14:30:27.332746Z",
     "iopub.status.idle": "2023-01-19T14:30:27.344952Z",
     "shell.execute_reply": "2023-01-19T14:30:27.344319Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8288a67640>\n",
       "├── 'a' --> tensor([[ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8288a676a0>\n",
       "    └── 'c' --> tensor([[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:27.348770Z",
     "iopub.status.busy": "2023-01-19T14:30:27.348207Z",
     "iopub.status.idle": "2023-01-19T14:30:27.355452Z",
     "shell.execute_reply": "2023-01-19T14:30:27.354830Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.7529, -0.5754, -0.0720],\n",
       "        [ 0.0896, -0.6951, -0.8790]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:27.358834Z",
     "iopub.status.busy": "2023-01-19T14:30:27.358446Z",
     "iopub.status.idle": "2023-01-19T14:30:32.800222Z",
     "shell.execute_reply": "2023-01-19T14:30:32.799453Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67 ns ± 0.0802 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:32.803972Z",
     "iopub.status.busy": "2023-01-19T14:30:32.803459Z",
     "iopub.status.idle": "2023-01-19T14:30:32.810172Z",
     "shell.execute_reply": "2023-01-19T14:30:32.809453Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8288a67640>\n",
       "├── 'a' --> tensor([[-0.1561, -0.1399,  2.6812],\n",
       "│                   [ 0.7328, -2.0681,  0.6336]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8288a676a0>\n",
       "    └── 'c' --> tensor([[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:32.813553Z",
     "iopub.status.busy": "2023-01-19T14:30:32.812914Z",
     "iopub.status.idle": "2023-01-19T14:30:38.095802Z",
     "shell.execute_reply": "2023-01-19T14:30:38.095053Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.1 ns ± 0.0474 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:38.099771Z",
     "iopub.status.busy": "2023-01-19T14:30:38.099027Z",
     "iopub.status.idle": "2023-01-19T14:30:38.476518Z",
     "shell.execute_reply": "2023-01-19T14:30:38.475725Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:38.480718Z",
     "iopub.status.busy": "2023-01-19T14:30:38.480180Z",
     "iopub.status.idle": "2023-01-19T14:30:38.486371Z",
     "shell.execute_reply": "2023-01-19T14:30:38.485664Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:38.489525Z",
     "iopub.status.busy": "2023-01-19T14:30:38.489089Z",
     "iopub.status.idle": "2023-01-19T14:30:38.494075Z",
     "shell.execute_reply": "2023-01-19T14:30:38.493384Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.7529, -0.5754, -0.0720],\n",
       "        [ 0.0896, -0.6951, -0.8790]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:38.497350Z",
     "iopub.status.busy": "2023-01-19T14:30:38.497122Z",
     "iopub.status.idle": "2023-01-19T14:30:43.334698Z",
     "shell.execute_reply": "2023-01-19T14:30:43.333944Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.6 ns ± 0.0535 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:43.339119Z",
     "iopub.status.busy": "2023-01-19T14:30:43.338577Z",
     "iopub.status.idle": "2023-01-19T14:30:43.345113Z",
     "shell.execute_reply": "2023-01-19T14:30:43.344396Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4126,  0.2466,  0.5372],\n",
       "               [-0.7537, -0.5100, -0.0215]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:43.348315Z",
     "iopub.status.busy": "2023-01-19T14:30:43.347833Z",
     "iopub.status.idle": "2023-01-19T14:30:47.358030Z",
     "shell.execute_reply": "2023-01-19T14:30:47.357311Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "493 ns ± 0.167 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:47.361693Z",
     "iopub.status.busy": "2023-01-19T14:30:47.361176Z",
     "iopub.status.idle": "2023-01-19T14:30:54.011947Z",
     "shell.execute_reply": "2023-01-19T14:30:54.010224Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "820 ns ± 0.0737 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:30:54.016103Z",
     "iopub.status.busy": "2023-01-19T14:30:54.015703Z",
     "iopub.status.idle": "2023-01-19T14:31:02.875165Z",
     "shell.execute_reply": "2023-01-19T14:31:02.873530Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 20.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:02.879491Z",
     "iopub.status.busy": "2023-01-19T14:31:02.878840Z",
     "iopub.status.idle": "2023-01-19T14:31:02.882972Z",
     "shell.execute_reply": "2023-01-19T14:31:02.882342Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:02.886621Z",
     "iopub.status.busy": "2023-01-19T14:31:02.886176Z",
     "iopub.status.idle": "2023-01-19T14:31:14.621952Z",
     "shell.execute_reply": "2023-01-19T14:31:14.621307Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 1.46 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:14.625547Z",
     "iopub.status.busy": "2023-01-19T14:31:14.625014Z",
     "iopub.status.idle": "2023-01-19T14:31:26.426765Z",
     "shell.execute_reply": "2023-01-19T14:31:26.426117Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 930 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:26.430376Z",
     "iopub.status.busy": "2023-01-19T14:31:26.429853Z",
     "iopub.status.idle": "2023-01-19T14:31:26.433412Z",
     "shell.execute_reply": "2023-01-19T14:31:26.432853Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:26.436454Z",
     "iopub.status.busy": "2023-01-19T14:31:26.435851Z",
     "iopub.status.idle": "2023-01-19T14:31:26.443543Z",
     "shell.execute_reply": "2023-01-19T14:31:26.442848Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f81dff80e20>\n",
       "├── 'a' --> tensor([[[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]],\n",
       "│           \n",
       "│                   [[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]],\n",
       "│           \n",
       "│                   [[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]],\n",
       "│           \n",
       "│                   [[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]],\n",
       "│           \n",
       "│                   [[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]],\n",
       "│           \n",
       "│                   [[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]],\n",
       "│           \n",
       "│                   [[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]],\n",
       "│           \n",
       "│                   [[ 1.7529, -0.5754, -0.0720],\n",
       "│                    [ 0.0896, -0.6951, -0.8790]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8288a2e700>\n",
       "    └── 'c' --> tensor([[[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "                \n",
       "                        [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "                \n",
       "                        [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "                \n",
       "                        [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "                \n",
       "                        [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "                \n",
       "                        [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "                \n",
       "                        [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "                \n",
       "                        [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                         [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                         [ 0.1470, -0.1327, -0.9774, -0.9220]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:26.447293Z",
     "iopub.status.busy": "2023-01-19T14:31:26.446732Z",
     "iopub.status.idle": "2023-01-19T14:31:29.086349Z",
     "shell.execute_reply": "2023-01-19T14:31:29.085405Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 117 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:29.090668Z",
     "iopub.status.busy": "2023-01-19T14:31:29.090126Z",
     "iopub.status.idle": "2023-01-19T14:31:29.100477Z",
     "shell.execute_reply": "2023-01-19T14:31:29.099772Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8288ad3d30>\n",
       "├── 'a' --> tensor([[ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790],\n",
       "│                   [ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790],\n",
       "│                   [ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790],\n",
       "│                   [ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790],\n",
       "│                   [ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790],\n",
       "│                   [ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790],\n",
       "│                   [ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790],\n",
       "│                   [ 1.7529, -0.5754, -0.0720],\n",
       "│                   [ 0.0896, -0.6951, -0.8790]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8288a6c4c0>\n",
       "    └── 'c' --> tensor([[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                        [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                        [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                        [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                        [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                        [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                        [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                        [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                        [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                        [ 0.1470, -0.1327, -0.9774, -0.9220]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:29.103953Z",
     "iopub.status.busy": "2023-01-19T14:31:29.103478Z",
     "iopub.status.idle": "2023-01-19T14:31:31.595127Z",
     "shell.execute_reply": "2023-01-19T14:31:31.594138Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.6 µs ± 53.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:31.598766Z",
     "iopub.status.busy": "2023-01-19T14:31:31.598369Z",
     "iopub.status.idle": "2023-01-19T14:31:36.145451Z",
     "shell.execute_reply": "2023-01-19T14:31:36.144603Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.9 µs ± 187 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:36.154096Z",
     "iopub.status.busy": "2023-01-19T14:31:36.153559Z",
     "iopub.status.idle": "2023-01-19T14:31:36.161469Z",
     "shell.execute_reply": "2023-01-19T14:31:36.160739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]],\n",
       "       \n",
       "               [[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]],\n",
       "       \n",
       "               [[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]],\n",
       "       \n",
       "               [[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]],\n",
       "       \n",
       "               [[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]],\n",
       "       \n",
       "               [[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]],\n",
       "       \n",
       "               [[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]],\n",
       "       \n",
       "               [[ 1.7529, -0.5754, -0.0720],\n",
       "                [ 0.0896, -0.6951, -0.8790]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "              \n",
       "                      [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "              \n",
       "                      [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "              \n",
       "                      [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "              \n",
       "                      [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "              \n",
       "                      [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "              \n",
       "                      [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]],\n",
       "              \n",
       "                      [[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                       [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                       [ 0.1470, -0.1327, -0.9774, -0.9220]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:36.164831Z",
     "iopub.status.busy": "2023-01-19T14:31:36.164251Z",
     "iopub.status.idle": "2023-01-19T14:31:42.618105Z",
     "shell.execute_reply": "2023-01-19T14:31:42.616673Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.3 µs ± 258 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:42.621730Z",
     "iopub.status.busy": "2023-01-19T14:31:42.621254Z",
     "iopub.status.idle": "2023-01-19T14:31:42.629662Z",
     "shell.execute_reply": "2023-01-19T14:31:42.629012Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790],\n",
       "               [ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790],\n",
       "               [ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790],\n",
       "               [ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790],\n",
       "               [ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790],\n",
       "               [ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790],\n",
       "               [ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790],\n",
       "               [ 1.7529, -0.5754, -0.0720],\n",
       "               [ 0.0896, -0.6951, -0.8790]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                      [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                      [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                      [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                      [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                      [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                      [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220],\n",
       "                      [-0.2025,  0.0488, -0.1097, -1.0921],\n",
       "                      [-1.8141,  1.0614, -0.1761,  0.4995],\n",
       "                      [ 0.1470, -0.1327, -0.9774, -0.9220]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:42.633059Z",
     "iopub.status.busy": "2023-01-19T14:31:42.632366Z",
     "iopub.status.idle": "2023-01-19T14:31:54.523496Z",
     "shell.execute_reply": "2023-01-19T14:31:54.522755Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 182 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-19T14:31:54.527119Z",
     "iopub.status.busy": "2023-01-19T14:31:54.526587Z",
     "iopub.status.idle": "2023-01-19T14:31:57.194547Z",
     "shell.execute_reply": "2023-01-19T14:31:57.193865Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "328 µs ± 1.65 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
