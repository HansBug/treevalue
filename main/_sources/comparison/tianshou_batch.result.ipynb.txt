{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:13.570323Z",
     "iopub.status.busy": "2023-01-29T03:50:13.570077Z",
     "iopub.status.idle": "2023-01-29T03:50:14.467039Z",
     "shell.execute_reply": "2023-01-29T03:50:14.465925Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:14.470401Z",
     "iopub.status.busy": "2023-01-29T03:50:14.469743Z",
     "iopub.status.idle": "2023-01-29T03:50:14.502296Z",
     "shell.execute_reply": "2023-01-29T03:50:14.501698Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:14.505057Z",
     "iopub.status.busy": "2023-01-29T03:50:14.504489Z",
     "iopub.status.idle": "2023-01-29T03:50:14.513717Z",
     "shell.execute_reply": "2023-01-29T03:50:14.513137Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0ec811a040>\n",
       "├── 'a' --> tensor([[-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0ec811a220>\n",
       "    └── 'c' --> tensor([[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:14.516593Z",
     "iopub.status.busy": "2023-01-29T03:50:14.516125Z",
     "iopub.status.idle": "2023-01-29T03:50:14.521635Z",
     "shell.execute_reply": "2023-01-29T03:50:14.521059Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2233,  0.9625,  0.4440],\n",
       "        [-2.0153, -0.4831, -0.5670]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:14.524116Z",
     "iopub.status.busy": "2023-01-29T03:50:14.523782Z",
     "iopub.status.idle": "2023-01-29T03:50:19.336499Z",
     "shell.execute_reply": "2023-01-29T03:50:19.335781Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.3 ns ± 0.0625 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:19.339835Z",
     "iopub.status.busy": "2023-01-29T03:50:19.339190Z",
     "iopub.status.idle": "2023-01-29T03:50:19.345162Z",
     "shell.execute_reply": "2023-01-29T03:50:19.344549Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0ec811a040>\n",
       "├── 'a' --> tensor([[-0.0774,  0.3797,  0.8133],\n",
       "│                   [-0.0328,  2.1209,  1.4996]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0ec811a220>\n",
       "    └── 'c' --> tensor([[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:19.347643Z",
     "iopub.status.busy": "2023-01-29T03:50:19.347301Z",
     "iopub.status.idle": "2023-01-29T03:50:24.174143Z",
     "shell.execute_reply": "2023-01-29T03:50:24.173417Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.5 ns ± 0.0172 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:24.177384Z",
     "iopub.status.busy": "2023-01-29T03:50:24.176913Z",
     "iopub.status.idle": "2023-01-29T03:50:24.501695Z",
     "shell.execute_reply": "2023-01-29T03:50:24.500737Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:24.504776Z",
     "iopub.status.busy": "2023-01-29T03:50:24.504280Z",
     "iopub.status.idle": "2023-01-29T03:50:24.510507Z",
     "shell.execute_reply": "2023-01-29T03:50:24.509904Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:24.513124Z",
     "iopub.status.busy": "2023-01-29T03:50:24.512799Z",
     "iopub.status.idle": "2023-01-29T03:50:24.517565Z",
     "shell.execute_reply": "2023-01-29T03:50:24.516922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2233,  0.9625,  0.4440],\n",
       "        [-2.0153, -0.4831, -0.5670]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:24.520490Z",
     "iopub.status.busy": "2023-01-29T03:50:24.519981Z",
     "iopub.status.idle": "2023-01-29T03:50:29.033825Z",
     "shell.execute_reply": "2023-01-29T03:50:29.033113Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.3 ns ± 0.0405 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:29.036681Z",
     "iopub.status.busy": "2023-01-29T03:50:29.036146Z",
     "iopub.status.idle": "2023-01-29T03:50:29.042479Z",
     "shell.execute_reply": "2023-01-29T03:50:29.041887Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3531, -0.3143,  0.9556],\n",
       "               [ 0.4884, -0.3709,  1.4291]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:29.044964Z",
     "iopub.status.busy": "2023-01-29T03:50:29.044622Z",
     "iopub.status.idle": "2023-01-29T03:50:32.960898Z",
     "shell.execute_reply": "2023-01-29T03:50:32.960184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "483 ns ± 0.0912 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:32.964374Z",
     "iopub.status.busy": "2023-01-29T03:50:32.963730Z",
     "iopub.status.idle": "2023-01-29T03:50:39.818661Z",
     "shell.execute_reply": "2023-01-29T03:50:39.817873Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "845 ns ± 0.231 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:39.821438Z",
     "iopub.status.busy": "2023-01-29T03:50:39.821070Z",
     "iopub.status.idle": "2023-01-29T03:50:48.960468Z",
     "shell.execute_reply": "2023-01-29T03:50:48.959757Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 36.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:48.963562Z",
     "iopub.status.busy": "2023-01-29T03:50:48.963211Z",
     "iopub.status.idle": "2023-01-29T03:50:48.967204Z",
     "shell.execute_reply": "2023-01-29T03:50:48.966616Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:48.969888Z",
     "iopub.status.busy": "2023-01-29T03:50:48.969569Z",
     "iopub.status.idle": "2023-01-29T03:50:59.899109Z",
     "shell.execute_reply": "2023-01-29T03:50:59.898526Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135 µs ± 221 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:50:59.903020Z",
     "iopub.status.busy": "2023-01-29T03:50:59.902053Z",
     "iopub.status.idle": "2023-01-29T03:51:11.143021Z",
     "shell.execute_reply": "2023-01-29T03:51:11.142421Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 424 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:11.147462Z",
     "iopub.status.busy": "2023-01-29T03:51:11.146480Z",
     "iopub.status.idle": "2023-01-29T03:51:11.151141Z",
     "shell.execute_reply": "2023-01-29T03:51:11.150294Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:11.154759Z",
     "iopub.status.busy": "2023-01-29T03:51:11.153793Z",
     "iopub.status.idle": "2023-01-29T03:51:11.163052Z",
     "shell.execute_reply": "2023-01-29T03:51:11.162062Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0e1ce1e940>\n",
       "├── 'a' --> tensor([[[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]],\n",
       "│           \n",
       "│                   [[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]],\n",
       "│           \n",
       "│                   [[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]],\n",
       "│           \n",
       "│                   [[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]],\n",
       "│           \n",
       "│                   [[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]],\n",
       "│           \n",
       "│                   [[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]],\n",
       "│           \n",
       "│                   [[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]],\n",
       "│           \n",
       "│                   [[-0.2233,  0.9625,  0.4440],\n",
       "│                    [-2.0153, -0.4831, -0.5670]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0e1ce1ed00>\n",
       "    └── 'c' --> tensor([[[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "                \n",
       "                        [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "                \n",
       "                        [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "                \n",
       "                        [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "                \n",
       "                        [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "                \n",
       "                        [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "                \n",
       "                        [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "                \n",
       "                        [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                         [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                         [-1.0433,  1.5586, -0.1209, -1.4962]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:11.166333Z",
     "iopub.status.busy": "2023-01-29T03:51:11.165638Z",
     "iopub.status.idle": "2023-01-29T03:51:13.761883Z",
     "shell.execute_reply": "2023-01-29T03:51:13.761143Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.9 µs ± 47.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:13.765156Z",
     "iopub.status.busy": "2023-01-29T03:51:13.764632Z",
     "iopub.status.idle": "2023-01-29T03:51:13.772947Z",
     "shell.execute_reply": "2023-01-29T03:51:13.771915Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f0e1ce1eac0>\n",
       "├── 'a' --> tensor([[-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670],\n",
       "│                   [-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670],\n",
       "│                   [-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670],\n",
       "│                   [-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670],\n",
       "│                   [-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670],\n",
       "│                   [-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670],\n",
       "│                   [-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670],\n",
       "│                   [-0.2233,  0.9625,  0.4440],\n",
       "│                   [-2.0153, -0.4831, -0.5670]])\n",
       "└── 'x' --> <FastTreeValue 0x7f0ec811a160>\n",
       "    └── 'c' --> tensor([[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                        [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                        [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                        [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                        [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                        [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                        [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                        [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                        [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                        [-1.0433,  1.5586, -0.1209, -1.4962]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:13.776736Z",
     "iopub.status.busy": "2023-01-29T03:51:13.775211Z",
     "iopub.status.idle": "2023-01-29T03:51:16.208694Z",
     "shell.execute_reply": "2023-01-29T03:51:16.207989Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.9 µs ± 101 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:16.211679Z",
     "iopub.status.busy": "2023-01-29T03:51:16.211202Z",
     "iopub.status.idle": "2023-01-29T03:51:20.975415Z",
     "shell.execute_reply": "2023-01-29T03:51:20.974836Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.6 µs ± 107 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:20.978796Z",
     "iopub.status.busy": "2023-01-29T03:51:20.978264Z",
     "iopub.status.idle": "2023-01-29T03:51:20.986292Z",
     "shell.execute_reply": "2023-01-29T03:51:20.985698Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]],\n",
       "       \n",
       "               [[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]],\n",
       "       \n",
       "               [[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]],\n",
       "       \n",
       "               [[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]],\n",
       "       \n",
       "               [[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]],\n",
       "       \n",
       "               [[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]],\n",
       "       \n",
       "               [[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]],\n",
       "       \n",
       "               [[-0.2233,  0.9625,  0.4440],\n",
       "                [-2.0153, -0.4831, -0.5670]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "              \n",
       "                      [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "              \n",
       "                      [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "              \n",
       "                      [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "              \n",
       "                      [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "              \n",
       "                      [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "              \n",
       "                      [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]],\n",
       "              \n",
       "                      [[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                       [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                       [-1.0433,  1.5586, -0.1209, -1.4962]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:20.988939Z",
     "iopub.status.busy": "2023-01-29T03:51:20.988436Z",
     "iopub.status.idle": "2023-01-29T03:51:27.327951Z",
     "shell.execute_reply": "2023-01-29T03:51:27.327226Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.1 µs ± 153 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:27.330961Z",
     "iopub.status.busy": "2023-01-29T03:51:27.330381Z",
     "iopub.status.idle": "2023-01-29T03:51:27.337859Z",
     "shell.execute_reply": "2023-01-29T03:51:27.337273Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670],\n",
       "               [-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670],\n",
       "               [-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670],\n",
       "               [-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670],\n",
       "               [-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670],\n",
       "               [-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670],\n",
       "               [-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670],\n",
       "               [-0.2233,  0.9625,  0.4440],\n",
       "               [-2.0153, -0.4831, -0.5670]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                      [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                      [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                      [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                      [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                      [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                      [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962],\n",
       "                      [ 0.1220, -0.8857, -0.3855,  1.2251],\n",
       "                      [-1.5737, -1.3735, -0.7452, -0.4121],\n",
       "                      [-1.0433,  1.5586, -0.1209, -1.4962]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:27.340263Z",
     "iopub.status.busy": "2023-01-29T03:51:27.339913Z",
     "iopub.status.idle": "2023-01-29T03:51:38.919666Z",
     "shell.execute_reply": "2023-01-29T03:51:38.918929Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 270 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:51:38.922645Z",
     "iopub.status.busy": "2023-01-29T03:51:38.922282Z",
     "iopub.status.idle": "2023-01-29T03:51:41.462327Z",
     "shell.execute_reply": "2023-01-29T03:51:41.461762Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 1.28 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
