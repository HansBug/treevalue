{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:05:56.597818Z",
     "iopub.status.busy": "2023-02-24T11:05:56.597560Z",
     "iopub.status.idle": "2023-02-24T11:05:57.593471Z",
     "shell.execute_reply": "2023-02-24T11:05:57.592649Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:05:57.597819Z",
     "iopub.status.busy": "2023-02-24T11:05:57.597097Z",
     "iopub.status.idle": "2023-02-24T11:05:57.633335Z",
     "shell.execute_reply": "2023-02-24T11:05:57.632553Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:05:57.637411Z",
     "iopub.status.busy": "2023-02-24T11:05:57.636856Z",
     "iopub.status.idle": "2023-02-24T11:05:57.647360Z",
     "shell.execute_reply": "2023-02-24T11:05:57.646678Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7e5c100e80>\n",
       "├── 'a' --> tensor([[ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7e807dbb50>\n",
       "    └── 'c' --> tensor([[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:05:57.650419Z",
     "iopub.status.busy": "2023-02-24T11:05:57.649922Z",
     "iopub.status.idle": "2023-02-24T11:05:57.656121Z",
     "shell.execute_reply": "2023-02-24T11:05:57.655482Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.0478, -0.2584, -0.7119],\n",
       "        [ 0.3243,  0.2162, -1.6173]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:05:57.659537Z",
     "iopub.status.busy": "2023-02-24T11:05:57.658969Z",
     "iopub.status.idle": "2023-02-24T11:06:02.989141Z",
     "shell.execute_reply": "2023-02-24T11:06:02.988312Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.6 ns ± 0.0373 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:02.992393Z",
     "iopub.status.busy": "2023-02-24T11:06:02.991994Z",
     "iopub.status.idle": "2023-02-24T11:06:02.999104Z",
     "shell.execute_reply": "2023-02-24T11:06:02.998470Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7e5c100e80>\n",
       "├── 'a' --> tensor([[-1.4528, -0.7045, -0.4835],\n",
       "│                   [ 0.2873, -2.0395,  1.2989]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7e807dbb50>\n",
       "    └── 'c' --> tensor([[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:03.002181Z",
     "iopub.status.busy": "2023-02-24T11:06:03.001796Z",
     "iopub.status.idle": "2023-02-24T11:06:08.785716Z",
     "shell.execute_reply": "2023-02-24T11:06:08.784842Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.2 ns ± 0.066 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:08.789357Z",
     "iopub.status.busy": "2023-02-24T11:06:08.788672Z",
     "iopub.status.idle": "2023-02-24T11:06:09.159316Z",
     "shell.execute_reply": "2023-02-24T11:06:09.158510Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:09.163656Z",
     "iopub.status.busy": "2023-02-24T11:06:09.162863Z",
     "iopub.status.idle": "2023-02-24T11:06:09.170339Z",
     "shell.execute_reply": "2023-02-24T11:06:09.169612Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:09.173578Z",
     "iopub.status.busy": "2023-02-24T11:06:09.173000Z",
     "iopub.status.idle": "2023-02-24T11:06:09.178890Z",
     "shell.execute_reply": "2023-02-24T11:06:09.178260Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.0478, -0.2584, -0.7119],\n",
       "        [ 0.3243,  0.2162, -1.6173]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:09.181982Z",
     "iopub.status.busy": "2023-02-24T11:06:09.181365Z",
     "iopub.status.idle": "2023-02-24T11:06:13.842045Z",
     "shell.execute_reply": "2023-02-24T11:06:13.841159Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.4 ns ± 0.123 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:13.845528Z",
     "iopub.status.busy": "2023-02-24T11:06:13.845056Z",
     "iopub.status.idle": "2023-02-24T11:06:13.852254Z",
     "shell.execute_reply": "2023-02-24T11:06:13.851598Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0326, -0.1107,  0.7973],\n",
       "               [-1.5294, -0.7405,  0.7080]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:13.855204Z",
     "iopub.status.busy": "2023-02-24T11:06:13.854820Z",
     "iopub.status.idle": "2023-02-24T11:06:17.823100Z",
     "shell.execute_reply": "2023-02-24T11:06:17.822225Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.203 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:17.826514Z",
     "iopub.status.busy": "2023-02-24T11:06:17.826005Z",
     "iopub.status.idle": "2023-02-24T11:06:24.351592Z",
     "shell.execute_reply": "2023-02-24T11:06:24.350715Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "804 ns ± 0.146 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:24.355430Z",
     "iopub.status.busy": "2023-02-24T11:06:24.354852Z",
     "iopub.status.idle": "2023-02-24T11:06:33.046996Z",
     "shell.execute_reply": "2023-02-24T11:06:33.046116Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 35.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:33.050510Z",
     "iopub.status.busy": "2023-02-24T11:06:33.049847Z",
     "iopub.status.idle": "2023-02-24T11:06:33.054487Z",
     "shell.execute_reply": "2023-02-24T11:06:33.053845Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:33.057888Z",
     "iopub.status.busy": "2023-02-24T11:06:33.057280Z",
     "iopub.status.idle": "2023-02-24T11:06:44.517995Z",
     "shell.execute_reply": "2023-02-24T11:06:44.517203Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "141 µs ± 986 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:44.521332Z",
     "iopub.status.busy": "2023-02-24T11:06:44.520840Z",
     "iopub.status.idle": "2023-02-24T11:06:56.009198Z",
     "shell.execute_reply": "2023-02-24T11:06:56.008454Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 911 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:56.012981Z",
     "iopub.status.busy": "2023-02-24T11:06:56.012578Z",
     "iopub.status.idle": "2023-02-24T11:06:56.017000Z",
     "shell.execute_reply": "2023-02-24T11:06:56.016349Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:56.019954Z",
     "iopub.status.busy": "2023-02-24T11:06:56.019717Z",
     "iopub.status.idle": "2023-02-24T11:06:56.028564Z",
     "shell.execute_reply": "2023-02-24T11:06:56.027948Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7e8083be80>\n",
       "├── 'a' --> tensor([[[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]],\n",
       "│           \n",
       "│                   [[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]],\n",
       "│           \n",
       "│                   [[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]],\n",
       "│           \n",
       "│                   [[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]],\n",
       "│           \n",
       "│                   [[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]],\n",
       "│           \n",
       "│                   [[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]],\n",
       "│           \n",
       "│                   [[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]],\n",
       "│           \n",
       "│                   [[ 1.0478, -0.2584, -0.7119],\n",
       "│                    [ 0.3243,  0.2162, -1.6173]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7e8083bf70>\n",
       "    └── 'c' --> tensor([[[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "                \n",
       "                        [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "                \n",
       "                        [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "                \n",
       "                        [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "                \n",
       "                        [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "                \n",
       "                        [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "                \n",
       "                        [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "                \n",
       "                        [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                         [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                         [ 0.0673,  0.7583,  0.3472, -1.2437]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:56.031485Z",
     "iopub.status.busy": "2023-02-24T11:06:56.031249Z",
     "iopub.status.idle": "2023-02-24T11:06:58.660188Z",
     "shell.execute_reply": "2023-02-24T11:06:58.659251Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.3 µs ± 31.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:58.663829Z",
     "iopub.status.busy": "2023-02-24T11:06:58.663216Z",
     "iopub.status.idle": "2023-02-24T11:06:58.672412Z",
     "shell.execute_reply": "2023-02-24T11:06:58.671789Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7dd34a7ee0>\n",
       "├── 'a' --> tensor([[ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173],\n",
       "│                   [ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173],\n",
       "│                   [ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173],\n",
       "│                   [ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173],\n",
       "│                   [ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173],\n",
       "│                   [ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173],\n",
       "│                   [ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173],\n",
       "│                   [ 1.0478, -0.2584, -0.7119],\n",
       "│                   [ 0.3243,  0.2162, -1.6173]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7e54d17730>\n",
       "    └── 'c' --> tensor([[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                        [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                        [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                        [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                        [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                        [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                        [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                        [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                        [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                        [ 0.0673,  0.7583,  0.3472, -1.2437]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:06:58.675287Z",
     "iopub.status.busy": "2023-02-24T11:06:58.674820Z",
     "iopub.status.idle": "2023-02-24T11:07:01.110599Z",
     "shell.execute_reply": "2023-02-24T11:07:01.109777Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.9 µs ± 73.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:07:01.114113Z",
     "iopub.status.busy": "2023-02-24T11:07:01.113676Z",
     "iopub.status.idle": "2023-02-24T11:07:05.697196Z",
     "shell.execute_reply": "2023-02-24T11:07:05.696294Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.4 µs ± 53.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:07:05.700696Z",
     "iopub.status.busy": "2023-02-24T11:07:05.700076Z",
     "iopub.status.idle": "2023-02-24T11:07:05.708632Z",
     "shell.execute_reply": "2023-02-24T11:07:05.708002Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "              \n",
       "                      [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "              \n",
       "                      [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "              \n",
       "                      [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "              \n",
       "                      [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "              \n",
       "                      [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "              \n",
       "                      [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]],\n",
       "              \n",
       "                      [[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                       [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                       [ 0.0673,  0.7583,  0.3472, -1.2437]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]],\n",
       "       \n",
       "               [[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]],\n",
       "       \n",
       "               [[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]],\n",
       "       \n",
       "               [[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]],\n",
       "       \n",
       "               [[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]],\n",
       "       \n",
       "               [[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]],\n",
       "       \n",
       "               [[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]],\n",
       "       \n",
       "               [[ 1.0478, -0.2584, -0.7119],\n",
       "                [ 0.3243,  0.2162, -1.6173]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:07:05.711566Z",
     "iopub.status.busy": "2023-02-24T11:07:05.711052Z",
     "iopub.status.idle": "2023-02-24T11:07:12.086944Z",
     "shell.execute_reply": "2023-02-24T11:07:12.086065Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.4 µs ± 180 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:07:12.090870Z",
     "iopub.status.busy": "2023-02-24T11:07:12.090265Z",
     "iopub.status.idle": "2023-02-24T11:07:12.098328Z",
     "shell.execute_reply": "2023-02-24T11:07:12.097614Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                      [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                      [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                      [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                      [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                      [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                      [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437],\n",
       "                      [ 0.9167, -0.6333,  0.4863, -0.7960],\n",
       "                      [ 1.5364,  0.2169, -0.9223, -0.5957],\n",
       "                      [ 0.0673,  0.7583,  0.3472, -1.2437]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173],\n",
       "               [ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173],\n",
       "               [ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173],\n",
       "               [ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173],\n",
       "               [ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173],\n",
       "               [ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173],\n",
       "               [ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173],\n",
       "               [ 1.0478, -0.2584, -0.7119],\n",
       "               [ 0.3243,  0.2162, -1.6173]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:07:12.101473Z",
     "iopub.status.busy": "2023-02-24T11:07:12.101095Z",
     "iopub.status.idle": "2023-02-24T11:07:23.945023Z",
     "shell.execute_reply": "2023-02-24T11:07:23.944186Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 227 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-24T11:07:23.948426Z",
     "iopub.status.busy": "2023-02-24T11:07:23.948033Z",
     "iopub.status.idle": "2023-02-24T11:07:26.769656Z",
     "shell.execute_reply": "2023-02-24T11:07:26.768939Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "351 µs ± 81 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
