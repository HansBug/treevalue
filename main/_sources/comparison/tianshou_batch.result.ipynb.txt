{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:26.878555Z",
     "iopub.status.busy": "2023-01-24T16:05:26.878321Z",
     "iopub.status.idle": "2023-01-24T16:05:27.826730Z",
     "shell.execute_reply": "2023-01-24T16:05:27.826010Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:27.830408Z",
     "iopub.status.busy": "2023-01-24T16:05:27.830088Z",
     "iopub.status.idle": "2023-01-24T16:05:27.863859Z",
     "shell.execute_reply": "2023-01-24T16:05:27.863187Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:27.867455Z",
     "iopub.status.busy": "2023-01-24T16:05:27.866849Z",
     "iopub.status.idle": "2023-01-24T16:05:27.875516Z",
     "shell.execute_reply": "2023-01-24T16:05:27.874854Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4e20799220>\n",
       "├── 'a' --> tensor([[ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4e20799460>\n",
       "    └── 'c' --> tensor([[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:27.878713Z",
     "iopub.status.busy": "2023-01-24T16:05:27.878474Z",
     "iopub.status.idle": "2023-01-24T16:05:27.883511Z",
     "shell.execute_reply": "2023-01-24T16:05:27.882840Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.5305,  1.0268, -0.2935],\n",
       "        [ 1.3295, -0.6799, -0.0527]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:27.886582Z",
     "iopub.status.busy": "2023-01-24T16:05:27.886357Z",
     "iopub.status.idle": "2023-01-24T16:05:32.776171Z",
     "shell.execute_reply": "2023-01-24T16:05:32.775035Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.2 ns ± 0.0337 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:32.780064Z",
     "iopub.status.busy": "2023-01-24T16:05:32.779582Z",
     "iopub.status.idle": "2023-01-24T16:05:32.785801Z",
     "shell.execute_reply": "2023-01-24T16:05:32.785098Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4e20799220>\n",
       "├── 'a' --> tensor([[ 1.1694, -0.4244,  0.6637],\n",
       "│                   [-0.5413,  0.1728, -1.2540]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4e20799460>\n",
       "    └── 'c' --> tensor([[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:32.788768Z",
     "iopub.status.busy": "2023-01-24T16:05:32.788535Z",
     "iopub.status.idle": "2023-01-24T16:05:37.672309Z",
     "shell.execute_reply": "2023-01-24T16:05:37.671542Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 ns ± 0.145 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:37.676086Z",
     "iopub.status.busy": "2023-01-24T16:05:37.675429Z",
     "iopub.status.idle": "2023-01-24T16:05:38.029978Z",
     "shell.execute_reply": "2023-01-24T16:05:38.029233Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:38.033806Z",
     "iopub.status.busy": "2023-01-24T16:05:38.033210Z",
     "iopub.status.idle": "2023-01-24T16:05:38.039065Z",
     "shell.execute_reply": "2023-01-24T16:05:38.038403Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:38.041994Z",
     "iopub.status.busy": "2023-01-24T16:05:38.041765Z",
     "iopub.status.idle": "2023-01-24T16:05:38.047375Z",
     "shell.execute_reply": "2023-01-24T16:05:38.046721Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.5305,  1.0268, -0.2935],\n",
       "        [ 1.3295, -0.6799, -0.0527]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:38.050582Z",
     "iopub.status.busy": "2023-01-24T16:05:38.050214Z",
     "iopub.status.idle": "2023-01-24T16:05:42.853392Z",
     "shell.execute_reply": "2023-01-24T16:05:42.852618Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59 ns ± 0.0261 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:42.856937Z",
     "iopub.status.busy": "2023-01-24T16:05:42.856303Z",
     "iopub.status.idle": "2023-01-24T16:05:42.862364Z",
     "shell.execute_reply": "2023-01-24T16:05:42.861656Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.5514, -0.3660, -0.4694],\n",
       "               [-1.1623,  0.5158, -0.9948]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:42.865279Z",
     "iopub.status.busy": "2023-01-24T16:05:42.864895Z",
     "iopub.status.idle": "2023-01-24T16:05:46.821682Z",
     "shell.execute_reply": "2023-01-24T16:05:46.820882Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.175 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:46.825187Z",
     "iopub.status.busy": "2023-01-24T16:05:46.824921Z",
     "iopub.status.idle": "2023-01-24T16:05:53.687560Z",
     "shell.execute_reply": "2023-01-24T16:05:53.686919Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "845 ns ± 0.501 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:05:53.690745Z",
     "iopub.status.busy": "2023-01-24T16:05:53.690496Z",
     "iopub.status.idle": "2023-01-24T16:06:02.890107Z",
     "shell.execute_reply": "2023-01-24T16:06:02.889420Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 26.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:02.894099Z",
     "iopub.status.busy": "2023-01-24T16:06:02.893500Z",
     "iopub.status.idle": "2023-01-24T16:06:02.897621Z",
     "shell.execute_reply": "2023-01-24T16:06:02.896913Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:02.900467Z",
     "iopub.status.busy": "2023-01-24T16:06:02.900221Z",
     "iopub.status.idle": "2023-01-24T16:06:14.138886Z",
     "shell.execute_reply": "2023-01-24T16:06:14.138295Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 631 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:14.143669Z",
     "iopub.status.busy": "2023-01-24T16:06:14.142624Z",
     "iopub.status.idle": "2023-01-24T16:06:25.624478Z",
     "shell.execute_reply": "2023-01-24T16:06:25.623890Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 987 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:25.628047Z",
     "iopub.status.busy": "2023-01-24T16:06:25.627768Z",
     "iopub.status.idle": "2023-01-24T16:06:25.632431Z",
     "shell.execute_reply": "2023-01-24T16:06:25.631778Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:25.635893Z",
     "iopub.status.busy": "2023-01-24T16:06:25.635639Z",
     "iopub.status.idle": "2023-01-24T16:06:25.645440Z",
     "shell.execute_reply": "2023-01-24T16:06:25.644765Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4e2071f640>\n",
       "├── 'a' --> tensor([[[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]],\n",
       "│           \n",
       "│                   [[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]],\n",
       "│           \n",
       "│                   [[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]],\n",
       "│           \n",
       "│                   [[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]],\n",
       "│           \n",
       "│                   [[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]],\n",
       "│           \n",
       "│                   [[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]],\n",
       "│           \n",
       "│                   [[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]],\n",
       "│           \n",
       "│                   [[ 1.5305,  1.0268, -0.2935],\n",
       "│                    [ 1.3295, -0.6799, -0.0527]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4e2071f1f0>\n",
       "    └── 'c' --> tensor([[[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "                \n",
       "                        [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "                \n",
       "                        [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "                \n",
       "                        [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "                \n",
       "                        [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "                \n",
       "                        [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "                \n",
       "                        [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "                \n",
       "                        [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                         [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                         [ 0.4519, -1.1349, -0.6025, -0.4864]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:25.648955Z",
     "iopub.status.busy": "2023-01-24T16:06:25.648702Z",
     "iopub.status.idle": "2023-01-24T16:06:28.289600Z",
     "shell.execute_reply": "2023-01-24T16:06:28.288889Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 38.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:28.293679Z",
     "iopub.status.busy": "2023-01-24T16:06:28.292957Z",
     "iopub.status.idle": "2023-01-24T16:06:28.301736Z",
     "shell.execute_reply": "2023-01-24T16:06:28.301062Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f4df4bb1190>\n",
       "├── 'a' --> tensor([[ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527],\n",
       "│                   [ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527],\n",
       "│                   [ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527],\n",
       "│                   [ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527],\n",
       "│                   [ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527],\n",
       "│                   [ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527],\n",
       "│                   [ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527],\n",
       "│                   [ 1.5305,  1.0268, -0.2935],\n",
       "│                   [ 1.3295, -0.6799, -0.0527]])\n",
       "└── 'x' --> <FastTreeValue 0x7f4df4bb1bb0>\n",
       "    └── 'c' --> tensor([[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                        [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                        [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                        [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                        [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                        [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                        [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                        [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                        [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                        [ 0.4519, -1.1349, -0.6025, -0.4864]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:28.306751Z",
     "iopub.status.busy": "2023-01-24T16:06:28.306480Z",
     "iopub.status.idle": "2023-01-24T16:06:30.780476Z",
     "shell.execute_reply": "2023-01-24T16:06:30.779847Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4 µs ± 50.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:30.783804Z",
     "iopub.status.busy": "2023-01-24T16:06:30.783416Z",
     "iopub.status.idle": "2023-01-24T16:06:35.453834Z",
     "shell.execute_reply": "2023-01-24T16:06:35.453194Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.4 µs ± 96 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:35.457341Z",
     "iopub.status.busy": "2023-01-24T16:06:35.456917Z",
     "iopub.status.idle": "2023-01-24T16:06:35.465737Z",
     "shell.execute_reply": "2023-01-24T16:06:35.465032Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]],\n",
       "       \n",
       "               [[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]],\n",
       "       \n",
       "               [[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]],\n",
       "       \n",
       "               [[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]],\n",
       "       \n",
       "               [[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]],\n",
       "       \n",
       "               [[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]],\n",
       "       \n",
       "               [[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]],\n",
       "       \n",
       "               [[ 1.5305,  1.0268, -0.2935],\n",
       "                [ 1.3295, -0.6799, -0.0527]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "              \n",
       "                      [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "              \n",
       "                      [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "              \n",
       "                      [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "              \n",
       "                      [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "              \n",
       "                      [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "              \n",
       "                      [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]],\n",
       "              \n",
       "                      [[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                       [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                       [ 0.4519, -1.1349, -0.6025, -0.4864]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:35.468887Z",
     "iopub.status.busy": "2023-01-24T16:06:35.468506Z",
     "iopub.status.idle": "2023-01-24T16:06:41.987050Z",
     "shell.execute_reply": "2023-01-24T16:06:41.986296Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.1 µs ± 257 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:41.991209Z",
     "iopub.status.busy": "2023-01-24T16:06:41.990601Z",
     "iopub.status.idle": "2023-01-24T16:06:41.997800Z",
     "shell.execute_reply": "2023-01-24T16:06:41.997068Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527],\n",
       "               [ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527],\n",
       "               [ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527],\n",
       "               [ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527],\n",
       "               [ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527],\n",
       "               [ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527],\n",
       "               [ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527],\n",
       "               [ 1.5305,  1.0268, -0.2935],\n",
       "               [ 1.3295, -0.6799, -0.0527]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                      [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                      [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                      [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                      [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                      [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                      [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864],\n",
       "                      [ 0.1379, -0.9410,  0.8959,  1.2480],\n",
       "                      [-0.6514,  1.7412, -1.4428,  0.8409],\n",
       "                      [ 0.4519, -1.1349, -0.6025, -0.4864]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:42.001129Z",
     "iopub.status.busy": "2023-01-24T16:06:42.000498Z",
     "iopub.status.idle": "2023-01-24T16:06:53.618869Z",
     "shell.execute_reply": "2023-01-24T16:06:53.618154Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 1.85 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-24T16:06:53.622612Z",
     "iopub.status.busy": "2023-01-24T16:06:53.621980Z",
     "iopub.status.idle": "2023-01-24T16:06:56.145445Z",
     "shell.execute_reply": "2023-01-24T16:06:56.144838Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "308 µs ± 6.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
