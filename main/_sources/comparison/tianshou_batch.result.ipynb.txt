{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:25.684674Z",
     "iopub.status.busy": "2023-02-25T06:38:25.684460Z",
     "iopub.status.idle": "2023-02-25T06:38:26.594145Z",
     "shell.execute_reply": "2023-02-25T06:38:26.593489Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:26.597720Z",
     "iopub.status.busy": "2023-02-25T06:38:26.597144Z",
     "iopub.status.idle": "2023-02-25T06:38:26.629857Z",
     "shell.execute_reply": "2023-02-25T06:38:26.629246Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:26.632565Z",
     "iopub.status.busy": "2023-02-25T06:38:26.632138Z",
     "iopub.status.idle": "2023-02-25T06:38:26.641320Z",
     "shell.execute_reply": "2023-02-25T06:38:26.640742Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9e38f17a90>\n",
       "├── 'a' --> tensor([[ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9e38f8be50>\n",
       "    └── 'c' --> tensor([[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:26.643726Z",
     "iopub.status.busy": "2023-02-25T06:38:26.643392Z",
     "iopub.status.idle": "2023-02-25T06:38:26.648061Z",
     "shell.execute_reply": "2023-02-25T06:38:26.647451Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.6330,  1.1883,  0.1030],\n",
       "        [-0.1685,  1.1185, -0.6797]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:26.650763Z",
     "iopub.status.busy": "2023-02-25T06:38:26.650435Z",
     "iopub.status.idle": "2023-02-25T06:38:31.609626Z",
     "shell.execute_reply": "2023-02-25T06:38:31.608870Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.5 ns ± 0.0347 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:31.613023Z",
     "iopub.status.busy": "2023-02-25T06:38:31.612352Z",
     "iopub.status.idle": "2023-02-25T06:38:31.619092Z",
     "shell.execute_reply": "2023-02-25T06:38:31.618519Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9e38f17a90>\n",
       "├── 'a' --> tensor([[ 0.5375, -1.1565,  0.9579],\n",
       "│                   [ 0.4841,  1.7221, -0.8098]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9e38f8be50>\n",
       "    └── 'c' --> tensor([[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:31.621533Z",
     "iopub.status.busy": "2023-02-25T06:38:31.621192Z",
     "iopub.status.idle": "2023-02-25T06:38:36.513127Z",
     "shell.execute_reply": "2023-02-25T06:38:36.512419Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.2 ns ± 0.215 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:36.516493Z",
     "iopub.status.busy": "2023-02-25T06:38:36.515936Z",
     "iopub.status.idle": "2023-02-25T06:38:36.845498Z",
     "shell.execute_reply": "2023-02-25T06:38:36.844836Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:36.848553Z",
     "iopub.status.busy": "2023-02-25T06:38:36.848055Z",
     "iopub.status.idle": "2023-02-25T06:38:36.853340Z",
     "shell.execute_reply": "2023-02-25T06:38:36.852735Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:36.856067Z",
     "iopub.status.busy": "2023-02-25T06:38:36.855498Z",
     "iopub.status.idle": "2023-02-25T06:38:36.860048Z",
     "shell.execute_reply": "2023-02-25T06:38:36.859452Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.6330,  1.1883,  0.1030],\n",
       "        [-0.1685,  1.1185, -0.6797]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:36.862690Z",
     "iopub.status.busy": "2023-02-25T06:38:36.862119Z",
     "iopub.status.idle": "2023-02-25T06:38:41.519011Z",
     "shell.execute_reply": "2023-02-25T06:38:41.518309Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.5 ns ± 0.0664 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:41.522101Z",
     "iopub.status.busy": "2023-02-25T06:38:41.521498Z",
     "iopub.status.idle": "2023-02-25T06:38:41.527245Z",
     "shell.execute_reply": "2023-02-25T06:38:41.526594Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3203, -2.3172, -0.1856],\n",
       "               [-0.3735, -1.7583, -0.5673]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:41.529854Z",
     "iopub.status.busy": "2023-02-25T06:38:41.529523Z",
     "iopub.status.idle": "2023-02-25T06:38:45.417216Z",
     "shell.execute_reply": "2023-02-25T06:38:45.416518Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "478 ns ± 0.0906 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:45.420165Z",
     "iopub.status.busy": "2023-02-25T06:38:45.419749Z",
     "iopub.status.idle": "2023-02-25T06:38:52.314475Z",
     "shell.execute_reply": "2023-02-25T06:38:52.313774Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "850 ns ± 0.207 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:38:52.317339Z",
     "iopub.status.busy": "2023-02-25T06:38:52.316996Z",
     "iopub.status.idle": "2023-02-25T06:39:01.475744Z",
     "shell.execute_reply": "2023-02-25T06:39:01.474963Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 24 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:01.478838Z",
     "iopub.status.busy": "2023-02-25T06:39:01.478496Z",
     "iopub.status.idle": "2023-02-25T06:39:01.482427Z",
     "shell.execute_reply": "2023-02-25T06:39:01.481859Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:01.485095Z",
     "iopub.status.busy": "2023-02-25T06:39:01.484791Z",
     "iopub.status.idle": "2023-02-25T06:39:02.762298Z",
     "shell.execute_reply": "2023-02-25T06:39:02.761631Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "136 µs ± 1.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:02.765529Z",
     "iopub.status.busy": "2023-02-25T06:39:02.765289Z",
     "iopub.status.idle": "2023-02-25T06:39:13.961942Z",
     "shell.execute_reply": "2023-02-25T06:39:13.961313Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 640 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:13.964725Z",
     "iopub.status.busy": "2023-02-25T06:39:13.964503Z",
     "iopub.status.idle": "2023-02-25T06:39:13.968532Z",
     "shell.execute_reply": "2023-02-25T06:39:13.967956Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:13.970875Z",
     "iopub.status.busy": "2023-02-25T06:39:13.970661Z",
     "iopub.status.idle": "2023-02-25T06:39:13.977580Z",
     "shell.execute_reply": "2023-02-25T06:39:13.976966Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9e38f1f4f0>\n",
       "├── 'a' --> tensor([[[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]],\n",
       "│           \n",
       "│                   [[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]],\n",
       "│           \n",
       "│                   [[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]],\n",
       "│           \n",
       "│                   [[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]],\n",
       "│           \n",
       "│                   [[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]],\n",
       "│           \n",
       "│                   [[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]],\n",
       "│           \n",
       "│                   [[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]],\n",
       "│           \n",
       "│                   [[ 1.6330,  1.1883,  0.1030],\n",
       "│                    [-0.1685,  1.1185, -0.6797]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9e38ee2040>\n",
       "    └── 'c' --> tensor([[[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "                \n",
       "                        [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "                \n",
       "                        [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "                \n",
       "                        [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "                \n",
       "                        [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "                \n",
       "                        [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "                \n",
       "                        [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "                \n",
       "                        [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                         [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                         [ 0.6435,  0.9898, -1.5166, -0.4396]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:13.979908Z",
     "iopub.status.busy": "2023-02-25T06:39:13.979695Z",
     "iopub.status.idle": "2023-02-25T06:39:16.633039Z",
     "shell.execute_reply": "2023-02-25T06:39:16.632316Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.6 µs ± 35.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:16.635836Z",
     "iopub.status.busy": "2023-02-25T06:39:16.635496Z",
     "iopub.status.idle": "2023-02-25T06:39:16.642557Z",
     "shell.execute_reply": "2023-02-25T06:39:16.641938Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9e38f1ff10>\n",
       "├── 'a' --> tensor([[ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797],\n",
       "│                   [ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797],\n",
       "│                   [ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797],\n",
       "│                   [ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797],\n",
       "│                   [ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797],\n",
       "│                   [ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797],\n",
       "│                   [ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797],\n",
       "│                   [ 1.6330,  1.1883,  0.1030],\n",
       "│                   [-0.1685,  1.1185, -0.6797]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9e38f1fdc0>\n",
       "    └── 'c' --> tensor([[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                        [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                        [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                        [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                        [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                        [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                        [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                        [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                        [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                        [ 0.6435,  0.9898, -1.5166, -0.4396]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:16.644956Z",
     "iopub.status.busy": "2023-02-25T06:39:16.644618Z",
     "iopub.status.idle": "2023-02-25T06:39:19.091604Z",
     "shell.execute_reply": "2023-02-25T06:39:19.090871Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.1 µs ± 57.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:19.094438Z",
     "iopub.status.busy": "2023-02-25T06:39:19.094090Z",
     "iopub.status.idle": "2023-02-25T06:39:23.866955Z",
     "shell.execute_reply": "2023-02-25T06:39:23.866224Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.7 µs ± 86.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:23.869817Z",
     "iopub.status.busy": "2023-02-25T06:39:23.869483Z",
     "iopub.status.idle": "2023-02-25T06:39:23.877345Z",
     "shell.execute_reply": "2023-02-25T06:39:23.876772Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]],\n",
       "       \n",
       "               [[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]],\n",
       "       \n",
       "               [[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]],\n",
       "       \n",
       "               [[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]],\n",
       "       \n",
       "               [[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]],\n",
       "       \n",
       "               [[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]],\n",
       "       \n",
       "               [[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]],\n",
       "       \n",
       "               [[ 1.6330,  1.1883,  0.1030],\n",
       "                [-0.1685,  1.1185, -0.6797]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "              \n",
       "                      [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "              \n",
       "                      [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "              \n",
       "                      [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "              \n",
       "                      [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "              \n",
       "                      [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "              \n",
       "                      [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]],\n",
       "              \n",
       "                      [[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                       [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                       [ 0.6435,  0.9898, -1.5166, -0.4396]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:23.879779Z",
     "iopub.status.busy": "2023-02-25T06:39:23.879446Z",
     "iopub.status.idle": "2023-02-25T06:39:30.300183Z",
     "shell.execute_reply": "2023-02-25T06:39:30.299432Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.1 µs ± 143 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:30.303142Z",
     "iopub.status.busy": "2023-02-25T06:39:30.302889Z",
     "iopub.status.idle": "2023-02-25T06:39:30.310976Z",
     "shell.execute_reply": "2023-02-25T06:39:30.310365Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797],\n",
       "               [ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797],\n",
       "               [ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797],\n",
       "               [ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797],\n",
       "               [ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797],\n",
       "               [ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797],\n",
       "               [ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797],\n",
       "               [ 1.6330,  1.1883,  0.1030],\n",
       "               [-0.1685,  1.1185, -0.6797]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                      [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                      [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                      [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                      [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                      [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                      [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396],\n",
       "                      [ 0.1707,  0.0238,  0.1529,  0.9907],\n",
       "                      [-1.9703,  1.0273, -0.1173, -0.6577],\n",
       "                      [ 0.6435,  0.9898, -1.5166, -0.4396]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:30.313624Z",
     "iopub.status.busy": "2023-02-25T06:39:30.313311Z",
     "iopub.status.idle": "2023-02-25T06:39:41.972872Z",
     "shell.execute_reply": "2023-02-25T06:39:41.972158Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 459 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T06:39:41.976184Z",
     "iopub.status.busy": "2023-02-25T06:39:41.975657Z",
     "iopub.status.idle": "2023-02-25T06:39:44.502527Z",
     "shell.execute_reply": "2023-02-25T06:39:44.501949Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "310 µs ± 3.6 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
