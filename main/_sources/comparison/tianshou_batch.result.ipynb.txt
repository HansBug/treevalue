{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:32.239306Z",
     "iopub.status.busy": "2023-01-29T03:27:32.238760Z",
     "iopub.status.idle": "2023-01-29T03:27:33.158681Z",
     "shell.execute_reply": "2023-01-29T03:27:33.158000Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:33.162236Z",
     "iopub.status.busy": "2023-01-29T03:27:33.161816Z",
     "iopub.status.idle": "2023-01-29T03:27:33.195086Z",
     "shell.execute_reply": "2023-01-29T03:27:33.194454Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:33.198181Z",
     "iopub.status.busy": "2023-01-29T03:27:33.197830Z",
     "iopub.status.idle": "2023-01-29T03:27:33.207411Z",
     "shell.execute_reply": "2023-01-29T03:27:33.206833Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5940b971f0>\n",
       "├── 'a' --> tensor([[ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5940b97070>\n",
       "    └── 'c' --> tensor([[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:33.210137Z",
     "iopub.status.busy": "2023-01-29T03:27:33.209618Z",
     "iopub.status.idle": "2023-01-29T03:27:33.215293Z",
     "shell.execute_reply": "2023-01-29T03:27:33.214710Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9330, -1.8227,  0.5544],\n",
       "        [ 0.5019, -1.2108, -0.3718]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:33.217939Z",
     "iopub.status.busy": "2023-01-29T03:27:33.217615Z",
     "iopub.status.idle": "2023-01-29T03:27:38.215072Z",
     "shell.execute_reply": "2023-01-29T03:27:38.214367Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.1 ns ± 0.0739 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:38.218403Z",
     "iopub.status.busy": "2023-01-29T03:27:38.217769Z",
     "iopub.status.idle": "2023-01-29T03:27:38.224362Z",
     "shell.execute_reply": "2023-01-29T03:27:38.223787Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5940b971f0>\n",
       "├── 'a' --> tensor([[-0.0132, -1.1390,  0.7712],\n",
       "│                   [ 1.4897,  0.0042, -1.8274]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5940b97070>\n",
       "    └── 'c' --> tensor([[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:38.227194Z",
     "iopub.status.busy": "2023-01-29T03:27:38.226728Z",
     "iopub.status.idle": "2023-01-29T03:27:44.190091Z",
     "shell.execute_reply": "2023-01-29T03:27:44.189377Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.3 ns ± 0.186 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:44.193326Z",
     "iopub.status.busy": "2023-01-29T03:27:44.192807Z",
     "iopub.status.idle": "2023-01-29T03:27:44.517400Z",
     "shell.execute_reply": "2023-01-29T03:27:44.516719Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:44.520639Z",
     "iopub.status.busy": "2023-01-29T03:27:44.519949Z",
     "iopub.status.idle": "2023-01-29T03:27:44.526170Z",
     "shell.execute_reply": "2023-01-29T03:27:44.525571Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:44.528724Z",
     "iopub.status.busy": "2023-01-29T03:27:44.528399Z",
     "iopub.status.idle": "2023-01-29T03:27:44.534151Z",
     "shell.execute_reply": "2023-01-29T03:27:44.533569Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9330, -1.8227,  0.5544],\n",
       "        [ 0.5019, -1.2108, -0.3718]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:44.536927Z",
     "iopub.status.busy": "2023-01-29T03:27:44.536427Z",
     "iopub.status.idle": "2023-01-29T03:27:48.800513Z",
     "shell.execute_reply": "2023-01-29T03:27:48.799838Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52.6 ns ± 0.113 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:48.803480Z",
     "iopub.status.busy": "2023-01-29T03:27:48.803130Z",
     "iopub.status.idle": "2023-01-29T03:27:48.809547Z",
     "shell.execute_reply": "2023-01-29T03:27:48.808975Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7553,  0.5184,  0.7189],\n",
       "               [-2.0457,  1.0813, -0.7820]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:48.812141Z",
     "iopub.status.busy": "2023-01-29T03:27:48.811939Z",
     "iopub.status.idle": "2023-01-29T03:27:52.863762Z",
     "shell.execute_reply": "2023-01-29T03:27:52.863058Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "499 ns ± 0.171 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:52.866829Z",
     "iopub.status.busy": "2023-01-29T03:27:52.866284Z",
     "iopub.status.idle": "2023-01-29T03:27:59.824398Z",
     "shell.execute_reply": "2023-01-29T03:27:59.823698Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "858 ns ± 2.15 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:27:59.827672Z",
     "iopub.status.busy": "2023-01-29T03:27:59.827114Z",
     "iopub.status.idle": "2023-01-29T03:28:09.125512Z",
     "shell.execute_reply": "2023-01-29T03:28:09.124833Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.4 µs ± 75.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:09.128756Z",
     "iopub.status.busy": "2023-01-29T03:28:09.128134Z",
     "iopub.status.idle": "2023-01-29T03:28:09.131743Z",
     "shell.execute_reply": "2023-01-29T03:28:09.131167Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:09.134386Z",
     "iopub.status.busy": "2023-01-29T03:28:09.133866Z",
     "iopub.status.idle": "2023-01-29T03:28:20.067539Z",
     "shell.execute_reply": "2023-01-29T03:28:20.066961Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135 µs ± 337 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:20.071634Z",
     "iopub.status.busy": "2023-01-29T03:28:20.070390Z",
     "iopub.status.idle": "2023-01-29T03:28:31.162746Z",
     "shell.execute_reply": "2023-01-29T03:28:31.162178Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 511 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:31.166661Z",
     "iopub.status.busy": "2023-01-29T03:28:31.165630Z",
     "iopub.status.idle": "2023-01-29T03:28:31.170028Z",
     "shell.execute_reply": "2023-01-29T03:28:31.169499Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:31.173669Z",
     "iopub.status.busy": "2023-01-29T03:28:31.172722Z",
     "iopub.status.idle": "2023-01-29T03:28:31.181504Z",
     "shell.execute_reply": "2023-01-29T03:28:31.180972Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f58968a0580>\n",
       "├── 'a' --> tensor([[[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]],\n",
       "│           \n",
       "│                   [[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]],\n",
       "│           \n",
       "│                   [[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]],\n",
       "│           \n",
       "│                   [[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]],\n",
       "│           \n",
       "│                   [[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]],\n",
       "│           \n",
       "│                   [[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]],\n",
       "│           \n",
       "│                   [[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]],\n",
       "│           \n",
       "│                   [[ 0.9330, -1.8227,  0.5544],\n",
       "│                    [ 0.5019, -1.2108, -0.3718]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f58968a06a0>\n",
       "    └── 'c' --> tensor([[[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "                \n",
       "                        [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "                \n",
       "                        [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "                \n",
       "                        [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "                \n",
       "                        [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "                \n",
       "                        [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "                \n",
       "                        [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "                \n",
       "                        [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                         [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                         [ 1.3106, -1.3543,  0.4370,  0.2409]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:31.185669Z",
     "iopub.status.busy": "2023-01-29T03:28:31.184685Z",
     "iopub.status.idle": "2023-01-29T03:28:33.783616Z",
     "shell.execute_reply": "2023-01-29T03:28:33.782892Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 64.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:33.786759Z",
     "iopub.status.busy": "2023-01-29T03:28:33.786401Z",
     "iopub.status.idle": "2023-01-29T03:28:33.794419Z",
     "shell.execute_reply": "2023-01-29T03:28:33.793827Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f59180b91c0>\n",
       "├── 'a' --> tensor([[ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718],\n",
       "│                   [ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718],\n",
       "│                   [ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718],\n",
       "│                   [ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718],\n",
       "│                   [ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718],\n",
       "│                   [ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718],\n",
       "│                   [ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718],\n",
       "│                   [ 0.9330, -1.8227,  0.5544],\n",
       "│                   [ 0.5019, -1.2108, -0.3718]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5896fce8e0>\n",
       "    └── 'c' --> tensor([[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                        [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                        [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                        [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                        [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                        [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                        [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                        [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                        [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                        [ 1.3106, -1.3543,  0.4370,  0.2409]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:33.797149Z",
     "iopub.status.busy": "2023-01-29T03:28:33.796710Z",
     "iopub.status.idle": "2023-01-29T03:28:36.238193Z",
     "shell.execute_reply": "2023-01-29T03:28:36.237470Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 µs ± 44.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:36.241229Z",
     "iopub.status.busy": "2023-01-29T03:28:36.240676Z",
     "iopub.status.idle": "2023-01-29T03:28:40.833820Z",
     "shell.execute_reply": "2023-01-29T03:28:40.833045Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.5 µs ± 80.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:40.836755Z",
     "iopub.status.busy": "2023-01-29T03:28:40.836388Z",
     "iopub.status.idle": "2023-01-29T03:28:40.844375Z",
     "shell.execute_reply": "2023-01-29T03:28:40.843770Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]],\n",
       "       \n",
       "               [[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]],\n",
       "       \n",
       "               [[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]],\n",
       "       \n",
       "               [[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]],\n",
       "       \n",
       "               [[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]],\n",
       "       \n",
       "               [[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]],\n",
       "       \n",
       "               [[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]],\n",
       "       \n",
       "               [[ 0.9330, -1.8227,  0.5544],\n",
       "                [ 0.5019, -1.2108, -0.3718]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "              \n",
       "                      [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "              \n",
       "                      [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "              \n",
       "                      [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "              \n",
       "                      [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "              \n",
       "                      [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "              \n",
       "                      [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]],\n",
       "              \n",
       "                      [[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                       [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                       [ 1.3106, -1.3543,  0.4370,  0.2409]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:40.847245Z",
     "iopub.status.busy": "2023-01-29T03:28:40.846823Z",
     "iopub.status.idle": "2023-01-29T03:28:47.221045Z",
     "shell.execute_reply": "2023-01-29T03:28:47.220329Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 184 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:47.224083Z",
     "iopub.status.busy": "2023-01-29T03:28:47.223731Z",
     "iopub.status.idle": "2023-01-29T03:28:47.231338Z",
     "shell.execute_reply": "2023-01-29T03:28:47.230770Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718],\n",
       "               [ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718],\n",
       "               [ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718],\n",
       "               [ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718],\n",
       "               [ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718],\n",
       "               [ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718],\n",
       "               [ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718],\n",
       "               [ 0.9330, -1.8227,  0.5544],\n",
       "               [ 0.5019, -1.2108, -0.3718]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                      [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                      [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                      [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                      [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                      [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                      [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409],\n",
       "                      [-0.5901, -0.9554,  0.0833,  1.2324],\n",
       "                      [-0.9830,  0.2653,  1.8226,  0.8970],\n",
       "                      [ 1.3106, -1.3543,  0.4370,  0.2409]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:47.234197Z",
     "iopub.status.busy": "2023-01-29T03:28:47.233693Z",
     "iopub.status.idle": "2023-01-29T03:28:58.803789Z",
     "shell.execute_reply": "2023-01-29T03:28:58.803053Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 317 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-01-29T03:28:58.806912Z",
     "iopub.status.busy": "2023-01-29T03:28:58.806563Z",
     "iopub.status.idle": "2023-01-29T03:29:01.330456Z",
     "shell.execute_reply": "2023-01-29T03:29:01.329893Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "310 µs ± 1.57 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
