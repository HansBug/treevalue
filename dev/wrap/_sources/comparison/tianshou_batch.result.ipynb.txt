{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:22.623781Z",
     "iopub.status.busy": "2023-02-27T12:33:22.623493Z",
     "iopub.status.idle": "2023-02-27T12:33:23.615817Z",
     "shell.execute_reply": "2023-02-27T12:33:23.615019Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:23.620175Z",
     "iopub.status.busy": "2023-02-27T12:33:23.619619Z",
     "iopub.status.idle": "2023-02-27T12:33:23.655265Z",
     "shell.execute_reply": "2023-02-27T12:33:23.654566Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:23.658392Z",
     "iopub.status.busy": "2023-02-27T12:33:23.657969Z",
     "iopub.status.idle": "2023-02-27T12:33:23.668385Z",
     "shell.execute_reply": "2023-02-27T12:33:23.667783Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2d001d7880>\n",
       "├── 'a' --> tensor([[ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2d001d7b20>\n",
       "    └── 'c' --> tensor([[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:23.671500Z",
     "iopub.status.busy": "2023-02-27T12:33:23.670961Z",
     "iopub.status.idle": "2023-02-27T12:33:23.676766Z",
     "shell.execute_reply": "2023-02-27T12:33:23.676155Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.8312, -0.5588, -0.8938],\n",
       "        [-0.5969, -0.9782, -0.0883]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:23.679795Z",
     "iopub.status.busy": "2023-02-27T12:33:23.679258Z",
     "iopub.status.idle": "2023-02-27T12:33:28.825838Z",
     "shell.execute_reply": "2023-02-27T12:33:28.824956Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.4 ns ± 0.141 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:28.829388Z",
     "iopub.status.busy": "2023-02-27T12:33:28.828785Z",
     "iopub.status.idle": "2023-02-27T12:33:28.835986Z",
     "shell.execute_reply": "2023-02-27T12:33:28.835364Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2d001d7880>\n",
       "├── 'a' --> tensor([[ 1.8520, -1.9909,  0.2433],\n",
       "│                   [ 0.8368,  1.3521, -1.5298]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2d001d7b20>\n",
       "    └── 'c' --> tensor([[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:28.838804Z",
     "iopub.status.busy": "2023-02-27T12:33:28.838236Z",
     "iopub.status.idle": "2023-02-27T12:33:35.342069Z",
     "shell.execute_reply": "2023-02-27T12:33:35.341165Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.1 ns ± 0.0606 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:35.345909Z",
     "iopub.status.busy": "2023-02-27T12:33:35.345307Z",
     "iopub.status.idle": "2023-02-27T12:33:35.678204Z",
     "shell.execute_reply": "2023-02-27T12:33:35.677450Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:35.682050Z",
     "iopub.status.busy": "2023-02-27T12:33:35.681445Z",
     "iopub.status.idle": "2023-02-27T12:33:35.687298Z",
     "shell.execute_reply": "2023-02-27T12:33:35.686641Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:35.689928Z",
     "iopub.status.busy": "2023-02-27T12:33:35.689497Z",
     "iopub.status.idle": "2023-02-27T12:33:35.694256Z",
     "shell.execute_reply": "2023-02-27T12:33:35.693631Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.8312, -0.5588, -0.8938],\n",
       "        [-0.5969, -0.9782, -0.0883]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:35.696768Z",
     "iopub.status.busy": "2023-02-27T12:33:35.696420Z",
     "iopub.status.idle": "2023-02-27T12:33:39.951995Z",
     "shell.execute_reply": "2023-02-27T12:33:39.951115Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52 ns ± 0.0632 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:39.955515Z",
     "iopub.status.busy": "2023-02-27T12:33:39.955096Z",
     "iopub.status.idle": "2023-02-27T12:33:39.962224Z",
     "shell.execute_reply": "2023-02-27T12:33:39.961633Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6137,  0.6109, -0.3217],\n",
       "               [ 1.8421, -2.0891, -1.7462]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:39.964712Z",
     "iopub.status.busy": "2023-02-27T12:33:39.964353Z",
     "iopub.status.idle": "2023-02-27T12:33:43.958494Z",
     "shell.execute_reply": "2023-02-27T12:33:43.957583Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492 ns ± 0.0339 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:43.962586Z",
     "iopub.status.busy": "2023-02-27T12:33:43.962135Z",
     "iopub.status.idle": "2023-02-27T12:33:50.931865Z",
     "shell.execute_reply": "2023-02-27T12:33:50.931114Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "859 ns ± 0.671 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:50.935458Z",
     "iopub.status.busy": "2023-02-27T12:33:50.935024Z",
     "iopub.status.idle": "2023-02-27T12:33:59.877026Z",
     "shell.execute_reply": "2023-02-27T12:33:59.876152Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 µs ± 8.44 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:59.880866Z",
     "iopub.status.busy": "2023-02-27T12:33:59.880298Z",
     "iopub.status.idle": "2023-02-27T12:33:59.884208Z",
     "shell.execute_reply": "2023-02-27T12:33:59.883522Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:33:59.887353Z",
     "iopub.status.busy": "2023-02-27T12:33:59.887120Z",
     "iopub.status.idle": "2023-02-27T12:34:11.764662Z",
     "shell.execute_reply": "2023-02-27T12:34:11.764019Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 1.95 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:11.767810Z",
     "iopub.status.busy": "2023-02-27T12:34:11.767376Z",
     "iopub.status.idle": "2023-02-27T12:34:23.328153Z",
     "shell.execute_reply": "2023-02-27T12:34:23.327499Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 237 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:23.331553Z",
     "iopub.status.busy": "2023-02-27T12:34:23.331000Z",
     "iopub.status.idle": "2023-02-27T12:34:23.334631Z",
     "shell.execute_reply": "2023-02-27T12:34:23.334061Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:23.337306Z",
     "iopub.status.busy": "2023-02-27T12:34:23.336843Z",
     "iopub.status.idle": "2023-02-27T12:34:23.344195Z",
     "shell.execute_reply": "2023-02-27T12:34:23.343631Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2d001d3370>\n",
       "├── 'a' --> tensor([[[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]],\n",
       "│           \n",
       "│                   [[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]],\n",
       "│           \n",
       "│                   [[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]],\n",
       "│           \n",
       "│                   [[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]],\n",
       "│           \n",
       "│                   [[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]],\n",
       "│           \n",
       "│                   [[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]],\n",
       "│           \n",
       "│                   [[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]],\n",
       "│           \n",
       "│                   [[ 1.8312, -0.5588, -0.8938],\n",
       "│                    [-0.5969, -0.9782, -0.0883]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2d001d3820>\n",
       "    └── 'c' --> tensor([[[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "                \n",
       "                        [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "                \n",
       "                        [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "                \n",
       "                        [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "                \n",
       "                        [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "                \n",
       "                        [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "                \n",
       "                        [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "                \n",
       "                        [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                         [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                         [-1.0609, -0.1370, -0.3257,  1.2616]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:23.346842Z",
     "iopub.status.busy": "2023-02-27T12:34:23.346364Z",
     "iopub.status.idle": "2023-02-27T12:34:25.950805Z",
     "shell.execute_reply": "2023-02-27T12:34:25.949912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 25.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:25.954380Z",
     "iopub.status.busy": "2023-02-27T12:34:25.953802Z",
     "iopub.status.idle": "2023-02-27T12:34:25.961285Z",
     "shell.execute_reply": "2023-02-27T12:34:25.960602Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2c556023a0>\n",
       "├── 'a' --> tensor([[ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883],\n",
       "│                   [ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883],\n",
       "│                   [ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883],\n",
       "│                   [ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883],\n",
       "│                   [ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883],\n",
       "│                   [ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883],\n",
       "│                   [ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883],\n",
       "│                   [ 1.8312, -0.5588, -0.8938],\n",
       "│                   [-0.5969, -0.9782, -0.0883]])\n",
       "└── 'x' --> <FastTreeValue 0x7f2c54f0a580>\n",
       "    └── 'c' --> tensor([[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                        [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                        [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                        [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                        [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                        [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                        [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                        [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                        [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                        [-1.0609, -0.1370, -0.3257,  1.2616]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:25.964022Z",
     "iopub.status.busy": "2023-02-27T12:34:25.963652Z",
     "iopub.status.idle": "2023-02-27T12:34:28.424941Z",
     "shell.execute_reply": "2023-02-27T12:34:28.424056Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.3 µs ± 66.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:28.428745Z",
     "iopub.status.busy": "2023-02-27T12:34:28.428326Z",
     "iopub.status.idle": "2023-02-27T12:34:33.227498Z",
     "shell.execute_reply": "2023-02-27T12:34:33.226588Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59 µs ± 31.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:33.231067Z",
     "iopub.status.busy": "2023-02-27T12:34:33.230550Z",
     "iopub.status.idle": "2023-02-27T12:34:33.239135Z",
     "shell.execute_reply": "2023-02-27T12:34:33.238496Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "              \n",
       "                      [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "              \n",
       "                      [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "              \n",
       "                      [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "              \n",
       "                      [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "              \n",
       "                      [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "              \n",
       "                      [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]],\n",
       "              \n",
       "                      [[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                       [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                       [-1.0609, -0.1370, -0.3257,  1.2616]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]],\n",
       "       \n",
       "               [[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]],\n",
       "       \n",
       "               [[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]],\n",
       "       \n",
       "               [[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]],\n",
       "       \n",
       "               [[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]],\n",
       "       \n",
       "               [[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]],\n",
       "       \n",
       "               [[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]],\n",
       "       \n",
       "               [[ 1.8312, -0.5588, -0.8938],\n",
       "                [-0.5969, -0.9782, -0.0883]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:33.241861Z",
     "iopub.status.busy": "2023-02-27T12:34:33.241482Z",
     "iopub.status.idle": "2023-02-27T12:34:39.504600Z",
     "shell.execute_reply": "2023-02-27T12:34:39.503797Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.1 µs ± 202 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:39.507885Z",
     "iopub.status.busy": "2023-02-27T12:34:39.507511Z",
     "iopub.status.idle": "2023-02-27T12:34:39.515741Z",
     "shell.execute_reply": "2023-02-27T12:34:39.514893Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                      [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                      [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                      [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                      [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                      [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                      [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616],\n",
       "                      [ 0.7187,  0.4468,  0.0656, -1.9203],\n",
       "                      [-0.8002,  0.4117,  0.2384, -1.7923],\n",
       "                      [-1.0609, -0.1370, -0.3257,  1.2616]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883],\n",
       "               [ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883],\n",
       "               [ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883],\n",
       "               [ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883],\n",
       "               [ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883],\n",
       "               [ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883],\n",
       "               [ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883],\n",
       "               [ 1.8312, -0.5588, -0.8938],\n",
       "               [-0.5969, -0.9782, -0.0883]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:39.518866Z",
     "iopub.status.busy": "2023-02-27T12:34:39.518379Z",
     "iopub.status.idle": "2023-02-27T12:34:51.220018Z",
     "shell.execute_reply": "2023-02-27T12:34:51.219175Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 1.42 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T12:34:51.223382Z",
     "iopub.status.busy": "2023-02-27T12:34:51.222916Z",
     "iopub.status.idle": "2023-02-27T12:34:53.896064Z",
     "shell.execute_reply": "2023-02-27T12:34:53.895362Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "327 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
