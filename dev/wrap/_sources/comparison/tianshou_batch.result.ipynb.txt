{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:37.097736Z",
     "iopub.status.busy": "2023-05-26T07:48:37.097202Z",
     "iopub.status.idle": "2023-05-26T07:48:38.401068Z",
     "shell.execute_reply": "2023-05-26T07:48:38.400335Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:38.405007Z",
     "iopub.status.busy": "2023-05-26T07:48:38.404337Z",
     "iopub.status.idle": "2023-05-26T07:48:38.434299Z",
     "shell.execute_reply": "2023-05-26T07:48:38.433655Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:38.437723Z",
     "iopub.status.busy": "2023-05-26T07:48:38.437175Z",
     "iopub.status.idle": "2023-05-26T07:48:38.445732Z",
     "shell.execute_reply": "2023-05-26T07:48:38.445093Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3ad4073d00>\n",
       "├── 'a' --> tensor([[ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3ad4073be0>\n",
       "    └── 'c' --> tensor([[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:38.449680Z",
     "iopub.status.busy": "2023-05-26T07:48:38.449158Z",
     "iopub.status.idle": "2023-05-26T07:48:38.453929Z",
     "shell.execute_reply": "2023-05-26T07:48:38.453295Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4213,  0.1931, -0.7368],\n",
       "        [-0.2171, -0.6927, -0.5861]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:38.457053Z",
     "iopub.status.busy": "2023-05-26T07:48:38.456842Z",
     "iopub.status.idle": "2023-05-26T07:48:43.253550Z",
     "shell.execute_reply": "2023-05-26T07:48:43.252310Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 ns ± 0.0718 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:43.256690Z",
     "iopub.status.busy": "2023-05-26T07:48:43.256311Z",
     "iopub.status.idle": "2023-05-26T07:48:43.263468Z",
     "shell.execute_reply": "2023-05-26T07:48:43.262862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3ad4073d00>\n",
       "├── 'a' --> tensor([[ 0.6699,  1.2791, -0.4752],\n",
       "│                   [-0.0649, -1.7032,  0.8176]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3ad4073be0>\n",
       "    └── 'c' --> tensor([[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:43.266820Z",
     "iopub.status.busy": "2023-05-26T07:48:43.266216Z",
     "iopub.status.idle": "2023-05-26T07:48:48.774835Z",
     "shell.execute_reply": "2023-05-26T07:48:48.774149Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.7 ns ± 0.0437 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:48.778388Z",
     "iopub.status.busy": "2023-05-26T07:48:48.777786Z",
     "iopub.status.idle": "2023-05-26T07:48:49.132588Z",
     "shell.execute_reply": "2023-05-26T07:48:49.131905Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:49.136487Z",
     "iopub.status.busy": "2023-05-26T07:48:49.135762Z",
     "iopub.status.idle": "2023-05-26T07:48:49.142512Z",
     "shell.execute_reply": "2023-05-26T07:48:49.141911Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:49.145910Z",
     "iopub.status.busy": "2023-05-26T07:48:49.145327Z",
     "iopub.status.idle": "2023-05-26T07:48:49.151272Z",
     "shell.execute_reply": "2023-05-26T07:48:49.150681Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.4213,  0.1931, -0.7368],\n",
       "        [-0.2171, -0.6927, -0.5861]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:49.154005Z",
     "iopub.status.busy": "2023-05-26T07:48:49.153645Z",
     "iopub.status.idle": "2023-05-26T07:48:53.923469Z",
     "shell.execute_reply": "2023-05-26T07:48:53.922613Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.8 ns ± 0.0216 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:53.927075Z",
     "iopub.status.busy": "2023-05-26T07:48:53.926393Z",
     "iopub.status.idle": "2023-05-26T07:48:53.932557Z",
     "shell.execute_reply": "2023-05-26T07:48:53.931841Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.3232,  0.3178, -0.3314],\n",
       "               [-0.0485,  0.3317, -0.2818]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:53.935696Z",
     "iopub.status.busy": "2023-05-26T07:48:53.935128Z",
     "iopub.status.idle": "2023-05-26T07:48:57.819191Z",
     "shell.execute_reply": "2023-05-26T07:48:57.818578Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "478 ns ± 0.251 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:48:57.822483Z",
     "iopub.status.busy": "2023-05-26T07:48:57.821899Z",
     "iopub.status.idle": "2023-05-26T07:49:04.872613Z",
     "shell.execute_reply": "2023-05-26T07:49:04.872026Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "868 ns ± 1.5 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:04.875768Z",
     "iopub.status.busy": "2023-05-26T07:49:04.875394Z",
     "iopub.status.idle": "2023-05-26T07:49:13.966861Z",
     "shell.execute_reply": "2023-05-26T07:49:13.966254Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 20.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:13.970070Z",
     "iopub.status.busy": "2023-05-26T07:49:13.969713Z",
     "iopub.status.idle": "2023-05-26T07:49:13.972917Z",
     "shell.execute_reply": "2023-05-26T07:49:13.972263Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:13.975910Z",
     "iopub.status.busy": "2023-05-26T07:49:13.975559Z",
     "iopub.status.idle": "2023-05-26T07:49:25.178475Z",
     "shell.execute_reply": "2023-05-26T07:49:25.177885Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 340 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:25.183067Z",
     "iopub.status.busy": "2023-05-26T07:49:25.182011Z",
     "iopub.status.idle": "2023-05-26T07:49:36.433296Z",
     "shell.execute_reply": "2023-05-26T07:49:36.432739Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 642 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:36.438263Z",
     "iopub.status.busy": "2023-05-26T07:49:36.436771Z",
     "iopub.status.idle": "2023-05-26T07:49:36.441870Z",
     "shell.execute_reply": "2023-05-26T07:49:36.441326Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:36.446279Z",
     "iopub.status.busy": "2023-05-26T07:49:36.444906Z",
     "iopub.status.idle": "2023-05-26T07:49:36.454886Z",
     "shell.execute_reply": "2023-05-26T07:49:36.454329Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3a06377820>\n",
       "├── 'a' --> tensor([[[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]],\n",
       "│           \n",
       "│                   [[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]],\n",
       "│           \n",
       "│                   [[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]],\n",
       "│           \n",
       "│                   [[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]],\n",
       "│           \n",
       "│                   [[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]],\n",
       "│           \n",
       "│                   [[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]],\n",
       "│           \n",
       "│                   [[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]],\n",
       "│           \n",
       "│                   [[ 0.4213,  0.1931, -0.7368],\n",
       "│                    [-0.2171, -0.6927, -0.5861]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3a063778b0>\n",
       "    └── 'c' --> tensor([[[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "                \n",
       "                        [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "                \n",
       "                        [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "                \n",
       "                        [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "                \n",
       "                        [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "                \n",
       "                        [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "                \n",
       "                        [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "                \n",
       "                        [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                         [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                         [ 0.9824,  2.4932,  0.4896,  0.3288]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:36.458456Z",
     "iopub.status.busy": "2023-05-26T07:49:36.457922Z",
     "iopub.status.idle": "2023-05-26T07:49:39.176744Z",
     "shell.execute_reply": "2023-05-26T07:49:39.175569Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.4 µs ± 68.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:39.179957Z",
     "iopub.status.busy": "2023-05-26T07:49:39.179389Z",
     "iopub.status.idle": "2023-05-26T07:49:39.187038Z",
     "shell.execute_reply": "2023-05-26T07:49:39.186323Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3a0e606cd0>\n",
       "├── 'a' --> tensor([[ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861],\n",
       "│                   [ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861],\n",
       "│                   [ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861],\n",
       "│                   [ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861],\n",
       "│                   [ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861],\n",
       "│                   [ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861],\n",
       "│                   [ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861],\n",
       "│                   [ 0.4213,  0.1931, -0.7368],\n",
       "│                   [-0.2171, -0.6927, -0.5861]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3ad403b070>\n",
       "    └── 'c' --> tensor([[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                        [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                        [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                        [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                        [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                        [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                        [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                        [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                        [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                        [ 0.9824,  2.4932,  0.4896,  0.3288]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:39.190219Z",
     "iopub.status.busy": "2023-05-26T07:49:39.189566Z",
     "iopub.status.idle": "2023-05-26T07:49:41.740476Z",
     "shell.execute_reply": "2023-05-26T07:49:41.739885Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 27.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:41.743654Z",
     "iopub.status.busy": "2023-05-26T07:49:41.743061Z",
     "iopub.status.idle": "2023-05-26T07:49:47.374927Z",
     "shell.execute_reply": "2023-05-26T07:49:47.374157Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.3 µs ± 255 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:47.378309Z",
     "iopub.status.busy": "2023-05-26T07:49:47.377739Z",
     "iopub.status.idle": "2023-05-26T07:49:47.385338Z",
     "shell.execute_reply": "2023-05-26T07:49:47.384685Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]],\n",
       "       \n",
       "               [[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]],\n",
       "       \n",
       "               [[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]],\n",
       "       \n",
       "               [[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]],\n",
       "       \n",
       "               [[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]],\n",
       "       \n",
       "               [[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]],\n",
       "       \n",
       "               [[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]],\n",
       "       \n",
       "               [[ 0.4213,  0.1931, -0.7368],\n",
       "                [-0.2171, -0.6927, -0.5861]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "              \n",
       "                      [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "              \n",
       "                      [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "              \n",
       "                      [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "              \n",
       "                      [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "              \n",
       "                      [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "              \n",
       "                      [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]],\n",
       "              \n",
       "                      [[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                       [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                       [ 0.9824,  2.4932,  0.4896,  0.3288]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:47.388324Z",
     "iopub.status.busy": "2023-05-26T07:49:47.387801Z",
     "iopub.status.idle": "2023-05-26T07:49:53.803754Z",
     "shell.execute_reply": "2023-05-26T07:49:53.803154Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79 µs ± 328 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:53.807564Z",
     "iopub.status.busy": "2023-05-26T07:49:53.806878Z",
     "iopub.status.idle": "2023-05-26T07:49:53.814161Z",
     "shell.execute_reply": "2023-05-26T07:49:53.813482Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861],\n",
       "               [ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861],\n",
       "               [ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861],\n",
       "               [ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861],\n",
       "               [ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861],\n",
       "               [ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861],\n",
       "               [ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861],\n",
       "               [ 0.4213,  0.1931, -0.7368],\n",
       "               [-0.2171, -0.6927, -0.5861]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                      [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                      [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                      [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                      [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                      [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                      [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288],\n",
       "                      [ 1.8470, -0.4470, -0.9719,  0.1959],\n",
       "                      [ 1.0085, -1.2752, -0.5128, -0.6092],\n",
       "                      [ 0.9824,  2.4932,  0.4896,  0.3288]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:49:53.817041Z",
     "iopub.status.busy": "2023-05-26T07:49:53.816680Z",
     "iopub.status.idle": "2023-05-26T07:50:05.767346Z",
     "shell.execute_reply": "2023-05-26T07:50:05.766695Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "147 µs ± 363 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T07:50:05.770625Z",
     "iopub.status.busy": "2023-05-26T07:50:05.770087Z",
     "iopub.status.idle": "2023-05-26T07:50:08.440754Z",
     "shell.execute_reply": "2023-05-26T07:50:08.440201Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "328 µs ± 3.16 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
