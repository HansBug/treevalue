{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:29:54.660070Z",
     "iopub.status.busy": "2023-02-27T11:29:54.659619Z",
     "iopub.status.idle": "2023-02-27T11:29:55.680847Z",
     "shell.execute_reply": "2023-02-27T11:29:55.680007Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:29:55.685401Z",
     "iopub.status.busy": "2023-02-27T11:29:55.684765Z",
     "iopub.status.idle": "2023-02-27T11:29:55.721257Z",
     "shell.execute_reply": "2023-02-27T11:29:55.720532Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:29:55.724728Z",
     "iopub.status.busy": "2023-02-27T11:29:55.724218Z",
     "iopub.status.idle": "2023-02-27T11:29:55.733038Z",
     "shell.execute_reply": "2023-02-27T11:29:55.732327Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5440b8dee0>\n",
       "├── 'a' --> tensor([[-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5440b79e50>\n",
       "    └── 'c' --> tensor([[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:29:55.736126Z",
     "iopub.status.busy": "2023-02-27T11:29:55.735689Z",
     "iopub.status.idle": "2023-02-27T11:29:55.740790Z",
     "shell.execute_reply": "2023-02-27T11:29:55.740065Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2296, -0.3877, -1.8695],\n",
       "        [ 0.4846,  0.1323, -0.4213]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:29:55.743861Z",
     "iopub.status.busy": "2023-02-27T11:29:55.743273Z",
     "iopub.status.idle": "2023-02-27T11:30:00.807907Z",
     "shell.execute_reply": "2023-02-27T11:30:00.807014Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.4 ns ± 0.0651 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:00.811651Z",
     "iopub.status.busy": "2023-02-27T11:30:00.811007Z",
     "iopub.status.idle": "2023-02-27T11:30:00.817618Z",
     "shell.execute_reply": "2023-02-27T11:30:00.816920Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5440b8dee0>\n",
       "├── 'a' --> tensor([[-0.5636,  2.6099,  0.7317],\n",
       "│                   [ 1.1015,  0.4188,  0.4348]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5440b79e50>\n",
       "    └── 'c' --> tensor([[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:00.820787Z",
     "iopub.status.busy": "2023-02-27T11:30:00.820324Z",
     "iopub.status.idle": "2023-02-27T11:30:06.623174Z",
     "shell.execute_reply": "2023-02-27T11:30:06.622268Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.4 ns ± 0.0452 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:06.626741Z",
     "iopub.status.busy": "2023-02-27T11:30:06.626235Z",
     "iopub.status.idle": "2023-02-27T11:30:07.012370Z",
     "shell.execute_reply": "2023-02-27T11:30:07.011582Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:07.016108Z",
     "iopub.status.busy": "2023-02-27T11:30:07.015580Z",
     "iopub.status.idle": "2023-02-27T11:30:07.021702Z",
     "shell.execute_reply": "2023-02-27T11:30:07.021023Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:07.024618Z",
     "iopub.status.busy": "2023-02-27T11:30:07.024219Z",
     "iopub.status.idle": "2023-02-27T11:30:07.029332Z",
     "shell.execute_reply": "2023-02-27T11:30:07.028633Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2296, -0.3877, -1.8695],\n",
       "        [ 0.4846,  0.1323, -0.4213]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:07.032261Z",
     "iopub.status.busy": "2023-02-27T11:30:07.031710Z",
     "iopub.status.idle": "2023-02-27T11:30:11.779090Z",
     "shell.execute_reply": "2023-02-27T11:30:11.778115Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.4 ns ± 0.117 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:11.782911Z",
     "iopub.status.busy": "2023-02-27T11:30:11.782463Z",
     "iopub.status.idle": "2023-02-27T11:30:11.790238Z",
     "shell.execute_reply": "2023-02-27T11:30:11.789512Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0211,  0.1776, -2.0232],\n",
       "               [-1.1027, -0.0667,  1.0153]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:11.793379Z",
     "iopub.status.busy": "2023-02-27T11:30:11.792903Z",
     "iopub.status.idle": "2023-02-27T11:30:15.778471Z",
     "shell.execute_reply": "2023-02-27T11:30:15.777586Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "491 ns ± 0.121 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:15.782152Z",
     "iopub.status.busy": "2023-02-27T11:30:15.781635Z",
     "iopub.status.idle": "2023-02-27T11:30:22.762376Z",
     "shell.execute_reply": "2023-02-27T11:30:22.761636Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "857 ns ± 0.134 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:22.766082Z",
     "iopub.status.busy": "2023-02-27T11:30:22.765380Z",
     "iopub.status.idle": "2023-02-27T11:30:31.606098Z",
     "shell.execute_reply": "2023-02-27T11:30:31.604781Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 32.2 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:31.609736Z",
     "iopub.status.busy": "2023-02-27T11:30:31.609206Z",
     "iopub.status.idle": "2023-02-27T11:30:31.613638Z",
     "shell.execute_reply": "2023-02-27T11:30:31.612991Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:31.616806Z",
     "iopub.status.busy": "2023-02-27T11:30:31.616265Z",
     "iopub.status.idle": "2023-02-27T11:30:43.300775Z",
     "shell.execute_reply": "2023-02-27T11:30:43.300079Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 422 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:43.304048Z",
     "iopub.status.busy": "2023-02-27T11:30:43.303494Z",
     "iopub.status.idle": "2023-02-27T11:30:55.007203Z",
     "shell.execute_reply": "2023-02-27T11:30:55.006346Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 1.49 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:55.011207Z",
     "iopub.status.busy": "2023-02-27T11:30:55.010594Z",
     "iopub.status.idle": "2023-02-27T11:30:55.015367Z",
     "shell.execute_reply": "2023-02-27T11:30:55.014716Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:55.018226Z",
     "iopub.status.busy": "2023-02-27T11:30:55.017767Z",
     "iopub.status.idle": "2023-02-27T11:30:55.026200Z",
     "shell.execute_reply": "2023-02-27T11:30:55.025572Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f539c412670>\n",
       "├── 'a' --> tensor([[[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]],\n",
       "│           \n",
       "│                   [[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]],\n",
       "│           \n",
       "│                   [[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]],\n",
       "│           \n",
       "│                   [[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]],\n",
       "│           \n",
       "│                   [[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]],\n",
       "│           \n",
       "│                   [[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]],\n",
       "│           \n",
       "│                   [[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]],\n",
       "│           \n",
       "│                   [[-0.2296, -0.3877, -1.8695],\n",
       "│                    [ 0.4846,  0.1323, -0.4213]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f539c412310>\n",
       "    └── 'c' --> tensor([[[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "                \n",
       "                        [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "                \n",
       "                        [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "                \n",
       "                        [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "                \n",
       "                        [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "                \n",
       "                        [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "                \n",
       "                        [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "                \n",
       "                        [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                         [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                         [ 0.9246,  0.5801, -1.7042,  1.2585]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:55.029221Z",
     "iopub.status.busy": "2023-02-27T11:30:55.028795Z",
     "iopub.status.idle": "2023-02-27T11:30:57.657211Z",
     "shell.execute_reply": "2023-02-27T11:30:57.656320Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.3 µs ± 76 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:57.660867Z",
     "iopub.status.busy": "2023-02-27T11:30:57.660255Z",
     "iopub.status.idle": "2023-02-27T11:30:57.668677Z",
     "shell.execute_reply": "2023-02-27T11:30:57.668030Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f539580b400>\n",
       "├── 'a' --> tensor([[-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213],\n",
       "│                   [-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213],\n",
       "│                   [-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213],\n",
       "│                   [-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213],\n",
       "│                   [-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213],\n",
       "│                   [-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213],\n",
       "│                   [-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213],\n",
       "│                   [-0.2296, -0.3877, -1.8695],\n",
       "│                   [ 0.4846,  0.1323, -0.4213]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5395ec1cd0>\n",
       "    └── 'c' --> tensor([[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                        [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                        [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                        [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                        [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                        [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                        [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                        [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                        [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                        [ 0.9246,  0.5801, -1.7042,  1.2585]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:30:57.671903Z",
     "iopub.status.busy": "2023-02-27T11:30:57.671340Z",
     "iopub.status.idle": "2023-02-27T11:31:00.153973Z",
     "shell.execute_reply": "2023-02-27T11:31:00.152830Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.5 µs ± 46.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:31:00.157413Z",
     "iopub.status.busy": "2023-02-27T11:31:00.156895Z",
     "iopub.status.idle": "2023-02-27T11:31:04.878814Z",
     "shell.execute_reply": "2023-02-27T11:31:04.877913Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 µs ± 57.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:31:04.882507Z",
     "iopub.status.busy": "2023-02-27T11:31:04.881998Z",
     "iopub.status.idle": "2023-02-27T11:31:04.890525Z",
     "shell.execute_reply": "2023-02-27T11:31:04.889892Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "              \n",
       "                      [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "              \n",
       "                      [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "              \n",
       "                      [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "              \n",
       "                      [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "              \n",
       "                      [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "              \n",
       "                      [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]],\n",
       "              \n",
       "                      [[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                       [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                       [ 0.9246,  0.5801, -1.7042,  1.2585]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]],\n",
       "       \n",
       "               [[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]],\n",
       "       \n",
       "               [[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]],\n",
       "       \n",
       "               [[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]],\n",
       "       \n",
       "               [[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]],\n",
       "       \n",
       "               [[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]],\n",
       "       \n",
       "               [[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]],\n",
       "       \n",
       "               [[-0.2296, -0.3877, -1.8695],\n",
       "                [ 0.4846,  0.1323, -0.4213]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:31:04.893461Z",
     "iopub.status.busy": "2023-02-27T11:31:04.892986Z",
     "iopub.status.idle": "2023-02-27T11:31:11.226592Z",
     "shell.execute_reply": "2023-02-27T11:31:11.225713Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.9 µs ± 91.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:31:11.230302Z",
     "iopub.status.busy": "2023-02-27T11:31:11.229669Z",
     "iopub.status.idle": "2023-02-27T11:31:11.237831Z",
     "shell.execute_reply": "2023-02-27T11:31:11.237095Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                      [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                      [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                      [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                      [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                      [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                      [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585],\n",
       "                      [ 1.1470, -0.3116,  0.1750,  0.2165],\n",
       "                      [-0.0946, -0.4037,  2.1416,  0.8505],\n",
       "                      [ 0.9246,  0.5801, -1.7042,  1.2585]]),\n",
       "       ),\n",
       "    a: tensor([[-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213],\n",
       "               [-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213],\n",
       "               [-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213],\n",
       "               [-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213],\n",
       "               [-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213],\n",
       "               [-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213],\n",
       "               [-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213],\n",
       "               [-0.2296, -0.3877, -1.8695],\n",
       "               [ 0.4846,  0.1323, -0.4213]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:31:11.241114Z",
     "iopub.status.busy": "2023-02-27T11:31:11.240637Z",
     "iopub.status.idle": "2023-02-27T11:31:23.250315Z",
     "shell.execute_reply": "2023-02-27T11:31:23.249405Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "148 µs ± 979 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:31:23.253875Z",
     "iopub.status.busy": "2023-02-27T11:31:23.253201Z",
     "iopub.status.idle": "2023-02-27T11:31:25.954554Z",
     "shell.execute_reply": "2023-02-27T11:31:25.953869Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "331 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
