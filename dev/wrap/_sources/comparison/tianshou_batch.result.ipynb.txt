{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:24.570182Z",
     "iopub.status.busy": "2024-10-16T13:35:24.569990Z",
     "iopub.status.idle": "2024-10-16T13:35:25.791700Z",
     "shell.execute_reply": "2024-10-16T13:35:25.790916Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:25.794475Z",
     "iopub.status.busy": "2024-10-16T13:35:25.794158Z",
     "iopub.status.idle": "2024-10-16T13:35:25.820981Z",
     "shell.execute_reply": "2024-10-16T13:35:25.820456Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:25.823074Z",
     "iopub.status.busy": "2024-10-16T13:35:25.822681Z",
     "iopub.status.idle": "2024-10-16T13:35:25.831595Z",
     "shell.execute_reply": "2024-10-16T13:35:25.830911Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9478592e50>\n",
       "├── 'a' --> tensor([[-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024]])\n",
       "└── 'x' --> <FastTreeValue 0x7f94785928e0>\n",
       "    └── 'c' --> tensor([[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:25.833625Z",
     "iopub.status.busy": "2024-10-16T13:35:25.833242Z",
     "iopub.status.idle": "2024-10-16T13:35:25.837802Z",
     "shell.execute_reply": "2024-10-16T13:35:25.837274Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4616,  0.9064, -0.6697],\n",
       "        [-1.2504, -1.3123, -0.8024]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:25.839940Z",
     "iopub.status.busy": "2024-10-16T13:35:25.839557Z",
     "iopub.status.idle": "2024-10-16T13:35:29.862356Z",
     "shell.execute_reply": "2024-10-16T13:35:29.861623Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49.5 ns ± 0.185 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:29.864667Z",
     "iopub.status.busy": "2024-10-16T13:35:29.864437Z",
     "iopub.status.idle": "2024-10-16T13:35:29.870404Z",
     "shell.execute_reply": "2024-10-16T13:35:29.869869Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9478592e50>\n",
       "├── 'a' --> tensor([[ 0.1015, -1.4110, -1.4973],\n",
       "│                   [ 0.0160,  0.4635, -0.5827]])\n",
       "└── 'x' --> <FastTreeValue 0x7f94785928e0>\n",
       "    └── 'c' --> tensor([[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:29.872615Z",
     "iopub.status.busy": "2024-10-16T13:35:29.872222Z",
     "iopub.status.idle": "2024-10-16T13:35:34.256337Z",
     "shell.execute_reply": "2024-10-16T13:35:34.255609Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53.9 ns ± 0.25 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:34.258647Z",
     "iopub.status.busy": "2024-10-16T13:35:34.258228Z",
     "iopub.status.idle": "2024-10-16T13:35:34.578658Z",
     "shell.execute_reply": "2024-10-16T13:35:34.578049Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:34.581361Z",
     "iopub.status.busy": "2024-10-16T13:35:34.580829Z",
     "iopub.status.idle": "2024-10-16T13:35:34.586084Z",
     "shell.execute_reply": "2024-10-16T13:35:34.585554Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:34.588173Z",
     "iopub.status.busy": "2024-10-16T13:35:34.587771Z",
     "iopub.status.idle": "2024-10-16T13:35:34.592389Z",
     "shell.execute_reply": "2024-10-16T13:35:34.591848Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4616,  0.9064, -0.6697],\n",
       "        [-1.2504, -1.3123, -0.8024]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:34.594419Z",
     "iopub.status.busy": "2024-10-16T13:35:34.594024Z",
     "iopub.status.idle": "2024-10-16T13:35:37.907195Z",
     "shell.execute_reply": "2024-10-16T13:35:37.906471Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40.8 ns ± 0.278 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:37.909564Z",
     "iopub.status.busy": "2024-10-16T13:35:37.909123Z",
     "iopub.status.idle": "2024-10-16T13:35:37.914896Z",
     "shell.execute_reply": "2024-10-16T13:35:37.914328Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.3008, -2.3097, -0.6572],\n",
       "               [-1.9296,  0.2248, -0.2023]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:37.917044Z",
     "iopub.status.busy": "2024-10-16T13:35:37.916642Z",
     "iopub.status.idle": "2024-10-16T13:35:40.860410Z",
     "shell.execute_reply": "2024-10-16T13:35:40.859677Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "362 ns ± 1.17 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:40.862971Z",
     "iopub.status.busy": "2024-10-16T13:35:40.862529Z",
     "iopub.status.idle": "2024-10-16T13:35:46.384037Z",
     "shell.execute_reply": "2024-10-16T13:35:46.383350Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "678 ns ± 5.44 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:46.386302Z",
     "iopub.status.busy": "2024-10-16T13:35:46.386073Z",
     "iopub.status.idle": "2024-10-16T13:35:53.218461Z",
     "shell.execute_reply": "2024-10-16T13:35:53.217802Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.41 µs ± 29.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:53.220625Z",
     "iopub.status.busy": "2024-10-16T13:35:53.220410Z",
     "iopub.status.idle": "2024-10-16T13:35:53.223466Z",
     "shell.execute_reply": "2024-10-16T13:35:53.222910Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:35:53.225509Z",
     "iopub.status.busy": "2024-10-16T13:35:53.225147Z",
     "iopub.status.idle": "2024-10-16T13:36:04.007343Z",
     "shell.execute_reply": "2024-10-16T13:36:04.006597Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "133 µs ± 2.98 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:04.009760Z",
     "iopub.status.busy": "2024-10-16T13:36:04.009526Z",
     "iopub.status.idle": "2024-10-16T13:36:14.482319Z",
     "shell.execute_reply": "2024-10-16T13:36:14.481571Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "129 µs ± 330 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:14.484847Z",
     "iopub.status.busy": "2024-10-16T13:36:14.484620Z",
     "iopub.status.idle": "2024-10-16T13:36:14.487898Z",
     "shell.execute_reply": "2024-10-16T13:36:14.487329Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:14.490034Z",
     "iopub.status.busy": "2024-10-16T13:36:14.489656Z",
     "iopub.status.idle": "2024-10-16T13:36:14.496577Z",
     "shell.execute_reply": "2024-10-16T13:36:14.495943Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f947852db80>\n",
       "├── 'a' --> tensor([[[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]],\n",
       "│           \n",
       "│                   [[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]],\n",
       "│           \n",
       "│                   [[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]],\n",
       "│           \n",
       "│                   [[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]],\n",
       "│           \n",
       "│                   [[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]],\n",
       "│           \n",
       "│                   [[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]],\n",
       "│           \n",
       "│                   [[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]],\n",
       "│           \n",
       "│                   [[-0.4616,  0.9064, -0.6697],\n",
       "│                    [-1.2504, -1.3123, -0.8024]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f938e5f0f40>\n",
       "    └── 'c' --> tensor([[[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "                \n",
       "                        [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "                \n",
       "                        [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "                \n",
       "                        [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "                \n",
       "                        [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "                \n",
       "                        [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "                \n",
       "                        [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "                \n",
       "                        [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                         [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                         [ 0.0927, -0.4467, -0.0165, -0.6514]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:14.498693Z",
     "iopub.status.busy": "2024-10-16T13:36:14.498318Z",
     "iopub.status.idle": "2024-10-16T13:36:16.401381Z",
     "shell.execute_reply": "2024-10-16T13:36:16.400738Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23.4 µs ± 41.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:16.403800Z",
     "iopub.status.busy": "2024-10-16T13:36:16.403283Z",
     "iopub.status.idle": "2024-10-16T13:36:16.410136Z",
     "shell.execute_reply": "2024-10-16T13:36:16.409581Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f938f6554f0>\n",
       "├── 'a' --> tensor([[-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024],\n",
       "│                   [-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024],\n",
       "│                   [-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024],\n",
       "│                   [-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024],\n",
       "│                   [-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024],\n",
       "│                   [-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024],\n",
       "│                   [-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024],\n",
       "│                   [-0.4616,  0.9064, -0.6697],\n",
       "│                   [-1.2504, -1.3123, -0.8024]])\n",
       "└── 'x' --> <FastTreeValue 0x7f938f655820>\n",
       "    └── 'c' --> tensor([[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                        [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                        [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                        [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                        [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                        [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                        [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                        [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                        [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                        [ 0.0927, -0.4467, -0.0165, -0.6514]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:16.412289Z",
     "iopub.status.busy": "2024-10-16T13:36:16.411830Z",
     "iopub.status.idle": "2024-10-16T13:36:18.183242Z",
     "shell.execute_reply": "2024-10-16T13:36:18.182586Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21.8 µs ± 103 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:18.185531Z",
     "iopub.status.busy": "2024-10-16T13:36:18.185136Z",
     "iopub.status.idle": "2024-10-16T13:36:22.225716Z",
     "shell.execute_reply": "2024-10-16T13:36:22.224985Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49.6 µs ± 246 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:22.227958Z",
     "iopub.status.busy": "2024-10-16T13:36:22.227728Z",
     "iopub.status.idle": "2024-10-16T13:36:22.234739Z",
     "shell.execute_reply": "2024-10-16T13:36:22.234101Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "              \n",
       "                      [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "              \n",
       "                      [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "              \n",
       "                      [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "              \n",
       "                      [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "              \n",
       "                      [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "              \n",
       "                      [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]],\n",
       "              \n",
       "                      [[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                       [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                       [ 0.0927, -0.4467, -0.0165, -0.6514]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]],\n",
       "       \n",
       "               [[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]],\n",
       "       \n",
       "               [[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]],\n",
       "       \n",
       "               [[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]],\n",
       "       \n",
       "               [[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]],\n",
       "       \n",
       "               [[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]],\n",
       "       \n",
       "               [[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]],\n",
       "       \n",
       "               [[-0.4616,  0.9064, -0.6697],\n",
       "                [-1.2504, -1.3123, -0.8024]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:22.236785Z",
     "iopub.status.busy": "2024-10-16T13:36:22.236376Z",
     "iopub.status.idle": "2024-10-16T13:36:27.334279Z",
     "shell.execute_reply": "2024-10-16T13:36:27.333444Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.7 µs ± 148 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:27.336868Z",
     "iopub.status.busy": "2024-10-16T13:36:27.336607Z",
     "iopub.status.idle": "2024-10-16T13:36:27.343788Z",
     "shell.execute_reply": "2024-10-16T13:36:27.343099Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                      [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                      [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                      [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                      [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                      [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                      [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514],\n",
       "                      [ 0.9953, -1.9034, -0.5272, -1.1132],\n",
       "                      [-0.9842,  0.5843, -1.0633, -0.1454],\n",
       "                      [ 0.0927, -0.4467, -0.0165, -0.6514]]),\n",
       "       ),\n",
       "    a: tensor([[-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024],\n",
       "               [-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024],\n",
       "               [-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024],\n",
       "               [-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024],\n",
       "               [-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024],\n",
       "               [-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024],\n",
       "               [-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024],\n",
       "               [-0.4616,  0.9064, -0.6697],\n",
       "               [-1.2504, -1.3123, -0.8024]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:27.346174Z",
     "iopub.status.busy": "2024-10-16T13:36:27.345753Z",
     "iopub.status.idle": "2024-10-16T13:36:36.869447Z",
     "shell.execute_reply": "2024-10-16T13:36:36.868726Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "117 µs ± 662 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-16T13:36:36.871538Z",
     "iopub.status.busy": "2024-10-16T13:36:36.871292Z",
     "iopub.status.idle": "2024-10-16T13:36:39.208367Z",
     "shell.execute_reply": "2024-10-16T13:36:39.207655Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "288 µs ± 2.67 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
