{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:41:50.537895Z",
     "iopub.status.busy": "2023-08-10T04:41:50.537463Z",
     "iopub.status.idle": "2023-08-10T04:41:51.873628Z",
     "shell.execute_reply": "2023-08-10T04:41:51.872882Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:41:51.877523Z",
     "iopub.status.busy": "2023-08-10T04:41:51.877027Z",
     "iopub.status.idle": "2023-08-10T04:41:51.906835Z",
     "shell.execute_reply": "2023-08-10T04:41:51.906107Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:41:51.910535Z",
     "iopub.status.busy": "2023-08-10T04:41:51.909851Z",
     "iopub.status.idle": "2023-08-10T04:41:51.920384Z",
     "shell.execute_reply": "2023-08-10T04:41:51.919716Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f402083d2b0>\n",
       "├── 'a' --> tensor([[-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545]])\n",
       "└── 'x' --> <FastTreeValue 0x7f40228571f0>\n",
       "    └── 'c' --> tensor([[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:41:51.923683Z",
     "iopub.status.busy": "2023-08-10T04:41:51.923299Z",
     "iopub.status.idle": "2023-08-10T04:41:51.930199Z",
     "shell.execute_reply": "2023-08-10T04:41:51.929517Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1963, -0.3187,  0.4260],\n",
       "        [ 0.4080, -0.3906, -1.4545]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:41:51.933753Z",
     "iopub.status.busy": "2023-08-10T04:41:51.933156Z",
     "iopub.status.idle": "2023-08-10T04:41:56.932536Z",
     "shell.execute_reply": "2023-08-10T04:41:56.931311Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.2 ns ± 0.0527 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:41:56.936156Z",
     "iopub.status.busy": "2023-08-10T04:41:56.935498Z",
     "iopub.status.idle": "2023-08-10T04:41:56.942981Z",
     "shell.execute_reply": "2023-08-10T04:41:56.942328Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f402083d2b0>\n",
       "├── 'a' --> tensor([[ 1.1681, -0.0847, -1.1002],\n",
       "│                   [ 0.3769,  0.4170, -1.0248]])\n",
       "└── 'x' --> <FastTreeValue 0x7f40228571f0>\n",
       "    └── 'c' --> tensor([[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:41:56.946160Z",
     "iopub.status.busy": "2023-08-10T04:41:56.945598Z",
     "iopub.status.idle": "2023-08-10T04:42:02.282213Z",
     "shell.execute_reply": "2023-08-10T04:42:02.281004Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.7 ns ± 0.0349 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:02.285436Z",
     "iopub.status.busy": "2023-08-10T04:42:02.285050Z",
     "iopub.status.idle": "2023-08-10T04:42:02.649828Z",
     "shell.execute_reply": "2023-08-10T04:42:02.649127Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:02.653312Z",
     "iopub.status.busy": "2023-08-10T04:42:02.652729Z",
     "iopub.status.idle": "2023-08-10T04:42:02.658430Z",
     "shell.execute_reply": "2023-08-10T04:42:02.657749Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:02.661410Z",
     "iopub.status.busy": "2023-08-10T04:42:02.661035Z",
     "iopub.status.idle": "2023-08-10T04:42:02.666119Z",
     "shell.execute_reply": "2023-08-10T04:42:02.665467Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1963, -0.3187,  0.4260],\n",
       "        [ 0.4080, -0.3906, -1.4545]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:02.669356Z",
     "iopub.status.busy": "2023-08-10T04:42:02.668991Z",
     "iopub.status.idle": "2023-08-10T04:42:07.208163Z",
     "shell.execute_reply": "2023-08-10T04:42:07.207549Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.7 ns ± 0.0396 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:07.211505Z",
     "iopub.status.busy": "2023-08-10T04:42:07.210874Z",
     "iopub.status.idle": "2023-08-10T04:42:07.217102Z",
     "shell.execute_reply": "2023-08-10T04:42:07.216385Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5621,  0.3985,  0.1620],\n",
       "               [ 0.0837, -0.5106,  2.1501]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:07.220239Z",
     "iopub.status.busy": "2023-08-10T04:42:07.219700Z",
     "iopub.status.idle": "2023-08-10T04:42:11.232442Z",
     "shell.execute_reply": "2023-08-10T04:42:11.231322Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "494 ns ± 0.179 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:11.236078Z",
     "iopub.status.busy": "2023-08-10T04:42:11.235495Z",
     "iopub.status.idle": "2023-08-10T04:42:18.373250Z",
     "shell.execute_reply": "2023-08-10T04:42:18.372628Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "880 ns ± 1.13 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:18.376551Z",
     "iopub.status.busy": "2023-08-10T04:42:18.375942Z",
     "iopub.status.idle": "2023-08-10T04:42:27.802972Z",
     "shell.execute_reply": "2023-08-10T04:42:27.802373Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 36.6 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:27.806254Z",
     "iopub.status.busy": "2023-08-10T04:42:27.805776Z",
     "iopub.status.idle": "2023-08-10T04:42:27.809110Z",
     "shell.execute_reply": "2023-08-10T04:42:27.808392Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:27.812199Z",
     "iopub.status.busy": "2023-08-10T04:42:27.811832Z",
     "iopub.status.idle": "2023-08-10T04:42:39.025225Z",
     "shell.execute_reply": "2023-08-10T04:42:39.024592Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 576 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:39.028494Z",
     "iopub.status.busy": "2023-08-10T04:42:39.028235Z",
     "iopub.status.idle": "2023-08-10T04:42:50.538760Z",
     "shell.execute_reply": "2023-08-10T04:42:50.538009Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 1.15 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:50.542597Z",
     "iopub.status.busy": "2023-08-10T04:42:50.542335Z",
     "iopub.status.idle": "2023-08-10T04:42:50.546235Z",
     "shell.execute_reply": "2023-08-10T04:42:50.545649Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:50.549173Z",
     "iopub.status.busy": "2023-08-10T04:42:50.548740Z",
     "iopub.status.idle": "2023-08-10T04:42:50.556100Z",
     "shell.execute_reply": "2023-08-10T04:42:50.555540Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3f52a196d0>\n",
       "├── 'a' --> tensor([[[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]],\n",
       "│           \n",
       "│                   [[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]],\n",
       "│           \n",
       "│                   [[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]],\n",
       "│           \n",
       "│                   [[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]],\n",
       "│           \n",
       "│                   [[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]],\n",
       "│           \n",
       "│                   [[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]],\n",
       "│           \n",
       "│                   [[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]],\n",
       "│           \n",
       "│                   [[-0.1963, -0.3187,  0.4260],\n",
       "│                    [ 0.4080, -0.3906, -1.4545]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f3f52a19250>\n",
       "    └── 'c' --> tensor([[[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "                \n",
       "                        [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "                \n",
       "                        [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "                \n",
       "                        [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "                \n",
       "                        [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "                \n",
       "                        [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "                \n",
       "                        [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "                \n",
       "                        [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                         [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                         [ 0.7772,  0.4698, -1.6489, -0.8629]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:50.559068Z",
     "iopub.status.busy": "2023-08-10T04:42:50.558633Z",
     "iopub.status.idle": "2023-08-10T04:42:53.158634Z",
     "shell.execute_reply": "2023-08-10T04:42:53.157488Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 44.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:53.161971Z",
     "iopub.status.busy": "2023-08-10T04:42:53.161391Z",
     "iopub.status.idle": "2023-08-10T04:42:53.170138Z",
     "shell.execute_reply": "2023-08-10T04:42:53.169515Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f3f5ac3ac70>\n",
       "├── 'a' --> tensor([[-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545],\n",
       "│                   [-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545],\n",
       "│                   [-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545],\n",
       "│                   [-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545],\n",
       "│                   [-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545],\n",
       "│                   [-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545],\n",
       "│                   [-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545],\n",
       "│                   [-0.1963, -0.3187,  0.4260],\n",
       "│                   [ 0.4080, -0.3906, -1.4545]])\n",
       "└── 'x' --> <FastTreeValue 0x7f40207d8100>\n",
       "    └── 'c' --> tensor([[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                        [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                        [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                        [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                        [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                        [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                        [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                        [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                        [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                        [ 0.7772,  0.4698, -1.6489, -0.8629]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:53.173485Z",
     "iopub.status.busy": "2023-08-10T04:42:53.173109Z",
     "iopub.status.idle": "2023-08-10T04:42:55.661426Z",
     "shell.execute_reply": "2023-08-10T04:42:55.660812Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.6 µs ± 94.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:42:55.664603Z",
     "iopub.status.busy": "2023-08-10T04:42:55.664014Z",
     "iopub.status.idle": "2023-08-10T04:43:01.381220Z",
     "shell.execute_reply": "2023-08-10T04:43:01.380501Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.3 µs ± 171 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:43:01.384888Z",
     "iopub.status.busy": "2023-08-10T04:43:01.384284Z",
     "iopub.status.idle": "2023-08-10T04:43:01.392181Z",
     "shell.execute_reply": "2023-08-10T04:43:01.391511Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]],\n",
       "       \n",
       "               [[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]],\n",
       "       \n",
       "               [[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]],\n",
       "       \n",
       "               [[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]],\n",
       "       \n",
       "               [[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]],\n",
       "       \n",
       "               [[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]],\n",
       "       \n",
       "               [[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]],\n",
       "       \n",
       "               [[-0.1963, -0.3187,  0.4260],\n",
       "                [ 0.4080, -0.3906, -1.4545]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "              \n",
       "                      [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "              \n",
       "                      [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "              \n",
       "                      [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "              \n",
       "                      [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "              \n",
       "                      [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "              \n",
       "                      [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]],\n",
       "              \n",
       "                      [[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                       [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                       [ 0.7772,  0.4698, -1.6489, -0.8629]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:43:01.395076Z",
     "iopub.status.busy": "2023-08-10T04:43:01.394713Z",
     "iopub.status.idle": "2023-08-10T04:43:07.904601Z",
     "shell.execute_reply": "2023-08-10T04:43:07.903441Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.1 µs ± 167 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:43:07.908259Z",
     "iopub.status.busy": "2023-08-10T04:43:07.907867Z",
     "iopub.status.idle": "2023-08-10T04:43:07.916527Z",
     "shell.execute_reply": "2023-08-10T04:43:07.915853Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545],\n",
       "               [-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545],\n",
       "               [-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545],\n",
       "               [-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545],\n",
       "               [-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545],\n",
       "               [-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545],\n",
       "               [-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545],\n",
       "               [-0.1963, -0.3187,  0.4260],\n",
       "               [ 0.4080, -0.3906, -1.4545]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                      [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                      [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                      [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                      [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                      [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                      [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629],\n",
       "                      [-0.1158,  0.3914,  0.2431,  0.8812],\n",
       "                      [ 1.5812,  0.0965, -0.7085,  0.7487],\n",
       "                      [ 0.7772,  0.4698, -1.6489, -0.8629]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:43:07.920270Z",
     "iopub.status.busy": "2023-08-10T04:43:07.919600Z",
     "iopub.status.idle": "2023-08-10T04:43:20.253331Z",
     "shell.execute_reply": "2023-08-10T04:43:20.252322Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "152 µs ± 312 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-10T04:43:20.256676Z",
     "iopub.status.busy": "2023-08-10T04:43:20.256137Z",
     "iopub.status.idle": "2023-08-10T04:43:22.930809Z",
     "shell.execute_reply": "2023-08-10T04:43:22.930164Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "328 µs ± 6.24 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
