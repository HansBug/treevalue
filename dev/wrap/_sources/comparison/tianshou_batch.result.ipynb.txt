{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:02.214680Z",
     "iopub.status.busy": "2023-02-27T11:04:02.214456Z",
     "iopub.status.idle": "2023-02-27T11:04:03.189467Z",
     "shell.execute_reply": "2023-02-27T11:04:03.188793Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:03.193167Z",
     "iopub.status.busy": "2023-02-27T11:04:03.192737Z",
     "iopub.status.idle": "2023-02-27T11:04:03.226542Z",
     "shell.execute_reply": "2023-02-27T11:04:03.225861Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:03.229516Z",
     "iopub.status.busy": "2023-02-27T11:04:03.229074Z",
     "iopub.status.idle": "2023-02-27T11:04:03.238541Z",
     "shell.execute_reply": "2023-02-27T11:04:03.237947Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6968398400>\n",
       "├── 'a' --> tensor([[-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6968398c40>\n",
       "    └── 'c' --> tensor([[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:03.241589Z",
     "iopub.status.busy": "2023-02-27T11:04:03.240946Z",
     "iopub.status.idle": "2023-02-27T11:04:03.246775Z",
     "shell.execute_reply": "2023-02-27T11:04:03.246197Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1583,  0.6809, -1.6269],\n",
       "        [-1.4911,  0.9222,  0.4929]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:03.249616Z",
     "iopub.status.busy": "2023-02-27T11:04:03.249085Z",
     "iopub.status.idle": "2023-02-27T11:04:08.600221Z",
     "shell.execute_reply": "2023-02-27T11:04:08.599410Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.2 ns ± 0.0424 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:08.603040Z",
     "iopub.status.busy": "2023-02-27T11:04:08.602681Z",
     "iopub.status.idle": "2023-02-27T11:04:08.608823Z",
     "shell.execute_reply": "2023-02-27T11:04:08.608158Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6968398400>\n",
       "├── 'a' --> tensor([[-0.8708,  0.5917, -1.0340],\n",
       "│                   [ 0.8504, -0.8276,  1.2894]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6968398c40>\n",
       "    └── 'c' --> tensor([[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:08.611435Z",
     "iopub.status.busy": "2023-02-27T11:04:08.611094Z",
     "iopub.status.idle": "2023-02-27T11:04:14.714632Z",
     "shell.execute_reply": "2023-02-27T11:04:14.713855Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75 ns ± 0.0178 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:14.717974Z",
     "iopub.status.busy": "2023-02-27T11:04:14.717378Z",
     "iopub.status.idle": "2023-02-27T11:04:15.042451Z",
     "shell.execute_reply": "2023-02-27T11:04:15.041806Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:15.045552Z",
     "iopub.status.busy": "2023-02-27T11:04:15.045061Z",
     "iopub.status.idle": "2023-02-27T11:04:15.050313Z",
     "shell.execute_reply": "2023-02-27T11:04:15.049686Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:15.052785Z",
     "iopub.status.busy": "2023-02-27T11:04:15.052455Z",
     "iopub.status.idle": "2023-02-27T11:04:15.056977Z",
     "shell.execute_reply": "2023-02-27T11:04:15.056361Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1583,  0.6809, -1.6269],\n",
       "        [-1.4911,  0.9222,  0.4929]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:15.059379Z",
     "iopub.status.busy": "2023-02-27T11:04:15.059049Z",
     "iopub.status.idle": "2023-02-27T11:04:19.225262Z",
     "shell.execute_reply": "2023-02-27T11:04:19.224555Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.2 ns ± 0.0368 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:19.228110Z",
     "iopub.status.busy": "2023-02-27T11:04:19.227749Z",
     "iopub.status.idle": "2023-02-27T11:04:19.233581Z",
     "shell.execute_reply": "2023-02-27T11:04:19.232949Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.1720,  1.1860,  0.6991],\n",
       "               [ 0.2452, -0.1526, -0.8988]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:19.236061Z",
     "iopub.status.busy": "2023-02-27T11:04:19.235720Z",
     "iopub.status.idle": "2023-02-27T11:04:23.172906Z",
     "shell.execute_reply": "2023-02-27T11:04:23.172121Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "482 ns ± 0.13 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:23.176042Z",
     "iopub.status.busy": "2023-02-27T11:04:23.175493Z",
     "iopub.status.idle": "2023-02-27T11:04:30.204932Z",
     "shell.execute_reply": "2023-02-27T11:04:30.204092Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "866 ns ± 0.86 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:30.208207Z",
     "iopub.status.busy": "2023-02-27T11:04:30.207628Z",
     "iopub.status.idle": "2023-02-27T11:04:39.591796Z",
     "shell.execute_reply": "2023-02-27T11:04:39.591067Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 45.6 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:39.594878Z",
     "iopub.status.busy": "2023-02-27T11:04:39.594511Z",
     "iopub.status.idle": "2023-02-27T11:04:39.598540Z",
     "shell.execute_reply": "2023-02-27T11:04:39.597952Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:39.601191Z",
     "iopub.status.busy": "2023-02-27T11:04:39.600845Z",
     "iopub.status.idle": "2023-02-27T11:04:50.687448Z",
     "shell.execute_reply": "2023-02-27T11:04:50.686887Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 207 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:04:50.691466Z",
     "iopub.status.busy": "2023-02-27T11:04:50.690494Z",
     "iopub.status.idle": "2023-02-27T11:05:02.180766Z",
     "shell.execute_reply": "2023-02-27T11:05:02.180021Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 1.28 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:02.183985Z",
     "iopub.status.busy": "2023-02-27T11:05:02.183743Z",
     "iopub.status.idle": "2023-02-27T11:05:02.187613Z",
     "shell.execute_reply": "2023-02-27T11:05:02.187017Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:02.190307Z",
     "iopub.status.busy": "2023-02-27T11:05:02.190083Z",
     "iopub.status.idle": "2023-02-27T11:05:02.198448Z",
     "shell.execute_reply": "2023-02-27T11:05:02.197861Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f69683f8df0>\n",
       "├── 'a' --> tensor([[[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]],\n",
       "│           \n",
       "│                   [[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]],\n",
       "│           \n",
       "│                   [[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]],\n",
       "│           \n",
       "│                   [[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]],\n",
       "│           \n",
       "│                   [[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]],\n",
       "│           \n",
       "│                   [[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]],\n",
       "│           \n",
       "│                   [[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]],\n",
       "│           \n",
       "│                   [[-0.1583,  0.6809, -1.6269],\n",
       "│                    [-1.4911,  0.9222,  0.4929]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f68be040520>\n",
       "    └── 'c' --> tensor([[[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "                \n",
       "                        [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "                \n",
       "                        [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "                \n",
       "                        [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "                \n",
       "                        [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "                \n",
       "                        [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "                \n",
       "                        [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "                \n",
       "                        [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                         [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                         [ 0.4668,  0.1016,  0.9536,  0.0891]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:02.201061Z",
     "iopub.status.busy": "2023-02-27T11:05:02.200847Z",
     "iopub.status.idle": "2023-02-27T11:05:04.803124Z",
     "shell.execute_reply": "2023-02-27T11:05:04.802422Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 65.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:04.806167Z",
     "iopub.status.busy": "2023-02-27T11:05:04.805822Z",
     "iopub.status.idle": "2023-02-27T11:05:04.814368Z",
     "shell.execute_reply": "2023-02-27T11:05:04.813793Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6968398c70>\n",
       "├── 'a' --> tensor([[-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929],\n",
       "│                   [-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929],\n",
       "│                   [-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929],\n",
       "│                   [-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929],\n",
       "│                   [-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929],\n",
       "│                   [-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929],\n",
       "│                   [-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929],\n",
       "│                   [-0.1583,  0.6809, -1.6269],\n",
       "│                   [-1.4911,  0.9222,  0.4929]])\n",
       "└── 'x' --> <FastTreeValue 0x7f69683989a0>\n",
       "    └── 'c' --> tensor([[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                        [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                        [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                        [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                        [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                        [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                        [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                        [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                        [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                        [ 0.4668,  0.1016,  0.9536,  0.0891]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:04.817033Z",
     "iopub.status.busy": "2023-02-27T11:05:04.816503Z",
     "iopub.status.idle": "2023-02-27T11:05:07.259765Z",
     "shell.execute_reply": "2023-02-27T11:05:07.258842Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 µs ± 49.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:07.262997Z",
     "iopub.status.busy": "2023-02-27T11:05:07.262445Z",
     "iopub.status.idle": "2023-02-27T11:05:12.069797Z",
     "shell.execute_reply": "2023-02-27T11:05:12.069056Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.1 µs ± 159 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:12.073000Z",
     "iopub.status.busy": "2023-02-27T11:05:12.072640Z",
     "iopub.status.idle": "2023-02-27T11:05:12.081527Z",
     "shell.execute_reply": "2023-02-27T11:05:12.080918Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]],\n",
       "       \n",
       "               [[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]],\n",
       "       \n",
       "               [[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]],\n",
       "       \n",
       "               [[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]],\n",
       "       \n",
       "               [[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]],\n",
       "       \n",
       "               [[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]],\n",
       "       \n",
       "               [[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]],\n",
       "       \n",
       "               [[-0.1583,  0.6809, -1.6269],\n",
       "                [-1.4911,  0.9222,  0.4929]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "              \n",
       "                      [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "              \n",
       "                      [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "              \n",
       "                      [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "              \n",
       "                      [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "              \n",
       "                      [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "              \n",
       "                      [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]],\n",
       "              \n",
       "                      [[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                       [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                       [ 0.4668,  0.1016,  0.9536,  0.0891]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:12.084385Z",
     "iopub.status.busy": "2023-02-27T11:05:12.084033Z",
     "iopub.status.idle": "2023-02-27T11:05:18.453303Z",
     "shell.execute_reply": "2023-02-27T11:05:18.452536Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.4 µs ± 232 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:18.456482Z",
     "iopub.status.busy": "2023-02-27T11:05:18.456107Z",
     "iopub.status.idle": "2023-02-27T11:05:18.464091Z",
     "shell.execute_reply": "2023-02-27T11:05:18.463450Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929],\n",
       "               [-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929],\n",
       "               [-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929],\n",
       "               [-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929],\n",
       "               [-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929],\n",
       "               [-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929],\n",
       "               [-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929],\n",
       "               [-0.1583,  0.6809, -1.6269],\n",
       "               [-1.4911,  0.9222,  0.4929]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                      [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                      [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                      [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                      [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                      [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                      [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891],\n",
       "                      [-0.1458, -1.5803, -0.8079,  2.0455],\n",
       "                      [-1.1734, -1.0550, -0.7487,  1.3342],\n",
       "                      [ 0.4668,  0.1016,  0.9536,  0.0891]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:18.467117Z",
     "iopub.status.busy": "2023-02-27T11:05:18.466590Z",
     "iopub.status.idle": "2023-02-27T11:05:30.114497Z",
     "shell.execute_reply": "2023-02-27T11:05:30.113842Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 166 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:05:30.117367Z",
     "iopub.status.busy": "2023-02-27T11:05:30.117131Z",
     "iopub.status.idle": "2023-02-27T11:05:32.647067Z",
     "shell.execute_reply": "2023-02-27T11:05:32.646430Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "311 µs ± 3.14 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
