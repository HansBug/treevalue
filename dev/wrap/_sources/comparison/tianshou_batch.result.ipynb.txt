{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:11.161542Z",
     "iopub.status.busy": "2023-03-06T18:29:11.161213Z",
     "iopub.status.idle": "2023-03-06T18:29:12.448979Z",
     "shell.execute_reply": "2023-03-06T18:29:12.447935Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:12.454857Z",
     "iopub.status.busy": "2023-03-06T18:29:12.453982Z",
     "iopub.status.idle": "2023-03-06T18:29:12.503149Z",
     "shell.execute_reply": "2023-03-06T18:29:12.501890Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:12.507596Z",
     "iopub.status.busy": "2023-03-06T18:29:12.507240Z",
     "iopub.status.idle": "2023-03-06T18:29:12.521806Z",
     "shell.execute_reply": "2023-03-06T18:29:12.520760Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fae0c26acd0>\n",
       "├── 'a' --> tensor([[-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820]])\n",
       "└── 'x' --> <FastTreeValue 0x7fae0c26ab50>\n",
       "    └── 'c' --> tensor([[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:12.525929Z",
     "iopub.status.busy": "2023-03-06T18:29:12.525616Z",
     "iopub.status.idle": "2023-03-06T18:29:12.534123Z",
     "shell.execute_reply": "2023-03-06T18:29:12.533157Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4142, -0.4569, -0.6514],\n",
       "        [ 0.6887, -0.7379,  0.6820]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:12.537918Z",
     "iopub.status.busy": "2023-03-06T18:29:12.537553Z",
     "iopub.status.idle": "2023-03-06T18:29:18.587384Z",
     "shell.execute_reply": "2023-03-06T18:29:18.586255Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.3 ns ± 0.906 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:18.591892Z",
     "iopub.status.busy": "2023-03-06T18:29:18.591351Z",
     "iopub.status.idle": "2023-03-06T18:29:18.600570Z",
     "shell.execute_reply": "2023-03-06T18:29:18.599664Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fae0c26acd0>\n",
       "├── 'a' --> tensor([[ 0.2427,  0.0325, -0.0792],\n",
       "│                   [-0.9434,  0.7082, -0.8126]])\n",
       "└── 'x' --> <FastTreeValue 0x7fae0c26ab50>\n",
       "    └── 'c' --> tensor([[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:18.604350Z",
     "iopub.status.busy": "2023-03-06T18:29:18.603725Z",
     "iopub.status.idle": "2023-03-06T18:29:25.464777Z",
     "shell.execute_reply": "2023-03-06T18:29:25.463756Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.3 ns ± 0.972 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:25.468812Z",
     "iopub.status.busy": "2023-03-06T18:29:25.468151Z",
     "iopub.status.idle": "2023-03-06T18:29:25.994317Z",
     "shell.execute_reply": "2023-03-06T18:29:25.993110Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:25.998706Z",
     "iopub.status.busy": "2023-03-06T18:29:25.998227Z",
     "iopub.status.idle": "2023-03-06T18:29:26.011153Z",
     "shell.execute_reply": "2023-03-06T18:29:26.010149Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:26.015468Z",
     "iopub.status.busy": "2023-03-06T18:29:26.014879Z",
     "iopub.status.idle": "2023-03-06T18:29:26.024329Z",
     "shell.execute_reply": "2023-03-06T18:29:26.023168Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4142, -0.4569, -0.6514],\n",
       "        [ 0.6887, -0.7379,  0.6820]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:26.028071Z",
     "iopub.status.busy": "2023-03-06T18:29:26.027780Z",
     "iopub.status.idle": "2023-03-06T18:29:31.985264Z",
     "shell.execute_reply": "2023-03-06T18:29:31.984110Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.3 ns ± 1.45 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:31.989672Z",
     "iopub.status.busy": "2023-03-06T18:29:31.988783Z",
     "iopub.status.idle": "2023-03-06T18:29:31.998620Z",
     "shell.execute_reply": "2023-03-06T18:29:31.997373Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.3250, -0.1579, -0.5066],\n",
       "               [-0.8283, -1.0801,  1.9358]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:32.002294Z",
     "iopub.status.busy": "2023-03-06T18:29:32.001748Z",
     "iopub.status.idle": "2023-03-06T18:29:37.343449Z",
     "shell.execute_reply": "2023-03-06T18:29:37.342474Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "659 ns ± 14.7 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:37.347604Z",
     "iopub.status.busy": "2023-03-06T18:29:37.347146Z",
     "iopub.status.idle": "2023-03-06T18:29:46.361977Z",
     "shell.execute_reply": "2023-03-06T18:29:46.360973Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.11 µs ± 6.77 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:46.366827Z",
     "iopub.status.busy": "2023-03-06T18:29:46.365835Z",
     "iopub.status.idle": "2023-03-06T18:29:57.989028Z",
     "shell.execute_reply": "2023-03-06T18:29:57.987975Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.3 µs ± 241 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:57.993503Z",
     "iopub.status.busy": "2023-03-06T18:29:57.992761Z",
     "iopub.status.idle": "2023-03-06T18:29:57.998061Z",
     "shell.execute_reply": "2023-03-06T18:29:57.997184Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:29:58.001707Z",
     "iopub.status.busy": "2023-03-06T18:29:58.001394Z",
     "iopub.status.idle": "2023-03-06T18:30:00.432985Z",
     "shell.execute_reply": "2023-03-06T18:30:00.431974Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "295 µs ± 5.8 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:00.439074Z",
     "iopub.status.busy": "2023-03-06T18:30:00.436825Z",
     "iopub.status.idle": "2023-03-06T18:30:02.690514Z",
     "shell.execute_reply": "2023-03-06T18:30:02.689674Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "277 µs ± 8.73 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:02.696954Z",
     "iopub.status.busy": "2023-03-06T18:30:02.696320Z",
     "iopub.status.idle": "2023-03-06T18:30:02.701422Z",
     "shell.execute_reply": "2023-03-06T18:30:02.700558Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:02.704972Z",
     "iopub.status.busy": "2023-03-06T18:30:02.704293Z",
     "iopub.status.idle": "2023-03-06T18:30:02.714806Z",
     "shell.execute_reply": "2023-03-06T18:30:02.713932Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fad66b87ac0>\n",
       "├── 'a' --> tensor([[[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]],\n",
       "│           \n",
       "│                   [[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]],\n",
       "│           \n",
       "│                   [[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]],\n",
       "│           \n",
       "│                   [[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]],\n",
       "│           \n",
       "│                   [[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]],\n",
       "│           \n",
       "│                   [[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]],\n",
       "│           \n",
       "│                   [[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]],\n",
       "│           \n",
       "│                   [[-0.4142, -0.4569, -0.6514],\n",
       "│                    [ 0.6887, -0.7379,  0.6820]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fad66b87d30>\n",
       "    └── 'c' --> tensor([[[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "                \n",
       "                        [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "                \n",
       "                        [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "                \n",
       "                        [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "                \n",
       "                        [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "                \n",
       "                        [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "                \n",
       "                        [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "                \n",
       "                        [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                         [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                         [-0.2075, -0.6884,  1.1776,  1.8973]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:02.718612Z",
     "iopub.status.busy": "2023-03-06T18:30:02.717804Z",
     "iopub.status.idle": "2023-03-06T18:30:06.749479Z",
     "shell.execute_reply": "2023-03-06T18:30:06.748178Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49.6 µs ± 721 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:06.753505Z",
     "iopub.status.busy": "2023-03-06T18:30:06.752716Z",
     "iopub.status.idle": "2023-03-06T18:30:06.764426Z",
     "shell.execute_reply": "2023-03-06T18:30:06.763409Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fad66d98a30>\n",
       "├── 'a' --> tensor([[-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820],\n",
       "│                   [-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820],\n",
       "│                   [-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820],\n",
       "│                   [-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820],\n",
       "│                   [-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820],\n",
       "│                   [-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820],\n",
       "│                   [-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820],\n",
       "│                   [-0.4142, -0.4569, -0.6514],\n",
       "│                   [ 0.6887, -0.7379,  0.6820]])\n",
       "└── 'x' --> <FastTreeValue 0x7fad5fedca30>\n",
       "    └── 'c' --> tensor([[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                        [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                        [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                        [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                        [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                        [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                        [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                        [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                        [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                        [-0.2075, -0.6884,  1.1776,  1.8973]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:06.768214Z",
     "iopub.status.busy": "2023-03-06T18:30:06.767909Z",
     "iopub.status.idle": "2023-03-06T18:30:10.472567Z",
     "shell.execute_reply": "2023-03-06T18:30:10.471547Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.5 µs ± 1.03 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:10.476748Z",
     "iopub.status.busy": "2023-03-06T18:30:10.476376Z",
     "iopub.status.idle": "2023-03-06T18:30:17.825042Z",
     "shell.execute_reply": "2023-03-06T18:30:17.823911Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.1 µs ± 1.34 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:17.829882Z",
     "iopub.status.busy": "2023-03-06T18:30:17.828962Z",
     "iopub.status.idle": "2023-03-06T18:30:17.841947Z",
     "shell.execute_reply": "2023-03-06T18:30:17.840927Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]],\n",
       "       \n",
       "               [[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]],\n",
       "       \n",
       "               [[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]],\n",
       "       \n",
       "               [[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]],\n",
       "       \n",
       "               [[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]],\n",
       "       \n",
       "               [[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]],\n",
       "       \n",
       "               [[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]],\n",
       "       \n",
       "               [[-0.4142, -0.4569, -0.6514],\n",
       "                [ 0.6887, -0.7379,  0.6820]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "              \n",
       "                      [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "              \n",
       "                      [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "              \n",
       "                      [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "              \n",
       "                      [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "              \n",
       "                      [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "              \n",
       "                      [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]],\n",
       "              \n",
       "                      [[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                       [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                       [-0.2075, -0.6884,  1.1776,  1.8973]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:17.846196Z",
     "iopub.status.busy": "2023-03-06T18:30:17.845540Z",
     "iopub.status.idle": "2023-03-06T18:30:26.605866Z",
     "shell.execute_reply": "2023-03-06T18:30:26.604596Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "108 µs ± 1.98 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:26.609980Z",
     "iopub.status.busy": "2023-03-06T18:30:26.609667Z",
     "iopub.status.idle": "2023-03-06T18:30:26.619771Z",
     "shell.execute_reply": "2023-03-06T18:30:26.618710Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820],\n",
       "               [-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820],\n",
       "               [-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820],\n",
       "               [-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820],\n",
       "               [-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820],\n",
       "               [-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820],\n",
       "               [-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820],\n",
       "               [-0.4142, -0.4569, -0.6514],\n",
       "               [ 0.6887, -0.7379,  0.6820]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                      [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                      [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                      [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                      [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                      [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                      [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973],\n",
       "                      [ 1.6014,  0.9548,  1.1312, -0.2106],\n",
       "                      [ 2.0915,  0.5527, -1.5771,  1.1464],\n",
       "                      [-0.2075, -0.6884,  1.1776,  1.8973]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:26.623520Z",
     "iopub.status.busy": "2023-03-06T18:30:26.623191Z",
     "iopub.status.idle": "2023-03-06T18:30:42.277724Z",
     "shell.execute_reply": "2023-03-06T18:30:42.276615Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "192 µs ± 1.49 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T18:30:42.282401Z",
     "iopub.status.busy": "2023-03-06T18:30:42.282051Z",
     "iopub.status.idle": "2023-03-06T18:30:46.880075Z",
     "shell.execute_reply": "2023-03-06T18:30:46.879101Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "562 µs ± 9.95 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
