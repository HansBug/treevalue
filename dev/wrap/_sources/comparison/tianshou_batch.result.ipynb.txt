{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:27.897977Z",
     "iopub.status.busy": "2023-02-25T18:17:27.897351Z",
     "iopub.status.idle": "2023-02-25T18:17:28.874893Z",
     "shell.execute_reply": "2023-02-25T18:17:28.874100Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:28.879203Z",
     "iopub.status.busy": "2023-02-25T18:17:28.878502Z",
     "iopub.status.idle": "2023-02-25T18:17:28.913911Z",
     "shell.execute_reply": "2023-02-25T18:17:28.912765Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:28.917561Z",
     "iopub.status.busy": "2023-02-25T18:17:28.917036Z",
     "iopub.status.idle": "2023-02-25T18:17:28.927003Z",
     "shell.execute_reply": "2023-02-25T18:17:28.926307Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc6b4661a60>\n",
       "├── 'a' --> tensor([[ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc6b46615e0>\n",
       "    └── 'c' --> tensor([[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:28.930113Z",
     "iopub.status.busy": "2023-02-25T18:17:28.929709Z",
     "iopub.status.idle": "2023-02-25T18:17:28.936025Z",
     "shell.execute_reply": "2023-02-25T18:17:28.935427Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2412,  1.2163, -0.7320],\n",
       "        [ 0.3404, -1.0860,  1.2585]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:28.939600Z",
     "iopub.status.busy": "2023-02-25T18:17:28.938943Z",
     "iopub.status.idle": "2023-02-25T18:17:34.004334Z",
     "shell.execute_reply": "2023-02-25T18:17:34.003485Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.3 ns ± 0.17 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:34.007896Z",
     "iopub.status.busy": "2023-02-25T18:17:34.007281Z",
     "iopub.status.idle": "2023-02-25T18:17:34.014755Z",
     "shell.execute_reply": "2023-02-25T18:17:34.014071Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc6b4661a60>\n",
       "├── 'a' --> tensor([[-0.5987, -1.4271, -0.1776],\n",
       "│                   [-0.6931, -0.7294,  1.1860]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc6b46615e0>\n",
       "    └── 'c' --> tensor([[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:34.018154Z",
     "iopub.status.busy": "2023-02-25T18:17:34.017690Z",
     "iopub.status.idle": "2023-02-25T18:17:39.753413Z",
     "shell.execute_reply": "2023-02-25T18:17:39.752495Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.6 ns ± 0.0498 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:39.757619Z",
     "iopub.status.busy": "2023-02-25T18:17:39.756818Z",
     "iopub.status.idle": "2023-02-25T18:17:40.135618Z",
     "shell.execute_reply": "2023-02-25T18:17:40.134774Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:40.139570Z",
     "iopub.status.busy": "2023-02-25T18:17:40.138929Z",
     "iopub.status.idle": "2023-02-25T18:17:40.145807Z",
     "shell.execute_reply": "2023-02-25T18:17:40.145141Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:40.148848Z",
     "iopub.status.busy": "2023-02-25T18:17:40.148422Z",
     "iopub.status.idle": "2023-02-25T18:17:40.153452Z",
     "shell.execute_reply": "2023-02-25T18:17:40.152750Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2412,  1.2163, -0.7320],\n",
       "        [ 0.3404, -1.0860,  1.2585]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:40.156621Z",
     "iopub.status.busy": "2023-02-25T18:17:40.156051Z",
     "iopub.status.idle": "2023-02-25T18:17:45.504366Z",
     "shell.execute_reply": "2023-02-25T18:17:45.503438Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.6 ns ± 0.116 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:45.507949Z",
     "iopub.status.busy": "2023-02-25T18:17:45.507324Z",
     "iopub.status.idle": "2023-02-25T18:17:45.514551Z",
     "shell.execute_reply": "2023-02-25T18:17:45.513896Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0083,  0.1800,  0.1214],\n",
       "               [-1.0145,  0.7143, -1.3734]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:45.517627Z",
     "iopub.status.busy": "2023-02-25T18:17:45.516946Z",
     "iopub.status.idle": "2023-02-25T18:17:49.538656Z",
     "shell.execute_reply": "2023-02-25T18:17:49.537818Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "495 ns ± 0.309 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:49.542403Z",
     "iopub.status.busy": "2023-02-25T18:17:49.541883Z",
     "iopub.status.idle": "2023-02-25T18:17:56.634667Z",
     "shell.execute_reply": "2023-02-25T18:17:56.633809Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "871 ns ± 2.84 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:17:56.638578Z",
     "iopub.status.busy": "2023-02-25T18:17:56.637959Z",
     "iopub.status.idle": "2023-02-25T18:18:05.449697Z",
     "shell.execute_reply": "2023-02-25T18:18:05.448719Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.8 µs ± 10.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:05.453052Z",
     "iopub.status.busy": "2023-02-25T18:18:05.452445Z",
     "iopub.status.idle": "2023-02-25T18:18:05.456732Z",
     "shell.execute_reply": "2023-02-25T18:18:05.456095Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:05.459922Z",
     "iopub.status.busy": "2023-02-25T18:18:05.459367Z",
     "iopub.status.idle": "2023-02-25T18:18:17.042517Z",
     "shell.execute_reply": "2023-02-25T18:18:17.041667Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 2.3 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:17.045981Z",
     "iopub.status.busy": "2023-02-25T18:18:17.045718Z",
     "iopub.status.idle": "2023-02-25T18:18:28.625023Z",
     "shell.execute_reply": "2023-02-25T18:18:28.624367Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 683 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:28.628157Z",
     "iopub.status.busy": "2023-02-25T18:18:28.627640Z",
     "iopub.status.idle": "2023-02-25T18:18:28.631269Z",
     "shell.execute_reply": "2023-02-25T18:18:28.630702Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:28.634038Z",
     "iopub.status.busy": "2023-02-25T18:18:28.633372Z",
     "iopub.status.idle": "2023-02-25T18:18:28.640734Z",
     "shell.execute_reply": "2023-02-25T18:18:28.640187Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc6b4659a60>\n",
       "├── 'a' --> tensor([[[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]],\n",
       "│           \n",
       "│                   [[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]],\n",
       "│           \n",
       "│                   [[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]],\n",
       "│           \n",
       "│                   [[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]],\n",
       "│           \n",
       "│                   [[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]],\n",
       "│           \n",
       "│                   [[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]],\n",
       "│           \n",
       "│                   [[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]],\n",
       "│           \n",
       "│                   [[ 0.2412,  1.2163, -0.7320],\n",
       "│                    [ 0.3404, -1.0860,  1.2585]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc6b46592e0>\n",
       "    └── 'c' --> tensor([[[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "                \n",
       "                        [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "                \n",
       "                        [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "                \n",
       "                        [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "                \n",
       "                        [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "                \n",
       "                        [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "                \n",
       "                        [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "                \n",
       "                        [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                         [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                         [ 0.8327,  0.5110, -1.3933,  0.1425]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:28.643429Z",
     "iopub.status.busy": "2023-02-25T18:18:28.642800Z",
     "iopub.status.idle": "2023-02-25T18:18:31.298122Z",
     "shell.execute_reply": "2023-02-25T18:18:31.297238Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.7 µs ± 118 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:31.301931Z",
     "iopub.status.busy": "2023-02-25T18:18:31.301411Z",
     "iopub.status.idle": "2023-02-25T18:18:31.311549Z",
     "shell.execute_reply": "2023-02-25T18:18:31.310867Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fc6b4659850>\n",
       "├── 'a' --> tensor([[ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585],\n",
       "│                   [ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585],\n",
       "│                   [ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585],\n",
       "│                   [ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585],\n",
       "│                   [ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585],\n",
       "│                   [ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585],\n",
       "│                   [ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585],\n",
       "│                   [ 0.2412,  1.2163, -0.7320],\n",
       "│                   [ 0.3404, -1.0860,  1.2585]])\n",
       "└── 'x' --> <FastTreeValue 0x7fc60f153f70>\n",
       "    └── 'c' --> tensor([[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                        [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                        [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                        [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                        [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                        [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                        [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                        [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                        [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                        [ 0.8327,  0.5110, -1.3933,  0.1425]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:31.315378Z",
     "iopub.status.busy": "2023-02-25T18:18:31.314273Z",
     "iopub.status.idle": "2023-02-25T18:18:33.793533Z",
     "shell.execute_reply": "2023-02-25T18:18:33.792617Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.5 µs ± 122 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:33.797053Z",
     "iopub.status.busy": "2023-02-25T18:18:33.796545Z",
     "iopub.status.idle": "2023-02-25T18:18:38.382040Z",
     "shell.execute_reply": "2023-02-25T18:18:38.381231Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.4 µs ± 47.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:38.385739Z",
     "iopub.status.busy": "2023-02-25T18:18:38.385121Z",
     "iopub.status.idle": "2023-02-25T18:18:38.393474Z",
     "shell.execute_reply": "2023-02-25T18:18:38.392827Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]],\n",
       "       \n",
       "               [[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]],\n",
       "       \n",
       "               [[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]],\n",
       "       \n",
       "               [[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]],\n",
       "       \n",
       "               [[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]],\n",
       "       \n",
       "               [[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]],\n",
       "       \n",
       "               [[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]],\n",
       "       \n",
       "               [[ 0.2412,  1.2163, -0.7320],\n",
       "                [ 0.3404, -1.0860,  1.2585]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "              \n",
       "                      [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "              \n",
       "                      [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "              \n",
       "                      [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "              \n",
       "                      [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "              \n",
       "                      [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "              \n",
       "                      [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]],\n",
       "              \n",
       "                      [[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                       [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                       [ 0.8327,  0.5110, -1.3933,  0.1425]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:38.396647Z",
     "iopub.status.busy": "2023-02-25T18:18:38.396117Z",
     "iopub.status.idle": "2023-02-25T18:18:44.782269Z",
     "shell.execute_reply": "2023-02-25T18:18:44.781333Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.5 µs ± 116 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:44.786194Z",
     "iopub.status.busy": "2023-02-25T18:18:44.785549Z",
     "iopub.status.idle": "2023-02-25T18:18:44.794167Z",
     "shell.execute_reply": "2023-02-25T18:18:44.793526Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585],\n",
       "               [ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585],\n",
       "               [ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585],\n",
       "               [ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585],\n",
       "               [ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585],\n",
       "               [ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585],\n",
       "               [ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585],\n",
       "               [ 0.2412,  1.2163, -0.7320],\n",
       "               [ 0.3404, -1.0860,  1.2585]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                      [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                      [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                      [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                      [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                      [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                      [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425],\n",
       "                      [-1.5931, -0.2038,  1.0567, -1.7640],\n",
       "                      [-0.3397,  0.3701,  0.6748, -0.7542],\n",
       "                      [ 0.8327,  0.5110, -1.3933,  0.1425]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:44.797160Z",
     "iopub.status.busy": "2023-02-25T18:18:44.796684Z",
     "iopub.status.idle": "2023-02-25T18:18:56.475448Z",
     "shell.execute_reply": "2023-02-25T18:18:56.474606Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 352 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T18:18:56.479105Z",
     "iopub.status.busy": "2023-02-25T18:18:56.478574Z",
     "iopub.status.idle": "2023-02-25T18:18:59.171957Z",
     "shell.execute_reply": "2023-02-25T18:18:59.171308Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "331 µs ± 975 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
