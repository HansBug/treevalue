{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:54:52.416205Z",
     "iopub.status.busy": "2023-02-27T08:54:52.415989Z",
     "iopub.status.idle": "2023-02-27T08:54:53.322447Z",
     "shell.execute_reply": "2023-02-27T08:54:53.321766Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:54:53.325746Z",
     "iopub.status.busy": "2023-02-27T08:54:53.325318Z",
     "iopub.status.idle": "2023-02-27T08:54:53.358999Z",
     "shell.execute_reply": "2023-02-27T08:54:53.358370Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:54:53.362277Z",
     "iopub.status.busy": "2023-02-27T08:54:53.361747Z",
     "iopub.status.idle": "2023-02-27T08:54:53.371218Z",
     "shell.execute_reply": "2023-02-27T08:54:53.370613Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbfb451ff10>\n",
       "├── 'a' --> tensor([[-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbfb451feb0>\n",
       "    └── 'c' --> tensor([[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:54:53.374025Z",
     "iopub.status.busy": "2023-02-27T08:54:53.373462Z",
     "iopub.status.idle": "2023-02-27T08:54:53.378855Z",
     "shell.execute_reply": "2023-02-27T08:54:53.378287Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3292, -1.4743,  0.4442],\n",
       "        [-1.9950,  0.1498, -0.9798]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:54:53.381748Z",
     "iopub.status.busy": "2023-02-27T08:54:53.381273Z",
     "iopub.status.idle": "2023-02-27T08:54:58.438032Z",
     "shell.execute_reply": "2023-02-27T08:54:58.437296Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.1 ns ± 0.0257 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:54:58.441174Z",
     "iopub.status.busy": "2023-02-27T08:54:58.440698Z",
     "iopub.status.idle": "2023-02-27T08:54:58.447479Z",
     "shell.execute_reply": "2023-02-27T08:54:58.446886Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbfb451ff10>\n",
       "├── 'a' --> tensor([[-0.0393, -1.0967, -0.2856],\n",
       "│                   [-0.3881,  0.8480, -1.3914]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbfb451feb0>\n",
       "    └── 'c' --> tensor([[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:54:58.450522Z",
     "iopub.status.busy": "2023-02-27T08:54:58.449943Z",
     "iopub.status.idle": "2023-02-27T08:55:03.774078Z",
     "shell.execute_reply": "2023-02-27T08:55:03.773336Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.8 ns ± 0.043 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:03.776940Z",
     "iopub.status.busy": "2023-02-27T08:55:03.776561Z",
     "iopub.status.idle": "2023-02-27T08:55:04.102570Z",
     "shell.execute_reply": "2023-02-27T08:55:04.101872Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:04.105701Z",
     "iopub.status.busy": "2023-02-27T08:55:04.105281Z",
     "iopub.status.idle": "2023-02-27T08:55:04.110619Z",
     "shell.execute_reply": "2023-02-27T08:55:04.109986Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:04.113171Z",
     "iopub.status.busy": "2023-02-27T08:55:04.112833Z",
     "iopub.status.idle": "2023-02-27T08:55:04.117504Z",
     "shell.execute_reply": "2023-02-27T08:55:04.116915Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.3292, -1.4743,  0.4442],\n",
       "        [-1.9950,  0.1498, -0.9798]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:04.120226Z",
     "iopub.status.busy": "2023-02-27T08:55:04.119639Z",
     "iopub.status.idle": "2023-02-27T08:55:08.282120Z",
     "shell.execute_reply": "2023-02-27T08:55:08.281401Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51.3 ns ± 0.0464 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:08.284904Z",
     "iopub.status.busy": "2023-02-27T08:55:08.284544Z",
     "iopub.status.idle": "2023-02-27T08:55:08.290356Z",
     "shell.execute_reply": "2023-02-27T08:55:08.289717Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.2731, -0.2978,  0.9771],\n",
       "               [-0.4943,  0.1503, -0.4677]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:08.293360Z",
     "iopub.status.busy": "2023-02-27T08:55:08.292772Z",
     "iopub.status.idle": "2023-02-27T08:55:12.252232Z",
     "shell.execute_reply": "2023-02-27T08:55:12.251365Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 0.214 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:12.255547Z",
     "iopub.status.busy": "2023-02-27T08:55:12.254967Z",
     "iopub.status.idle": "2023-02-27T08:55:19.762346Z",
     "shell.execute_reply": "2023-02-27T08:55:19.761619Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "923 ns ± 0.804 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:19.765222Z",
     "iopub.status.busy": "2023-02-27T08:55:19.764863Z",
     "iopub.status.idle": "2023-02-27T08:55:29.184608Z",
     "shell.execute_reply": "2023-02-27T08:55:29.183892Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 15 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:29.187916Z",
     "iopub.status.busy": "2023-02-27T08:55:29.187405Z",
     "iopub.status.idle": "2023-02-27T08:55:29.191420Z",
     "shell.execute_reply": "2023-02-27T08:55:29.190820Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:29.194336Z",
     "iopub.status.busy": "2023-02-27T08:55:29.193832Z",
     "iopub.status.idle": "2023-02-27T08:55:40.440302Z",
     "shell.execute_reply": "2023-02-27T08:55:40.439734Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 611 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:40.443348Z",
     "iopub.status.busy": "2023-02-27T08:55:40.442678Z",
     "iopub.status.idle": "2023-02-27T08:55:51.966044Z",
     "shell.execute_reply": "2023-02-27T08:55:51.965485Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 548 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:51.969516Z",
     "iopub.status.busy": "2023-02-27T08:55:51.969036Z",
     "iopub.status.idle": "2023-02-27T08:55:51.973181Z",
     "shell.execute_reply": "2023-02-27T08:55:51.972596Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:51.975809Z",
     "iopub.status.busy": "2023-02-27T08:55:51.975589Z",
     "iopub.status.idle": "2023-02-27T08:55:51.983099Z",
     "shell.execute_reply": "2023-02-27T08:55:51.982522Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbf10e0c9a0>\n",
       "├── 'a' --> tensor([[[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]],\n",
       "│           \n",
       "│                   [[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]],\n",
       "│           \n",
       "│                   [[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]],\n",
       "│           \n",
       "│                   [[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]],\n",
       "│           \n",
       "│                   [[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]],\n",
       "│           \n",
       "│                   [[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]],\n",
       "│           \n",
       "│                   [[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]],\n",
       "│           \n",
       "│                   [[-0.3292, -1.4743,  0.4442],\n",
       "│                    [-1.9950,  0.1498, -0.9798]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbf10e15280>\n",
       "    └── 'c' --> tensor([[[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "                \n",
       "                        [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "                \n",
       "                        [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "                \n",
       "                        [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "                \n",
       "                        [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "                \n",
       "                        [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "                \n",
       "                        [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "                \n",
       "                        [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                         [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                         [ 0.3885, -0.9498,  0.3135, -1.0822]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:51.985759Z",
     "iopub.status.busy": "2023-02-27T08:55:51.985435Z",
     "iopub.status.idle": "2023-02-27T08:55:54.662838Z",
     "shell.execute_reply": "2023-02-27T08:55:54.662184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.9 µs ± 31.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:54.666028Z",
     "iopub.status.busy": "2023-02-27T08:55:54.665450Z",
     "iopub.status.idle": "2023-02-27T08:55:54.674320Z",
     "shell.execute_reply": "2023-02-27T08:55:54.673696Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbf0a1ccdf0>\n",
       "├── 'a' --> tensor([[-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798],\n",
       "│                   [-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798],\n",
       "│                   [-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798],\n",
       "│                   [-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798],\n",
       "│                   [-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798],\n",
       "│                   [-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798],\n",
       "│                   [-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798],\n",
       "│                   [-0.3292, -1.4743,  0.4442],\n",
       "│                   [-1.9950,  0.1498, -0.9798]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbf0a1cc2e0>\n",
       "    └── 'c' --> tensor([[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                        [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                        [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                        [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                        [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                        [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                        [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                        [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                        [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                        [ 0.3885, -0.9498,  0.3135, -1.0822]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:54.677115Z",
     "iopub.status.busy": "2023-02-27T08:55:54.676652Z",
     "iopub.status.idle": "2023-02-27T08:55:57.183943Z",
     "shell.execute_reply": "2023-02-27T08:55:57.183192Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.8 µs ± 73.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:55:57.187167Z",
     "iopub.status.busy": "2023-02-27T08:55:57.186578Z",
     "iopub.status.idle": "2023-02-27T08:56:02.009051Z",
     "shell.execute_reply": "2023-02-27T08:56:02.008336Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.3 µs ± 182 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:56:02.012366Z",
     "iopub.status.busy": "2023-02-27T08:56:02.011871Z",
     "iopub.status.idle": "2023-02-27T08:56:02.020274Z",
     "shell.execute_reply": "2023-02-27T08:56:02.019689Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]],\n",
       "       \n",
       "               [[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]],\n",
       "       \n",
       "               [[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]],\n",
       "       \n",
       "               [[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]],\n",
       "       \n",
       "               [[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]],\n",
       "       \n",
       "               [[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]],\n",
       "       \n",
       "               [[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]],\n",
       "       \n",
       "               [[-0.3292, -1.4743,  0.4442],\n",
       "                [-1.9950,  0.1498, -0.9798]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "              \n",
       "                      [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "              \n",
       "                      [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "              \n",
       "                      [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "              \n",
       "                      [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "              \n",
       "                      [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "              \n",
       "                      [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]],\n",
       "              \n",
       "                      [[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                       [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                       [ 0.3885, -0.9498,  0.3135, -1.0822]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:56:02.023111Z",
     "iopub.status.busy": "2023-02-27T08:56:02.022609Z",
     "iopub.status.idle": "2023-02-27T08:56:08.390674Z",
     "shell.execute_reply": "2023-02-27T08:56:08.389841Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 257 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:56:08.393814Z",
     "iopub.status.busy": "2023-02-27T08:56:08.393458Z",
     "iopub.status.idle": "2023-02-27T08:56:08.401293Z",
     "shell.execute_reply": "2023-02-27T08:56:08.400335Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798],\n",
       "               [-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798],\n",
       "               [-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798],\n",
       "               [-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798],\n",
       "               [-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798],\n",
       "               [-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798],\n",
       "               [-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798],\n",
       "               [-0.3292, -1.4743,  0.4442],\n",
       "               [-1.9950,  0.1498, -0.9798]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                      [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                      [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                      [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                      [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                      [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                      [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822],\n",
       "                      [ 1.4402, -1.5920,  1.2373, -1.3680],\n",
       "                      [-0.4187,  1.3880, -0.8032,  0.4080],\n",
       "                      [ 0.3885, -0.9498,  0.3135, -1.0822]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:56:08.403959Z",
     "iopub.status.busy": "2023-02-27T08:56:08.403643Z",
     "iopub.status.idle": "2023-02-27T08:56:20.053749Z",
     "shell.execute_reply": "2023-02-27T08:56:20.052967Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 399 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T08:56:20.057130Z",
     "iopub.status.busy": "2023-02-27T08:56:20.056260Z",
     "iopub.status.idle": "2023-02-27T08:56:22.590729Z",
     "shell.execute_reply": "2023-02-27T08:56:22.589874Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 1.22 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
