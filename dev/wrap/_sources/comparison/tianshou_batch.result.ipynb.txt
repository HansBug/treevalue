{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:41.380468Z",
     "iopub.status.busy": "2023-10-20T08:05:41.379965Z",
     "iopub.status.idle": "2023-10-20T08:05:43.458911Z",
     "shell.execute_reply": "2023-10-20T08:05:43.457806Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:43.464928Z",
     "iopub.status.busy": "2023-10-20T08:05:43.463172Z",
     "iopub.status.idle": "2023-10-20T08:05:43.506196Z",
     "shell.execute_reply": "2023-10-20T08:05:43.505205Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:43.511327Z",
     "iopub.status.busy": "2023-10-20T08:05:43.510452Z",
     "iopub.status.idle": "2023-10-20T08:05:43.522855Z",
     "shell.execute_reply": "2023-10-20T08:05:43.521721Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa874023af0>\n",
       "├── 'a' --> tensor([[ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa874023940>\n",
       "    └── 'c' --> tensor([[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:43.527813Z",
     "iopub.status.busy": "2023-10-20T08:05:43.527498Z",
     "iopub.status.idle": "2023-10-20T08:05:43.534575Z",
     "shell.execute_reply": "2023-10-20T08:05:43.533615Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2184,  0.9143, -0.8228],\n",
       "        [-0.4472,  0.1862, -0.6376]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:43.539048Z",
     "iopub.status.busy": "2023-10-20T08:05:43.538528Z",
     "iopub.status.idle": "2023-10-20T08:05:50.309245Z",
     "shell.execute_reply": "2023-10-20T08:05:50.308227Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84 ns ± 1.28 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:50.314011Z",
     "iopub.status.busy": "2023-10-20T08:05:50.313180Z",
     "iopub.status.idle": "2023-10-20T08:05:50.323039Z",
     "shell.execute_reply": "2023-10-20T08:05:50.322047Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa874023af0>\n",
       "├── 'a' --> tensor([[-1.5677, -0.2311, -1.1561],\n",
       "│                   [ 0.6048,  0.5248, -1.6902]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa874023940>\n",
       "    └── 'c' --> tensor([[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:50.328221Z",
     "iopub.status.busy": "2023-10-20T08:05:50.327612Z",
     "iopub.status.idle": "2023-10-20T08:05:59.772515Z",
     "shell.execute_reply": "2023-10-20T08:05:59.771528Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "116 ns ± 1.66 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:05:59.777550Z",
     "iopub.status.busy": "2023-10-20T08:05:59.776945Z",
     "iopub.status.idle": "2023-10-20T08:06:00.321394Z",
     "shell.execute_reply": "2023-10-20T08:06:00.320421Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:00.326095Z",
     "iopub.status.busy": "2023-10-20T08:06:00.325354Z",
     "iopub.status.idle": "2023-10-20T08:06:00.334349Z",
     "shell.execute_reply": "2023-10-20T08:06:00.333531Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:00.338724Z",
     "iopub.status.busy": "2023-10-20T08:06:00.337885Z",
     "iopub.status.idle": "2023-10-20T08:06:00.344612Z",
     "shell.execute_reply": "2023-10-20T08:06:00.343431Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.2184,  0.9143, -0.8228],\n",
       "        [-0.4472,  0.1862, -0.6376]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:00.348295Z",
     "iopub.status.busy": "2023-10-20T08:06:00.347625Z",
     "iopub.status.idle": "2023-10-20T08:06:06.202734Z",
     "shell.execute_reply": "2023-10-20T08:06:06.201678Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.9 ns ± 1.09 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:06.209188Z",
     "iopub.status.busy": "2023-10-20T08:06:06.207492Z",
     "iopub.status.idle": "2023-10-20T08:06:06.219025Z",
     "shell.execute_reply": "2023-10-20T08:06:06.217990Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0845, -0.3690, -0.9072],\n",
       "               [-0.4966,  1.0668, -0.1605]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:06.223899Z",
     "iopub.status.busy": "2023-10-20T08:06:06.222995Z",
     "iopub.status.idle": "2023-10-20T08:06:11.528405Z",
     "shell.execute_reply": "2023-10-20T08:06:11.527478Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "655 ns ± 11.9 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:11.532700Z",
     "iopub.status.busy": "2023-10-20T08:06:11.532180Z",
     "iopub.status.idle": "2023-10-20T08:06:20.616573Z",
     "shell.execute_reply": "2023-10-20T08:06:20.615507Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.11 µs ± 6.95 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:20.620827Z",
     "iopub.status.busy": "2023-10-20T08:06:20.620373Z",
     "iopub.status.idle": "2023-10-20T08:06:31.516996Z",
     "shell.execute_reply": "2023-10-20T08:06:31.515979Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.4 µs ± 209 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:31.521252Z",
     "iopub.status.busy": "2023-10-20T08:06:31.520785Z",
     "iopub.status.idle": "2023-10-20T08:06:31.527931Z",
     "shell.execute_reply": "2023-10-20T08:06:31.526308Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:31.533451Z",
     "iopub.status.busy": "2023-10-20T08:06:31.532981Z",
     "iopub.status.idle": "2023-10-20T08:06:33.963608Z",
     "shell.execute_reply": "2023-10-20T08:06:33.962710Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "298 µs ± 9.99 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:33.968332Z",
     "iopub.status.busy": "2023-10-20T08:06:33.967343Z",
     "iopub.status.idle": "2023-10-20T08:06:36.288633Z",
     "shell.execute_reply": "2023-10-20T08:06:36.287712Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "284 µs ± 5.23 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:36.293184Z",
     "iopub.status.busy": "2023-10-20T08:06:36.292202Z",
     "iopub.status.idle": "2023-10-20T08:06:36.297138Z",
     "shell.execute_reply": "2023-10-20T08:06:36.296198Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:36.301335Z",
     "iopub.status.busy": "2023-10-20T08:06:36.300612Z",
     "iopub.status.idle": "2023-10-20T08:06:36.312538Z",
     "shell.execute_reply": "2023-10-20T08:06:36.311701Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa79d670a30>\n",
       "├── 'a' --> tensor([[[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]],\n",
       "│           \n",
       "│                   [[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]],\n",
       "│           \n",
       "│                   [[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]],\n",
       "│           \n",
       "│                   [[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]],\n",
       "│           \n",
       "│                   [[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]],\n",
       "│           \n",
       "│                   [[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]],\n",
       "│           \n",
       "│                   [[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]],\n",
       "│           \n",
       "│                   [[ 0.2184,  0.9143, -0.8228],\n",
       "│                    [-0.4472,  0.1862, -0.6376]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa84c3cf5b0>\n",
       "    └── 'c' --> tensor([[[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "                \n",
       "                        [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "                \n",
       "                        [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "                \n",
       "                        [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "                \n",
       "                        [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "                \n",
       "                        [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "                \n",
       "                        [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "                \n",
       "                        [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                         [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                         [-0.5426, -0.4802, -0.0566,  0.6066]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:36.316534Z",
     "iopub.status.busy": "2023-10-20T08:06:36.315992Z",
     "iopub.status.idle": "2023-10-20T08:06:40.259486Z",
     "shell.execute_reply": "2023-10-20T08:06:40.258543Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48.8 µs ± 761 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:40.264539Z",
     "iopub.status.busy": "2023-10-20T08:06:40.263682Z",
     "iopub.status.idle": "2023-10-20T08:06:40.275653Z",
     "shell.execute_reply": "2023-10-20T08:06:40.274694Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa79d4a1640>\n",
       "├── 'a' --> tensor([[ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376],\n",
       "│                   [ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376],\n",
       "│                   [ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376],\n",
       "│                   [ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376],\n",
       "│                   [ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376],\n",
       "│                   [ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376],\n",
       "│                   [ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376],\n",
       "│                   [ 0.2184,  0.9143, -0.8228],\n",
       "│                   [-0.4472,  0.1862, -0.6376]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa79d4a1e80>\n",
       "    └── 'c' --> tensor([[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                        [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                        [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                        [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                        [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                        [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                        [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                        [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                        [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                        [-0.5426, -0.4802, -0.0566,  0.6066]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:40.279729Z",
     "iopub.status.busy": "2023-10-20T08:06:40.279174Z",
     "iopub.status.idle": "2023-10-20T08:06:43.839744Z",
     "shell.execute_reply": "2023-10-20T08:06:43.838903Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43.5 µs ± 1.45 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:43.844052Z",
     "iopub.status.busy": "2023-10-20T08:06:43.843162Z",
     "iopub.status.idle": "2023-10-20T08:06:51.370475Z",
     "shell.execute_reply": "2023-10-20T08:06:51.369546Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92.7 µs ± 1.78 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:51.374800Z",
     "iopub.status.busy": "2023-10-20T08:06:51.374277Z",
     "iopub.status.idle": "2023-10-20T08:06:51.386522Z",
     "shell.execute_reply": "2023-10-20T08:06:51.385423Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "              \n",
       "                      [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "              \n",
       "                      [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "              \n",
       "                      [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "              \n",
       "                      [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "              \n",
       "                      [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "              \n",
       "                      [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]],\n",
       "              \n",
       "                      [[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                       [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                       [-0.5426, -0.4802, -0.0566,  0.6066]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]],\n",
       "       \n",
       "               [[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]],\n",
       "       \n",
       "               [[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]],\n",
       "       \n",
       "               [[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]],\n",
       "       \n",
       "               [[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]],\n",
       "       \n",
       "               [[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]],\n",
       "       \n",
       "               [[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]],\n",
       "       \n",
       "               [[ 0.2184,  0.9143, -0.8228],\n",
       "                [-0.4472,  0.1862, -0.6376]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:06:51.390896Z",
     "iopub.status.busy": "2023-10-20T08:06:51.390295Z",
     "iopub.status.idle": "2023-10-20T08:07:00.157815Z",
     "shell.execute_reply": "2023-10-20T08:07:00.156449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "108 µs ± 1.63 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:07:00.162252Z",
     "iopub.status.busy": "2023-10-20T08:07:00.161321Z",
     "iopub.status.idle": "2023-10-20T08:07:00.172085Z",
     "shell.execute_reply": "2023-10-20T08:07:00.171133Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                      [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                      [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                      [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                      [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                      [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                      [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066],\n",
       "                      [-0.8663, -0.9471,  1.2737,  1.1486],\n",
       "                      [-0.5334,  0.4432, -0.1776, -0.0225],\n",
       "                      [-0.5426, -0.4802, -0.0566,  0.6066]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376],\n",
       "               [ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376],\n",
       "               [ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376],\n",
       "               [ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376],\n",
       "               [ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376],\n",
       "               [ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376],\n",
       "               [ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376],\n",
       "               [ 0.2184,  0.9143, -0.8228],\n",
       "               [-0.4472,  0.1862, -0.6376]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:07:00.175818Z",
     "iopub.status.busy": "2023-10-20T08:07:00.175530Z",
     "iopub.status.idle": "2023-10-20T08:07:01.748078Z",
     "shell.execute_reply": "2023-10-20T08:07:01.747162Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "191 µs ± 5.52 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T08:07:01.752585Z",
     "iopub.status.busy": "2023-10-20T08:07:01.752031Z",
     "iopub.status.idle": "2023-10-20T08:07:07.213366Z",
     "shell.execute_reply": "2023-10-20T08:07:07.212304Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "672 µs ± 15.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
