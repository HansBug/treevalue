{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:36.044947Z",
     "iopub.status.busy": "2023-05-26T06:34:36.044303Z",
     "iopub.status.idle": "2023-05-26T06:34:37.394520Z",
     "shell.execute_reply": "2023-05-26T06:34:37.393733Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:37.399335Z",
     "iopub.status.busy": "2023-05-26T06:34:37.398781Z",
     "iopub.status.idle": "2023-05-26T06:34:37.427905Z",
     "shell.execute_reply": "2023-05-26T06:34:37.427243Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:37.431640Z",
     "iopub.status.busy": "2023-05-26T06:34:37.431198Z",
     "iopub.status.idle": "2023-05-26T06:34:37.441868Z",
     "shell.execute_reply": "2023-05-26T06:34:37.441240Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa6c4732d30>\n",
       "├── 'a' --> tensor([[ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa6c4732a90>\n",
       "    └── 'c' --> tensor([[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:37.445083Z",
     "iopub.status.busy": "2023-05-26T06:34:37.444728Z",
     "iopub.status.idle": "2023-05-26T06:34:37.450821Z",
     "shell.execute_reply": "2023-05-26T06:34:37.450151Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 2.5961, -1.0429, -1.2702],\n",
       "        [-1.4491,  0.4438,  0.9506]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:37.453873Z",
     "iopub.status.busy": "2023-05-26T06:34:37.453336Z",
     "iopub.status.idle": "2023-05-26T06:34:43.238518Z",
     "shell.execute_reply": "2023-05-26T06:34:43.237640Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.2 ns ± 0.0747 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:43.242562Z",
     "iopub.status.busy": "2023-05-26T06:34:43.241919Z",
     "iopub.status.idle": "2023-05-26T06:34:43.248473Z",
     "shell.execute_reply": "2023-05-26T06:34:43.247751Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa6c4732d30>\n",
       "├── 'a' --> tensor([[ 0.9666, -0.7693, -0.7121],\n",
       "│                   [-0.1582, -1.4638, -0.3452]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa6c4732a90>\n",
       "    └── 'c' --> tensor([[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:43.251503Z",
     "iopub.status.busy": "2023-05-26T06:34:43.250949Z",
     "iopub.status.idle": "2023-05-26T06:34:50.289085Z",
     "shell.execute_reply": "2023-05-26T06:34:50.288351Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "86.8 ns ± 0.0429 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:50.292823Z",
     "iopub.status.busy": "2023-05-26T06:34:50.292331Z",
     "iopub.status.idle": "2023-05-26T06:34:50.659593Z",
     "shell.execute_reply": "2023-05-26T06:34:50.658835Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:50.663479Z",
     "iopub.status.busy": "2023-05-26T06:34:50.662976Z",
     "iopub.status.idle": "2023-05-26T06:34:50.669146Z",
     "shell.execute_reply": "2023-05-26T06:34:50.668431Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:50.672132Z",
     "iopub.status.busy": "2023-05-26T06:34:50.671709Z",
     "iopub.status.idle": "2023-05-26T06:34:50.676700Z",
     "shell.execute_reply": "2023-05-26T06:34:50.675967Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 2.5961, -1.0429, -1.2702],\n",
       "        [-1.4491,  0.4438,  0.9506]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:50.680097Z",
     "iopub.status.busy": "2023-05-26T06:34:50.679490Z",
     "iopub.status.idle": "2023-05-26T06:34:55.420121Z",
     "shell.execute_reply": "2023-05-26T06:34:55.419377Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.4 ns ± 0.164 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:55.423935Z",
     "iopub.status.busy": "2023-05-26T06:34:55.423275Z",
     "iopub.status.idle": "2023-05-26T06:34:55.429901Z",
     "shell.execute_reply": "2023-05-26T06:34:55.429149Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0478, -1.0036,  0.3377],\n",
       "               [ 0.5748, -0.2834,  1.8624]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:55.433398Z",
     "iopub.status.busy": "2023-05-26T06:34:55.432758Z",
     "iopub.status.idle": "2023-05-26T06:34:59.446141Z",
     "shell.execute_reply": "2023-05-26T06:34:59.445390Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "494 ns ± 0.095 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:34:59.450001Z",
     "iopub.status.busy": "2023-05-26T06:34:59.449571Z",
     "iopub.status.idle": "2023-05-26T06:35:06.557488Z",
     "shell.execute_reply": "2023-05-26T06:35:06.556733Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "878 ns ± 0.919 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:06.561008Z",
     "iopub.status.busy": "2023-05-26T06:35:06.560758Z",
     "iopub.status.idle": "2023-05-26T06:35:15.160108Z",
     "shell.execute_reply": "2023-05-26T06:35:15.159366Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.6 µs ± 18.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:15.163707Z",
     "iopub.status.busy": "2023-05-26T06:35:15.163289Z",
     "iopub.status.idle": "2023-05-26T06:35:15.166800Z",
     "shell.execute_reply": "2023-05-26T06:35:15.166059Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:15.170295Z",
     "iopub.status.busy": "2023-05-26T06:35:15.169912Z",
     "iopub.status.idle": "2023-05-26T06:35:26.965958Z",
     "shell.execute_reply": "2023-05-26T06:35:26.965295Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 472 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:26.969351Z",
     "iopub.status.busy": "2023-05-26T06:35:26.968922Z",
     "iopub.status.idle": "2023-05-26T06:35:38.719825Z",
     "shell.execute_reply": "2023-05-26T06:35:38.719197Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 226 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:38.723488Z",
     "iopub.status.busy": "2023-05-26T06:35:38.722988Z",
     "iopub.status.idle": "2023-05-26T06:35:38.726551Z",
     "shell.execute_reply": "2023-05-26T06:35:38.725986Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:38.729556Z",
     "iopub.status.busy": "2023-05-26T06:35:38.728883Z",
     "iopub.status.idle": "2023-05-26T06:35:38.736203Z",
     "shell.execute_reply": "2023-05-26T06:35:38.735650Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa5f7aabd30>\n",
       "├── 'a' --> tensor([[[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]],\n",
       "│           \n",
       "│                   [[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]],\n",
       "│           \n",
       "│                   [[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]],\n",
       "│           \n",
       "│                   [[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]],\n",
       "│           \n",
       "│                   [[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]],\n",
       "│           \n",
       "│                   [[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]],\n",
       "│           \n",
       "│                   [[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]],\n",
       "│           \n",
       "│                   [[ 2.5961, -1.0429, -1.2702],\n",
       "│                    [-1.4491,  0.4438,  0.9506]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa5f7aabe20>\n",
       "    └── 'c' --> tensor([[[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "                \n",
       "                        [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "                \n",
       "                        [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "                \n",
       "                        [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "                \n",
       "                        [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "                \n",
       "                        [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "                \n",
       "                        [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "                \n",
       "                        [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                         [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                         [-0.4976,  0.8176, -0.3302, -0.0392]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:38.739106Z",
     "iopub.status.busy": "2023-05-26T06:35:38.738548Z",
     "iopub.status.idle": "2023-05-26T06:35:41.411151Z",
     "shell.execute_reply": "2023-05-26T06:35:41.410485Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.8 µs ± 74.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:41.414393Z",
     "iopub.status.busy": "2023-05-26T06:35:41.413991Z",
     "iopub.status.idle": "2023-05-26T06:35:41.421782Z",
     "shell.execute_reply": "2023-05-26T06:35:41.421044Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa5ffab2f40>\n",
       "├── 'a' --> tensor([[ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506],\n",
       "│                   [ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506],\n",
       "│                   [ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506],\n",
       "│                   [ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506],\n",
       "│                   [ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506],\n",
       "│                   [ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506],\n",
       "│                   [ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506],\n",
       "│                   [ 2.5961, -1.0429, -1.2702],\n",
       "│                   [-1.4491,  0.4438,  0.9506]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa5f7f25c70>\n",
       "    └── 'c' --> tensor([[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                        [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                        [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                        [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                        [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                        [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                        [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                        [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                        [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                        [-0.4976,  0.8176, -0.3302, -0.0392]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:41.424912Z",
     "iopub.status.busy": "2023-05-26T06:35:41.424463Z",
     "iopub.status.idle": "2023-05-26T06:35:43.913966Z",
     "shell.execute_reply": "2023-05-26T06:35:43.913205Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.6 µs ± 81.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:43.917810Z",
     "iopub.status.busy": "2023-05-26T06:35:43.917123Z",
     "iopub.status.idle": "2023-05-26T06:35:49.329864Z",
     "shell.execute_reply": "2023-05-26T06:35:49.329107Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.6 µs ± 69 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:49.333711Z",
     "iopub.status.busy": "2023-05-26T06:35:49.333134Z",
     "iopub.status.idle": "2023-05-26T06:35:49.341783Z",
     "shell.execute_reply": "2023-05-26T06:35:49.341153Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "              \n",
       "                      [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "              \n",
       "                      [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "              \n",
       "                      [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "              \n",
       "                      [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "              \n",
       "                      [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "              \n",
       "                      [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]],\n",
       "              \n",
       "                      [[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                       [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                       [-0.4976,  0.8176, -0.3302, -0.0392]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]],\n",
       "       \n",
       "               [[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]],\n",
       "       \n",
       "               [[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]],\n",
       "       \n",
       "               [[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]],\n",
       "       \n",
       "               [[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]],\n",
       "       \n",
       "               [[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]],\n",
       "       \n",
       "               [[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]],\n",
       "       \n",
       "               [[ 2.5961, -1.0429, -1.2702],\n",
       "                [-1.4491,  0.4438,  0.9506]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:49.344528Z",
     "iopub.status.busy": "2023-05-26T06:35:49.344298Z",
     "iopub.status.idle": "2023-05-26T06:35:55.777619Z",
     "shell.execute_reply": "2023-05-26T06:35:55.776852Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.2 µs ± 276 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:55.781231Z",
     "iopub.status.busy": "2023-05-26T06:35:55.780607Z",
     "iopub.status.idle": "2023-05-26T06:35:55.788969Z",
     "shell.execute_reply": "2023-05-26T06:35:55.788349Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                      [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                      [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                      [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                      [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                      [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                      [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392],\n",
       "                      [-0.0738, -1.5425,  0.6544, -0.9515],\n",
       "                      [-0.1207,  0.6219, -0.4174, -0.9269],\n",
       "                      [-0.4976,  0.8176, -0.3302, -0.0392]]),\n",
       "       ),\n",
       "    a: tensor([[ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506],\n",
       "               [ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506],\n",
       "               [ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506],\n",
       "               [ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506],\n",
       "               [ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506],\n",
       "               [ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506],\n",
       "               [ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506],\n",
       "               [ 2.5961, -1.0429, -1.2702],\n",
       "               [-1.4491,  0.4438,  0.9506]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:35:55.792375Z",
     "iopub.status.busy": "2023-05-26T06:35:55.791817Z",
     "iopub.status.idle": "2023-05-26T06:36:07.897653Z",
     "shell.execute_reply": "2023-05-26T06:36:07.896878Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "149 µs ± 844 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T06:36:07.901313Z",
     "iopub.status.busy": "2023-05-26T06:36:07.900655Z",
     "iopub.status.idle": "2023-05-26T06:36:10.673178Z",
     "shell.execute_reply": "2023-05-26T06:36:10.671936Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "341 µs ± 561 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
