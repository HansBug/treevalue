{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:20.068271Z",
     "iopub.status.busy": "2023-03-15T13:19:20.067616Z",
     "iopub.status.idle": "2023-03-15T13:19:21.011741Z",
     "shell.execute_reply": "2023-03-15T13:19:21.011035Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:21.015436Z",
     "iopub.status.busy": "2023-03-15T13:19:21.014914Z",
     "iopub.status.idle": "2023-03-15T13:19:21.048504Z",
     "shell.execute_reply": "2023-03-15T13:19:21.047869Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:21.051853Z",
     "iopub.status.busy": "2023-03-15T13:19:21.051423Z",
     "iopub.status.idle": "2023-03-15T13:19:21.061348Z",
     "shell.execute_reply": "2023-03-15T13:19:21.060618Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe62432aac0>\n",
       "├── 'a' --> tensor([[ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe62740d760>\n",
       "    └── 'c' --> tensor([[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:21.064215Z",
     "iopub.status.busy": "2023-03-15T13:19:21.063832Z",
     "iopub.status.idle": "2023-03-15T13:19:21.070138Z",
     "shell.execute_reply": "2023-03-15T13:19:21.069133Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.1171, -0.4977,  0.5248],\n",
       "        [ 1.9999,  1.1367,  0.9493]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:21.073716Z",
     "iopub.status.busy": "2023-03-15T13:19:21.072605Z",
     "iopub.status.idle": "2023-03-15T13:19:26.228914Z",
     "shell.execute_reply": "2023-03-15T13:19:26.227896Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.5 ns ± 0.0851 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:26.232474Z",
     "iopub.status.busy": "2023-03-15T13:19:26.231979Z",
     "iopub.status.idle": "2023-03-15T13:19:26.239114Z",
     "shell.execute_reply": "2023-03-15T13:19:26.238462Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe62432aac0>\n",
       "├── 'a' --> tensor([[ 0.3425, -0.4352, -0.4775],\n",
       "│                   [-0.2628,  0.7990, -0.4734]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe62740d760>\n",
       "    └── 'c' --> tensor([[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:26.241968Z",
     "iopub.status.busy": "2023-03-15T13:19:26.241653Z",
     "iopub.status.idle": "2023-03-15T13:19:32.262294Z",
     "shell.execute_reply": "2023-03-15T13:19:32.261404Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.1 ns ± 0.0344 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:32.265673Z",
     "iopub.status.busy": "2023-03-15T13:19:32.265259Z",
     "iopub.status.idle": "2023-03-15T13:19:32.866327Z",
     "shell.execute_reply": "2023-03-15T13:19:32.864932Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:32.870091Z",
     "iopub.status.busy": "2023-03-15T13:19:32.869509Z",
     "iopub.status.idle": "2023-03-15T13:19:32.875259Z",
     "shell.execute_reply": "2023-03-15T13:19:32.874584Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:32.878206Z",
     "iopub.status.busy": "2023-03-15T13:19:32.877567Z",
     "iopub.status.idle": "2023-03-15T13:19:32.882496Z",
     "shell.execute_reply": "2023-03-15T13:19:32.881845Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.1171, -0.4977,  0.5248],\n",
       "        [ 1.9999,  1.1367,  0.9493]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:32.885282Z",
     "iopub.status.busy": "2023-03-15T13:19:32.884681Z",
     "iopub.status.idle": "2023-03-15T13:19:37.611909Z",
     "shell.execute_reply": "2023-03-15T13:19:37.611041Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.2 ns ± 0.167 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:37.615214Z",
     "iopub.status.busy": "2023-03-15T13:19:37.614741Z",
     "iopub.status.idle": "2023-03-15T13:19:37.621001Z",
     "shell.execute_reply": "2023-03-15T13:19:37.620326Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.1346, -1.4281,  0.7654],\n",
       "               [-1.0446, -0.3884, -0.0966]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:37.623618Z",
     "iopub.status.busy": "2023-03-15T13:19:37.623252Z",
     "iopub.status.idle": "2023-03-15T13:19:41.653650Z",
     "shell.execute_reply": "2023-03-15T13:19:41.652776Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "497 ns ± 0.0856 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:41.657678Z",
     "iopub.status.busy": "2023-03-15T13:19:41.656997Z",
     "iopub.status.idle": "2023-03-15T13:19:48.517415Z",
     "shell.execute_reply": "2023-03-15T13:19:48.516548Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "845 ns ± 1.94 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:48.520724Z",
     "iopub.status.busy": "2023-03-15T13:19:48.520320Z",
     "iopub.status.idle": "2023-03-15T13:19:57.241870Z",
     "shell.execute_reply": "2023-03-15T13:19:57.241007Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 11.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:57.245196Z",
     "iopub.status.busy": "2023-03-15T13:19:57.244795Z",
     "iopub.status.idle": "2023-03-15T13:19:57.249143Z",
     "shell.execute_reply": "2023-03-15T13:19:57.248501Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:19:57.251813Z",
     "iopub.status.busy": "2023-03-15T13:19:57.251446Z",
     "iopub.status.idle": "2023-03-15T13:20:09.043646Z",
     "shell.execute_reply": "2023-03-15T13:20:09.042864Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:09.047063Z",
     "iopub.status.busy": "2023-03-15T13:20:09.046415Z",
     "iopub.status.idle": "2023-03-15T13:20:20.719091Z",
     "shell.execute_reply": "2023-03-15T13:20:20.718474Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 231 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:20.722126Z",
     "iopub.status.busy": "2023-03-15T13:20:20.721705Z",
     "iopub.status.idle": "2023-03-15T13:20:20.725207Z",
     "shell.execute_reply": "2023-03-15T13:20:20.724657Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:20.727903Z",
     "iopub.status.busy": "2023-03-15T13:20:20.727300Z",
     "iopub.status.idle": "2023-03-15T13:20:20.734428Z",
     "shell.execute_reply": "2023-03-15T13:20:20.733889Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe57ec5af70>\n",
       "├── 'a' --> tensor([[[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]],\n",
       "│           \n",
       "│                   [[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]],\n",
       "│           \n",
       "│                   [[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]],\n",
       "│           \n",
       "│                   [[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]],\n",
       "│           \n",
       "│                   [[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]],\n",
       "│           \n",
       "│                   [[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]],\n",
       "│           \n",
       "│                   [[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]],\n",
       "│           \n",
       "│                   [[ 1.1171, -0.4977,  0.5248],\n",
       "│                    [ 1.9999,  1.1367,  0.9493]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe57ec5ae80>\n",
       "    └── 'c' --> tensor([[[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "                \n",
       "                        [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "                \n",
       "                        [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "                \n",
       "                        [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "                \n",
       "                        [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "                \n",
       "                        [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "                \n",
       "                        [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "                \n",
       "                        [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                         [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                         [-0.0434,  0.9229,  1.4960,  0.8869]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:20.737042Z",
     "iopub.status.busy": "2023-03-15T13:20:20.736449Z",
     "iopub.status.idle": "2023-03-15T13:20:23.353024Z",
     "shell.execute_reply": "2023-03-15T13:20:23.352186Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.2 µs ± 55.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:23.356417Z",
     "iopub.status.busy": "2023-03-15T13:20:23.355951Z",
     "iopub.status.idle": "2023-03-15T13:20:23.363452Z",
     "shell.execute_reply": "2023-03-15T13:20:23.362769Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fe57ec80a90>\n",
       "├── 'a' --> tensor([[ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493],\n",
       "│                   [ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493],\n",
       "│                   [ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493],\n",
       "│                   [ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493],\n",
       "│                   [ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493],\n",
       "│                   [ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493],\n",
       "│                   [ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493],\n",
       "│                   [ 1.1171, -0.4977,  0.5248],\n",
       "│                   [ 1.9999,  1.1367,  0.9493]])\n",
       "└── 'x' --> <FastTreeValue 0x7fe57ec80b80>\n",
       "    └── 'c' --> tensor([[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                        [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                        [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                        [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                        [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                        [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                        [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                        [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                        [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                        [-0.0434,  0.9229,  1.4960,  0.8869]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:23.366845Z",
     "iopub.status.busy": "2023-03-15T13:20:23.366305Z",
     "iopub.status.idle": "2023-03-15T13:20:25.834661Z",
     "shell.execute_reply": "2023-03-15T13:20:25.833752Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.4 µs ± 126 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:25.837919Z",
     "iopub.status.busy": "2023-03-15T13:20:25.837508Z",
     "iopub.status.idle": "2023-03-15T13:20:30.481612Z",
     "shell.execute_reply": "2023-03-15T13:20:30.480749Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.1 µs ± 69.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:30.484995Z",
     "iopub.status.busy": "2023-03-15T13:20:30.484562Z",
     "iopub.status.idle": "2023-03-15T13:20:30.493250Z",
     "shell.execute_reply": "2023-03-15T13:20:30.492637Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "              \n",
       "                      [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "              \n",
       "                      [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "              \n",
       "                      [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "              \n",
       "                      [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "              \n",
       "                      [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "              \n",
       "                      [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]],\n",
       "              \n",
       "                      [[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                       [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                       [-0.0434,  0.9229,  1.4960,  0.8869]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]],\n",
       "       \n",
       "               [[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]],\n",
       "       \n",
       "               [[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]],\n",
       "       \n",
       "               [[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]],\n",
       "       \n",
       "               [[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]],\n",
       "       \n",
       "               [[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]],\n",
       "       \n",
       "               [[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]],\n",
       "       \n",
       "               [[ 1.1171, -0.4977,  0.5248],\n",
       "                [ 1.9999,  1.1367,  0.9493]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:30.495970Z",
     "iopub.status.busy": "2023-03-15T13:20:30.495515Z",
     "iopub.status.idle": "2023-03-15T13:20:36.711590Z",
     "shell.execute_reply": "2023-03-15T13:20:36.710725Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.5 µs ± 281 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:36.714913Z",
     "iopub.status.busy": "2023-03-15T13:20:36.714490Z",
     "iopub.status.idle": "2023-03-15T13:20:36.722465Z",
     "shell.execute_reply": "2023-03-15T13:20:36.721850Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                      [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                      [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                      [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                      [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                      [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                      [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869],\n",
       "                      [ 1.6494, -0.5900, -0.2535,  0.1055],\n",
       "                      [-0.7616,  0.7960, -0.3887, -0.2607],\n",
       "                      [-0.0434,  0.9229,  1.4960,  0.8869]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493],\n",
       "               [ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493],\n",
       "               [ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493],\n",
       "               [ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493],\n",
       "               [ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493],\n",
       "               [ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493],\n",
       "               [ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493],\n",
       "               [ 1.1171, -0.4977,  0.5248],\n",
       "               [ 1.9999,  1.1367,  0.9493]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:36.725064Z",
     "iopub.status.busy": "2023-03-15T13:20:36.724692Z",
     "iopub.status.idle": "2023-03-15T13:20:48.464809Z",
     "shell.execute_reply": "2023-03-15T13:20:48.464005Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 133 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:20:48.468251Z",
     "iopub.status.busy": "2023-03-15T13:20:48.467869Z",
     "iopub.status.idle": "2023-03-15T13:20:51.144389Z",
     "shell.execute_reply": "2023-03-15T13:20:51.143607Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "329 µs ± 2.04 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
