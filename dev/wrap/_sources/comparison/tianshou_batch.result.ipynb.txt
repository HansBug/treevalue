{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:14.582817Z",
     "iopub.status.busy": "2023-08-11T04:58:14.582348Z",
     "iopub.status.idle": "2023-08-11T04:58:16.069421Z",
     "shell.execute_reply": "2023-08-11T04:58:16.068570Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:16.073530Z",
     "iopub.status.busy": "2023-08-11T04:58:16.073161Z",
     "iopub.status.idle": "2023-08-11T04:58:16.104747Z",
     "shell.execute_reply": "2023-08-11T04:58:16.103975Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:16.108692Z",
     "iopub.status.busy": "2023-08-11T04:58:16.108413Z",
     "iopub.status.idle": "2023-08-11T04:58:16.117949Z",
     "shell.execute_reply": "2023-08-11T04:58:16.117167Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5aebc57160>\n",
       "├── 'a' --> tensor([[-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5aebc572e0>\n",
       "    └── 'c' --> tensor([[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:16.122010Z",
     "iopub.status.busy": "2023-08-11T04:58:16.121586Z",
     "iopub.status.idle": "2023-08-11T04:58:16.127325Z",
     "shell.execute_reply": "2023-08-11T04:58:16.126519Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2689,  0.3690, -0.1727],\n",
       "        [-1.9622, -1.2579,  0.1243]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:16.131309Z",
     "iopub.status.busy": "2023-08-11T04:58:16.130908Z",
     "iopub.status.idle": "2023-08-11T04:58:22.388848Z",
     "shell.execute_reply": "2023-08-11T04:58:22.388017Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77 ns ± 0.0451 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:22.392862Z",
     "iopub.status.busy": "2023-08-11T04:58:22.392276Z",
     "iopub.status.idle": "2023-08-11T04:58:22.399672Z",
     "shell.execute_reply": "2023-08-11T04:58:22.398849Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5aebc57160>\n",
       "├── 'a' --> tensor([[-3.7126, -1.6334,  0.6980],\n",
       "│                   [-1.4830,  0.0943, -0.7372]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5aebc572e0>\n",
       "    └── 'c' --> tensor([[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:22.403374Z",
     "iopub.status.busy": "2023-08-11T04:58:22.402722Z",
     "iopub.status.idle": "2023-08-11T04:58:28.980608Z",
     "shell.execute_reply": "2023-08-11T04:58:28.979938Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.3 ns ± 0.137 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:28.984109Z",
     "iopub.status.busy": "2023-08-11T04:58:28.983580Z",
     "iopub.status.idle": "2023-08-11T04:58:29.404016Z",
     "shell.execute_reply": "2023-08-11T04:58:29.403236Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:29.408100Z",
     "iopub.status.busy": "2023-08-11T04:58:29.407508Z",
     "iopub.status.idle": "2023-08-11T04:58:29.415529Z",
     "shell.execute_reply": "2023-08-11T04:58:29.414805Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:29.419169Z",
     "iopub.status.busy": "2023-08-11T04:58:29.418714Z",
     "iopub.status.idle": "2023-08-11T04:58:29.424432Z",
     "shell.execute_reply": "2023-08-11T04:58:29.423668Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.2689,  0.3690, -0.1727],\n",
       "        [-1.9622, -1.2579,  0.1243]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:29.427960Z",
     "iopub.status.busy": "2023-08-11T04:58:29.427414Z",
     "iopub.status.idle": "2023-08-11T04:58:34.952329Z",
     "shell.execute_reply": "2023-08-11T04:58:34.951602Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68 ns ± 0.0295 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:34.956025Z",
     "iopub.status.busy": "2023-08-11T04:58:34.955343Z",
     "iopub.status.idle": "2023-08-11T04:58:34.962573Z",
     "shell.execute_reply": "2023-08-11T04:58:34.961789Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.4086,  0.8293,  0.0233],\n",
       "               [-0.0268, -0.4543, -1.5669]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:34.965898Z",
     "iopub.status.busy": "2023-08-11T04:58:34.965471Z",
     "iopub.status.idle": "2023-08-11T04:58:39.376928Z",
     "shell.execute_reply": "2023-08-11T04:58:39.375847Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "542 ns ± 0.0497 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:39.381129Z",
     "iopub.status.busy": "2023-08-11T04:58:39.380416Z",
     "iopub.status.idle": "2023-08-11T04:58:47.019264Z",
     "shell.execute_reply": "2023-08-11T04:58:47.018500Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "941 ns ± 0.334 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:47.023110Z",
     "iopub.status.busy": "2023-08-11T04:58:47.022393Z",
     "iopub.status.idle": "2023-08-11T04:58:56.160538Z",
     "shell.execute_reply": "2023-08-11T04:58:56.159808Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 32.6 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:56.164218Z",
     "iopub.status.busy": "2023-08-11T04:58:56.163698Z",
     "iopub.status.idle": "2023-08-11T04:58:56.167220Z",
     "shell.execute_reply": "2023-08-11T04:58:56.166461Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:58:56.171042Z",
     "iopub.status.busy": "2023-08-11T04:58:56.170548Z",
     "iopub.status.idle": "2023-08-11T04:59:07.982830Z",
     "shell.execute_reply": "2023-08-11T04:59:07.982132Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 384 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:07.986435Z",
     "iopub.status.busy": "2023-08-11T04:59:07.985848Z",
     "iopub.status.idle": "2023-08-11T04:59:19.802628Z",
     "shell.execute_reply": "2023-08-11T04:59:19.801743Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 µs ± 596 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:19.807269Z",
     "iopub.status.busy": "2023-08-11T04:59:19.806584Z",
     "iopub.status.idle": "2023-08-11T04:59:19.811331Z",
     "shell.execute_reply": "2023-08-11T04:59:19.810641Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:19.814411Z",
     "iopub.status.busy": "2023-08-11T04:59:19.814013Z",
     "iopub.status.idle": "2023-08-11T04:59:19.822726Z",
     "shell.execute_reply": "2023-08-11T04:59:19.821949Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5aebc7b3d0>\n",
       "├── 'a' --> tensor([[[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]],\n",
       "│           \n",
       "│                   [[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]],\n",
       "│           \n",
       "│                   [[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]],\n",
       "│           \n",
       "│                   [[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]],\n",
       "│           \n",
       "│                   [[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]],\n",
       "│           \n",
       "│                   [[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]],\n",
       "│           \n",
       "│                   [[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]],\n",
       "│           \n",
       "│                   [[-0.2689,  0.3690, -0.1727],\n",
       "│                    [-1.9622, -1.2579,  0.1243]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5a23fea7c0>\n",
       "    └── 'c' --> tensor([[[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "                \n",
       "                        [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "                \n",
       "                        [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "                \n",
       "                        [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "                \n",
       "                        [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "                \n",
       "                        [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "                \n",
       "                        [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "                \n",
       "                        [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                         [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                         [ 0.9720,  0.0303,  0.3396, -1.2330]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:19.826124Z",
     "iopub.status.busy": "2023-08-11T04:59:19.825627Z",
     "iopub.status.idle": "2023-08-11T04:59:22.544677Z",
     "shell.execute_reply": "2023-08-11T04:59:22.543913Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.4 µs ± 73.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:22.548443Z",
     "iopub.status.busy": "2023-08-11T04:59:22.547852Z",
     "iopub.status.idle": "2023-08-11T04:59:22.556413Z",
     "shell.execute_reply": "2023-08-11T04:59:22.555629Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f5a1be12e80>\n",
       "├── 'a' --> tensor([[-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243],\n",
       "│                   [-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243],\n",
       "│                   [-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243],\n",
       "│                   [-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243],\n",
       "│                   [-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243],\n",
       "│                   [-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243],\n",
       "│                   [-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243],\n",
       "│                   [-0.2689,  0.3690, -0.1727],\n",
       "│                   [-1.9622, -1.2579,  0.1243]])\n",
       "└── 'x' --> <FastTreeValue 0x7f5a23f50850>\n",
       "    └── 'c' --> tensor([[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                        [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                        [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                        [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                        [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                        [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                        [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                        [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                        [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                        [ 0.9720,  0.0303,  0.3396, -1.2330]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:22.560026Z",
     "iopub.status.busy": "2023-08-11T04:59:22.559421Z",
     "iopub.status.idle": "2023-08-11T04:59:25.082173Z",
     "shell.execute_reply": "2023-08-11T04:59:25.081454Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31 µs ± 57.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:25.085834Z",
     "iopub.status.busy": "2023-08-11T04:59:25.085275Z",
     "iopub.status.idle": "2023-08-11T04:59:31.673260Z",
     "shell.execute_reply": "2023-08-11T04:59:31.672531Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81.3 µs ± 360 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:31.677617Z",
     "iopub.status.busy": "2023-08-11T04:59:31.676902Z",
     "iopub.status.idle": "2023-08-11T04:59:31.687813Z",
     "shell.execute_reply": "2023-08-11T04:59:31.687008Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]],\n",
       "       \n",
       "               [[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]],\n",
       "       \n",
       "               [[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]],\n",
       "       \n",
       "               [[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]],\n",
       "       \n",
       "               [[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]],\n",
       "       \n",
       "               [[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]],\n",
       "       \n",
       "               [[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]],\n",
       "       \n",
       "               [[-0.2689,  0.3690, -0.1727],\n",
       "                [-1.9622, -1.2579,  0.1243]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "              \n",
       "                      [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "              \n",
       "                      [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "              \n",
       "                      [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "              \n",
       "                      [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "              \n",
       "                      [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "              \n",
       "                      [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]],\n",
       "              \n",
       "                      [[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                       [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                       [ 0.9720,  0.0303,  0.3396, -1.2330]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:31.690976Z",
     "iopub.status.busy": "2023-08-11T04:59:31.690562Z",
     "iopub.status.idle": "2023-08-11T04:59:38.545659Z",
     "shell.execute_reply": "2023-08-11T04:59:38.544940Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.2 µs ± 126 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:38.549017Z",
     "iopub.status.busy": "2023-08-11T04:59:38.548586Z",
     "iopub.status.idle": "2023-08-11T04:59:38.556618Z",
     "shell.execute_reply": "2023-08-11T04:59:38.555874Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243],\n",
       "               [-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243],\n",
       "               [-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243],\n",
       "               [-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243],\n",
       "               [-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243],\n",
       "               [-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243],\n",
       "               [-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243],\n",
       "               [-0.2689,  0.3690, -0.1727],\n",
       "               [-1.9622, -1.2579,  0.1243]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                      [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                      [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                      [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                      [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                      [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                      [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330],\n",
       "                      [ 0.5554,  0.0865,  1.1706,  0.6859],\n",
       "                      [ 0.7825, -2.5640, -0.1113, -0.4586],\n",
       "                      [ 0.9720,  0.0303,  0.3396, -1.2330]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:38.560015Z",
     "iopub.status.busy": "2023-08-11T04:59:38.559507Z",
     "iopub.status.idle": "2023-08-11T04:59:51.103471Z",
     "shell.execute_reply": "2023-08-11T04:59:51.101881Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "154 µs ± 196 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-11T04:59:51.106964Z",
     "iopub.status.busy": "2023-08-11T04:59:51.106690Z",
     "iopub.status.idle": "2023-08-11T04:59:53.941180Z",
     "shell.execute_reply": "2023-08-11T04:59:53.940469Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "349 µs ± 5.68 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
