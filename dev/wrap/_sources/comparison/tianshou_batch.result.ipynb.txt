{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:06:59.281551Z",
     "iopub.status.busy": "2023-02-25T07:06:59.281055Z",
     "iopub.status.idle": "2023-02-25T07:07:00.427045Z",
     "shell.execute_reply": "2023-02-25T07:07:00.425768Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:00.433159Z",
     "iopub.status.busy": "2023-02-25T07:07:00.432373Z",
     "iopub.status.idle": "2023-02-25T07:07:00.473878Z",
     "shell.execute_reply": "2023-02-25T07:07:00.473003Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:00.478191Z",
     "iopub.status.busy": "2023-02-25T07:07:00.477508Z",
     "iopub.status.idle": "2023-02-25T07:07:00.490470Z",
     "shell.execute_reply": "2023-02-25T07:07:00.489805Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7b90a58b20>\n",
       "├── 'a' --> tensor([[ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7b90acc070>\n",
       "    └── 'c' --> tensor([[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:00.493640Z",
     "iopub.status.busy": "2023-02-25T07:07:00.493265Z",
     "iopub.status.idle": "2023-02-25T07:07:00.500522Z",
     "shell.execute_reply": "2023-02-25T07:07:00.499268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0248,  0.8834, -0.0394],\n",
       "        [-0.5962,  1.0270, -0.2093]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:00.503905Z",
     "iopub.status.busy": "2023-02-25T07:07:00.503206Z",
     "iopub.status.idle": "2023-02-25T07:07:10.069409Z",
     "shell.execute_reply": "2023-02-25T07:07:10.068326Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "119 ns ± 1.61 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:10.073507Z",
     "iopub.status.busy": "2023-02-25T07:07:10.072982Z",
     "iopub.status.idle": "2023-02-25T07:07:10.081427Z",
     "shell.execute_reply": "2023-02-25T07:07:10.080691Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7b90a58b20>\n",
       "├── 'a' --> tensor([[-0.0183, -0.0512, -0.9959],\n",
       "│                   [ 1.0154,  0.1472,  0.1302]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7b90acc070>\n",
       "    └── 'c' --> tensor([[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:10.085182Z",
     "iopub.status.busy": "2023-02-25T07:07:10.084434Z",
     "iopub.status.idle": "2023-02-25T07:07:17.314839Z",
     "shell.execute_reply": "2023-02-25T07:07:17.313763Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89.5 ns ± 0.406 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:17.319154Z",
     "iopub.status.busy": "2023-02-25T07:07:17.318615Z",
     "iopub.status.idle": "2023-02-25T07:07:17.739295Z",
     "shell.execute_reply": "2023-02-25T07:07:17.738437Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:17.743150Z",
     "iopub.status.busy": "2023-02-25T07:07:17.742534Z",
     "iopub.status.idle": "2023-02-25T07:07:17.749151Z",
     "shell.execute_reply": "2023-02-25T07:07:17.748332Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:17.752580Z",
     "iopub.status.busy": "2023-02-25T07:07:17.752063Z",
     "iopub.status.idle": "2023-02-25T07:07:17.757502Z",
     "shell.execute_reply": "2023-02-25T07:07:17.756752Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0248,  0.8834, -0.0394],\n",
       "        [-0.5962,  1.0270, -0.2093]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:17.760502Z",
     "iopub.status.busy": "2023-02-25T07:07:17.759918Z",
     "iopub.status.idle": "2023-02-25T07:07:23.620642Z",
     "shell.execute_reply": "2023-02-25T07:07:23.619425Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.2 ns ± 0.827 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:23.624381Z",
     "iopub.status.busy": "2023-02-25T07:07:23.623947Z",
     "iopub.status.idle": "2023-02-25T07:07:23.632711Z",
     "shell.execute_reply": "2023-02-25T07:07:23.632023Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.4145,  1.0706, -1.1680],\n",
       "               [ 1.5909,  0.9473,  0.1946]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:23.636406Z",
     "iopub.status.busy": "2023-02-25T07:07:23.635637Z",
     "iopub.status.idle": "2023-02-25T07:07:28.371423Z",
     "shell.execute_reply": "2023-02-25T07:07:28.370099Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "583 ns ± 4.51 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:28.375769Z",
     "iopub.status.busy": "2023-02-25T07:07:28.375082Z",
     "iopub.status.idle": "2023-02-25T07:07:36.675458Z",
     "shell.execute_reply": "2023-02-25T07:07:36.674482Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.02 µs ± 14.5 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:36.679174Z",
     "iopub.status.busy": "2023-02-25T07:07:36.678582Z",
     "iopub.status.idle": "2023-02-25T07:07:45.985950Z",
     "shell.execute_reply": "2023-02-25T07:07:45.984753Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.5 µs ± 58.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:45.989720Z",
     "iopub.status.busy": "2023-02-25T07:07:45.989051Z",
     "iopub.status.idle": "2023-02-25T07:07:45.993880Z",
     "shell.execute_reply": "2023-02-25T07:07:45.993097Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:45.997356Z",
     "iopub.status.busy": "2023-02-25T07:07:45.996947Z",
     "iopub.status.idle": "2023-02-25T07:07:59.412793Z",
     "shell.execute_reply": "2023-02-25T07:07:59.411852Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "165 µs ± 4.59 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:07:59.416776Z",
     "iopub.status.busy": "2023-02-25T07:07:59.416047Z",
     "iopub.status.idle": "2023-02-25T07:08:12.622188Z",
     "shell.execute_reply": "2023-02-25T07:08:12.621460Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163 µs ± 844 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:12.625687Z",
     "iopub.status.busy": "2023-02-25T07:08:12.625136Z",
     "iopub.status.idle": "2023-02-25T07:08:12.629127Z",
     "shell.execute_reply": "2023-02-25T07:08:12.628482Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:12.632286Z",
     "iopub.status.busy": "2023-02-25T07:08:12.631518Z",
     "iopub.status.idle": "2023-02-25T07:08:12.639706Z",
     "shell.execute_reply": "2023-02-25T07:08:12.639069Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7ae5715fa0>\n",
       "├── 'a' --> tensor([[[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]],\n",
       "│           \n",
       "│                   [[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]],\n",
       "│           \n",
       "│                   [[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]],\n",
       "│           \n",
       "│                   [[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]],\n",
       "│           \n",
       "│                   [[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]],\n",
       "│           \n",
       "│                   [[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]],\n",
       "│           \n",
       "│                   [[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]],\n",
       "│           \n",
       "│                   [[ 0.0248,  0.8834, -0.0394],\n",
       "│                    [-0.5962,  1.0270, -0.2093]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7ae5715f70>\n",
       "    └── 'c' --> tensor([[[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "                \n",
       "                        [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "                \n",
       "                        [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "                \n",
       "                        [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "                \n",
       "                        [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "                \n",
       "                        [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "                \n",
       "                        [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "                \n",
       "                        [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                         [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                         [ 2.7973, -3.3881, -0.4252,  0.1569]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:12.642717Z",
     "iopub.status.busy": "2023-02-25T07:08:12.641964Z",
     "iopub.status.idle": "2023-02-25T07:08:15.551995Z",
     "shell.execute_reply": "2023-02-25T07:08:15.550729Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35.8 µs ± 330 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:15.556088Z",
     "iopub.status.busy": "2023-02-25T07:08:15.555434Z",
     "iopub.status.idle": "2023-02-25T07:08:15.565454Z",
     "shell.execute_reply": "2023-02-25T07:08:15.564653Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7aec408610>\n",
       "├── 'a' --> tensor([[ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093],\n",
       "│                   [ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093],\n",
       "│                   [ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093],\n",
       "│                   [ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093],\n",
       "│                   [ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093],\n",
       "│                   [ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093],\n",
       "│                   [ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093],\n",
       "│                   [ 0.0248,  0.8834, -0.0394],\n",
       "│                   [-0.5962,  1.0270, -0.2093]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7aec4086a0>\n",
       "    └── 'c' --> tensor([[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                        [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                        [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                        [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                        [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                        [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                        [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                        [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                        [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                        [ 2.7973, -3.3881, -0.4252,  0.1569]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:15.568617Z",
     "iopub.status.busy": "2023-02-25T07:08:15.568130Z",
     "iopub.status.idle": "2023-02-25T07:08:18.316579Z",
     "shell.execute_reply": "2023-02-25T07:08:18.315487Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.8 µs ± 349 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:18.320644Z",
     "iopub.status.busy": "2023-02-25T07:08:18.319953Z",
     "iopub.status.idle": "2023-02-25T07:08:23.553474Z",
     "shell.execute_reply": "2023-02-25T07:08:23.552323Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 µs ± 610 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:23.557200Z",
     "iopub.status.busy": "2023-02-25T07:08:23.556732Z",
     "iopub.status.idle": "2023-02-25T07:08:23.566334Z",
     "shell.execute_reply": "2023-02-25T07:08:23.565621Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "              \n",
       "                      [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "              \n",
       "                      [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "              \n",
       "                      [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "              \n",
       "                      [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "              \n",
       "                      [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "              \n",
       "                      [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]],\n",
       "              \n",
       "                      [[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                       [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                       [ 2.7973, -3.3881, -0.4252,  0.1569]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]],\n",
       "       \n",
       "               [[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]],\n",
       "       \n",
       "               [[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]],\n",
       "       \n",
       "               [[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]],\n",
       "       \n",
       "               [[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]],\n",
       "       \n",
       "               [[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]],\n",
       "       \n",
       "               [[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]],\n",
       "       \n",
       "               [[ 0.0248,  0.8834, -0.0394],\n",
       "                [-0.5962,  1.0270, -0.2093]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:23.569300Z",
     "iopub.status.busy": "2023-02-25T07:08:23.569035Z",
     "iopub.status.idle": "2023-02-25T07:08:30.722082Z",
     "shell.execute_reply": "2023-02-25T07:08:30.721120Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88.1 µs ± 564 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:30.726364Z",
     "iopub.status.busy": "2023-02-25T07:08:30.725686Z",
     "iopub.status.idle": "2023-02-25T07:08:30.734727Z",
     "shell.execute_reply": "2023-02-25T07:08:30.733852Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                      [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                      [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                      [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                      [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                      [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                      [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569],\n",
       "                      [-0.2169,  1.3452, -0.2097,  1.3260],\n",
       "                      [ 0.4261,  0.9121, -0.3480, -0.7286],\n",
       "                      [ 2.7973, -3.3881, -0.4252,  0.1569]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093],\n",
       "               [ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093],\n",
       "               [ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093],\n",
       "               [ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093],\n",
       "               [ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093],\n",
       "               [ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093],\n",
       "               [ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093],\n",
       "               [ 0.0248,  0.8834, -0.0394],\n",
       "               [-0.5962,  1.0270, -0.2093]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:30.738013Z",
     "iopub.status.busy": "2023-02-25T07:08:30.737582Z",
     "iopub.status.idle": "2023-02-25T07:08:43.979422Z",
     "shell.execute_reply": "2023-02-25T07:08:43.978494Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163 µs ± 496 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-25T07:08:43.983155Z",
     "iopub.status.busy": "2023-02-25T07:08:43.982476Z",
     "iopub.status.idle": "2023-02-25T07:08:47.201234Z",
     "shell.execute_reply": "2023-02-25T07:08:47.200243Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "394 µs ± 8.16 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
