{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:30.537449Z",
     "iopub.status.busy": "2023-03-06T17:12:30.536973Z",
     "iopub.status.idle": "2023-03-06T17:12:31.462707Z",
     "shell.execute_reply": "2023-03-06T17:12:31.462019Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:31.465990Z",
     "iopub.status.busy": "2023-03-06T17:12:31.465495Z",
     "iopub.status.idle": "2023-03-06T17:12:31.499626Z",
     "shell.execute_reply": "2023-03-06T17:12:31.498945Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:31.503018Z",
     "iopub.status.busy": "2023-03-06T17:12:31.502526Z",
     "iopub.status.idle": "2023-03-06T17:12:31.510806Z",
     "shell.execute_reply": "2023-03-06T17:12:31.510299Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa170446d90>\n",
       "├── 'a' --> tensor([[-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa172509940>\n",
       "    └── 'c' --> tensor([[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:31.513493Z",
     "iopub.status.busy": "2023-03-06T17:12:31.512899Z",
     "iopub.status.idle": "2023-03-06T17:12:31.517254Z",
     "shell.execute_reply": "2023-03-06T17:12:31.516746Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1059,  0.7505, -0.8255],\n",
       "        [ 1.7596, -0.1591, -1.0545]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:31.519800Z",
     "iopub.status.busy": "2023-03-06T17:12:31.519214Z",
     "iopub.status.idle": "2023-03-06T17:12:36.326779Z",
     "shell.execute_reply": "2023-03-06T17:12:36.326017Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.1 ns ± 0.0161 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:36.330138Z",
     "iopub.status.busy": "2023-03-06T17:12:36.329500Z",
     "iopub.status.idle": "2023-03-06T17:12:36.335550Z",
     "shell.execute_reply": "2023-03-06T17:12:36.334916Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa170446d90>\n",
       "├── 'a' --> tensor([[ 0.8346,  0.9044, -0.3395],\n",
       "│                   [-0.7150,  0.3680, -0.7611]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa172509940>\n",
       "    └── 'c' --> tensor([[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:36.338054Z",
     "iopub.status.busy": "2023-03-06T17:12:36.337704Z",
     "iopub.status.idle": "2023-03-06T17:12:41.533607Z",
     "shell.execute_reply": "2023-03-06T17:12:41.532839Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64 ns ± 0.0242 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:41.536978Z",
     "iopub.status.busy": "2023-03-06T17:12:41.536450Z",
     "iopub.status.idle": "2023-03-06T17:12:41.873811Z",
     "shell.execute_reply": "2023-03-06T17:12:41.873144Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:41.876692Z",
     "iopub.status.busy": "2023-03-06T17:12:41.876381Z",
     "iopub.status.idle": "2023-03-06T17:12:41.882694Z",
     "shell.execute_reply": "2023-03-06T17:12:41.882105Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:41.885645Z",
     "iopub.status.busy": "2023-03-06T17:12:41.885148Z",
     "iopub.status.idle": "2023-03-06T17:12:41.890980Z",
     "shell.execute_reply": "2023-03-06T17:12:41.890402Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1059,  0.7505, -0.8255],\n",
       "        [ 1.7596, -0.1591, -1.0545]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:41.893800Z",
     "iopub.status.busy": "2023-03-06T17:12:41.893338Z",
     "iopub.status.idle": "2023-03-06T17:12:46.620278Z",
     "shell.execute_reply": "2023-03-06T17:12:46.619618Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.1 ns ± 0.0264 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:46.623647Z",
     "iopub.status.busy": "2023-03-06T17:12:46.623014Z",
     "iopub.status.idle": "2023-03-06T17:12:46.629586Z",
     "shell.execute_reply": "2023-03-06T17:12:46.628986Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9929, -0.7218, -1.0869],\n",
       "               [-0.0770, -0.4405, -0.2078]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:46.632018Z",
     "iopub.status.busy": "2023-03-06T17:12:46.631679Z",
     "iopub.status.idle": "2023-03-06T17:12:50.591986Z",
     "shell.execute_reply": "2023-03-06T17:12:50.591211Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "488 ns ± 1.36 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:50.595232Z",
     "iopub.status.busy": "2023-03-06T17:12:50.594849Z",
     "iopub.status.idle": "2023-03-06T17:12:57.792224Z",
     "shell.execute_reply": "2023-03-06T17:12:57.791498Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "885 ns ± 3.83 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:12:57.795419Z",
     "iopub.status.busy": "2023-03-06T17:12:57.795042Z",
     "iopub.status.idle": "2023-03-06T17:13:06.925713Z",
     "shell.execute_reply": "2023-03-06T17:13:06.924918Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 48.7 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:06.928865Z",
     "iopub.status.busy": "2023-03-06T17:13:06.928289Z",
     "iopub.status.idle": "2023-03-06T17:13:06.932399Z",
     "shell.execute_reply": "2023-03-06T17:13:06.931792Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:06.935052Z",
     "iopub.status.busy": "2023-03-06T17:13:06.934688Z",
     "iopub.status.idle": "2023-03-06T17:13:17.900051Z",
     "shell.execute_reply": "2023-03-06T17:13:17.899354Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135 µs ± 197 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:17.903411Z",
     "iopub.status.busy": "2023-03-06T17:13:17.903151Z",
     "iopub.status.idle": "2023-03-06T17:13:29.226934Z",
     "shell.execute_reply": "2023-03-06T17:13:29.226319Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 372 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:29.231040Z",
     "iopub.status.busy": "2023-03-06T17:13:29.230037Z",
     "iopub.status.idle": "2023-03-06T17:13:29.234446Z",
     "shell.execute_reply": "2023-03-06T17:13:29.233912Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:29.238145Z",
     "iopub.status.busy": "2023-03-06T17:13:29.237193Z",
     "iopub.status.idle": "2023-03-06T17:13:29.246291Z",
     "shell.execute_reply": "2023-03-06T17:13:29.245763Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa0c3088d90>\n",
       "├── 'a' --> tensor([[[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]],\n",
       "│           \n",
       "│                   [[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]],\n",
       "│           \n",
       "│                   [[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]],\n",
       "│           \n",
       "│                   [[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]],\n",
       "│           \n",
       "│                   [[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]],\n",
       "│           \n",
       "│                   [[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]],\n",
       "│           \n",
       "│                   [[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]],\n",
       "│           \n",
       "│                   [[-0.1059,  0.7505, -0.8255],\n",
       "│                    [ 1.7596, -0.1591, -1.0545]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa0c3109cd0>\n",
       "    └── 'c' --> tensor([[[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "                \n",
       "                        [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "                \n",
       "                        [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "                \n",
       "                        [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "                \n",
       "                        [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "                \n",
       "                        [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "                \n",
       "                        [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "                \n",
       "                        [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                         [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                         [ 2.1407, -0.7129, -0.3623, -1.2651]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:29.249984Z",
     "iopub.status.busy": "2023-03-06T17:13:29.249025Z",
     "iopub.status.idle": "2023-03-06T17:13:31.886166Z",
     "shell.execute_reply": "2023-03-06T17:13:31.885431Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 35.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:31.889435Z",
     "iopub.status.busy": "2023-03-06T17:13:31.888919Z",
     "iopub.status.idle": "2023-03-06T17:13:31.896895Z",
     "shell.execute_reply": "2023-03-06T17:13:31.896300Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fa1448a7e80>\n",
       "├── 'a' --> tensor([[-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545],\n",
       "│                   [-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545],\n",
       "│                   [-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545],\n",
       "│                   [-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545],\n",
       "│                   [-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545],\n",
       "│                   [-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545],\n",
       "│                   [-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545],\n",
       "│                   [-0.1059,  0.7505, -0.8255],\n",
       "│                   [ 1.7596, -0.1591, -1.0545]])\n",
       "└── 'x' --> <FastTreeValue 0x7fa0c30b9f40>\n",
       "    └── 'c' --> tensor([[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                        [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                        [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                        [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                        [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                        [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                        [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                        [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                        [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                        [ 2.1407, -0.7129, -0.3623, -1.2651]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:31.899802Z",
     "iopub.status.busy": "2023-03-06T17:13:31.899248Z",
     "iopub.status.idle": "2023-03-06T17:13:34.396786Z",
     "shell.execute_reply": "2023-03-06T17:13:34.396128Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.7 µs ± 124 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:34.399714Z",
     "iopub.status.busy": "2023-03-06T17:13:34.399154Z",
     "iopub.status.idle": "2023-03-06T17:13:39.275030Z",
     "shell.execute_reply": "2023-03-06T17:13:39.274376Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 µs ± 39.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:39.278404Z",
     "iopub.status.busy": "2023-03-06T17:13:39.277854Z",
     "iopub.status.idle": "2023-03-06T17:13:39.285796Z",
     "shell.execute_reply": "2023-03-06T17:13:39.285188Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]],\n",
       "       \n",
       "               [[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]],\n",
       "       \n",
       "               [[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]],\n",
       "       \n",
       "               [[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]],\n",
       "       \n",
       "               [[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]],\n",
       "       \n",
       "               [[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]],\n",
       "       \n",
       "               [[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]],\n",
       "       \n",
       "               [[-0.1059,  0.7505, -0.8255],\n",
       "                [ 1.7596, -0.1591, -1.0545]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "              \n",
       "                      [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "              \n",
       "                      [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "              \n",
       "                      [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "              \n",
       "                      [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "              \n",
       "                      [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "              \n",
       "                      [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]],\n",
       "              \n",
       "                      [[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                       [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                       [ 2.1407, -0.7129, -0.3623, -1.2651]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:39.288456Z",
     "iopub.status.busy": "2023-03-06T17:13:39.288119Z",
     "iopub.status.idle": "2023-03-06T17:13:45.708446Z",
     "shell.execute_reply": "2023-03-06T17:13:45.707696Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.1 µs ± 180 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:45.711687Z",
     "iopub.status.busy": "2023-03-06T17:13:45.711303Z",
     "iopub.status.idle": "2023-03-06T17:13:45.719345Z",
     "shell.execute_reply": "2023-03-06T17:13:45.718726Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545],\n",
       "               [-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545],\n",
       "               [-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545],\n",
       "               [-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545],\n",
       "               [-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545],\n",
       "               [-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545],\n",
       "               [-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545],\n",
       "               [-0.1059,  0.7505, -0.8255],\n",
       "               [ 1.7596, -0.1591, -1.0545]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                      [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                      [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                      [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                      [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                      [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                      [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651],\n",
       "                      [ 0.4189,  0.0130, -0.5672, -1.8358],\n",
       "                      [ 0.0634, -0.5013,  0.0962, -0.0224],\n",
       "                      [ 2.1407, -0.7129, -0.3623, -1.2651]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:45.722206Z",
     "iopub.status.busy": "2023-03-06T17:13:45.721604Z",
     "iopub.status.idle": "2023-03-06T17:13:57.421736Z",
     "shell.execute_reply": "2023-03-06T17:13:57.420987Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 546 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T17:13:57.424831Z",
     "iopub.status.busy": "2023-03-06T17:13:57.424269Z",
     "iopub.status.idle": "2023-03-06T17:13:59.959382Z",
     "shell.execute_reply": "2023-03-06T17:13:59.958760Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "312 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
