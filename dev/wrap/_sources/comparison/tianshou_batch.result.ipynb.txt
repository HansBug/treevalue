{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:34:56.803594Z",
     "iopub.status.busy": "2023-03-05T08:34:56.803356Z",
     "iopub.status.idle": "2023-03-05T08:34:57.823384Z",
     "shell.execute_reply": "2023-03-05T08:34:57.822577Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:34:57.827487Z",
     "iopub.status.busy": "2023-03-05T08:34:57.826990Z",
     "iopub.status.idle": "2023-03-05T08:34:57.864188Z",
     "shell.execute_reply": "2023-03-05T08:34:57.863377Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:34:57.868374Z",
     "iopub.status.busy": "2023-03-05T08:34:57.867659Z",
     "iopub.status.idle": "2023-03-05T08:34:57.879448Z",
     "shell.execute_reply": "2023-03-05T08:34:57.878772Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f22111721f0>\n",
       "├── 'a' --> tensor([[ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089]])\n",
       "└── 'x' --> <FastTreeValue 0x7f22111c9af0>\n",
       "    └── 'c' --> tensor([[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:34:57.882908Z",
     "iopub.status.busy": "2023-03-05T08:34:57.882299Z",
     "iopub.status.idle": "2023-03-05T08:34:57.889227Z",
     "shell.execute_reply": "2023-03-05T08:34:57.888614Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.0839, -0.7698, -0.9704],\n",
       "        [ 0.4433, -0.7054,  1.1089]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:34:57.892385Z",
     "iopub.status.busy": "2023-03-05T08:34:57.891852Z",
     "iopub.status.idle": "2023-03-05T08:35:03.025707Z",
     "shell.execute_reply": "2023-03-05T08:35:03.024846Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.2 ns ± 0.0375 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:03.029239Z",
     "iopub.status.busy": "2023-03-05T08:35:03.028661Z",
     "iopub.status.idle": "2023-03-05T08:35:03.035884Z",
     "shell.execute_reply": "2023-03-05T08:35:03.035240Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f22111721f0>\n",
       "├── 'a' --> tensor([[ 0.2369, -0.9854,  0.8495],\n",
       "│                   [-0.0787, -0.6408,  0.1677]])\n",
       "└── 'x' --> <FastTreeValue 0x7f22111c9af0>\n",
       "    └── 'c' --> tensor([[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:03.039046Z",
     "iopub.status.busy": "2023-03-05T08:35:03.038464Z",
     "iopub.status.idle": "2023-03-05T08:35:08.889134Z",
     "shell.execute_reply": "2023-03-05T08:35:08.888251Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72 ns ± 0.031 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:08.892843Z",
     "iopub.status.busy": "2023-03-05T08:35:08.892427Z",
     "iopub.status.idle": "2023-03-05T08:35:09.274921Z",
     "shell.execute_reply": "2023-03-05T08:35:09.274153Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:09.278607Z",
     "iopub.status.busy": "2023-03-05T08:35:09.278076Z",
     "iopub.status.idle": "2023-03-05T08:35:09.284347Z",
     "shell.execute_reply": "2023-03-05T08:35:09.283659Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:09.287094Z",
     "iopub.status.busy": "2023-03-05T08:35:09.286660Z",
     "iopub.status.idle": "2023-03-05T08:35:09.293038Z",
     "shell.execute_reply": "2023-03-05T08:35:09.292428Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.0839, -0.7698, -0.9704],\n",
       "        [ 0.4433, -0.7054,  1.1089]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:09.295954Z",
     "iopub.status.busy": "2023-03-05T08:35:09.295575Z",
     "iopub.status.idle": "2023-03-05T08:35:14.105181Z",
     "shell.execute_reply": "2023-03-05T08:35:14.104358Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59 ns ± 0.0307 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:14.108486Z",
     "iopub.status.busy": "2023-03-05T08:35:14.107985Z",
     "iopub.status.idle": "2023-03-05T08:35:14.114935Z",
     "shell.execute_reply": "2023-03-05T08:35:14.114303Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 2.0479, -1.3631,  0.5041],\n",
       "               [-0.0440,  0.7918,  1.2361]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:14.117850Z",
     "iopub.status.busy": "2023-03-05T08:35:14.117486Z",
     "iopub.status.idle": "2023-03-05T08:35:18.143247Z",
     "shell.execute_reply": "2023-03-05T08:35:18.142477Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "496 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:18.146693Z",
     "iopub.status.busy": "2023-03-05T08:35:18.146193Z",
     "iopub.status.idle": "2023-03-05T08:35:25.034127Z",
     "shell.execute_reply": "2023-03-05T08:35:25.033208Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "848 ns ± 0.268 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:25.037727Z",
     "iopub.status.busy": "2023-03-05T08:35:25.037289Z",
     "iopub.status.idle": "2023-03-05T08:35:33.859768Z",
     "shell.execute_reply": "2023-03-05T08:35:33.858935Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 18.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:33.863438Z",
     "iopub.status.busy": "2023-03-05T08:35:33.862647Z",
     "iopub.status.idle": "2023-03-05T08:35:33.866932Z",
     "shell.execute_reply": "2023-03-05T08:35:33.866247Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:33.870017Z",
     "iopub.status.busy": "2023-03-05T08:35:33.869409Z",
     "iopub.status.idle": "2023-03-05T08:35:45.417526Z",
     "shell.execute_reply": "2023-03-05T08:35:45.416800Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 687 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:45.421329Z",
     "iopub.status.busy": "2023-03-05T08:35:45.420749Z",
     "iopub.status.idle": "2023-03-05T08:35:57.002934Z",
     "shell.execute_reply": "2023-03-05T08:35:57.002306Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 661 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:57.006061Z",
     "iopub.status.busy": "2023-03-05T08:35:57.005538Z",
     "iopub.status.idle": "2023-03-05T08:35:57.009036Z",
     "shell.execute_reply": "2023-03-05T08:35:57.008488Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:57.011548Z",
     "iopub.status.busy": "2023-03-05T08:35:57.011115Z",
     "iopub.status.idle": "2023-03-05T08:35:57.018391Z",
     "shell.execute_reply": "2023-03-05T08:35:57.017852Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f21689fa280>\n",
       "├── 'a' --> tensor([[[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]],\n",
       "│           \n",
       "│                   [[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]],\n",
       "│           \n",
       "│                   [[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]],\n",
       "│           \n",
       "│                   [[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]],\n",
       "│           \n",
       "│                   [[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]],\n",
       "│           \n",
       "│                   [[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]],\n",
       "│           \n",
       "│                   [[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]],\n",
       "│           \n",
       "│                   [[ 1.0839, -0.7698, -0.9704],\n",
       "│                    [ 0.4433, -0.7054,  1.1089]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f21689fab20>\n",
       "    └── 'c' --> tensor([[[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "                \n",
       "                        [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "                \n",
       "                        [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "                \n",
       "                        [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "                \n",
       "                        [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "                \n",
       "                        [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "                \n",
       "                        [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "                \n",
       "                        [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                         [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                         [-0.1516, -0.4768, -0.9145,  0.4315]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:57.021125Z",
     "iopub.status.busy": "2023-03-05T08:35:57.020491Z",
     "iopub.status.idle": "2023-03-05T08:35:59.629242Z",
     "shell.execute_reply": "2023-03-05T08:35:59.628366Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.1 µs ± 31.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:59.633334Z",
     "iopub.status.busy": "2023-03-05T08:35:59.632796Z",
     "iopub.status.idle": "2023-03-05T08:35:59.641434Z",
     "shell.execute_reply": "2023-03-05T08:35:59.640710Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f2161d662b0>\n",
       "├── 'a' --> tensor([[ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089],\n",
       "│                   [ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089],\n",
       "│                   [ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089],\n",
       "│                   [ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089],\n",
       "│                   [ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089],\n",
       "│                   [ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089],\n",
       "│                   [ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089],\n",
       "│                   [ 1.0839, -0.7698, -0.9704],\n",
       "│                   [ 0.4433, -0.7054,  1.1089]])\n",
       "└── 'x' --> <FastTreeValue 0x7f21689e8d30>\n",
       "    └── 'c' --> tensor([[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                        [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                        [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                        [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                        [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                        [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                        [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                        [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                        [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                        [-0.1516, -0.4768, -0.9145,  0.4315]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:35:59.644560Z",
     "iopub.status.busy": "2023-03-05T08:35:59.643953Z",
     "iopub.status.idle": "2023-03-05T08:36:02.101664Z",
     "shell.execute_reply": "2023-03-05T08:36:02.100775Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.2 µs ± 89.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:36:02.105584Z",
     "iopub.status.busy": "2023-03-05T08:36:02.104971Z",
     "iopub.status.idle": "2023-03-05T08:36:06.805202Z",
     "shell.execute_reply": "2023-03-05T08:36:06.803858Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.8 µs ± 72.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:36:06.808661Z",
     "iopub.status.busy": "2023-03-05T08:36:06.808258Z",
     "iopub.status.idle": "2023-03-05T08:36:06.816758Z",
     "shell.execute_reply": "2023-03-05T08:36:06.816123Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "              \n",
       "                      [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "              \n",
       "                      [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "              \n",
       "                      [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "              \n",
       "                      [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "              \n",
       "                      [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "              \n",
       "                      [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]],\n",
       "              \n",
       "                      [[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                       [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                       [-0.1516, -0.4768, -0.9145,  0.4315]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]],\n",
       "       \n",
       "               [[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]],\n",
       "       \n",
       "               [[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]],\n",
       "       \n",
       "               [[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]],\n",
       "       \n",
       "               [[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]],\n",
       "       \n",
       "               [[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]],\n",
       "       \n",
       "               [[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]],\n",
       "       \n",
       "               [[ 1.0839, -0.7698, -0.9704],\n",
       "                [ 0.4433, -0.7054,  1.1089]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:36:06.819272Z",
     "iopub.status.busy": "2023-03-05T08:36:06.819040Z",
     "iopub.status.idle": "2023-03-05T08:36:13.243483Z",
     "shell.execute_reply": "2023-03-05T08:36:13.242591Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79 µs ± 278 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:36:13.246875Z",
     "iopub.status.busy": "2023-03-05T08:36:13.246467Z",
     "iopub.status.idle": "2023-03-05T08:36:13.254575Z",
     "shell.execute_reply": "2023-03-05T08:36:13.253952Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                      [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                      [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                      [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                      [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                      [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                      [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315],\n",
       "                      [-1.8767,  0.5016, -0.4694,  0.3864],\n",
       "                      [-0.7104, -0.9451,  0.5307,  0.4539],\n",
       "                      [-0.1516, -0.4768, -0.9145,  0.4315]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089],\n",
       "               [ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089],\n",
       "               [ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089],\n",
       "               [ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089],\n",
       "               [ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089],\n",
       "               [ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089],\n",
       "               [ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089],\n",
       "               [ 1.0839, -0.7698, -0.9704],\n",
       "               [ 0.4433, -0.7054,  1.1089]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:36:13.257473Z",
     "iopub.status.busy": "2023-03-05T08:36:13.256883Z",
     "iopub.status.idle": "2023-03-05T08:36:25.059749Z",
     "shell.execute_reply": "2023-03-05T08:36:25.058879Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 µs ± 1.16 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-05T08:36:25.063518Z",
     "iopub.status.busy": "2023-03-05T08:36:25.062850Z",
     "iopub.status.idle": "2023-03-05T08:36:27.665179Z",
     "shell.execute_reply": "2023-03-05T08:36:27.664424Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "320 µs ± 533 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
