{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:09.929584Z",
     "iopub.status.busy": "2023-03-06T11:18:09.929379Z",
     "iopub.status.idle": "2023-03-06T11:18:10.851683Z",
     "shell.execute_reply": "2023-03-06T11:18:10.851005Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:10.855118Z",
     "iopub.status.busy": "2023-03-06T11:18:10.854528Z",
     "iopub.status.idle": "2023-03-06T11:18:10.887836Z",
     "shell.execute_reply": "2023-03-06T11:18:10.887174Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:10.890771Z",
     "iopub.status.busy": "2023-03-06T11:18:10.890244Z",
     "iopub.status.idle": "2023-03-06T11:18:10.899603Z",
     "shell.execute_reply": "2023-03-06T11:18:10.898920Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8db7fc9850>\n",
       "├── 'a' --> tensor([[ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8db7fc9ca0>\n",
       "    └── 'c' --> tensor([[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:10.902414Z",
     "iopub.status.busy": "2023-03-06T11:18:10.901890Z",
     "iopub.status.idle": "2023-03-06T11:18:10.907225Z",
     "shell.execute_reply": "2023-03-06T11:18:10.906645Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8739, -1.0014,  0.3269],\n",
       "        [ 1.1600, -1.0678,  0.0530]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:10.910096Z",
     "iopub.status.busy": "2023-03-06T11:18:10.909624Z",
     "iopub.status.idle": "2023-03-06T11:18:16.159844Z",
     "shell.execute_reply": "2023-03-06T11:18:16.159124Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64 ns ± 0.0649 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:16.163033Z",
     "iopub.status.busy": "2023-03-06T11:18:16.162532Z",
     "iopub.status.idle": "2023-03-06T11:18:16.170376Z",
     "shell.execute_reply": "2023-03-06T11:18:16.169783Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8db7fc9850>\n",
       "├── 'a' --> tensor([[-0.4581, -1.1743,  0.2467],\n",
       "│                   [ 2.0726,  0.3882, -1.2540]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8db7fc9ca0>\n",
       "    └── 'c' --> tensor([[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:16.173234Z",
     "iopub.status.busy": "2023-03-06T11:18:16.172772Z",
     "iopub.status.idle": "2023-03-06T11:18:21.505742Z",
     "shell.execute_reply": "2023-03-06T11:18:21.505018Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.3 ns ± 0.0559 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:21.508747Z",
     "iopub.status.busy": "2023-03-06T11:18:21.508210Z",
     "iopub.status.idle": "2023-03-06T11:18:21.837526Z",
     "shell.execute_reply": "2023-03-06T11:18:21.836865Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:21.840963Z",
     "iopub.status.busy": "2023-03-06T11:18:21.840442Z",
     "iopub.status.idle": "2023-03-06T11:18:21.846593Z",
     "shell.execute_reply": "2023-03-06T11:18:21.846021Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:21.849301Z",
     "iopub.status.busy": "2023-03-06T11:18:21.848734Z",
     "iopub.status.idle": "2023-03-06T11:18:21.854043Z",
     "shell.execute_reply": "2023-03-06T11:18:21.853486Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8739, -1.0014,  0.3269],\n",
       "        [ 1.1600, -1.0678,  0.0530]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:21.856771Z",
     "iopub.status.busy": "2023-03-06T11:18:21.856156Z",
     "iopub.status.idle": "2023-03-06T11:18:26.351485Z",
     "shell.execute_reply": "2023-03-06T11:18:26.350791Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.4 ns ± 0.0189 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:26.354604Z",
     "iopub.status.busy": "2023-03-06T11:18:26.354104Z",
     "iopub.status.idle": "2023-03-06T11:18:26.361281Z",
     "shell.execute_reply": "2023-03-06T11:18:26.360709Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7400,  0.3281,  0.2407],\n",
       "               [-1.5717, -0.5963,  2.2515]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:26.364228Z",
     "iopub.status.busy": "2023-03-06T11:18:26.363759Z",
     "iopub.status.idle": "2023-03-06T11:18:30.233397Z",
     "shell.execute_reply": "2023-03-06T11:18:30.232658Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "476 ns ± 0.107 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:30.236486Z",
     "iopub.status.busy": "2023-03-06T11:18:30.235868Z",
     "iopub.status.idle": "2023-03-06T11:18:37.317613Z",
     "shell.execute_reply": "2023-03-06T11:18:37.316910Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "872 ns ± 1.62 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:37.320486Z",
     "iopub.status.busy": "2023-03-06T11:18:37.320137Z",
     "iopub.status.idle": "2023-03-06T11:18:46.720002Z",
     "shell.execute_reply": "2023-03-06T11:18:46.719296Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 28.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:46.722913Z",
     "iopub.status.busy": "2023-03-06T11:18:46.722576Z",
     "iopub.status.idle": "2023-03-06T11:18:46.727699Z",
     "shell.execute_reply": "2023-03-06T11:18:46.726566Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:46.730338Z",
     "iopub.status.busy": "2023-03-06T11:18:46.729820Z",
     "iopub.status.idle": "2023-03-06T11:18:57.663165Z",
     "shell.execute_reply": "2023-03-06T11:18:57.662610Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135 µs ± 203 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:18:57.666017Z",
     "iopub.status.busy": "2023-03-06T11:18:57.665631Z",
     "iopub.status.idle": "2023-03-06T11:19:09.021199Z",
     "shell.execute_reply": "2023-03-06T11:19:09.020641Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 934 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:09.024152Z",
     "iopub.status.busy": "2023-03-06T11:19:09.023737Z",
     "iopub.status.idle": "2023-03-06T11:19:09.026882Z",
     "shell.execute_reply": "2023-03-06T11:19:09.026360Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:09.029854Z",
     "iopub.status.busy": "2023-03-06T11:19:09.028861Z",
     "iopub.status.idle": "2023-03-06T11:19:09.036243Z",
     "shell.execute_reply": "2023-03-06T11:19:09.035735Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8d8c406d60>\n",
       "├── 'a' --> tensor([[[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]],\n",
       "│           \n",
       "│                   [[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]],\n",
       "│           \n",
       "│                   [[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]],\n",
       "│           \n",
       "│                   [[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]],\n",
       "│           \n",
       "│                   [[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]],\n",
       "│           \n",
       "│                   [[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]],\n",
       "│           \n",
       "│                   [[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]],\n",
       "│           \n",
       "│                   [[ 0.8739, -1.0014,  0.3269],\n",
       "│                    [ 1.1600, -1.0678,  0.0530]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8d8c3fc070>\n",
       "    └── 'c' --> tensor([[[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "                \n",
       "                        [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "                \n",
       "                        [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "                \n",
       "                        [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "                \n",
       "                        [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "                \n",
       "                        [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "                \n",
       "                        [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "                \n",
       "                        [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                         [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                         [-1.7274, -1.2973,  1.9807, -0.3196]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:09.038636Z",
     "iopub.status.busy": "2023-03-06T11:19:09.038200Z",
     "iopub.status.idle": "2023-03-06T11:19:11.605488Z",
     "shell.execute_reply": "2023-03-06T11:19:11.604779Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.6 µs ± 45.5 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:11.608261Z",
     "iopub.status.busy": "2023-03-06T11:19:11.607917Z",
     "iopub.status.idle": "2023-03-06T11:19:11.616099Z",
     "shell.execute_reply": "2023-03-06T11:19:11.615092Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8d8c406cd0>\n",
       "├── 'a' --> tensor([[ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530],\n",
       "│                   [ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530],\n",
       "│                   [ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530],\n",
       "│                   [ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530],\n",
       "│                   [ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530],\n",
       "│                   [ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530],\n",
       "│                   [ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530],\n",
       "│                   [ 0.8739, -1.0014,  0.3269],\n",
       "│                   [ 1.1600, -1.0678,  0.0530]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8d08b53190>\n",
       "    └── 'c' --> tensor([[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                        [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                        [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                        [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                        [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                        [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                        [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                        [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                        [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                        [-1.7274, -1.2973,  1.9807, -0.3196]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:11.618530Z",
     "iopub.status.busy": "2023-03-06T11:19:11.618204Z",
     "iopub.status.idle": "2023-03-06T11:19:14.024078Z",
     "shell.execute_reply": "2023-03-06T11:19:14.023359Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.6 µs ± 49.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:14.026926Z",
     "iopub.status.busy": "2023-03-06T11:19:14.026567Z",
     "iopub.status.idle": "2023-03-06T11:19:18.827835Z",
     "shell.execute_reply": "2023-03-06T11:19:18.827111Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59 µs ± 122 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:18.830889Z",
     "iopub.status.busy": "2023-03-06T11:19:18.830544Z",
     "iopub.status.idle": "2023-03-06T11:19:18.838482Z",
     "shell.execute_reply": "2023-03-06T11:19:18.837898Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "              \n",
       "                      [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "              \n",
       "                      [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "              \n",
       "                      [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "              \n",
       "                      [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "              \n",
       "                      [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "              \n",
       "                      [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]],\n",
       "              \n",
       "                      [[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                       [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                       [-1.7274, -1.2973,  1.9807, -0.3196]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]],\n",
       "       \n",
       "               [[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]],\n",
       "       \n",
       "               [[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]],\n",
       "       \n",
       "               [[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]],\n",
       "       \n",
       "               [[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]],\n",
       "       \n",
       "               [[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]],\n",
       "       \n",
       "               [[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]],\n",
       "       \n",
       "               [[ 0.8739, -1.0014,  0.3269],\n",
       "                [ 1.1600, -1.0678,  0.0530]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:18.841326Z",
     "iopub.status.busy": "2023-03-06T11:19:18.840860Z",
     "iopub.status.idle": "2023-03-06T11:19:25.170025Z",
     "shell.execute_reply": "2023-03-06T11:19:25.169349Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.9 µs ± 167 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:25.173243Z",
     "iopub.status.busy": "2023-03-06T11:19:25.172883Z",
     "iopub.status.idle": "2023-03-06T11:19:25.180519Z",
     "shell.execute_reply": "2023-03-06T11:19:25.179956Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                      [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                      [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                      [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                      [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                      [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                      [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196],\n",
       "                      [-1.3067,  0.6583,  0.5378,  1.3737],\n",
       "                      [-0.2839,  1.0994,  0.9962,  0.8344],\n",
       "                      [-1.7274, -1.2973,  1.9807, -0.3196]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530],\n",
       "               [ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530],\n",
       "               [ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530],\n",
       "               [ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530],\n",
       "               [ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530],\n",
       "               [ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530],\n",
       "               [ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530],\n",
       "               [ 0.8739, -1.0014,  0.3269],\n",
       "               [ 1.1600, -1.0678,  0.0530]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:25.183045Z",
     "iopub.status.busy": "2023-03-06T11:19:25.182732Z",
     "iopub.status.idle": "2023-03-06T11:19:36.878328Z",
     "shell.execute_reply": "2023-03-06T11:19:36.877578Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 170 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T11:19:36.880934Z",
     "iopub.status.busy": "2023-03-06T11:19:36.880707Z",
     "iopub.status.idle": "2023-03-06T11:19:39.343359Z",
     "shell.execute_reply": "2023-03-06T11:19:39.342785Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "302 µs ± 1.8 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
