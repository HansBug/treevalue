{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:32.310137Z",
     "iopub.status.busy": "2023-02-27T11:49:32.309367Z",
     "iopub.status.idle": "2023-02-27T11:49:33.521964Z",
     "shell.execute_reply": "2023-02-27T11:49:33.520727Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:33.527091Z",
     "iopub.status.busy": "2023-02-27T11:49:33.526271Z",
     "iopub.status.idle": "2023-02-27T11:49:33.569607Z",
     "shell.execute_reply": "2023-02-27T11:49:33.568597Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:33.574781Z",
     "iopub.status.busy": "2023-02-27T11:49:33.573404Z",
     "iopub.status.idle": "2023-02-27T11:49:33.586385Z",
     "shell.execute_reply": "2023-02-27T11:49:33.585615Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7f8c918af0>\n",
       "├── 'a' --> tensor([[-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7f8c98c9a0>\n",
       "    └── 'c' --> tensor([[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:33.590249Z",
     "iopub.status.busy": "2023-02-27T11:49:33.589597Z",
     "iopub.status.idle": "2023-02-27T11:49:33.596627Z",
     "shell.execute_reply": "2023-02-27T11:49:33.595938Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0215, -0.2369, -0.2965],\n",
       "        [-0.4776, -0.4529, -0.2229]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:33.599920Z",
     "iopub.status.busy": "2023-02-27T11:49:33.599490Z",
     "iopub.status.idle": "2023-02-27T11:49:39.619809Z",
     "shell.execute_reply": "2023-02-27T11:49:39.618650Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.1 ns ± 0.161 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:39.624335Z",
     "iopub.status.busy": "2023-02-27T11:49:39.623783Z",
     "iopub.status.idle": "2023-02-27T11:49:39.633536Z",
     "shell.execute_reply": "2023-02-27T11:49:39.632813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7f8c918af0>\n",
       "├── 'a' --> tensor([[ 0.6278,  0.5862, -0.1813],\n",
       "│                   [-1.1650,  0.6159, -1.5564]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7f8c98c9a0>\n",
       "    └── 'c' --> tensor([[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:39.637255Z",
     "iopub.status.busy": "2023-02-27T11:49:39.636616Z",
     "iopub.status.idle": "2023-02-27T11:49:46.557214Z",
     "shell.execute_reply": "2023-02-27T11:49:46.556262Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.2 ns ± 0.371 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:46.560931Z",
     "iopub.status.busy": "2023-02-27T11:49:46.560472Z",
     "iopub.status.idle": "2023-02-27T11:49:47.004330Z",
     "shell.execute_reply": "2023-02-27T11:49:47.003457Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:47.009129Z",
     "iopub.status.busy": "2023-02-27T11:49:47.008508Z",
     "iopub.status.idle": "2023-02-27T11:49:47.017386Z",
     "shell.execute_reply": "2023-02-27T11:49:47.016666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:47.021007Z",
     "iopub.status.busy": "2023-02-27T11:49:47.020357Z",
     "iopub.status.idle": "2023-02-27T11:49:47.027629Z",
     "shell.execute_reply": "2023-02-27T11:49:47.026819Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0215, -0.2369, -0.2965],\n",
       "        [-0.4776, -0.4529, -0.2229]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:47.031129Z",
     "iopub.status.busy": "2023-02-27T11:49:47.030520Z",
     "iopub.status.idle": "2023-02-27T11:49:52.687808Z",
     "shell.execute_reply": "2023-02-27T11:49:52.686575Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.5 ns ± 0.187 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:52.692512Z",
     "iopub.status.busy": "2023-02-27T11:49:52.691639Z",
     "iopub.status.idle": "2023-02-27T11:49:52.699746Z",
     "shell.execute_reply": "2023-02-27T11:49:52.699013Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.3104,  0.3326, -0.8663],\n",
       "               [ 1.0819, -0.4738,  0.2329]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:52.702703Z",
     "iopub.status.busy": "2023-02-27T11:49:52.702308Z",
     "iopub.status.idle": "2023-02-27T11:49:57.617013Z",
     "shell.execute_reply": "2023-02-27T11:49:57.615838Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "601 ns ± 2.57 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:49:57.622221Z",
     "iopub.status.busy": "2023-02-27T11:49:57.621207Z",
     "iopub.status.idle": "2023-02-27T11:50:05.861747Z",
     "shell.execute_reply": "2023-02-27T11:50:05.858705Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.01 µs ± 4.64 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:05.865606Z",
     "iopub.status.busy": "2023-02-27T11:50:05.864960Z",
     "iopub.status.idle": "2023-02-27T11:50:15.501962Z",
     "shell.execute_reply": "2023-02-27T11:50:15.501188Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.8 µs ± 87.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:15.505948Z",
     "iopub.status.busy": "2023-02-27T11:50:15.505172Z",
     "iopub.status.idle": "2023-02-27T11:50:15.508767Z",
     "shell.execute_reply": "2023-02-27T11:50:15.508133Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:15.511985Z",
     "iopub.status.busy": "2023-02-27T11:50:15.511562Z",
     "iopub.status.idle": "2023-02-27T11:50:29.083704Z",
     "shell.execute_reply": "2023-02-27T11:50:29.082788Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 690 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:29.087964Z",
     "iopub.status.busy": "2023-02-27T11:50:29.087302Z",
     "iopub.status.idle": "2023-02-27T11:50:42.608662Z",
     "shell.execute_reply": "2023-02-27T11:50:42.607912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "166 µs ± 981 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:42.612434Z",
     "iopub.status.busy": "2023-02-27T11:50:42.611867Z",
     "iopub.status.idle": "2023-02-27T11:50:42.617263Z",
     "shell.execute_reply": "2023-02-27T11:50:42.616492Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:42.620745Z",
     "iopub.status.busy": "2023-02-27T11:50:42.620198Z",
     "iopub.status.idle": "2023-02-27T11:50:42.629861Z",
     "shell.execute_reply": "2023-02-27T11:50:42.629140Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7ee2cd4c40>\n",
       "├── 'a' --> tensor([[[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]],\n",
       "│           \n",
       "│                   [[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]],\n",
       "│           \n",
       "│                   [[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]],\n",
       "│           \n",
       "│                   [[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]],\n",
       "│           \n",
       "│                   [[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]],\n",
       "│           \n",
       "│                   [[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]],\n",
       "│           \n",
       "│                   [[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]],\n",
       "│           \n",
       "│                   [[-1.0215, -0.2369, -0.2965],\n",
       "│                    [-0.4776, -0.4529, -0.2229]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7ee92ad850>\n",
       "    └── 'c' --> tensor([[[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "                \n",
       "                        [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "                \n",
       "                        [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "                \n",
       "                        [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "                \n",
       "                        [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "                \n",
       "                        [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "                \n",
       "                        [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "                \n",
       "                        [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                         [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                         [-0.4535,  0.5005,  0.0339,  0.2225]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:42.633415Z",
     "iopub.status.busy": "2023-02-27T11:50:42.632791Z",
     "iopub.status.idle": "2023-02-27T11:50:45.635725Z",
     "shell.execute_reply": "2023-02-27T11:50:45.634755Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.9 µs ± 285 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:45.639488Z",
     "iopub.status.busy": "2023-02-27T11:50:45.639033Z",
     "iopub.status.idle": "2023-02-27T11:50:45.648241Z",
     "shell.execute_reply": "2023-02-27T11:50:45.647407Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f7ee2d26070>\n",
       "├── 'a' --> tensor([[-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229],\n",
       "│                   [-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229],\n",
       "│                   [-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229],\n",
       "│                   [-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229],\n",
       "│                   [-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229],\n",
       "│                   [-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229],\n",
       "│                   [-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229],\n",
       "│                   [-1.0215, -0.2369, -0.2965],\n",
       "│                   [-0.4776, -0.4529, -0.2229]])\n",
       "└── 'x' --> <FastTreeValue 0x7f7ee26a43a0>\n",
       "    └── 'c' --> tensor([[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                        [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                        [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                        [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                        [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                        [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                        [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                        [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                        [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                        [-0.4535,  0.5005,  0.0339,  0.2225]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:45.651467Z",
     "iopub.status.busy": "2023-02-27T11:50:45.651069Z",
     "iopub.status.idle": "2023-02-27T11:50:48.597707Z",
     "shell.execute_reply": "2023-02-27T11:50:48.596417Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 µs ± 1.04 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:48.602321Z",
     "iopub.status.busy": "2023-02-27T11:50:48.601608Z",
     "iopub.status.idle": "2023-02-27T11:50:53.855370Z",
     "shell.execute_reply": "2023-02-27T11:50:53.854075Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.6 µs ± 306 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:53.859489Z",
     "iopub.status.busy": "2023-02-27T11:50:53.859039Z",
     "iopub.status.idle": "2023-02-27T11:50:53.868413Z",
     "shell.execute_reply": "2023-02-27T11:50:53.867707Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]],\n",
       "       \n",
       "               [[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]],\n",
       "       \n",
       "               [[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]],\n",
       "       \n",
       "               [[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]],\n",
       "       \n",
       "               [[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]],\n",
       "       \n",
       "               [[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]],\n",
       "       \n",
       "               [[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]],\n",
       "       \n",
       "               [[-1.0215, -0.2369, -0.2965],\n",
       "                [-0.4776, -0.4529, -0.2229]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "              \n",
       "                      [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "              \n",
       "                      [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "              \n",
       "                      [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "              \n",
       "                      [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "              \n",
       "                      [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "              \n",
       "                      [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]],\n",
       "              \n",
       "                      [[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                       [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                       [-0.4535,  0.5005,  0.0339,  0.2225]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:50:53.871482Z",
     "iopub.status.busy": "2023-02-27T11:50:53.871072Z",
     "iopub.status.idle": "2023-02-27T11:51:01.317490Z",
     "shell.execute_reply": "2023-02-27T11:51:01.316425Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.8 µs ± 597 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:51:01.321646Z",
     "iopub.status.busy": "2023-02-27T11:51:01.320960Z",
     "iopub.status.idle": "2023-02-27T11:51:01.329903Z",
     "shell.execute_reply": "2023-02-27T11:51:01.329191Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229],\n",
       "               [-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229],\n",
       "               [-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229],\n",
       "               [-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229],\n",
       "               [-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229],\n",
       "               [-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229],\n",
       "               [-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229],\n",
       "               [-1.0215, -0.2369, -0.2965],\n",
       "               [-0.4776, -0.4529, -0.2229]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                      [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                      [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                      [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                      [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                      [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                      [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225],\n",
       "                      [ 1.1927, -0.9925, -0.0217,  1.4570],\n",
       "                      [ 0.3784,  1.2944, -0.0908,  0.0272],\n",
       "                      [-0.4535,  0.5005,  0.0339,  0.2225]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:51:01.333230Z",
     "iopub.status.busy": "2023-02-27T11:51:01.332604Z",
     "iopub.status.idle": "2023-02-27T11:51:14.853617Z",
     "shell.execute_reply": "2023-02-27T11:51:14.852572Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "166 µs ± 817 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:51:14.858446Z",
     "iopub.status.busy": "2023-02-27T11:51:14.857680Z",
     "iopub.status.idle": "2023-02-27T11:51:17.928779Z",
     "shell.execute_reply": "2023-02-27T11:51:17.928087Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "377 µs ± 7.46 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
