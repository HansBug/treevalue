{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:34.610316Z",
     "iopub.status.busy": "2023-02-27T11:39:34.609934Z",
     "iopub.status.idle": "2023-02-27T11:39:35.504316Z",
     "shell.execute_reply": "2023-02-27T11:39:35.503332Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:35.507642Z",
     "iopub.status.busy": "2023-02-27T11:39:35.507081Z",
     "iopub.status.idle": "2023-02-27T11:39:35.540283Z",
     "shell.execute_reply": "2023-02-27T11:39:35.539327Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:35.543170Z",
     "iopub.status.busy": "2023-02-27T11:39:35.542828Z",
     "iopub.status.idle": "2023-02-27T11:39:35.552245Z",
     "shell.execute_reply": "2023-02-27T11:39:35.551333Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f26f8e18940>\n",
       "├── 'a' --> tensor([[-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877]])\n",
       "└── 'x' --> <FastTreeValue 0x7f26f8e187c0>\n",
       "    └── 'c' --> tensor([[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:35.554801Z",
     "iopub.status.busy": "2023-02-27T11:39:35.554336Z",
     "iopub.status.idle": "2023-02-27T11:39:35.560328Z",
     "shell.execute_reply": "2023-02-27T11:39:35.559365Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.4819, -0.3718, -1.5180],\n",
       "        [-0.6864,  1.8226, -0.1877]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:35.562959Z",
     "iopub.status.busy": "2023-02-27T11:39:35.562635Z",
     "iopub.status.idle": "2023-02-27T11:39:40.427566Z",
     "shell.execute_reply": "2023-02-27T11:39:40.426884Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.8 ns ± 0.0417 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:40.430601Z",
     "iopub.status.busy": "2023-02-27T11:39:40.430165Z",
     "iopub.status.idle": "2023-02-27T11:39:40.437282Z",
     "shell.execute_reply": "2023-02-27T11:39:40.436172Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f26f8e18940>\n",
       "├── 'a' --> tensor([[-0.9452,  1.3132,  0.3606],\n",
       "│                   [-0.2106,  0.0654,  0.3388]])\n",
       "└── 'x' --> <FastTreeValue 0x7f26f8e187c0>\n",
       "    └── 'c' --> tensor([[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:40.439926Z",
     "iopub.status.busy": "2023-02-27T11:39:40.439613Z",
     "iopub.status.idle": "2023-02-27T11:39:45.677753Z",
     "shell.execute_reply": "2023-02-27T11:39:45.677101Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.7 ns ± 0.0599 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:45.681142Z",
     "iopub.status.busy": "2023-02-27T11:39:45.680494Z",
     "iopub.status.idle": "2023-02-27T11:39:46.001306Z",
     "shell.execute_reply": "2023-02-27T11:39:46.000637Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:46.004595Z",
     "iopub.status.busy": "2023-02-27T11:39:46.003971Z",
     "iopub.status.idle": "2023-02-27T11:39:46.009298Z",
     "shell.execute_reply": "2023-02-27T11:39:46.008678Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:46.011763Z",
     "iopub.status.busy": "2023-02-27T11:39:46.011428Z",
     "iopub.status.idle": "2023-02-27T11:39:46.016082Z",
     "shell.execute_reply": "2023-02-27T11:39:46.015485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-2.4819, -0.3718, -1.5180],\n",
       "        [-0.6864,  1.8226, -0.1877]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:46.018490Z",
     "iopub.status.busy": "2023-02-27T11:39:46.018147Z",
     "iopub.status.idle": "2023-02-27T11:39:50.506912Z",
     "shell.execute_reply": "2023-02-27T11:39:50.506176Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.2 ns ± 0.0629 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:50.510175Z",
     "iopub.status.busy": "2023-02-27T11:39:50.509577Z",
     "iopub.status.idle": "2023-02-27T11:39:50.515337Z",
     "shell.execute_reply": "2023-02-27T11:39:50.514701Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[0.9807, 0.7805, 1.9210],\n",
       "               [2.7913, 0.1050, 0.8507]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:50.517813Z",
     "iopub.status.busy": "2023-02-27T11:39:50.517466Z",
     "iopub.status.idle": "2023-02-27T11:39:54.463507Z",
     "shell.execute_reply": "2023-02-27T11:39:54.462663Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "486 ns ± 0.148 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:39:54.466949Z",
     "iopub.status.busy": "2023-02-27T11:39:54.466312Z",
     "iopub.status.idle": "2023-02-27T11:40:01.576089Z",
     "shell.execute_reply": "2023-02-27T11:40:01.575085Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "876 ns ± 0.83 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:01.579359Z",
     "iopub.status.busy": "2023-02-27T11:40:01.578787Z",
     "iopub.status.idle": "2023-02-27T11:40:11.032800Z",
     "shell.execute_reply": "2023-02-27T11:40:11.032082Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 60.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:11.035714Z",
     "iopub.status.busy": "2023-02-27T11:40:11.035193Z",
     "iopub.status.idle": "2023-02-27T11:40:11.039679Z",
     "shell.execute_reply": "2023-02-27T11:40:11.038639Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:11.042154Z",
     "iopub.status.busy": "2023-02-27T11:40:11.041813Z",
     "iopub.status.idle": "2023-02-27T11:40:22.220329Z",
     "shell.execute_reply": "2023-02-27T11:40:22.219749Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 285 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:22.223828Z",
     "iopub.status.busy": "2023-02-27T11:40:22.222567Z",
     "iopub.status.idle": "2023-02-27T11:40:33.605806Z",
     "shell.execute_reply": "2023-02-27T11:40:33.605211Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140 µs ± 401 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:33.609958Z",
     "iopub.status.busy": "2023-02-27T11:40:33.608885Z",
     "iopub.status.idle": "2023-02-27T11:40:33.613324Z",
     "shell.execute_reply": "2023-02-27T11:40:33.612756Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:33.616930Z",
     "iopub.status.busy": "2023-02-27T11:40:33.615850Z",
     "iopub.status.idle": "2023-02-27T11:40:33.624550Z",
     "shell.execute_reply": "2023-02-27T11:40:33.623671Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f26d02cc2b0>\n",
       "├── 'a' --> tensor([[[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]],\n",
       "│           \n",
       "│                   [[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]],\n",
       "│           \n",
       "│                   [[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]],\n",
       "│           \n",
       "│                   [[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]],\n",
       "│           \n",
       "│                   [[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]],\n",
       "│           \n",
       "│                   [[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]],\n",
       "│           \n",
       "│                   [[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]],\n",
       "│           \n",
       "│                   [[-2.4819, -0.3718, -1.5180],\n",
       "│                    [-0.6864,  1.8226, -0.1877]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f264cb25430>\n",
       "    └── 'c' --> tensor([[[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "                \n",
       "                        [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "                \n",
       "                        [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "                \n",
       "                        [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "                \n",
       "                        [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "                \n",
       "                        [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "                \n",
       "                        [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "                \n",
       "                        [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                         [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                         [ 0.0374,  0.6491,  0.1825,  0.7387]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:33.627154Z",
     "iopub.status.busy": "2023-02-27T11:40:33.626823Z",
     "iopub.status.idle": "2023-02-27T11:40:36.278615Z",
     "shell.execute_reply": "2023-02-27T11:40:36.277962Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.6 µs ± 30.3 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:36.281897Z",
     "iopub.status.busy": "2023-02-27T11:40:36.281295Z",
     "iopub.status.idle": "2023-02-27T11:40:36.289075Z",
     "shell.execute_reply": "2023-02-27T11:40:36.288487Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f26f8e8efd0>\n",
       "├── 'a' --> tensor([[-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877],\n",
       "│                   [-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877],\n",
       "│                   [-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877],\n",
       "│                   [-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877],\n",
       "│                   [-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877],\n",
       "│                   [-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877],\n",
       "│                   [-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877],\n",
       "│                   [-2.4819, -0.3718, -1.5180],\n",
       "│                   [-0.6864,  1.8226, -0.1877]])\n",
       "└── 'x' --> <FastTreeValue 0x7f26e4145bb0>\n",
       "    └── 'c' --> tensor([[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                        [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                        [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                        [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                        [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                        [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                        [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                        [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                        [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                        [ 0.0374,  0.6491,  0.1825,  0.7387]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:36.291565Z",
     "iopub.status.busy": "2023-02-27T11:40:36.291246Z",
     "iopub.status.idle": "2023-02-27T11:40:38.780749Z",
     "shell.execute_reply": "2023-02-27T11:40:38.779722Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.6 µs ± 57.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:38.783497Z",
     "iopub.status.busy": "2023-02-27T11:40:38.783129Z",
     "iopub.status.idle": "2023-02-27T11:40:43.558192Z",
     "shell.execute_reply": "2023-02-27T11:40:43.557536Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.7 µs ± 171 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:43.561338Z",
     "iopub.status.busy": "2023-02-27T11:40:43.560969Z",
     "iopub.status.idle": "2023-02-27T11:40:43.568906Z",
     "shell.execute_reply": "2023-02-27T11:40:43.568321Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]],\n",
       "       \n",
       "               [[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]],\n",
       "       \n",
       "               [[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]],\n",
       "       \n",
       "               [[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]],\n",
       "       \n",
       "               [[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]],\n",
       "       \n",
       "               [[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]],\n",
       "       \n",
       "               [[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]],\n",
       "       \n",
       "               [[-2.4819, -0.3718, -1.5180],\n",
       "                [-0.6864,  1.8226, -0.1877]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "              \n",
       "                      [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "              \n",
       "                      [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "              \n",
       "                      [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "              \n",
       "                      [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "              \n",
       "                      [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "              \n",
       "                      [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]],\n",
       "              \n",
       "                      [[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                       [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                       [ 0.0374,  0.6491,  0.1825,  0.7387]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:43.571408Z",
     "iopub.status.busy": "2023-02-27T11:40:43.571063Z",
     "iopub.status.idle": "2023-02-27T11:40:49.893044Z",
     "shell.execute_reply": "2023-02-27T11:40:49.892041Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.8 µs ± 218 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:49.895766Z",
     "iopub.status.busy": "2023-02-27T11:40:49.895401Z",
     "iopub.status.idle": "2023-02-27T11:40:49.902209Z",
     "shell.execute_reply": "2023-02-27T11:40:49.901554Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877],\n",
       "               [-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877],\n",
       "               [-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877],\n",
       "               [-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877],\n",
       "               [-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877],\n",
       "               [-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877],\n",
       "               [-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877],\n",
       "               [-2.4819, -0.3718, -1.5180],\n",
       "               [-0.6864,  1.8226, -0.1877]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                      [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                      [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                      [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                      [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                      [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                      [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387],\n",
       "                      [-0.9140,  1.4386,  0.7110,  0.1396],\n",
       "                      [-0.1151,  0.3606,  0.7567,  0.9947],\n",
       "                      [ 0.0374,  0.6491,  0.1825,  0.7387]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:40:49.904852Z",
     "iopub.status.busy": "2023-02-27T11:40:49.904515Z",
     "iopub.status.idle": "2023-02-27T11:41:01.491718Z",
     "shell.execute_reply": "2023-02-27T11:41:01.490983Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 210 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:41:01.494553Z",
     "iopub.status.busy": "2023-02-27T11:41:01.494179Z",
     "iopub.status.idle": "2023-02-27T11:41:03.948977Z",
     "shell.execute_reply": "2023-02-27T11:41:03.948390Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "301 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
