{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:28.342881Z",
     "iopub.status.busy": "2023-10-20T06:40:28.342592Z",
     "iopub.status.idle": "2023-10-20T06:40:30.227431Z",
     "shell.execute_reply": "2023-10-20T06:40:30.226240Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:30.232892Z",
     "iopub.status.busy": "2023-10-20T06:40:30.232193Z",
     "iopub.status.idle": "2023-10-20T06:40:30.270969Z",
     "shell.execute_reply": "2023-10-20T06:40:30.269983Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:30.275478Z",
     "iopub.status.busy": "2023-10-20T06:40:30.274903Z",
     "iopub.status.idle": "2023-10-20T06:40:30.286530Z",
     "shell.execute_reply": "2023-10-20T06:40:30.285720Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd3b0c30d30>\n",
       "├── 'a' --> tensor([[-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd3b0c30eb0>\n",
       "    └── 'c' --> tensor([[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:30.290285Z",
     "iopub.status.busy": "2023-10-20T06:40:30.289615Z",
     "iopub.status.idle": "2023-10-20T06:40:30.297599Z",
     "shell.execute_reply": "2023-10-20T06:40:30.296849Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1512,  0.8631, -0.9579],\n",
       "        [ 0.2685,  1.4242,  1.8872]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:30.301245Z",
     "iopub.status.busy": "2023-10-20T06:40:30.300706Z",
     "iopub.status.idle": "2023-10-20T06:40:37.640161Z",
     "shell.execute_reply": "2023-10-20T06:40:37.639092Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.4 ns ± 0.167 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:37.644408Z",
     "iopub.status.busy": "2023-10-20T06:40:37.643852Z",
     "iopub.status.idle": "2023-10-20T06:40:37.652523Z",
     "shell.execute_reply": "2023-10-20T06:40:37.651782Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd3b0c30d30>\n",
       "├── 'a' --> tensor([[-0.9738, -2.0829,  0.4015],\n",
       "│                   [ 0.9364, -0.0883, -0.4703]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd3b0c30eb0>\n",
       "    └── 'c' --> tensor([[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:37.656516Z",
     "iopub.status.busy": "2023-10-20T06:40:37.655978Z",
     "iopub.status.idle": "2023-10-20T06:40:45.939721Z",
     "shell.execute_reply": "2023-10-20T06:40:45.938385Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "102 ns ± 0.147 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:45.944084Z",
     "iopub.status.busy": "2023-10-20T06:40:45.943582Z",
     "iopub.status.idle": "2023-10-20T06:40:46.426631Z",
     "shell.execute_reply": "2023-10-20T06:40:46.425528Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:46.431148Z",
     "iopub.status.busy": "2023-10-20T06:40:46.430460Z",
     "iopub.status.idle": "2023-10-20T06:40:46.437551Z",
     "shell.execute_reply": "2023-10-20T06:40:46.436691Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:46.441555Z",
     "iopub.status.busy": "2023-10-20T06:40:46.440853Z",
     "iopub.status.idle": "2023-10-20T06:40:46.446707Z",
     "shell.execute_reply": "2023-10-20T06:40:46.445916Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1512,  0.8631, -0.9579],\n",
       "        [ 0.2685,  1.4242,  1.8872]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:46.450682Z",
     "iopub.status.busy": "2023-10-20T06:40:46.450019Z",
     "iopub.status.idle": "2023-10-20T06:40:53.390152Z",
     "shell.execute_reply": "2023-10-20T06:40:53.389267Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.5 ns ± 0.0902 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:53.394239Z",
     "iopub.status.busy": "2023-10-20T06:40:53.393546Z",
     "iopub.status.idle": "2023-10-20T06:40:53.402222Z",
     "shell.execute_reply": "2023-10-20T06:40:53.401485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6766,  1.4386,  0.3591],\n",
       "               [-0.0959,  0.6404,  0.1968]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:53.406206Z",
     "iopub.status.busy": "2023-10-20T06:40:53.405459Z",
     "iopub.status.idle": "2023-10-20T06:40:58.858477Z",
     "shell.execute_reply": "2023-10-20T06:40:58.857163Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "671 ns ± 2.19 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:40:58.863722Z",
     "iopub.status.busy": "2023-10-20T06:40:58.862837Z",
     "iopub.status.idle": "2023-10-20T06:41:07.785690Z",
     "shell.execute_reply": "2023-10-20T06:41:07.784709Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1 µs ± 2.23 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:07.790115Z",
     "iopub.status.busy": "2023-10-20T06:41:07.789365Z",
     "iopub.status.idle": "2023-10-20T06:41:18.038673Z",
     "shell.execute_reply": "2023-10-20T06:41:18.037642Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.5 µs ± 34.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:18.043534Z",
     "iopub.status.busy": "2023-10-20T06:41:18.042675Z",
     "iopub.status.idle": "2023-10-20T06:41:18.047726Z",
     "shell.execute_reply": "2023-10-20T06:41:18.046935Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:18.051699Z",
     "iopub.status.busy": "2023-10-20T06:41:18.051013Z",
     "iopub.status.idle": "2023-10-20T06:41:19.569475Z",
     "shell.execute_reply": "2023-10-20T06:41:19.568419Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "180 µs ± 16.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:19.573601Z",
     "iopub.status.busy": "2023-10-20T06:41:19.573044Z",
     "iopub.status.idle": "2023-10-20T06:41:33.910876Z",
     "shell.execute_reply": "2023-10-20T06:41:33.910109Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "177 µs ± 1.36 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:33.914838Z",
     "iopub.status.busy": "2023-10-20T06:41:33.914251Z",
     "iopub.status.idle": "2023-10-20T06:41:33.918473Z",
     "shell.execute_reply": "2023-10-20T06:41:33.917796Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:33.922041Z",
     "iopub.status.busy": "2023-10-20T06:41:33.921345Z",
     "iopub.status.idle": "2023-10-20T06:41:33.931677Z",
     "shell.execute_reply": "2023-10-20T06:41:33.930879Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd2d0ca47c0>\n",
       "├── 'a' --> tensor([[[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]],\n",
       "│           \n",
       "│                   [[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]],\n",
       "│           \n",
       "│                   [[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]],\n",
       "│           \n",
       "│                   [[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]],\n",
       "│           \n",
       "│                   [[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]],\n",
       "│           \n",
       "│                   [[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]],\n",
       "│           \n",
       "│                   [[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]],\n",
       "│           \n",
       "│                   [[-0.1512,  0.8631, -0.9579],\n",
       "│                    [ 0.2685,  1.4242,  1.8872]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd2d909a6a0>\n",
       "    └── 'c' --> tensor([[[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "                \n",
       "                        [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "                \n",
       "                        [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "                \n",
       "                        [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "                \n",
       "                        [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "                \n",
       "                        [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "                \n",
       "                        [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "                \n",
       "                        [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                         [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                         [-0.7285,  0.8987, -2.3792, -0.1314]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:33.935243Z",
     "iopub.status.busy": "2023-10-20T06:41:33.934715Z",
     "iopub.status.idle": "2023-10-20T06:41:37.247554Z",
     "shell.execute_reply": "2023-10-20T06:41:37.246276Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40.7 µs ± 226 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:37.251836Z",
     "iopub.status.busy": "2023-10-20T06:41:37.251278Z",
     "iopub.status.idle": "2023-10-20T06:41:37.261367Z",
     "shell.execute_reply": "2023-10-20T06:41:37.260633Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fd2d0ca4040>\n",
       "├── 'a' --> tensor([[-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872],\n",
       "│                   [-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872],\n",
       "│                   [-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872],\n",
       "│                   [-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872],\n",
       "│                   [-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872],\n",
       "│                   [-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872],\n",
       "│                   [-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872],\n",
       "│                   [-0.1512,  0.8631, -0.9579],\n",
       "│                   [ 0.2685,  1.4242,  1.8872]])\n",
       "└── 'x' --> <FastTreeValue 0x7fd2cfc44f40>\n",
       "    └── 'c' --> tensor([[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                        [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                        [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                        [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                        [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                        [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                        [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                        [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                        [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                        [-0.7285,  0.8987, -2.3792, -0.1314]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:37.265010Z",
     "iopub.status.busy": "2023-10-20T06:41:37.264465Z",
     "iopub.status.idle": "2023-10-20T06:41:40.424262Z",
     "shell.execute_reply": "2023-10-20T06:41:40.423092Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38.8 µs ± 580 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:40.428951Z",
     "iopub.status.busy": "2023-10-20T06:41:40.428151Z",
     "iopub.status.idle": "2023-10-20T06:41:46.547492Z",
     "shell.execute_reply": "2023-10-20T06:41:46.546506Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.3 µs ± 155 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:46.553234Z",
     "iopub.status.busy": "2023-10-20T06:41:46.552542Z",
     "iopub.status.idle": "2023-10-20T06:41:46.564546Z",
     "shell.execute_reply": "2023-10-20T06:41:46.563315Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]],\n",
       "       \n",
       "               [[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]],\n",
       "       \n",
       "               [[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]],\n",
       "       \n",
       "               [[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]],\n",
       "       \n",
       "               [[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]],\n",
       "       \n",
       "               [[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]],\n",
       "       \n",
       "               [[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]],\n",
       "       \n",
       "               [[-0.1512,  0.8631, -0.9579],\n",
       "                [ 0.2685,  1.4242,  1.8872]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "              \n",
       "                      [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "              \n",
       "                      [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "              \n",
       "                      [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "              \n",
       "                      [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "              \n",
       "                      [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "              \n",
       "                      [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]],\n",
       "              \n",
       "                      [[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                       [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                       [-0.7285,  0.8987, -2.3792, -0.1314]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:46.568364Z",
     "iopub.status.busy": "2023-10-20T06:41:46.567827Z",
     "iopub.status.idle": "2023-10-20T06:41:54.634406Z",
     "shell.execute_reply": "2023-10-20T06:41:54.633518Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "99.3 µs ± 398 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:54.638631Z",
     "iopub.status.busy": "2023-10-20T06:41:54.638047Z",
     "iopub.status.idle": "2023-10-20T06:41:54.649931Z",
     "shell.execute_reply": "2023-10-20T06:41:54.648802Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872],\n",
       "               [-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872],\n",
       "               [-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872],\n",
       "               [-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872],\n",
       "               [-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872],\n",
       "               [-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872],\n",
       "               [-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872],\n",
       "               [-0.1512,  0.8631, -0.9579],\n",
       "               [ 0.2685,  1.4242,  1.8872]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                      [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                      [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                      [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                      [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                      [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                      [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314],\n",
       "                      [-0.7394, -0.9615,  0.0496, -0.3056],\n",
       "                      [-1.0702,  0.5972,  0.2575, -0.2341],\n",
       "                      [-0.7285,  0.8987, -2.3792, -0.1314]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:41:54.653535Z",
     "iopub.status.busy": "2023-10-20T06:41:54.652997Z",
     "iopub.status.idle": "2023-10-20T06:42:09.314540Z",
     "shell.execute_reply": "2023-10-20T06:42:09.313618Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "181 µs ± 636 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-20T06:42:09.318570Z",
     "iopub.status.busy": "2023-10-20T06:42:09.318005Z",
     "iopub.status.idle": "2023-10-20T06:42:12.964516Z",
     "shell.execute_reply": "2023-10-20T06:42:12.963762Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "447 µs ± 5.45 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
