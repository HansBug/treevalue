{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:41:56.052561Z",
     "iopub.status.busy": "2023-05-26T09:41:56.052290Z",
     "iopub.status.idle": "2023-05-26T09:41:57.423871Z",
     "shell.execute_reply": "2023-05-26T09:41:57.423056Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:41:57.428064Z",
     "iopub.status.busy": "2023-05-26T09:41:57.427565Z",
     "iopub.status.idle": "2023-05-26T09:41:57.458369Z",
     "shell.execute_reply": "2023-05-26T09:41:57.457715Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:41:57.462078Z",
     "iopub.status.busy": "2023-05-26T09:41:57.461626Z",
     "iopub.status.idle": "2023-05-26T09:41:57.473351Z",
     "shell.execute_reply": "2023-05-26T09:41:57.472690Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8638cf1f70>\n",
       "├── 'a' --> tensor([[ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8638cf1ee0>\n",
       "    └── 'c' --> tensor([[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:41:57.476850Z",
     "iopub.status.busy": "2023-05-26T09:41:57.476334Z",
     "iopub.status.idle": "2023-05-26T09:41:57.483134Z",
     "shell.execute_reply": "2023-05-26T09:41:57.482537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.2689, -0.0169,  1.5876],\n",
       "        [-0.3900,  0.5284,  0.4369]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:41:57.486181Z",
     "iopub.status.busy": "2023-05-26T09:41:57.485834Z",
     "iopub.status.idle": "2023-05-26T09:42:02.668397Z",
     "shell.execute_reply": "2023-05-26T09:42:02.667109Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 ns ± 0.0401 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:02.671894Z",
     "iopub.status.busy": "2023-05-26T09:42:02.671629Z",
     "iopub.status.idle": "2023-05-26T09:42:02.678674Z",
     "shell.execute_reply": "2023-05-26T09:42:02.677948Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8638cf1f70>\n",
       "├── 'a' --> tensor([[-0.1975, -0.0848,  1.0023],\n",
       "│                   [-1.3156, -0.6354,  0.1769]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8638cf1ee0>\n",
       "    └── 'c' --> tensor([[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:02.681764Z",
     "iopub.status.busy": "2023-05-26T09:42:02.681299Z",
     "iopub.status.idle": "2023-05-26T09:42:08.413393Z",
     "shell.execute_reply": "2023-05-26T09:42:08.412673Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.6 ns ± 0.0397 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:08.417312Z",
     "iopub.status.busy": "2023-05-26T09:42:08.416598Z",
     "iopub.status.idle": "2023-05-26T09:42:08.786569Z",
     "shell.execute_reply": "2023-05-26T09:42:08.785809Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:08.790528Z",
     "iopub.status.busy": "2023-05-26T09:42:08.790021Z",
     "iopub.status.idle": "2023-05-26T09:42:08.795918Z",
     "shell.execute_reply": "2023-05-26T09:42:08.795245Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:08.798920Z",
     "iopub.status.busy": "2023-05-26T09:42:08.798482Z",
     "iopub.status.idle": "2023-05-26T09:42:08.803400Z",
     "shell.execute_reply": "2023-05-26T09:42:08.802733Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.2689, -0.0169,  1.5876],\n",
       "        [-0.3900,  0.5284,  0.4369]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:08.806615Z",
     "iopub.status.busy": "2023-05-26T09:42:08.806253Z",
     "iopub.status.idle": "2023-05-26T09:42:14.085630Z",
     "shell.execute_reply": "2023-05-26T09:42:14.084882Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65.4 ns ± 0.0353 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:14.089163Z",
     "iopub.status.busy": "2023-05-26T09:42:14.088665Z",
     "iopub.status.idle": "2023-05-26T09:42:14.095011Z",
     "shell.execute_reply": "2023-05-26T09:42:14.094295Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.4843,  0.7201, -1.0297],\n",
       "               [ 0.7754, -0.5462,  0.1462]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:14.098423Z",
     "iopub.status.busy": "2023-05-26T09:42:14.098043Z",
     "iopub.status.idle": "2023-05-26T09:42:18.082743Z",
     "shell.execute_reply": "2023-05-26T09:42:18.082007Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "490 ns ± 0.0854 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:18.086295Z",
     "iopub.status.busy": "2023-05-26T09:42:18.085770Z",
     "iopub.status.idle": "2023-05-26T09:42:25.441271Z",
     "shell.execute_reply": "2023-05-26T09:42:25.440532Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "902 ns ± 2.4 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:25.444888Z",
     "iopub.status.busy": "2023-05-26T09:42:25.444389Z",
     "iopub.status.idle": "2023-05-26T09:42:34.143889Z",
     "shell.execute_reply": "2023-05-26T09:42:34.143145Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.7 µs ± 32 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:34.147814Z",
     "iopub.status.busy": "2023-05-26T09:42:34.147190Z",
     "iopub.status.idle": "2023-05-26T09:42:34.150637Z",
     "shell.execute_reply": "2023-05-26T09:42:34.149949Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:34.156460Z",
     "iopub.status.busy": "2023-05-26T09:42:34.155844Z",
     "iopub.status.idle": "2023-05-26T09:42:45.890653Z",
     "shell.execute_reply": "2023-05-26T09:42:45.890028Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 262 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:45.893989Z",
     "iopub.status.busy": "2023-05-26T09:42:45.893589Z",
     "iopub.status.idle": "2023-05-26T09:42:57.554398Z",
     "shell.execute_reply": "2023-05-26T09:42:57.553763Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 µs ± 300 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:57.557796Z",
     "iopub.status.busy": "2023-05-26T09:42:57.557390Z",
     "iopub.status.idle": "2023-05-26T09:42:57.560625Z",
     "shell.execute_reply": "2023-05-26T09:42:57.560074Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:57.563442Z",
     "iopub.status.busy": "2023-05-26T09:42:57.563069Z",
     "iopub.status.idle": "2023-05-26T09:42:57.570393Z",
     "shell.execute_reply": "2023-05-26T09:42:57.569698Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f8638cf14c0>\n",
       "├── 'a' --> tensor([[[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]],\n",
       "│           \n",
       "│                   [[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]],\n",
       "│           \n",
       "│                   [[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]],\n",
       "│           \n",
       "│                   [[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]],\n",
       "│           \n",
       "│                   [[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]],\n",
       "│           \n",
       "│                   [[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]],\n",
       "│           \n",
       "│                   [[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]],\n",
       "│           \n",
       "│                   [[ 1.2689, -0.0169,  1.5876],\n",
       "│                    [-0.3900,  0.5284,  0.4369]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f8638cf1eb0>\n",
       "    └── 'c' --> tensor([[[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "                \n",
       "                        [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "                \n",
       "                        [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "                \n",
       "                        [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "                \n",
       "                        [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "                \n",
       "                        [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "                \n",
       "                        [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "                \n",
       "                        [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                         [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                         [-0.4448,  1.8329,  0.5763, -0.7583]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:42:57.573544Z",
     "iopub.status.busy": "2023-05-26T09:42:57.573019Z",
     "iopub.status.idle": "2023-05-26T09:43:00.319457Z",
     "shell.execute_reply": "2023-05-26T09:43:00.318757Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.8 µs ± 102 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:00.322901Z",
     "iopub.status.busy": "2023-05-26T09:43:00.322269Z",
     "iopub.status.idle": "2023-05-26T09:43:00.330021Z",
     "shell.execute_reply": "2023-05-26T09:43:00.329324Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f863cd7a280>\n",
       "├── 'a' --> tensor([[ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369],\n",
       "│                   [ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369],\n",
       "│                   [ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369],\n",
       "│                   [ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369],\n",
       "│                   [ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369],\n",
       "│                   [ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369],\n",
       "│                   [ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369],\n",
       "│                   [ 1.2689, -0.0169,  1.5876],\n",
       "│                   [-0.3900,  0.5284,  0.4369]])\n",
       "└── 'x' --> <FastTreeValue 0x7f85752c6f70>\n",
       "    └── 'c' --> tensor([[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                        [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                        [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                        [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                        [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                        [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                        [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                        [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                        [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                        [-0.4448,  1.8329,  0.5763, -0.7583]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:00.333065Z",
     "iopub.status.busy": "2023-05-26T09:43:00.332693Z",
     "iopub.status.idle": "2023-05-26T09:43:02.951612Z",
     "shell.execute_reply": "2023-05-26T09:43:02.950809Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.3 µs ± 702 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:02.955534Z",
     "iopub.status.busy": "2023-05-26T09:43:02.955083Z",
     "iopub.status.idle": "2023-05-26T09:43:08.453452Z",
     "shell.execute_reply": "2023-05-26T09:43:08.452629Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67.6 µs ± 107 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:08.457404Z",
     "iopub.status.busy": "2023-05-26T09:43:08.456893Z",
     "iopub.status.idle": "2023-05-26T09:43:08.465353Z",
     "shell.execute_reply": "2023-05-26T09:43:08.464534Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]],\n",
       "       \n",
       "               [[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]],\n",
       "       \n",
       "               [[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]],\n",
       "       \n",
       "               [[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]],\n",
       "       \n",
       "               [[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]],\n",
       "       \n",
       "               [[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]],\n",
       "       \n",
       "               [[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]],\n",
       "       \n",
       "               [[ 1.2689, -0.0169,  1.5876],\n",
       "                [-0.3900,  0.5284,  0.4369]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "              \n",
       "                      [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "              \n",
       "                      [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "              \n",
       "                      [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "              \n",
       "                      [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "              \n",
       "                      [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "              \n",
       "                      [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]],\n",
       "              \n",
       "                      [[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                       [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                       [-0.4448,  1.8329,  0.5763, -0.7583]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:08.468931Z",
     "iopub.status.busy": "2023-05-26T09:43:08.468290Z",
     "iopub.status.idle": "2023-05-26T09:43:15.033306Z",
     "shell.execute_reply": "2023-05-26T09:43:15.032525Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.9 µs ± 747 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:15.037461Z",
     "iopub.status.busy": "2023-05-26T09:43:15.036981Z",
     "iopub.status.idle": "2023-05-26T09:43:15.048893Z",
     "shell.execute_reply": "2023-05-26T09:43:15.047830Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369],\n",
       "               [ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369],\n",
       "               [ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369],\n",
       "               [ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369],\n",
       "               [ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369],\n",
       "               [ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369],\n",
       "               [ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369],\n",
       "               [ 1.2689, -0.0169,  1.5876],\n",
       "               [-0.3900,  0.5284,  0.4369]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                      [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                      [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                      [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                      [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                      [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                      [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583],\n",
       "                      [ 0.4005,  0.9805,  0.6165,  1.5842],\n",
       "                      [-2.4962,  0.0117, -0.0704,  0.1576],\n",
       "                      [-0.4448,  1.8329,  0.5763, -0.7583]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:15.053989Z",
     "iopub.status.busy": "2023-05-26T09:43:15.052811Z",
     "iopub.status.idle": "2023-05-26T09:43:27.222804Z",
     "shell.execute_reply": "2023-05-26T09:43:27.222060Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150 µs ± 699 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-26T09:43:27.226438Z",
     "iopub.status.busy": "2023-05-26T09:43:27.225767Z",
     "iopub.status.idle": "2023-05-26T09:43:30.042299Z",
     "shell.execute_reply": "2023-05-26T09:43:30.041693Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "345 µs ± 554 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
