{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:22.036540Z",
     "iopub.status.busy": "2023-10-22T16:07:22.036076Z",
     "iopub.status.idle": "2023-10-22T16:07:23.653506Z",
     "shell.execute_reply": "2023-10-22T16:07:23.652661Z"
    }
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:23.658046Z",
     "iopub.status.busy": "2023-10-22T16:07:23.657380Z",
     "iopub.status.idle": "2023-10-22T16:07:23.689324Z",
     "shell.execute_reply": "2023-10-22T16:07:23.688596Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:23.692986Z",
     "iopub.status.busy": "2023-10-22T16:07:23.692343Z",
     "iopub.status.idle": "2023-10-22T16:07:23.704437Z",
     "shell.execute_reply": "2023-10-22T16:07:23.703647Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f82b809bb80>\n",
       "├── 'a' --> tensor([[-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251]])\n",
       "└── 'x' --> <FastTreeValue 0x7f82b809b130>\n",
       "    └── 'c' --> tensor([[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:23.707739Z",
     "iopub.status.busy": "2023-10-22T16:07:23.707347Z",
     "iopub.status.idle": "2023-10-22T16:07:23.712269Z",
     "shell.execute_reply": "2023-10-22T16:07:23.711587Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9157, -0.4304, -0.4365],\n",
       "        [ 0.8855, -0.1090,  1.4251]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:23.715591Z",
     "iopub.status.busy": "2023-10-22T16:07:23.715033Z",
     "iopub.status.idle": "2023-10-22T16:07:29.856424Z",
     "shell.execute_reply": "2023-10-22T16:07:29.855464Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.6 ns ± 0.125 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:29.860270Z",
     "iopub.status.busy": "2023-10-22T16:07:29.859754Z",
     "iopub.status.idle": "2023-10-22T16:07:29.868862Z",
     "shell.execute_reply": "2023-10-22T16:07:29.868225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f82b809bb80>\n",
       "├── 'a' --> tensor([[-1.3383,  0.2597,  0.1126],\n",
       "│                   [ 0.4911, -0.2911,  0.9919]])\n",
       "└── 'x' --> <FastTreeValue 0x7f82b809b130>\n",
       "    └── 'c' --> tensor([[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:29.872456Z",
     "iopub.status.busy": "2023-10-22T16:07:29.871874Z",
     "iopub.status.idle": "2023-10-22T16:07:36.401340Z",
     "shell.execute_reply": "2023-10-22T16:07:36.400386Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80.4 ns ± 0.104 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:36.405273Z",
     "iopub.status.busy": "2023-10-22T16:07:36.404612Z",
     "iopub.status.idle": "2023-10-22T16:07:36.844145Z",
     "shell.execute_reply": "2023-10-22T16:07:36.843332Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:36.848937Z",
     "iopub.status.busy": "2023-10-22T16:07:36.848164Z",
     "iopub.status.idle": "2023-10-22T16:07:36.856835Z",
     "shell.execute_reply": "2023-10-22T16:07:36.856200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:36.860072Z",
     "iopub.status.busy": "2023-10-22T16:07:36.859484Z",
     "iopub.status.idle": "2023-10-22T16:07:36.866356Z",
     "shell.execute_reply": "2023-10-22T16:07:36.865659Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.9157, -0.4304, -0.4365],\n",
       "        [ 0.8855, -0.1090,  1.4251]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:36.869719Z",
     "iopub.status.busy": "2023-10-22T16:07:36.869136Z",
     "iopub.status.idle": "2023-10-22T16:07:42.254339Z",
     "shell.execute_reply": "2023-10-22T16:07:42.253493Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.3 ns ± 0.131 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:42.258464Z",
     "iopub.status.busy": "2023-10-22T16:07:42.257808Z",
     "iopub.status.idle": "2023-10-22T16:07:42.265734Z",
     "shell.execute_reply": "2023-10-22T16:07:42.265110Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6917, -0.1541, -0.5986],\n",
       "               [ 0.3519,  2.2647,  2.1587]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:42.268904Z",
     "iopub.status.busy": "2023-10-22T16:07:42.268431Z",
     "iopub.status.idle": "2023-10-22T16:07:46.664637Z",
     "shell.execute_reply": "2023-10-22T16:07:46.663710Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "541 ns ± 3.69 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:46.669568Z",
     "iopub.status.busy": "2023-10-22T16:07:46.667997Z",
     "iopub.status.idle": "2023-10-22T16:07:54.321348Z",
     "shell.execute_reply": "2023-10-22T16:07:54.320395Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "942 ns ± 0.895 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:07:54.325391Z",
     "iopub.status.busy": "2023-10-22T16:07:54.324746Z",
     "iopub.status.idle": "2023-10-22T16:08:03.402344Z",
     "shell.execute_reply": "2023-10-22T16:08:03.401405Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 21.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:03.406159Z",
     "iopub.status.busy": "2023-10-22T16:08:03.405554Z",
     "iopub.status.idle": "2023-10-22T16:08:03.408880Z",
     "shell.execute_reply": "2023-10-22T16:08:03.408277Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:03.412531Z",
     "iopub.status.busy": "2023-10-22T16:08:03.411984Z",
     "iopub.status.idle": "2023-10-22T16:08:15.563364Z",
     "shell.execute_reply": "2023-10-22T16:08:15.562569Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150 µs ± 874 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:15.566838Z",
     "iopub.status.busy": "2023-10-22T16:08:15.566346Z",
     "iopub.status.idle": "2023-10-22T16:08:27.863746Z",
     "shell.execute_reply": "2023-10-22T16:08:27.863095Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "151 µs ± 399 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:27.867426Z",
     "iopub.status.busy": "2023-10-22T16:08:27.867010Z",
     "iopub.status.idle": "2023-10-22T16:08:27.870398Z",
     "shell.execute_reply": "2023-10-22T16:08:27.869826Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:27.873377Z",
     "iopub.status.busy": "2023-10-22T16:08:27.872998Z",
     "iopub.status.idle": "2023-10-22T16:08:27.880309Z",
     "shell.execute_reply": "2023-10-22T16:08:27.879739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f81db128d30>\n",
       "├── 'a' --> tensor([[[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]],\n",
       "│           \n",
       "│                   [[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]],\n",
       "│           \n",
       "│                   [[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]],\n",
       "│           \n",
       "│                   [[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]],\n",
       "│           \n",
       "│                   [[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]],\n",
       "│           \n",
       "│                   [[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]],\n",
       "│           \n",
       "│                   [[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]],\n",
       "│           \n",
       "│                   [[-0.9157, -0.4304, -0.4365],\n",
       "│                    [ 0.8855, -0.1090,  1.4251]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f81db128b50>\n",
       "    └── 'c' --> tensor([[[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "                \n",
       "                        [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "                \n",
       "                        [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "                \n",
       "                        [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "                \n",
       "                        [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "                \n",
       "                        [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "                \n",
       "                        [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "                \n",
       "                        [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                         [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                         [ 1.3762,  0.2831,  1.7136,  0.5020]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:27.883218Z",
     "iopub.status.busy": "2023-10-22T16:08:27.882844Z",
     "iopub.status.idle": "2023-10-22T16:08:30.625702Z",
     "shell.execute_reply": "2023-10-22T16:08:30.624864Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.8 µs ± 80.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:30.629758Z",
     "iopub.status.busy": "2023-10-22T16:08:30.629241Z",
     "iopub.status.idle": "2023-10-22T16:08:30.639196Z",
     "shell.execute_reply": "2023-10-22T16:08:30.638554Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f81db128520>\n",
       "├── 'a' --> tensor([[-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251],\n",
       "│                   [-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251],\n",
       "│                   [-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251],\n",
       "│                   [-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251],\n",
       "│                   [-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251],\n",
       "│                   [-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251],\n",
       "│                   [-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251],\n",
       "│                   [-0.9157, -0.4304, -0.4365],\n",
       "│                   [ 0.8855, -0.1090,  1.4251]])\n",
       "└── 'x' --> <FastTreeValue 0x7f81db128a30>\n",
       "    └── 'c' --> tensor([[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                        [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                        [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                        [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                        [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                        [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                        [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                        [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                        [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                        [ 1.3762,  0.2831,  1.7136,  0.5020]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:30.642607Z",
     "iopub.status.busy": "2023-10-22T16:08:30.642035Z",
     "iopub.status.idle": "2023-10-22T16:08:33.201727Z",
     "shell.execute_reply": "2023-10-22T16:08:33.200902Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.4 µs ± 53.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:33.205719Z",
     "iopub.status.busy": "2023-10-22T16:08:33.205108Z",
     "iopub.status.idle": "2023-10-22T16:08:38.629246Z",
     "shell.execute_reply": "2023-10-22T16:08:38.628282Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.7 µs ± 33.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:38.633318Z",
     "iopub.status.busy": "2023-10-22T16:08:38.632629Z",
     "iopub.status.idle": "2023-10-22T16:08:38.641877Z",
     "shell.execute_reply": "2023-10-22T16:08:38.641217Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]],\n",
       "       \n",
       "               [[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]],\n",
       "       \n",
       "               [[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]],\n",
       "       \n",
       "               [[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]],\n",
       "       \n",
       "               [[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]],\n",
       "       \n",
       "               [[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]],\n",
       "       \n",
       "               [[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]],\n",
       "       \n",
       "               [[-0.9157, -0.4304, -0.4365],\n",
       "                [ 0.8855, -0.1090,  1.4251]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "              \n",
       "                      [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "              \n",
       "                      [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "              \n",
       "                      [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "              \n",
       "                      [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "              \n",
       "                      [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "              \n",
       "                      [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]],\n",
       "              \n",
       "                      [[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                       [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                       [ 1.3762,  0.2831,  1.7136,  0.5020]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:38.645247Z",
     "iopub.status.busy": "2023-10-22T16:08:38.644653Z",
     "iopub.status.idle": "2023-10-22T16:08:45.577215Z",
     "shell.execute_reply": "2023-10-22T16:08:45.576252Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.3 µs ± 186 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:45.581375Z",
     "iopub.status.busy": "2023-10-22T16:08:45.580815Z",
     "iopub.status.idle": "2023-10-22T16:08:45.590361Z",
     "shell.execute_reply": "2023-10-22T16:08:45.589652Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251],\n",
       "               [-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251],\n",
       "               [-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251],\n",
       "               [-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251],\n",
       "               [-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251],\n",
       "               [-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251],\n",
       "               [-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251],\n",
       "               [-0.9157, -0.4304, -0.4365],\n",
       "               [ 0.8855, -0.1090,  1.4251]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                      [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                      [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                      [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                      [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                      [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                      [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020],\n",
       "                      [-0.2217,  0.4042, -0.4354, -0.2158],\n",
       "                      [ 0.5984, -0.5000, -1.5039, -0.1139],\n",
       "                      [ 1.3762,  0.2831,  1.7136,  0.5020]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:45.593764Z",
     "iopub.status.busy": "2023-10-22T16:08:45.593304Z",
     "iopub.status.idle": "2023-10-22T16:08:58.170402Z",
     "shell.execute_reply": "2023-10-22T16:08:58.169575Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "155 µs ± 131 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-22T16:08:58.174111Z",
     "iopub.status.busy": "2023-10-22T16:08:58.173697Z",
     "iopub.status.idle": "2023-10-22T16:09:01.289115Z",
     "shell.execute_reply": "2023-10-22T16:09:01.288372Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "380 µs ± 4.82 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
