{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:33.121078Z",
     "iopub.status.busy": "2023-03-06T19:45:33.120367Z",
     "iopub.status.idle": "2023-03-06T19:45:34.375327Z",
     "shell.execute_reply": "2023-03-06T19:45:34.374158Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:34.380233Z",
     "iopub.status.busy": "2023-03-06T19:45:34.379854Z",
     "iopub.status.idle": "2023-03-06T19:45:34.428021Z",
     "shell.execute_reply": "2023-03-06T19:45:34.426681Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:34.431591Z",
     "iopub.status.busy": "2023-03-06T19:45:34.431292Z",
     "iopub.status.idle": "2023-03-06T19:45:34.444753Z",
     "shell.execute_reply": "2023-03-06T19:45:34.443777Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff5cfd32b80>\n",
       "├── 'a' --> tensor([[-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff5cfd32040>\n",
       "    └── 'c' --> tensor([[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:34.448401Z",
     "iopub.status.busy": "2023-03-06T19:45:34.448100Z",
     "iopub.status.idle": "2023-03-06T19:45:34.456122Z",
     "shell.execute_reply": "2023-03-06T19:45:34.455107Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8143, -0.3311,  0.0344],\n",
       "        [-1.7267,  0.7368,  1.0944]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:34.459755Z",
     "iopub.status.busy": "2023-03-06T19:45:34.459452Z",
     "iopub.status.idle": "2023-03-06T19:45:40.676171Z",
     "shell.execute_reply": "2023-03-06T19:45:40.675253Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76.8 ns ± 2.64 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:40.679974Z",
     "iopub.status.busy": "2023-03-06T19:45:40.679678Z",
     "iopub.status.idle": "2023-03-06T19:45:40.689340Z",
     "shell.execute_reply": "2023-03-06T19:45:40.687935Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff5cfd32b80>\n",
       "├── 'a' --> tensor([[ 0.1326, -0.6931,  0.4406],\n",
       "│                   [ 0.0732, -0.3790, -1.1068]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff5cfd32040>\n",
       "    └── 'c' --> tensor([[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:40.693208Z",
     "iopub.status.busy": "2023-03-06T19:45:40.692510Z",
     "iopub.status.idle": "2023-03-06T19:45:48.061349Z",
     "shell.execute_reply": "2023-03-06T19:45:48.060170Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90.8 ns ± 2.74 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:48.065890Z",
     "iopub.status.busy": "2023-03-06T19:45:48.064858Z",
     "iopub.status.idle": "2023-03-06T19:45:48.543018Z",
     "shell.execute_reply": "2023-03-06T19:45:48.541840Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:48.548797Z",
     "iopub.status.busy": "2023-03-06T19:45:48.547969Z",
     "iopub.status.idle": "2023-03-06T19:45:48.556213Z",
     "shell.execute_reply": "2023-03-06T19:45:48.555057Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:48.559518Z",
     "iopub.status.busy": "2023-03-06T19:45:48.559219Z",
     "iopub.status.idle": "2023-03-06T19:45:48.566250Z",
     "shell.execute_reply": "2023-03-06T19:45:48.565280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8143, -0.3311,  0.0344],\n",
       "        [-1.7267,  0.7368,  1.0944]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:48.569627Z",
     "iopub.status.busy": "2023-03-06T19:45:48.569309Z",
     "iopub.status.idle": "2023-03-06T19:45:54.980505Z",
     "shell.execute_reply": "2023-03-06T19:45:54.979351Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.7 ns ± 1.59 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:54.984725Z",
     "iopub.status.busy": "2023-03-06T19:45:54.984064Z",
     "iopub.status.idle": "2023-03-06T19:45:54.993125Z",
     "shell.execute_reply": "2023-03-06T19:45:54.991862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.0500, -0.4617, -0.5972],\n",
       "               [ 1.6755,  1.5010, -0.8057]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:45:54.996933Z",
     "iopub.status.busy": "2023-03-06T19:45:54.996641Z",
     "iopub.status.idle": "2023-03-06T19:46:00.444937Z",
     "shell.execute_reply": "2023-03-06T19:46:00.443964Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "668 ns ± 7.37 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:00.449555Z",
     "iopub.status.busy": "2023-03-06T19:46:00.448967Z",
     "iopub.status.idle": "2023-03-06T19:46:09.583887Z",
     "shell.execute_reply": "2023-03-06T19:46:09.582759Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.13 µs ± 23.4 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:09.588042Z",
     "iopub.status.busy": "2023-03-06T19:46:09.587484Z",
     "iopub.status.idle": "2023-03-06T19:46:21.283194Z",
     "shell.execute_reply": "2023-03-06T19:46:21.282045Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.4 µs ± 110 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:21.289224Z",
     "iopub.status.busy": "2023-03-06T19:46:21.288897Z",
     "iopub.status.idle": "2023-03-06T19:46:21.293615Z",
     "shell.execute_reply": "2023-03-06T19:46:21.292434Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:21.297842Z",
     "iopub.status.busy": "2023-03-06T19:46:21.297014Z",
     "iopub.status.idle": "2023-03-06T19:46:23.606284Z",
     "shell.execute_reply": "2023-03-06T19:46:23.604756Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "283 µs ± 10.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:23.611051Z",
     "iopub.status.busy": "2023-03-06T19:46:23.610691Z",
     "iopub.status.idle": "2023-03-06T19:46:25.805024Z",
     "shell.execute_reply": "2023-03-06T19:46:25.804011Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "269 µs ± 6.16 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:25.809462Z",
     "iopub.status.busy": "2023-03-06T19:46:25.808831Z",
     "iopub.status.idle": "2023-03-06T19:46:25.815855Z",
     "shell.execute_reply": "2023-03-06T19:46:25.814713Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:25.819941Z",
     "iopub.status.busy": "2023-03-06T19:46:25.819225Z",
     "iopub.status.idle": "2023-03-06T19:46:25.829819Z",
     "shell.execute_reply": "2023-03-06T19:46:25.828819Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff5cfd32c40>\n",
       "├── 'a' --> tensor([[[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]],\n",
       "│           \n",
       "│                   [[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]],\n",
       "│           \n",
       "│                   [[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]],\n",
       "│           \n",
       "│                   [[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]],\n",
       "│           \n",
       "│                   [[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]],\n",
       "│           \n",
       "│                   [[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]],\n",
       "│           \n",
       "│                   [[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]],\n",
       "│           \n",
       "│                   [[-0.8143, -0.3311,  0.0344],\n",
       "│                    [-1.7267,  0.7368,  1.0944]]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff5cfd32100>\n",
       "    └── 'c' --> tensor([[[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "                \n",
       "                        [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "                \n",
       "                        [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "                \n",
       "                        [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "                \n",
       "                        [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "                \n",
       "                        [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "                \n",
       "                        [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "                \n",
       "                        [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                         [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                         [-0.8379,  1.2474, -1.4648, -0.8612]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:25.833455Z",
     "iopub.status.busy": "2023-03-06T19:46:25.832890Z",
     "iopub.status.idle": "2023-03-06T19:46:29.889722Z",
     "shell.execute_reply": "2023-03-06T19:46:29.888363Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50 µs ± 1 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:29.893913Z",
     "iopub.status.busy": "2023-03-06T19:46:29.893278Z",
     "iopub.status.idle": "2023-03-06T19:46:29.904472Z",
     "shell.execute_reply": "2023-03-06T19:46:29.903583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7ff5cccaa3d0>\n",
       "├── 'a' --> tensor([[-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944],\n",
       "│                   [-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944],\n",
       "│                   [-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944],\n",
       "│                   [-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944],\n",
       "│                   [-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944],\n",
       "│                   [-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944],\n",
       "│                   [-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944],\n",
       "│                   [-0.8143, -0.3311,  0.0344],\n",
       "│                   [-1.7267,  0.7368,  1.0944]])\n",
       "└── 'x' --> <FastTreeValue 0x7ff5cccaa3a0>\n",
       "    └── 'c' --> tensor([[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                        [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                        [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                        [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                        [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                        [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                        [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                        [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                        [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                        [-0.8379,  1.2474, -1.4648, -0.8612]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:29.910069Z",
     "iopub.status.busy": "2023-03-06T19:46:29.909431Z",
     "iopub.status.idle": "2023-03-06T19:46:33.587154Z",
     "shell.execute_reply": "2023-03-06T19:46:33.585543Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.3 µs ± 1 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:33.591813Z",
     "iopub.status.busy": "2023-03-06T19:46:33.591315Z",
     "iopub.status.idle": "2023-03-06T19:46:40.458555Z",
     "shell.execute_reply": "2023-03-06T19:46:40.457499Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84 µs ± 894 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:40.462419Z",
     "iopub.status.busy": "2023-03-06T19:46:40.461824Z",
     "iopub.status.idle": "2023-03-06T19:46:40.472708Z",
     "shell.execute_reply": "2023-03-06T19:46:40.471752Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]],\n",
       "       \n",
       "               [[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]],\n",
       "       \n",
       "               [[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]],\n",
       "       \n",
       "               [[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]],\n",
       "       \n",
       "               [[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]],\n",
       "       \n",
       "               [[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]],\n",
       "       \n",
       "               [[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]],\n",
       "       \n",
       "               [[-0.8143, -0.3311,  0.0344],\n",
       "                [-1.7267,  0.7368,  1.0944]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "              \n",
       "                      [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "              \n",
       "                      [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "              \n",
       "                      [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "              \n",
       "                      [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "              \n",
       "                      [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "              \n",
       "                      [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]],\n",
       "              \n",
       "                      [[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                       [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                       [-0.8379,  1.2474, -1.4648, -0.8612]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:40.476539Z",
     "iopub.status.busy": "2023-03-06T19:46:40.475839Z",
     "iopub.status.idle": "2023-03-06T19:46:48.990634Z",
     "shell.execute_reply": "2023-03-06T19:46:48.989509Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "105 µs ± 1.85 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:48.994830Z",
     "iopub.status.busy": "2023-03-06T19:46:48.994171Z",
     "iopub.status.idle": "2023-03-06T19:46:49.004405Z",
     "shell.execute_reply": "2023-03-06T19:46:49.003534Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944],\n",
       "               [-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944],\n",
       "               [-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944],\n",
       "               [-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944],\n",
       "               [-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944],\n",
       "               [-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944],\n",
       "               [-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944],\n",
       "               [-0.8143, -0.3311,  0.0344],\n",
       "               [-1.7267,  0.7368,  1.0944]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                      [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                      [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                      [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                      [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                      [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                      [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612],\n",
       "                      [ 0.6703, -0.4713, -0.9282,  0.8941],\n",
       "                      [ 0.1216,  0.1996,  0.8852,  1.5863],\n",
       "                      [-0.8379,  1.2474, -1.4648, -0.8612]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:46:49.007663Z",
     "iopub.status.busy": "2023-03-06T19:46:49.007178Z",
     "iopub.status.idle": "2023-03-06T19:47:04.648239Z",
     "shell.execute_reply": "2023-03-06T19:47:04.647148Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "192 µs ± 2.21 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-06T19:47:04.652920Z",
     "iopub.status.busy": "2023-03-06T19:47:04.652641Z",
     "iopub.status.idle": "2023-03-06T19:47:09.175272Z",
     "shell.execute_reply": "2023-03-06T19:47:09.174095Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "552 µs ± 8.89 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
