{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:40.070678Z",
     "iopub.status.busy": "2023-02-23T09:13:40.070389Z",
     "iopub.status.idle": "2023-02-23T09:13:41.289333Z",
     "shell.execute_reply": "2023-02-23T09:13:41.288237Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:41.294088Z",
     "iopub.status.busy": "2023-02-23T09:13:41.293737Z",
     "iopub.status.idle": "2023-02-23T09:13:41.338105Z",
     "shell.execute_reply": "2023-02-23T09:13:41.337132Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:41.342133Z",
     "iopub.status.busy": "2023-02-23T09:13:41.341670Z",
     "iopub.status.idle": "2023-02-23T09:13:41.352857Z",
     "shell.execute_reply": "2023-02-23T09:13:41.351906Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6a8c4d2040>\n",
       "├── 'a' --> tensor([[ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6a8c4d2700>\n",
       "    └── 'c' --> tensor([[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:41.356726Z",
     "iopub.status.busy": "2023-02-23T09:13:41.356418Z",
     "iopub.status.idle": "2023-02-23T09:13:41.362786Z",
     "shell.execute_reply": "2023-02-23T09:13:41.361868Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7525, -0.1259,  0.0254],\n",
       "        [-0.0361,  0.7473,  1.2433]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:41.366263Z",
     "iopub.status.busy": "2023-02-23T09:13:41.365942Z",
     "iopub.status.idle": "2023-02-23T09:13:47.204813Z",
     "shell.execute_reply": "2023-02-23T09:13:47.203495Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.3 ns ± 0.879 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:47.208498Z",
     "iopub.status.busy": "2023-02-23T09:13:47.208208Z",
     "iopub.status.idle": "2023-02-23T09:13:47.217424Z",
     "shell.execute_reply": "2023-02-23T09:13:47.216446Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6a8c4d2040>\n",
       "├── 'a' --> tensor([[ 0.7583,  0.1554, -0.5816],\n",
       "│                   [ 0.5522,  0.1475,  1.2029]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6a8c4d2700>\n",
       "    └── 'c' --> tensor([[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:47.220880Z",
     "iopub.status.busy": "2023-02-23T09:13:47.220601Z",
     "iopub.status.idle": "2023-02-23T09:13:53.262335Z",
     "shell.execute_reply": "2023-02-23T09:13:53.261344Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "74.4 ns ± 0.883 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:53.266556Z",
     "iopub.status.busy": "2023-02-23T09:13:53.266269Z",
     "iopub.status.idle": "2023-02-23T09:13:53.745749Z",
     "shell.execute_reply": "2023-02-23T09:13:53.744680Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:53.749572Z",
     "iopub.status.busy": "2023-02-23T09:13:53.749158Z",
     "iopub.status.idle": "2023-02-23T09:13:53.756544Z",
     "shell.execute_reply": "2023-02-23T09:13:53.755628Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:53.759810Z",
     "iopub.status.busy": "2023-02-23T09:13:53.759538Z",
     "iopub.status.idle": "2023-02-23T09:13:53.766613Z",
     "shell.execute_reply": "2023-02-23T09:13:53.765691Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.7525, -0.1259,  0.0254],\n",
       "        [-0.0361,  0.7473,  1.2433]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:53.771035Z",
     "iopub.status.busy": "2023-02-23T09:13:53.770719Z",
     "iopub.status.idle": "2023-02-23T09:13:59.146615Z",
     "shell.execute_reply": "2023-02-23T09:13:59.145584Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.6 ns ± 1.32 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:59.150532Z",
     "iopub.status.busy": "2023-02-23T09:13:59.150148Z",
     "iopub.status.idle": "2023-02-23T09:13:59.158874Z",
     "shell.execute_reply": "2023-02-23T09:13:59.157120Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.4817, -1.9688,  0.5573],\n",
       "               [-0.5830,  0.9627, -0.8452]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:13:59.163017Z",
     "iopub.status.busy": "2023-02-23T09:13:59.162603Z",
     "iopub.status.idle": "2023-02-23T09:14:04.122513Z",
     "shell.execute_reply": "2023-02-23T09:14:04.121438Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "614 ns ± 9.74 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:04.126855Z",
     "iopub.status.busy": "2023-02-23T09:14:04.126397Z",
     "iopub.status.idle": "2023-02-23T09:14:12.602460Z",
     "shell.execute_reply": "2023-02-23T09:14:12.601166Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.05 µs ± 34.8 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:12.606692Z",
     "iopub.status.busy": "2023-02-23T09:14:12.606164Z",
     "iopub.status.idle": "2023-02-23T09:14:23.952039Z",
     "shell.execute_reply": "2023-02-23T09:14:23.950979Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.9 µs ± 128 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:23.956177Z",
     "iopub.status.busy": "2023-02-23T09:14:23.955571Z",
     "iopub.status.idle": "2023-02-23T09:14:23.960947Z",
     "shell.execute_reply": "2023-02-23T09:14:23.960033Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:23.964603Z",
     "iopub.status.busy": "2023-02-23T09:14:23.964078Z",
     "iopub.status.idle": "2023-02-23T09:14:26.240109Z",
     "shell.execute_reply": "2023-02-23T09:14:26.239230Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "277 µs ± 6.27 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:26.244686Z",
     "iopub.status.busy": "2023-02-23T09:14:26.243221Z",
     "iopub.status.idle": "2023-02-23T09:14:28.479411Z",
     "shell.execute_reply": "2023-02-23T09:14:28.478401Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "274 µs ± 10.9 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:28.483345Z",
     "iopub.status.busy": "2023-02-23T09:14:28.483025Z",
     "iopub.status.idle": "2023-02-23T09:14:28.488713Z",
     "shell.execute_reply": "2023-02-23T09:14:28.487772Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:28.492091Z",
     "iopub.status.busy": "2023-02-23T09:14:28.491775Z",
     "iopub.status.idle": "2023-02-23T09:14:28.504904Z",
     "shell.execute_reply": "2023-02-23T09:14:28.503866Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6a8c4de610>\n",
       "├── 'a' --> tensor([[[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]],\n",
       "│           \n",
       "│                   [[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]],\n",
       "│           \n",
       "│                   [[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]],\n",
       "│           \n",
       "│                   [[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]],\n",
       "│           \n",
       "│                   [[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]],\n",
       "│           \n",
       "│                   [[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]],\n",
       "│           \n",
       "│                   [[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]],\n",
       "│           \n",
       "│                   [[ 0.7525, -0.1259,  0.0254],\n",
       "│                    [-0.0361,  0.7473,  1.2433]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6a8c50ffa0>\n",
       "    └── 'c' --> tensor([[[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "                \n",
       "                        [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "                \n",
       "                        [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "                \n",
       "                        [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "                \n",
       "                        [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "                \n",
       "                        [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "                \n",
       "                        [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "                \n",
       "                        [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                         [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                         [-0.2755,  0.8267,  0.8030, -0.5056]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:28.508465Z",
     "iopub.status.busy": "2023-02-23T09:14:28.508154Z",
     "iopub.status.idle": "2023-02-23T09:14:32.198522Z",
     "shell.execute_reply": "2023-02-23T09:14:32.197504Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.4 µs ± 638 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:32.202584Z",
     "iopub.status.busy": "2023-02-23T09:14:32.202051Z",
     "iopub.status.idle": "2023-02-23T09:14:32.213014Z",
     "shell.execute_reply": "2023-02-23T09:14:32.212116Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f69e2203f70>\n",
       "├── 'a' --> tensor([[ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433],\n",
       "│                   [ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433],\n",
       "│                   [ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433],\n",
       "│                   [ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433],\n",
       "│                   [ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433],\n",
       "│                   [ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433],\n",
       "│                   [ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433],\n",
       "│                   [ 0.7525, -0.1259,  0.0254],\n",
       "│                   [-0.0361,  0.7473,  1.2433]])\n",
       "└── 'x' --> <FastTreeValue 0x7f69e219b580>\n",
       "    └── 'c' --> tensor([[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                        [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                        [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                        [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                        [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                        [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                        [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                        [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                        [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                        [-0.2755,  0.8267,  0.8030, -0.5056]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:32.216635Z",
     "iopub.status.busy": "2023-02-23T09:14:32.216344Z",
     "iopub.status.idle": "2023-02-23T09:14:35.527651Z",
     "shell.execute_reply": "2023-02-23T09:14:35.526577Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40.6 µs ± 879 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:35.531298Z",
     "iopub.status.busy": "2023-02-23T09:14:35.530833Z",
     "iopub.status.idle": "2023-02-23T09:14:42.037510Z",
     "shell.execute_reply": "2023-02-23T09:14:42.036338Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79.9 µs ± 478 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:42.041191Z",
     "iopub.status.busy": "2023-02-23T09:14:42.040887Z",
     "iopub.status.idle": "2023-02-23T09:14:42.051890Z",
     "shell.execute_reply": "2023-02-23T09:14:42.050738Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "              \n",
       "                      [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "              \n",
       "                      [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "              \n",
       "                      [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "              \n",
       "                      [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "              \n",
       "                      [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "              \n",
       "                      [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]],\n",
       "              \n",
       "                      [[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                       [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                       [-0.2755,  0.8267,  0.8030, -0.5056]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]],\n",
       "       \n",
       "               [[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]],\n",
       "       \n",
       "               [[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]],\n",
       "       \n",
       "               [[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]],\n",
       "       \n",
       "               [[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]],\n",
       "       \n",
       "               [[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]],\n",
       "       \n",
       "               [[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]],\n",
       "       \n",
       "               [[ 0.7525, -0.1259,  0.0254],\n",
       "                [-0.0361,  0.7473,  1.2433]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:42.055590Z",
     "iopub.status.busy": "2023-02-23T09:14:42.055269Z",
     "iopub.status.idle": "2023-02-23T09:14:50.233548Z",
     "shell.execute_reply": "2023-02-23T09:14:50.232513Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 µs ± 2.14 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:50.237179Z",
     "iopub.status.busy": "2023-02-23T09:14:50.236867Z",
     "iopub.status.idle": "2023-02-23T09:14:50.247052Z",
     "shell.execute_reply": "2023-02-23T09:14:50.246086Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                      [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                      [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                      [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                      [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                      [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                      [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056],\n",
       "                      [ 0.7399, -0.1499, -1.7815,  0.3320],\n",
       "                      [-1.0493, -0.0887,  0.1404,  1.7528],\n",
       "                      [-0.2755,  0.8267,  0.8030, -0.5056]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433],\n",
       "               [ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433],\n",
       "               [ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433],\n",
       "               [ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433],\n",
       "               [ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433],\n",
       "               [ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433],\n",
       "               [ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433],\n",
       "               [ 0.7525, -0.1259,  0.0254],\n",
       "               [-0.0361,  0.7473,  1.2433]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:14:50.250302Z",
     "iopub.status.busy": "2023-02-23T09:14:50.250001Z",
     "iopub.status.idle": "2023-02-23T09:15:05.000904Z",
     "shell.execute_reply": "2023-02-23T09:15:04.999884Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "183 µs ± 1.3 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-23T09:15:05.004668Z",
     "iopub.status.busy": "2023-02-23T09:15:05.004143Z",
     "iopub.status.idle": "2023-02-23T09:15:09.537338Z",
     "shell.execute_reply": "2023-02-23T09:15:09.536445Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "557 µs ± 6.37 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
