{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:35.570313Z",
     "iopub.status.busy": "2023-02-27T10:57:35.570103Z",
     "iopub.status.idle": "2023-02-27T10:57:36.479260Z",
     "shell.execute_reply": "2023-02-27T10:57:36.478614Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:36.482736Z",
     "iopub.status.busy": "2023-02-27T10:57:36.482116Z",
     "iopub.status.idle": "2023-02-27T10:57:36.759925Z",
     "shell.execute_reply": "2023-02-27T10:57:36.759233Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:36.763465Z",
     "iopub.status.busy": "2023-02-27T10:57:36.762871Z",
     "iopub.status.idle": "2023-02-27T10:57:36.772344Z",
     "shell.execute_reply": "2023-02-27T10:57:36.771754Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbea0bdff10>\n",
       "├── 'a' --> tensor([[ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbea0bdffa0>\n",
       "    └── 'c' --> tensor([[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:36.775006Z",
     "iopub.status.busy": "2023-02-27T10:57:36.774677Z",
     "iopub.status.idle": "2023-02-27T10:57:36.779726Z",
     "shell.execute_reply": "2023-02-27T10:57:36.779080Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5674, -0.5892,  0.1715],\n",
       "        [-0.0126,  0.8789,  1.1263]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:36.782339Z",
     "iopub.status.busy": "2023-02-27T10:57:36.782005Z",
     "iopub.status.idle": "2023-02-27T10:57:42.012539Z",
     "shell.execute_reply": "2023-02-27T10:57:42.011716Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64.9 ns ± 0.0382 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:42.015813Z",
     "iopub.status.busy": "2023-02-27T10:57:42.015192Z",
     "iopub.status.idle": "2023-02-27T10:57:42.021771Z",
     "shell.execute_reply": "2023-02-27T10:57:42.021203Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbea0bdff10>\n",
       "├── 'a' --> tensor([[ 0.5644,  2.1224,  0.7770],\n",
       "│                   [ 0.3824, -0.6941,  1.4970]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbea0bdffa0>\n",
       "    └── 'c' --> tensor([[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:42.024254Z",
     "iopub.status.busy": "2023-02-27T10:57:42.023941Z",
     "iopub.status.idle": "2023-02-27T10:57:46.932743Z",
     "shell.execute_reply": "2023-02-27T10:57:46.931823Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.5 ns ± 0.0459 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:46.935629Z",
     "iopub.status.busy": "2023-02-27T10:57:46.935253Z",
     "iopub.status.idle": "2023-02-27T10:57:47.279417Z",
     "shell.execute_reply": "2023-02-27T10:57:47.278754Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:47.282507Z",
     "iopub.status.busy": "2023-02-27T10:57:47.281992Z",
     "iopub.status.idle": "2023-02-27T10:57:47.288152Z",
     "shell.execute_reply": "2023-02-27T10:57:47.287570Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:47.290804Z",
     "iopub.status.busy": "2023-02-27T10:57:47.290465Z",
     "iopub.status.idle": "2023-02-27T10:57:47.295842Z",
     "shell.execute_reply": "2023-02-27T10:57:47.295209Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.5674, -0.5892,  0.1715],\n",
       "        [-0.0126,  0.8789,  1.1263]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:47.298307Z",
     "iopub.status.busy": "2023-02-27T10:57:47.297991Z",
     "iopub.status.idle": "2023-02-27T10:57:51.670294Z",
     "shell.execute_reply": "2023-02-27T10:57:51.669574Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "53.8 ns ± 0.0434 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:51.673702Z",
     "iopub.status.busy": "2023-02-27T10:57:51.673081Z",
     "iopub.status.idle": "2023-02-27T10:57:51.679691Z",
     "shell.execute_reply": "2023-02-27T10:57:51.679090Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.8132,  0.4155, -1.5721],\n",
       "               [-1.4470,  0.5987,  1.4111]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:51.682436Z",
     "iopub.status.busy": "2023-02-27T10:57:51.682085Z",
     "iopub.status.idle": "2023-02-27T10:57:55.604556Z",
     "shell.execute_reply": "2023-02-27T10:57:55.603850Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "483 ns ± 0.0725 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:57:55.607422Z",
     "iopub.status.busy": "2023-02-27T10:57:55.607069Z",
     "iopub.status.idle": "2023-02-27T10:58:02.448584Z",
     "shell.execute_reply": "2023-02-27T10:58:02.447695Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "842 ns ± 2.34 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:02.455312Z",
     "iopub.status.busy": "2023-02-27T10:58:02.453876Z",
     "iopub.status.idle": "2023-02-27T10:58:11.896848Z",
     "shell.execute_reply": "2023-02-27T10:58:11.896135Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.6 µs ± 25.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:11.899965Z",
     "iopub.status.busy": "2023-02-27T10:58:11.899606Z",
     "iopub.status.idle": "2023-02-27T10:58:11.903603Z",
     "shell.execute_reply": "2023-02-27T10:58:11.903000Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:11.906639Z",
     "iopub.status.busy": "2023-02-27T10:58:11.906135Z",
     "iopub.status.idle": "2023-02-27T10:58:22.828243Z",
     "shell.execute_reply": "2023-02-27T10:58:22.827666Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "134 µs ± 456 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:22.831576Z",
     "iopub.status.busy": "2023-02-27T10:58:22.831065Z",
     "iopub.status.idle": "2023-02-27T10:58:34.004869Z",
     "shell.execute_reply": "2023-02-27T10:58:34.004269Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "138 µs ± 768 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:34.008247Z",
     "iopub.status.busy": "2023-02-27T10:58:34.007760Z",
     "iopub.status.idle": "2023-02-27T10:58:34.012058Z",
     "shell.execute_reply": "2023-02-27T10:58:34.011461Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:34.014977Z",
     "iopub.status.busy": "2023-02-27T10:58:34.014501Z",
     "iopub.status.idle": "2023-02-27T10:58:34.022219Z",
     "shell.execute_reply": "2023-02-27T10:58:34.021646Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbdf2b39fa0>\n",
       "├── 'a' --> tensor([[[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]],\n",
       "│           \n",
       "│                   [[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]],\n",
       "│           \n",
       "│                   [[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]],\n",
       "│           \n",
       "│                   [[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]],\n",
       "│           \n",
       "│                   [[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]],\n",
       "│           \n",
       "│                   [[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]],\n",
       "│           \n",
       "│                   [[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]],\n",
       "│           \n",
       "│                   [[ 0.5674, -0.5892,  0.1715],\n",
       "│                    [-0.0126,  0.8789,  1.1263]]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbdf2b39d60>\n",
       "    └── 'c' --> tensor([[[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "                \n",
       "                        [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "                \n",
       "                        [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "                \n",
       "                        [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "                \n",
       "                        [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "                \n",
       "                        [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "                \n",
       "                        [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "                \n",
       "                        [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                         [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                         [-1.0914,  1.5996,  1.2745, -1.0413]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:34.024721Z",
     "iopub.status.busy": "2023-02-27T10:58:34.024256Z",
     "iopub.status.idle": "2023-02-27T10:58:36.713354Z",
     "shell.execute_reply": "2023-02-27T10:58:36.712609Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.1 µs ± 66.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:36.716626Z",
     "iopub.status.busy": "2023-02-27T10:58:36.716041Z",
     "iopub.status.idle": "2023-02-27T10:58:36.723873Z",
     "shell.execute_reply": "2023-02-27T10:58:36.723281Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7fbea0bdff40>\n",
       "├── 'a' --> tensor([[ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263],\n",
       "│                   [ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263],\n",
       "│                   [ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263],\n",
       "│                   [ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263],\n",
       "│                   [ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263],\n",
       "│                   [ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263],\n",
       "│                   [ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263],\n",
       "│                   [ 0.5674, -0.5892,  0.1715],\n",
       "│                   [-0.0126,  0.8789,  1.1263]])\n",
       "└── 'x' --> <FastTreeValue 0x7fbea0bdfe80>\n",
       "    └── 'c' --> tensor([[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                        [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                        [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                        [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                        [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                        [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                        [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                        [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                        [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                        [-1.0914,  1.5996,  1.2745, -1.0413]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:36.726313Z",
     "iopub.status.busy": "2023-02-27T10:58:36.725965Z",
     "iopub.status.idle": "2023-02-27T10:58:39.262069Z",
     "shell.execute_reply": "2023-02-27T10:58:39.261416Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.2 µs ± 76.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:39.264757Z",
     "iopub.status.busy": "2023-02-27T10:58:39.264397Z",
     "iopub.status.idle": "2023-02-27T10:58:43.929147Z",
     "shell.execute_reply": "2023-02-27T10:58:43.928437Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.4 µs ± 92.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:43.932272Z",
     "iopub.status.busy": "2023-02-27T10:58:43.931915Z",
     "iopub.status.idle": "2023-02-27T10:58:43.939796Z",
     "shell.execute_reply": "2023-02-27T10:58:43.939217Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]],\n",
       "       \n",
       "               [[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]],\n",
       "       \n",
       "               [[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]],\n",
       "       \n",
       "               [[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]],\n",
       "       \n",
       "               [[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]],\n",
       "       \n",
       "               [[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]],\n",
       "       \n",
       "               [[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]],\n",
       "       \n",
       "               [[ 0.5674, -0.5892,  0.1715],\n",
       "                [-0.0126,  0.8789,  1.1263]]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "              \n",
       "                      [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "              \n",
       "                      [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "              \n",
       "                      [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "              \n",
       "                      [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "              \n",
       "                      [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "              \n",
       "                      [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]],\n",
       "              \n",
       "                      [[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                       [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                       [-1.0914,  1.5996,  1.2745, -1.0413]]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:43.942439Z",
     "iopub.status.busy": "2023-02-27T10:58:43.942113Z",
     "iopub.status.idle": "2023-02-27T10:58:50.303853Z",
     "shell.execute_reply": "2023-02-27T10:58:50.303174Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.3 µs ± 72.8 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:50.306858Z",
     "iopub.status.busy": "2023-02-27T10:58:50.306512Z",
     "iopub.status.idle": "2023-02-27T10:58:50.313861Z",
     "shell.execute_reply": "2023-02-27T10:58:50.313297Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263],\n",
       "               [ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263],\n",
       "               [ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263],\n",
       "               [ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263],\n",
       "               [ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263],\n",
       "               [ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263],\n",
       "               [ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263],\n",
       "               [ 0.5674, -0.5892,  0.1715],\n",
       "               [-0.0126,  0.8789,  1.1263]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                      [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                      [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                      [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                      [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                      [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                      [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413],\n",
       "                      [-0.4409,  0.5967,  1.4386, -1.2170],\n",
       "                      [-0.7715,  0.1039,  0.0344,  0.4698],\n",
       "                      [-1.0914,  1.5996,  1.2745, -1.0413]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:58:50.316515Z",
     "iopub.status.busy": "2023-02-27T10:58:50.316194Z",
     "iopub.status.idle": "2023-02-27T10:59:01.857191Z",
     "shell.execute_reply": "2023-02-27T10:59:01.856471Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 314 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T10:59:01.860327Z",
     "iopub.status.busy": "2023-02-27T10:59:01.859783Z",
     "iopub.status.idle": "2023-02-27T10:59:04.353139Z",
     "shell.execute_reply": "2023-02-27T10:59:04.352446Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "306 µs ± 558 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
