{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:28.015532Z",
     "iopub.status.busy": "2023-02-27T11:23:28.015292Z",
     "iopub.status.idle": "2023-02-27T11:23:29.007276Z",
     "shell.execute_reply": "2023-02-27T11:23:29.006487Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:29.011633Z",
     "iopub.status.busy": "2023-02-27T11:23:29.011047Z",
     "iopub.status.idle": "2023-02-27T11:23:29.306499Z",
     "shell.execute_reply": "2023-02-27T11:23:29.305164Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:29.310478Z",
     "iopub.status.busy": "2023-02-27T11:23:29.309912Z",
     "iopub.status.idle": "2023-02-27T11:23:29.321676Z",
     "shell.execute_reply": "2023-02-27T11:23:29.320546Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9b109d2070>\n",
       "├── 'a' --> tensor([[ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9b109d7970>\n",
       "    └── 'c' --> tensor([[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:29.324934Z",
     "iopub.status.busy": "2023-02-27T11:23:29.324331Z",
     "iopub.status.idle": "2023-02-27T11:23:29.329829Z",
     "shell.execute_reply": "2023-02-27T11:23:29.329239Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.5818, -0.5171, -0.9265],\n",
       "        [ 0.6563, -0.2178,  0.5190]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:29.332768Z",
     "iopub.status.busy": "2023-02-27T11:23:29.332348Z",
     "iopub.status.idle": "2023-02-27T11:23:34.426634Z",
     "shell.execute_reply": "2023-02-27T11:23:34.425735Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62.7 ns ± 0.104 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:34.429999Z",
     "iopub.status.busy": "2023-02-27T11:23:34.429474Z",
     "iopub.status.idle": "2023-02-27T11:23:34.437251Z",
     "shell.execute_reply": "2023-02-27T11:23:34.436504Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9b109d2070>\n",
       "├── 'a' --> tensor([[ 0.7804, -0.6378,  0.4788],\n",
       "│                   [-1.1535, -0.0718,  0.6785]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9b109d7970>\n",
       "    └── 'c' --> tensor([[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:34.439970Z",
     "iopub.status.busy": "2023-02-27T11:23:34.439519Z",
     "iopub.status.idle": "2023-02-27T11:23:40.038502Z",
     "shell.execute_reply": "2023-02-27T11:23:40.037623Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68.9 ns ± 0.0806 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:40.042435Z",
     "iopub.status.busy": "2023-02-27T11:23:40.041822Z",
     "iopub.status.idle": "2023-02-27T11:23:40.415368Z",
     "shell.execute_reply": "2023-02-27T11:23:40.414558Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:40.419053Z",
     "iopub.status.busy": "2023-02-27T11:23:40.418514Z",
     "iopub.status.idle": "2023-02-27T11:23:40.425360Z",
     "shell.execute_reply": "2023-02-27T11:23:40.424724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:40.428180Z",
     "iopub.status.busy": "2023-02-27T11:23:40.427750Z",
     "iopub.status.idle": "2023-02-27T11:23:40.433985Z",
     "shell.execute_reply": "2023-02-27T11:23:40.433213Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.5818, -0.5171, -0.9265],\n",
       "        [ 0.6563, -0.2178,  0.5190]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:40.437009Z",
     "iopub.status.busy": "2023-02-27T11:23:40.436553Z",
     "iopub.status.idle": "2023-02-27T11:23:45.151379Z",
     "shell.execute_reply": "2023-02-27T11:23:45.150432Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58 ns ± 0.141 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:45.155304Z",
     "iopub.status.busy": "2023-02-27T11:23:45.154595Z",
     "iopub.status.idle": "2023-02-27T11:23:45.162172Z",
     "shell.execute_reply": "2023-02-27T11:23:45.161522Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.7505,  1.9907,  0.6866],\n",
       "               [ 1.3912, -1.0789, -0.6589]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:45.165394Z",
     "iopub.status.busy": "2023-02-27T11:23:45.164921Z",
     "iopub.status.idle": "2023-02-27T11:23:49.182230Z",
     "shell.execute_reply": "2023-02-27T11:23:49.181313Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "494 ns ± 0.19 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:49.186228Z",
     "iopub.status.busy": "2023-02-27T11:23:49.185507Z",
     "iopub.status.idle": "2023-02-27T11:23:56.027284Z",
     "shell.execute_reply": "2023-02-27T11:23:56.026573Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "843 ns ± 0.881 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:23:56.030695Z",
     "iopub.status.busy": "2023-02-27T11:23:56.030122Z",
     "iopub.status.idle": "2023-02-27T11:24:04.895671Z",
     "shell.execute_reply": "2023-02-27T11:24:04.894785Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.9 µs ± 83.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:04.899763Z",
     "iopub.status.busy": "2023-02-27T11:24:04.899097Z",
     "iopub.status.idle": "2023-02-27T11:24:04.903675Z",
     "shell.execute_reply": "2023-02-27T11:24:04.903047Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:04.906763Z",
     "iopub.status.busy": "2023-02-27T11:24:04.906373Z",
     "iopub.status.idle": "2023-02-27T11:24:16.492240Z",
     "shell.execute_reply": "2023-02-27T11:24:16.491530Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 379 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:16.495789Z",
     "iopub.status.busy": "2023-02-27T11:24:16.495133Z",
     "iopub.status.idle": "2023-02-27T11:24:28.065985Z",
     "shell.execute_reply": "2023-02-27T11:24:28.065143Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 281 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:28.069663Z",
     "iopub.status.busy": "2023-02-27T11:24:28.069389Z",
     "iopub.status.idle": "2023-02-27T11:24:28.073670Z",
     "shell.execute_reply": "2023-02-27T11:24:28.073084Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:28.076326Z",
     "iopub.status.busy": "2023-02-27T11:24:28.075841Z",
     "iopub.status.idle": "2023-02-27T11:24:28.083269Z",
     "shell.execute_reply": "2023-02-27T11:24:28.082720Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9b109d7b50>\n",
       "├── 'a' --> tensor([[[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]],\n",
       "│           \n",
       "│                   [[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]],\n",
       "│           \n",
       "│                   [[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]],\n",
       "│           \n",
       "│                   [[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]],\n",
       "│           \n",
       "│                   [[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]],\n",
       "│           \n",
       "│                   [[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]],\n",
       "│           \n",
       "│                   [[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]],\n",
       "│           \n",
       "│                   [[ 1.5818, -0.5171, -0.9265],\n",
       "│                    [ 0.6563, -0.2178,  0.5190]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9b10995220>\n",
       "    └── 'c' --> tensor([[[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "                \n",
       "                        [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "                \n",
       "                        [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "                \n",
       "                        [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "                \n",
       "                        [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "                \n",
       "                        [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "                \n",
       "                        [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "                \n",
       "                        [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                         [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                         [-0.5278, -2.0739,  0.8153, -0.0483]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:28.085940Z",
     "iopub.status.busy": "2023-02-27T11:24:28.085378Z",
     "iopub.status.idle": "2023-02-27T11:24:30.727408Z",
     "shell.execute_reply": "2023-02-27T11:24:30.726512Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.5 µs ± 169 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:30.731027Z",
     "iopub.status.busy": "2023-02-27T11:24:30.730443Z",
     "iopub.status.idle": "2023-02-27T11:24:30.740082Z",
     "shell.execute_reply": "2023-02-27T11:24:30.739454Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f9a5bd16dc0>\n",
       "├── 'a' --> tensor([[ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190],\n",
       "│                   [ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190],\n",
       "│                   [ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190],\n",
       "│                   [ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190],\n",
       "│                   [ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190],\n",
       "│                   [ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190],\n",
       "│                   [ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190],\n",
       "│                   [ 1.5818, -0.5171, -0.9265],\n",
       "│                   [ 0.6563, -0.2178,  0.5190]])\n",
       "└── 'x' --> <FastTreeValue 0x7f9a5bd16850>\n",
       "    └── 'c' --> tensor([[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                        [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                        [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                        [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                        [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                        [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                        [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                        [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                        [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                        [-0.5278, -2.0739,  0.8153, -0.0483]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:30.743820Z",
     "iopub.status.busy": "2023-02-27T11:24:30.742679Z",
     "iopub.status.idle": "2023-02-27T11:24:33.184068Z",
     "shell.execute_reply": "2023-02-27T11:24:33.183164Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 µs ± 29.1 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:33.187777Z",
     "iopub.status.busy": "2023-02-27T11:24:33.187344Z",
     "iopub.status.idle": "2023-02-27T11:24:37.687369Z",
     "shell.execute_reply": "2023-02-27T11:24:37.686479Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55.3 µs ± 77.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:37.691167Z",
     "iopub.status.busy": "2023-02-27T11:24:37.690651Z",
     "iopub.status.idle": "2023-02-27T11:24:37.699553Z",
     "shell.execute_reply": "2023-02-27T11:24:37.698934Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "              \n",
       "                      [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "              \n",
       "                      [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "              \n",
       "                      [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "              \n",
       "                      [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "              \n",
       "                      [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "              \n",
       "                      [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]],\n",
       "              \n",
       "                      [[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                       [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                       [-0.5278, -2.0739,  0.8153, -0.0483]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]],\n",
       "       \n",
       "               [[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]],\n",
       "       \n",
       "               [[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]],\n",
       "       \n",
       "               [[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]],\n",
       "       \n",
       "               [[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]],\n",
       "       \n",
       "               [[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]],\n",
       "       \n",
       "               [[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]],\n",
       "       \n",
       "               [[ 1.5818, -0.5171, -0.9265],\n",
       "                [ 0.6563, -0.2178,  0.5190]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:37.702521Z",
     "iopub.status.busy": "2023-02-27T11:24:37.702167Z",
     "iopub.status.idle": "2023-02-27T11:24:44.007071Z",
     "shell.execute_reply": "2023-02-27T11:24:44.006170Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.6 µs ± 171 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:44.010418Z",
     "iopub.status.busy": "2023-02-27T11:24:44.009904Z",
     "iopub.status.idle": "2023-02-27T11:24:44.017173Z",
     "shell.execute_reply": "2023-02-27T11:24:44.016465Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                      [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                      [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                      [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                      [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                      [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                      [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483],\n",
       "                      [ 1.6001,  1.3746, -1.3446, -1.1838],\n",
       "                      [ 0.1885,  1.4114, -0.5135,  1.2049],\n",
       "                      [-0.5278, -2.0739,  0.8153, -0.0483]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190],\n",
       "               [ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190],\n",
       "               [ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190],\n",
       "               [ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190],\n",
       "               [ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190],\n",
       "               [ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190],\n",
       "               [ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190],\n",
       "               [ 1.5818, -0.5171, -0.9265],\n",
       "               [ 0.6563, -0.2178,  0.5190]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:44.020400Z",
     "iopub.status.busy": "2023-02-27T11:24:44.019832Z",
     "iopub.status.idle": "2023-02-27T11:24:55.574723Z",
     "shell.execute_reply": "2023-02-27T11:24:55.573497Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142 µs ± 198 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:24:55.578031Z",
     "iopub.status.busy": "2023-02-27T11:24:55.577523Z",
     "iopub.status.idle": "2023-02-27T11:24:58.158380Z",
     "shell.execute_reply": "2023-02-27T11:24:58.157740Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "317 µs ± 436 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
