{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:54.229798Z",
     "iopub.status.busy": "2023-02-27T11:25:54.229583Z",
     "iopub.status.idle": "2023-02-27T11:25:55.126393Z",
     "shell.execute_reply": "2023-02-27T11:25:55.125734Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:55.130613Z",
     "iopub.status.busy": "2023-02-27T11:25:55.129384Z",
     "iopub.status.idle": "2023-02-27T11:25:55.410049Z",
     "shell.execute_reply": "2023-02-27T11:25:55.407743Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:55.414778Z",
     "iopub.status.busy": "2023-02-27T11:25:55.413571Z",
     "iopub.status.idle": "2023-02-27T11:25:55.424719Z",
     "shell.execute_reply": "2023-02-27T11:25:55.423707Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1d00a58430>\n",
       "├── 'a' --> tensor([[-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1d00a58b20>\n",
       "    └── 'c' --> tensor([[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:55.427492Z",
     "iopub.status.busy": "2023-02-27T11:25:55.427169Z",
     "iopub.status.idle": "2023-02-27T11:25:55.432718Z",
     "shell.execute_reply": "2023-02-27T11:25:55.432146Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1165,  0.7114, -0.0227],\n",
       "        [-0.1095, -0.1939,  1.2864]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:55.435477Z",
     "iopub.status.busy": "2023-02-27T11:25:55.435248Z",
     "iopub.status.idle": "2023-02-27T11:26:00.264903Z",
     "shell.execute_reply": "2023-02-27T11:26:00.264237Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.7 ns ± 0.0983 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:00.268138Z",
     "iopub.status.busy": "2023-02-27T11:26:00.267538Z",
     "iopub.status.idle": "2023-02-27T11:26:00.274189Z",
     "shell.execute_reply": "2023-02-27T11:26:00.273616Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1d00a58430>\n",
       "├── 'a' --> tensor([[ 0.4631, -1.1466,  0.7919],\n",
       "│                   [-1.2490,  0.5655, -0.1500]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1d00a58b20>\n",
       "    └── 'c' --> tensor([[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:00.276859Z",
     "iopub.status.busy": "2023-02-27T11:26:00.276537Z",
     "iopub.status.idle": "2023-02-27T11:26:05.018723Z",
     "shell.execute_reply": "2023-02-27T11:26:05.017668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.2 ns ± 0.0396 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:05.022096Z",
     "iopub.status.busy": "2023-02-27T11:26:05.021521Z",
     "iopub.status.idle": "2023-02-27T11:26:05.349069Z",
     "shell.execute_reply": "2023-02-27T11:26:05.348387Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:05.352156Z",
     "iopub.status.busy": "2023-02-27T11:26:05.351631Z",
     "iopub.status.idle": "2023-02-27T11:26:05.358585Z",
     "shell.execute_reply": "2023-02-27T11:26:05.357368Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:05.361521Z",
     "iopub.status.busy": "2023-02-27T11:26:05.360994Z",
     "iopub.status.idle": "2023-02-27T11:26:05.367615Z",
     "shell.execute_reply": "2023-02-27T11:26:05.366675Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.1165,  0.7114, -0.0227],\n",
       "        [-0.1095, -0.1939,  1.2864]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:05.370438Z",
     "iopub.status.busy": "2023-02-27T11:26:05.369982Z",
     "iopub.status.idle": "2023-02-27T11:26:09.813700Z",
     "shell.execute_reply": "2023-02-27T11:26:09.812925Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54.6 ns ± 0.063 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:09.816462Z",
     "iopub.status.busy": "2023-02-27T11:26:09.816116Z",
     "iopub.status.idle": "2023-02-27T11:26:09.822835Z",
     "shell.execute_reply": "2023-02-27T11:26:09.821833Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6113, -0.3718,  0.5499],\n",
       "               [-0.8059,  0.3412,  1.9071]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:09.825283Z",
     "iopub.status.busy": "2023-02-27T11:26:09.824930Z",
     "iopub.status.idle": "2023-02-27T11:26:13.725515Z",
     "shell.execute_reply": "2023-02-27T11:26:13.724693Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "480 ns ± 0.155 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:13.728370Z",
     "iopub.status.busy": "2023-02-27T11:26:13.728002Z",
     "iopub.status.idle": "2023-02-27T11:26:20.513586Z",
     "shell.execute_reply": "2023-02-27T11:26:20.512866Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "836 ns ± 10.9 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:20.516621Z",
     "iopub.status.busy": "2023-02-27T11:26:20.516114Z",
     "iopub.status.idle": "2023-02-27T11:26:29.633764Z",
     "shell.execute_reply": "2023-02-27T11:26:29.633048Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.2 µs ± 36.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:29.636647Z",
     "iopub.status.busy": "2023-02-27T11:26:29.636273Z",
     "iopub.status.idle": "2023-02-27T11:26:29.640752Z",
     "shell.execute_reply": "2023-02-27T11:26:29.639711Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:29.643228Z",
     "iopub.status.busy": "2023-02-27T11:26:29.642875Z",
     "iopub.status.idle": "2023-02-27T11:26:40.710683Z",
     "shell.execute_reply": "2023-02-27T11:26:40.710092Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "136 µs ± 257 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:40.714056Z",
     "iopub.status.busy": "2023-02-27T11:26:40.713547Z",
     "iopub.status.idle": "2023-02-27T11:26:51.850364Z",
     "shell.execute_reply": "2023-02-27T11:26:51.849787Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 776 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:51.853734Z",
     "iopub.status.busy": "2023-02-27T11:26:51.853492Z",
     "iopub.status.idle": "2023-02-27T11:26:51.858031Z",
     "shell.execute_reply": "2023-02-27T11:26:51.856993Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:51.860793Z",
     "iopub.status.busy": "2023-02-27T11:26:51.860457Z",
     "iopub.status.idle": "2023-02-27T11:26:51.868800Z",
     "shell.execute_reply": "2023-02-27T11:26:51.868212Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1d00a616a0>\n",
       "├── 'a' --> tensor([[[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]],\n",
       "│           \n",
       "│                   [[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]],\n",
       "│           \n",
       "│                   [[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]],\n",
       "│           \n",
       "│                   [[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]],\n",
       "│           \n",
       "│                   [[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]],\n",
       "│           \n",
       "│                   [[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]],\n",
       "│           \n",
       "│                   [[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]],\n",
       "│           \n",
       "│                   [[-0.1165,  0.7114, -0.0227],\n",
       "│                    [-0.1095, -0.1939,  1.2864]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1c49cf3bb0>\n",
       "    └── 'c' --> tensor([[[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "                \n",
       "                        [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "                \n",
       "                        [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "                \n",
       "                        [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "                \n",
       "                        [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "                \n",
       "                        [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "                \n",
       "                        [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "                \n",
       "                        [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                         [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                         [ 0.5426,  0.0891,  0.7551, -0.6982]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:51.871444Z",
     "iopub.status.busy": "2023-02-27T11:26:51.871102Z",
     "iopub.status.idle": "2023-02-27T11:26:54.507389Z",
     "shell.execute_reply": "2023-02-27T11:26:54.506679Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.4 µs ± 132 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:54.510653Z",
     "iopub.status.busy": "2023-02-27T11:26:54.510140Z",
     "iopub.status.idle": "2023-02-27T11:26:54.519011Z",
     "shell.execute_reply": "2023-02-27T11:26:54.518437Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1c5095bcd0>\n",
       "├── 'a' --> tensor([[-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864],\n",
       "│                   [-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864],\n",
       "│                   [-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864],\n",
       "│                   [-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864],\n",
       "│                   [-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864],\n",
       "│                   [-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864],\n",
       "│                   [-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864],\n",
       "│                   [-0.1165,  0.7114, -0.0227],\n",
       "│                   [-0.1095, -0.1939,  1.2864]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1cd81fb2b0>\n",
       "    └── 'c' --> tensor([[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                        [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                        [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                        [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                        [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                        [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                        [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                        [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                        [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                        [ 0.5426,  0.0891,  0.7551, -0.6982]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:54.522523Z",
     "iopub.status.busy": "2023-02-27T11:26:54.521470Z",
     "iopub.status.idle": "2023-02-27T11:26:56.959591Z",
     "shell.execute_reply": "2023-02-27T11:26:56.958378Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.9 µs ± 54.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:56.962680Z",
     "iopub.status.busy": "2023-02-27T11:26:56.962319Z",
     "iopub.status.idle": "2023-02-27T11:27:01.690551Z",
     "shell.execute_reply": "2023-02-27T11:27:01.689828Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.2 µs ± 71.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:01.693641Z",
     "iopub.status.busy": "2023-02-27T11:27:01.693090Z",
     "iopub.status.idle": "2023-02-27T11:27:01.700955Z",
     "shell.execute_reply": "2023-02-27T11:27:01.700366Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "              \n",
       "                      [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "              \n",
       "                      [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "              \n",
       "                      [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "              \n",
       "                      [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "              \n",
       "                      [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "              \n",
       "                      [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]],\n",
       "              \n",
       "                      [[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                       [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                       [ 0.5426,  0.0891,  0.7551, -0.6982]]]),\n",
       "       ),\n",
       "    a: tensor([[[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]],\n",
       "       \n",
       "               [[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]],\n",
       "       \n",
       "               [[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]],\n",
       "       \n",
       "               [[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]],\n",
       "       \n",
       "               [[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]],\n",
       "       \n",
       "               [[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]],\n",
       "       \n",
       "               [[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]],\n",
       "       \n",
       "               [[-0.1165,  0.7114, -0.0227],\n",
       "                [-0.1095, -0.1939,  1.2864]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:01.703642Z",
     "iopub.status.busy": "2023-02-27T11:27:01.703311Z",
     "iopub.status.idle": "2023-02-27T11:27:08.015119Z",
     "shell.execute_reply": "2023-02-27T11:27:08.014367Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.7 µs ± 114 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:08.018352Z",
     "iopub.status.busy": "2023-02-27T11:27:08.017764Z",
     "iopub.status.idle": "2023-02-27T11:27:08.025434Z",
     "shell.execute_reply": "2023-02-27T11:27:08.024846Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                      [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                      [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                      [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                      [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                      [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                      [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982],\n",
       "                      [-1.0578, -0.7353, -1.9373, -0.0341],\n",
       "                      [ 0.7240,  0.1264, -0.9299,  0.4492],\n",
       "                      [ 0.5426,  0.0891,  0.7551, -0.6982]]),\n",
       "       ),\n",
       "    a: tensor([[-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864],\n",
       "               [-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864],\n",
       "               [-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864],\n",
       "               [-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864],\n",
       "               [-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864],\n",
       "               [-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864],\n",
       "               [-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864],\n",
       "               [-0.1165,  0.7114, -0.0227],\n",
       "               [-0.1095, -0.1939,  1.2864]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:08.028075Z",
     "iopub.status.busy": "2023-02-27T11:27:08.027500Z",
     "iopub.status.idle": "2023-02-27T11:27:19.616365Z",
     "shell.execute_reply": "2023-02-27T11:27:19.615643Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 589 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:27:19.619178Z",
     "iopub.status.busy": "2023-02-27T11:27:19.618810Z",
     "iopub.status.idle": "2023-02-27T11:27:22.181247Z",
     "shell.execute_reply": "2023-02-27T11:27:22.180543Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "314 µs ± 2.29 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
