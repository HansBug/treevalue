{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:46.781816Z",
     "iopub.status.busy": "2023-02-26T13:50:46.781542Z",
     "iopub.status.idle": "2023-02-26T13:50:47.880658Z",
     "shell.execute_reply": "2023-02-26T13:50:47.879643Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:47.885064Z",
     "iopub.status.busy": "2023-02-26T13:50:47.884699Z",
     "iopub.status.idle": "2023-02-26T13:50:48.228576Z",
     "shell.execute_reply": "2023-02-26T13:50:48.227361Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:48.232547Z",
     "iopub.status.busy": "2023-02-26T13:50:48.232207Z",
     "iopub.status.idle": "2023-02-26T13:50:48.243781Z",
     "shell.execute_reply": "2023-02-26T13:50:48.242903Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1e80c62250>\n",
       "├── 'a' --> tensor([[ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1e80c62df0>\n",
       "    └── 'c' --> tensor([[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:48.247400Z",
     "iopub.status.busy": "2023-02-26T13:50:48.247108Z",
     "iopub.status.idle": "2023-02-26T13:50:48.254411Z",
     "shell.execute_reply": "2023-02-26T13:50:48.253478Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9719, -0.7586, -1.1240],\n",
       "        [-2.8899,  0.2374, -0.2088]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:48.258287Z",
     "iopub.status.busy": "2023-02-26T13:50:48.257992Z",
     "iopub.status.idle": "2023-02-26T13:50:54.115604Z",
     "shell.execute_reply": "2023-02-26T13:50:54.114560Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.9 ns ± 1.58 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:54.119258Z",
     "iopub.status.busy": "2023-02-26T13:50:54.118824Z",
     "iopub.status.idle": "2023-02-26T13:50:54.129918Z",
     "shell.execute_reply": "2023-02-26T13:50:54.128866Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1e80c62250>\n",
       "├── 'a' --> tensor([[-0.0698, -1.5717,  1.2439],\n",
       "│                   [-0.7451, -1.7621, -0.6387]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1e80c62df0>\n",
       "    └── 'c' --> tensor([[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:54.133117Z",
     "iopub.status.busy": "2023-02-26T13:50:54.132841Z",
     "iopub.status.idle": "2023-02-26T13:50:59.945369Z",
     "shell.execute_reply": "2023-02-26T13:50:59.944343Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.6 ns ± 2.5 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:50:59.949078Z",
     "iopub.status.busy": "2023-02-26T13:50:59.948363Z",
     "iopub.status.idle": "2023-02-26T13:51:00.365899Z",
     "shell.execute_reply": "2023-02-26T13:51:00.364913Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:00.369836Z",
     "iopub.status.busy": "2023-02-26T13:51:00.369444Z",
     "iopub.status.idle": "2023-02-26T13:51:00.378301Z",
     "shell.execute_reply": "2023-02-26T13:51:00.377357Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:00.381984Z",
     "iopub.status.busy": "2023-02-26T13:51:00.381489Z",
     "iopub.status.idle": "2023-02-26T13:51:00.389133Z",
     "shell.execute_reply": "2023-02-26T13:51:00.388160Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.9719, -0.7586, -1.1240],\n",
       "        [-2.8899,  0.2374, -0.2088]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:00.392729Z",
     "iopub.status.busy": "2023-02-26T13:51:00.392196Z",
     "iopub.status.idle": "2023-02-26T13:51:06.213921Z",
     "shell.execute_reply": "2023-02-26T13:51:06.212810Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.5 ns ± 0.793 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:06.217535Z",
     "iopub.status.busy": "2023-02-26T13:51:06.217100Z",
     "iopub.status.idle": "2023-02-26T13:51:06.225030Z",
     "shell.execute_reply": "2023-02-26T13:51:06.224015Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 0.6148,  0.4555, -0.2663],\n",
       "               [-1.3588, -1.8068, -2.1225]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:06.228390Z",
     "iopub.status.busy": "2023-02-26T13:51:06.227855Z",
     "iopub.status.idle": "2023-02-26T13:51:10.899924Z",
     "shell.execute_reply": "2023-02-26T13:51:10.898958Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "571 ns ± 13 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:10.903512Z",
     "iopub.status.busy": "2023-02-26T13:51:10.903226Z",
     "iopub.status.idle": "2023-02-26T13:51:18.281099Z",
     "shell.execute_reply": "2023-02-26T13:51:18.280153Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "909 ns ± 10.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:18.284927Z",
     "iopub.status.busy": "2023-02-26T13:51:18.284416Z",
     "iopub.status.idle": "2023-02-26T13:51:28.501273Z",
     "shell.execute_reply": "2023-02-26T13:51:28.500370Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.5 µs ± 215 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:28.504697Z",
     "iopub.status.busy": "2023-02-26T13:51:28.504287Z",
     "iopub.status.idle": "2023-02-26T13:51:28.509530Z",
     "shell.execute_reply": "2023-02-26T13:51:28.508725Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:28.513016Z",
     "iopub.status.busy": "2023-02-26T13:51:28.512558Z",
     "iopub.status.idle": "2023-02-26T13:51:30.783684Z",
     "shell.execute_reply": "2023-02-26T13:51:30.782852Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "274 µs ± 5.5 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:30.787017Z",
     "iopub.status.busy": "2023-02-26T13:51:30.786538Z",
     "iopub.status.idle": "2023-02-26T13:51:32.923860Z",
     "shell.execute_reply": "2023-02-26T13:51:32.922935Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "264 µs ± 7.81 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:32.927311Z",
     "iopub.status.busy": "2023-02-26T13:51:32.927048Z",
     "iopub.status.idle": "2023-02-26T13:51:32.932776Z",
     "shell.execute_reply": "2023-02-26T13:51:32.931777Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:32.935731Z",
     "iopub.status.busy": "2023-02-26T13:51:32.935477Z",
     "iopub.status.idle": "2023-02-26T13:51:32.944802Z",
     "shell.execute_reply": "2023-02-26T13:51:32.943928Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1e80ccfd00>\n",
       "├── 'a' --> tensor([[[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]],\n",
       "│           \n",
       "│                   [[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]],\n",
       "│           \n",
       "│                   [[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]],\n",
       "│           \n",
       "│                   [[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]],\n",
       "│           \n",
       "│                   [[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]],\n",
       "│           \n",
       "│                   [[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]],\n",
       "│           \n",
       "│                   [[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]],\n",
       "│           \n",
       "│                   [[ 0.9719, -0.7586, -1.1240],\n",
       "│                    [-2.8899,  0.2374, -0.2088]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1dc9551250>\n",
       "    └── 'c' --> tensor([[[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "                \n",
       "                        [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "                \n",
       "                        [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "                \n",
       "                        [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "                \n",
       "                        [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "                \n",
       "                        [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "                \n",
       "                        [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "                \n",
       "                        [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                         [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                         [ 0.9580, -1.6776, -0.0139, -1.2663]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:32.948187Z",
     "iopub.status.busy": "2023-02-26T13:51:32.947824Z",
     "iopub.status.idle": "2023-02-26T13:51:36.396328Z",
     "shell.execute_reply": "2023-02-26T13:51:36.395173Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.4 µs ± 570 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:36.399667Z",
     "iopub.status.busy": "2023-02-26T13:51:36.399259Z",
     "iopub.status.idle": "2023-02-26T13:51:36.408701Z",
     "shell.execute_reply": "2023-02-26T13:51:36.407705Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f1e80c622b0>\n",
       "├── 'a' --> tensor([[ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088],\n",
       "│                   [ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088],\n",
       "│                   [ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088],\n",
       "│                   [ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088],\n",
       "│                   [ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088],\n",
       "│                   [ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088],\n",
       "│                   [ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088],\n",
       "│                   [ 0.9719, -0.7586, -1.1240],\n",
       "│                   [-2.8899,  0.2374, -0.2088]])\n",
       "└── 'x' --> <FastTreeValue 0x7f1e80c62970>\n",
       "    └── 'c' --> tensor([[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                        [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                        [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                        [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                        [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                        [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                        [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                        [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                        [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                        [ 0.9580, -1.6776, -0.0139, -1.2663]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:36.411855Z",
     "iopub.status.busy": "2023-02-26T13:51:36.411166Z",
     "iopub.status.idle": "2023-02-26T13:51:39.600349Z",
     "shell.execute_reply": "2023-02-26T13:51:39.599380Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39.1 µs ± 817 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:39.603827Z",
     "iopub.status.busy": "2023-02-26T13:51:39.603270Z",
     "iopub.status.idle": "2023-02-26T13:51:45.775538Z",
     "shell.execute_reply": "2023-02-26T13:51:45.774211Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76 µs ± 743 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:45.779453Z",
     "iopub.status.busy": "2023-02-26T13:51:45.778988Z",
     "iopub.status.idle": "2023-02-26T13:51:45.788681Z",
     "shell.execute_reply": "2023-02-26T13:51:45.787773Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "              \n",
       "                      [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "              \n",
       "                      [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "              \n",
       "                      [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "              \n",
       "                      [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "              \n",
       "                      [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "              \n",
       "                      [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]],\n",
       "              \n",
       "                      [[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                       [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                       [ 0.9580, -1.6776, -0.0139, -1.2663]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]],\n",
       "       \n",
       "               [[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]],\n",
       "       \n",
       "               [[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]],\n",
       "       \n",
       "               [[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]],\n",
       "       \n",
       "               [[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]],\n",
       "       \n",
       "               [[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]],\n",
       "       \n",
       "               [[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]],\n",
       "       \n",
       "               [[ 0.9719, -0.7586, -1.1240],\n",
       "                [-2.8899,  0.2374, -0.2088]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:45.792077Z",
     "iopub.status.busy": "2023-02-26T13:51:45.791575Z",
     "iopub.status.idle": "2023-02-26T13:51:53.372374Z",
     "shell.execute_reply": "2023-02-26T13:51:53.371465Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "93.5 µs ± 1.98 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:53.375978Z",
     "iopub.status.busy": "2023-02-26T13:51:53.375491Z",
     "iopub.status.idle": "2023-02-26T13:51:53.385607Z",
     "shell.execute_reply": "2023-02-26T13:51:53.384682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                      [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                      [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                      [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                      [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                      [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                      [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663],\n",
       "                      [ 0.5303,  0.3973,  0.3508, -0.0522],\n",
       "                      [-0.5450, -0.0214, -1.5910, -0.3621],\n",
       "                      [ 0.9580, -1.6776, -0.0139, -1.2663]]),\n",
       "       ),\n",
       "    a: tensor([[ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088],\n",
       "               [ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088],\n",
       "               [ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088],\n",
       "               [ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088],\n",
       "               [ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088],\n",
       "               [ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088],\n",
       "               [ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088],\n",
       "               [ 0.9719, -0.7586, -1.1240],\n",
       "               [-2.8899,  0.2374, -0.2088]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:51:53.389482Z",
     "iopub.status.busy": "2023-02-26T13:51:53.388992Z",
     "iopub.status.idle": "2023-02-26T13:52:07.424533Z",
     "shell.execute_reply": "2023-02-26T13:52:07.423444Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "173 µs ± 3.14 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-26T13:52:07.428305Z",
     "iopub.status.busy": "2023-02-26T13:52:07.427812Z",
     "iopub.status.idle": "2023-02-26T13:52:11.933038Z",
     "shell.execute_reply": "2023-02-26T13:52:11.931872Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "550 µs ± 12.3 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
