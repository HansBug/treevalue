{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:19.954797Z",
     "iopub.status.busy": "2023-02-27T11:11:19.954468Z",
     "iopub.status.idle": "2023-02-27T11:11:20.859440Z",
     "shell.execute_reply": "2023-02-27T11:11:20.858500Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:20.862503Z",
     "iopub.status.busy": "2023-02-27T11:11:20.862036Z",
     "iopub.status.idle": "2023-02-27T11:11:21.140349Z",
     "shell.execute_reply": "2023-02-27T11:11:21.139685Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:21.143331Z",
     "iopub.status.busy": "2023-02-27T11:11:21.142931Z",
     "iopub.status.idle": "2023-02-27T11:11:21.152214Z",
     "shell.execute_reply": "2023-02-27T11:11:21.151649Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6c6cad7340>\n",
       "├── 'a' --> tensor([[-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6c6cad7880>\n",
       "    └── 'c' --> tensor([[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:21.154988Z",
     "iopub.status.busy": "2023-02-27T11:11:21.154656Z",
     "iopub.status.idle": "2023-02-27T11:11:21.159316Z",
     "shell.execute_reply": "2023-02-27T11:11:21.158716Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0805,  1.2278, -1.3890],\n",
       "        [-0.5148,  1.3931, -0.6554]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:21.161673Z",
     "iopub.status.busy": "2023-02-27T11:11:21.161324Z",
     "iopub.status.idle": "2023-02-27T11:11:26.287281Z",
     "shell.execute_reply": "2023-02-27T11:11:26.286574Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63 ns ± 0.0598 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:26.290536Z",
     "iopub.status.busy": "2023-02-27T11:11:26.289890Z",
     "iopub.status.idle": "2023-02-27T11:11:26.295939Z",
     "shell.execute_reply": "2023-02-27T11:11:26.295282Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6c6cad7340>\n",
       "├── 'a' --> tensor([[-0.4530,  0.8161,  0.2386],\n",
       "│                   [-0.7083,  0.9764,  0.2619]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6c6cad7880>\n",
       "    └── 'c' --> tensor([[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:26.298539Z",
     "iopub.status.busy": "2023-02-27T11:11:26.298191Z",
     "iopub.status.idle": "2023-02-27T11:11:31.247227Z",
     "shell.execute_reply": "2023-02-27T11:11:31.246482Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.7 ns ± 0.0505 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:31.250599Z",
     "iopub.status.busy": "2023-02-27T11:11:31.249959Z",
     "iopub.status.idle": "2023-02-27T11:11:31.575419Z",
     "shell.execute_reply": "2023-02-27T11:11:31.574379Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:31.578697Z",
     "iopub.status.busy": "2023-02-27T11:11:31.577985Z",
     "iopub.status.idle": "2023-02-27T11:11:31.583506Z",
     "shell.execute_reply": "2023-02-27T11:11:31.582881Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:31.585964Z",
     "iopub.status.busy": "2023-02-27T11:11:31.585627Z",
     "iopub.status.idle": "2023-02-27T11:11:31.590325Z",
     "shell.execute_reply": "2023-02-27T11:11:31.589695Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.0805,  1.2278, -1.3890],\n",
       "        [-0.5148,  1.3931, -0.6554]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:31.592736Z",
     "iopub.status.busy": "2023-02-27T11:11:31.592394Z",
     "iopub.status.idle": "2023-02-27T11:11:36.528903Z",
     "shell.execute_reply": "2023-02-27T11:11:36.528198Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.4 ns ± 0.0548 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:36.531930Z",
     "iopub.status.busy": "2023-02-27T11:11:36.531359Z",
     "iopub.status.idle": "2023-02-27T11:11:36.537681Z",
     "shell.execute_reply": "2023-02-27T11:11:36.537104Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.1416, -0.9578, -0.4399],\n",
       "               [ 0.1160,  1.5457,  0.5105]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:36.540114Z",
     "iopub.status.busy": "2023-02-27T11:11:36.539802Z",
     "iopub.status.idle": "2023-02-27T11:11:40.481851Z",
     "shell.execute_reply": "2023-02-27T11:11:40.481145Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "485 ns ± 0.102 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:40.484917Z",
     "iopub.status.busy": "2023-02-27T11:11:40.484399Z",
     "iopub.status.idle": "2023-02-27T11:11:47.241550Z",
     "shell.execute_reply": "2023-02-27T11:11:47.240402Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "832 ns ± 0.152 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:47.244288Z",
     "iopub.status.busy": "2023-02-27T11:11:47.243920Z",
     "iopub.status.idle": "2023-02-27T11:11:56.394258Z",
     "shell.execute_reply": "2023-02-27T11:11:56.393528Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.3 µs ± 54.5 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:56.397197Z",
     "iopub.status.busy": "2023-02-27T11:11:56.396752Z",
     "iopub.status.idle": "2023-02-27T11:11:56.400700Z",
     "shell.execute_reply": "2023-02-27T11:11:56.400106Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:11:56.403179Z",
     "iopub.status.busy": "2023-02-27T11:11:56.402869Z",
     "iopub.status.idle": "2023-02-27T11:12:07.514354Z",
     "shell.execute_reply": "2023-02-27T11:12:07.513793Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137 µs ± 1.1 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:07.517903Z",
     "iopub.status.busy": "2023-02-27T11:12:07.517421Z",
     "iopub.status.idle": "2023-02-27T11:12:18.796082Z",
     "shell.execute_reply": "2023-02-27T11:12:18.795493Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "139 µs ± 245 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:18.799490Z",
     "iopub.status.busy": "2023-02-27T11:12:18.798988Z",
     "iopub.status.idle": "2023-02-27T11:12:18.803766Z",
     "shell.execute_reply": "2023-02-27T11:12:18.802909Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:18.806776Z",
     "iopub.status.busy": "2023-02-27T11:12:18.806385Z",
     "iopub.status.idle": "2023-02-27T11:12:18.815206Z",
     "shell.execute_reply": "2023-02-27T11:12:18.814685Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6bb7dedd60>\n",
       "├── 'a' --> tensor([[[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]],\n",
       "│           \n",
       "│                   [[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]],\n",
       "│           \n",
       "│                   [[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]],\n",
       "│           \n",
       "│                   [[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]],\n",
       "│           \n",
       "│                   [[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]],\n",
       "│           \n",
       "│                   [[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]],\n",
       "│           \n",
       "│                   [[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]],\n",
       "│           \n",
       "│                   [[-1.0805,  1.2278, -1.3890],\n",
       "│                    [-0.5148,  1.3931, -0.6554]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6bb7dedb80>\n",
       "    └── 'c' --> tensor([[[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "                \n",
       "                        [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "                \n",
       "                        [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "                \n",
       "                        [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "                \n",
       "                        [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "                \n",
       "                        [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "                \n",
       "                        [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "                \n",
       "                        [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                         [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                         [ 0.9594,  2.1858,  2.0054,  1.0638]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:18.817984Z",
     "iopub.status.busy": "2023-02-27T11:12:18.817756Z",
     "iopub.status.idle": "2023-02-27T11:12:21.419025Z",
     "shell.execute_reply": "2023-02-27T11:12:21.418359Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 µs ± 27.2 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:21.421929Z",
     "iopub.status.busy": "2023-02-27T11:12:21.421546Z",
     "iopub.status.idle": "2023-02-27T11:12:21.429945Z",
     "shell.execute_reply": "2023-02-27T11:12:21.428968Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f6bb7d9ff40>\n",
       "├── 'a' --> tensor([[-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554],\n",
       "│                   [-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554],\n",
       "│                   [-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554],\n",
       "│                   [-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554],\n",
       "│                   [-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554],\n",
       "│                   [-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554],\n",
       "│                   [-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554],\n",
       "│                   [-1.0805,  1.2278, -1.3890],\n",
       "│                   [-0.5148,  1.3931, -0.6554]])\n",
       "└── 'x' --> <FastTreeValue 0x7f6bbe9f18e0>\n",
       "    └── 'c' --> tensor([[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                        [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                        [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                        [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                        [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                        [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                        [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                        [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                        [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                        [ 0.9594,  2.1858,  2.0054,  1.0638]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:21.432820Z",
     "iopub.status.busy": "2023-02-27T11:12:21.432244Z",
     "iopub.status.idle": "2023-02-27T11:12:23.849616Z",
     "shell.execute_reply": "2023-02-27T11:12:23.848442Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.7 µs ± 33.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:23.852792Z",
     "iopub.status.busy": "2023-02-27T11:12:23.852264Z",
     "iopub.status.idle": "2023-02-27T11:12:28.521702Z",
     "shell.execute_reply": "2023-02-27T11:12:28.520945Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.5 µs ± 75.6 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:28.524736Z",
     "iopub.status.busy": "2023-02-27T11:12:28.524183Z",
     "iopub.status.idle": "2023-02-27T11:12:28.532081Z",
     "shell.execute_reply": "2023-02-27T11:12:28.531509Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "              \n",
       "                      [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "              \n",
       "                      [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "              \n",
       "                      [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "              \n",
       "                      [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "              \n",
       "                      [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "              \n",
       "                      [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]],\n",
       "              \n",
       "                      [[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                       [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                       [ 0.9594,  2.1858,  2.0054,  1.0638]]]),\n",
       "       ),\n",
       "    a: tensor([[[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]],\n",
       "       \n",
       "               [[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]],\n",
       "       \n",
       "               [[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]],\n",
       "       \n",
       "               [[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]],\n",
       "       \n",
       "               [[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]],\n",
       "       \n",
       "               [[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]],\n",
       "       \n",
       "               [[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]],\n",
       "       \n",
       "               [[-1.0805,  1.2278, -1.3890],\n",
       "                [-0.5148,  1.3931, -0.6554]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:28.534974Z",
     "iopub.status.busy": "2023-02-27T11:12:28.534422Z",
     "iopub.status.idle": "2023-02-27T11:12:34.810251Z",
     "shell.execute_reply": "2023-02-27T11:12:34.809495Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.2 µs ± 170 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:34.813814Z",
     "iopub.status.busy": "2023-02-27T11:12:34.813159Z",
     "iopub.status.idle": "2023-02-27T11:12:34.821315Z",
     "shell.execute_reply": "2023-02-27T11:12:34.820313Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                      [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                      [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                      [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                      [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                      [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                      [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638],\n",
       "                      [ 0.1390, -1.4721, -0.0973,  1.6220],\n",
       "                      [-1.7386, -0.2560, -2.1643, -1.7560],\n",
       "                      [ 0.9594,  2.1858,  2.0054,  1.0638]]),\n",
       "       ),\n",
       "    a: tensor([[-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554],\n",
       "               [-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554],\n",
       "               [-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554],\n",
       "               [-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554],\n",
       "               [-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554],\n",
       "               [-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554],\n",
       "               [-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554],\n",
       "               [-1.0805,  1.2278, -1.3890],\n",
       "               [-0.5148,  1.3931, -0.6554]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:34.823594Z",
     "iopub.status.busy": "2023-02-27T11:12:34.823384Z",
     "iopub.status.idle": "2023-02-27T11:12:46.410437Z",
     "shell.execute_reply": "2023-02-27T11:12:46.409730Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 230 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:12:46.413694Z",
     "iopub.status.busy": "2023-02-27T11:12:46.413162Z",
     "iopub.status.idle": "2023-02-27T11:12:48.912991Z",
     "shell.execute_reply": "2023-02-27T11:12:48.912314Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "307 µs ± 2.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
