{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d39d946",
   "metadata": {},
   "source": [
    "# Comparison Between TreeValue and Tianshou Batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6db2d4",
   "metadata": {},
   "source": [
    "In this section, we will take a look at the feature and performance of the [Tianshou Batch](https://github.com/thu-ml/tianshou) library, which is developed by Tsinghua Machine Learning Group."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069361b0",
   "metadata": {},
   "source": [
    "Before starting the comparison, let us define some thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06fc8d26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:01.148892Z",
     "iopub.status.busy": "2023-02-27T11:25:01.148493Z",
     "iopub.status.idle": "2023-02-27T11:25:02.131779Z",
     "shell.execute_reply": "2023-02-27T11:25:02.130989Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch \n",
    "\n",
    "_TREE_DATA_1 = {'a': 1, 'b': 2, 'x': {'c': 3, 'd': 4}}\n",
    "_TREE_DATA_2 = {\n",
    "    'a': torch.randn(2, 3), \n",
    "    'x': {\n",
    "        'c': torch.randn(3, 4)\n",
    "    },\n",
    "}\n",
    "_TREE_DATA_3 = {\n",
    "    'obs': torch.randn(4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(1,)),\n",
    "    'reward': torch.rand(1),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83461b25",
   "metadata": {},
   "source": [
    "## Read and Write Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "067b3f73",
   "metadata": {},
   "source": [
    "Reading and writing are the two most common operations in the tree data structure based on the data model (TreeValue and Tianshou Batch both belong to this type), so this section will compare the reading and writing performance of these two libraries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d09a5b7",
   "metadata": {},
   "source": [
    "### TreeValue's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9519c4bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:02.136117Z",
     "iopub.status.busy": "2023-02-27T11:25:02.135558Z",
     "iopub.status.idle": "2023-02-27T11:25:02.427707Z",
     "shell.execute_reply": "2023-02-27T11:25:02.426566Z"
    }
   },
   "outputs": [],
   "source": [
    "from treevalue import FastTreeValue\n",
    "\n",
    "t = FastTreeValue(_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11c37677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:02.431844Z",
     "iopub.status.busy": "2023-02-27T11:25:02.431317Z",
     "iopub.status.idle": "2023-02-27T11:25:02.442487Z",
     "shell.execute_reply": "2023-02-27T11:25:02.441196Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f371cde2af0>\n",
       "├── 'a' --> tensor([[ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001]])\n",
       "└── 'x' --> <FastTreeValue 0x7f371cde2f70>\n",
       "    └── 'c' --> tensor([[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd70b0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:02.445492Z",
     "iopub.status.busy": "2023-02-27T11:25:02.445144Z",
     "iopub.status.idle": "2023-02-27T11:25:02.450240Z",
     "shell.execute_reply": "2023-02-27T11:25:02.449575Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3796, -1.1110, -0.7006],\n",
       "        [ 1.1744,  1.1401,  0.5001]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c18197bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:02.453279Z",
     "iopub.status.busy": "2023-02-27T11:25:02.452749Z",
     "iopub.status.idle": "2023-02-27T11:25:07.637965Z",
     "shell.execute_reply": "2023-02-27T11:25:07.637067Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63.8 ns ± 0.0689 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd52f867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:07.645732Z",
     "iopub.status.busy": "2023-02-27T11:25:07.645188Z",
     "iopub.status.idle": "2023-02-27T11:25:07.652812Z",
     "shell.execute_reply": "2023-02-27T11:25:07.651954Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f371cde2af0>\n",
       "├── 'a' --> tensor([[ 1.8801, -0.6568, -0.5673],\n",
       "│                   [ 0.7254, -0.1056, -1.4913]])\n",
       "└── 'x' --> <FastTreeValue 0x7f371cde2f70>\n",
       "    └── 'c' --> tensor([[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "t.a = new_value\n",
    "\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbe04d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:07.655622Z",
     "iopub.status.busy": "2023-02-27T11:25:07.655251Z",
     "iopub.status.idle": "2023-02-27T11:25:13.478824Z",
     "shell.execute_reply": "2023-02-27T11:25:13.477868Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.7 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48c49731",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Get and Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1bb14c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:13.482435Z",
     "iopub.status.busy": "2023-02-27T11:25:13.481806Z",
     "iopub.status.idle": "2023-02-27T11:25:13.859744Z",
     "shell.execute_reply": "2023-02-27T11:25:13.858972Z"
    }
   },
   "outputs": [],
   "source": [
    "from tianshou.data import Batch\n",
    "\n",
    "b = Batch(**_TREE_DATA_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb0777c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:13.863512Z",
     "iopub.status.busy": "2023-02-27T11:25:13.862994Z",
     "iopub.status.idle": "2023-02-27T11:25:13.869195Z",
     "shell.execute_reply": "2023-02-27T11:25:13.868533Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43ef8ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:13.871927Z",
     "iopub.status.busy": "2023-02-27T11:25:13.871499Z",
     "iopub.status.idle": "2023-02-27T11:25:13.876502Z",
     "shell.execute_reply": "2023-02-27T11:25:13.875806Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1.3796, -1.1110, -0.7006],\n",
       "        [ 1.1744,  1.1401,  0.5001]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b785ab72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:13.879156Z",
     "iopub.status.busy": "2023-02-27T11:25:13.878790Z",
     "iopub.status.idle": "2023-02-27T11:25:18.829577Z",
     "shell.execute_reply": "2023-02-27T11:25:18.828697Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60.9 ns ± 0.0313 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad54dc69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:18.833333Z",
     "iopub.status.busy": "2023-02-27T11:25:18.832649Z",
     "iopub.status.idle": "2023-02-27T11:25:18.839362Z",
     "shell.execute_reply": "2023-02-27T11:25:18.838670Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    a: tensor([[-0.6231,  0.3277,  0.6015],\n",
       "               [-0.5496,  2.1331, -0.6051]]),\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048]]),\n",
       "       ),\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_value = torch.randn(2, 3)\n",
    "b.a = new_value\n",
    "\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29b1d0bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:18.842216Z",
     "iopub.status.busy": "2023-02-27T11:25:18.841600Z",
     "iopub.status.idle": "2023-02-27T11:25:22.955982Z",
     "shell.execute_reply": "2023-02-27T11:25:22.955103Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "507 ns ± 0.135 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit b.a = new_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61ad1d0",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d70f0d54",
   "metadata": {},
   "source": [
    "### TreeValue's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d32a679b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:22.959654Z",
     "iopub.status.busy": "2023-02-27T11:25:22.959267Z",
     "iopub.status.idle": "2023-02-27T11:25:29.561748Z",
     "shell.execute_reply": "2023-02-27T11:25:29.561001Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "813 ns ± 0.161 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit FastTreeValue(_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f3707b",
   "metadata": {},
   "source": [
    "### Tianshou Batch's Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac3958df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:29.565518Z",
     "iopub.status.busy": "2023-02-27T11:25:29.564897Z",
     "iopub.status.idle": "2023-02-27T11:25:38.459414Z",
     "shell.execute_reply": "2023-02-27T11:25:38.458167Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 µs ± 29.9 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch(**_TREE_DATA_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab82e2d",
   "metadata": {},
   "source": [
    "## Deep Copy Operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "210a9442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:38.463225Z",
     "iopub.status.busy": "2023-02-27T11:25:38.462693Z",
     "iopub.status.idle": "2023-02-27T11:25:38.467114Z",
     "shell.execute_reply": "2023-02-27T11:25:38.466445Z"
    }
   },
   "outputs": [],
   "source": [
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a736274",
   "metadata": {},
   "source": [
    "### Deep Copy of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9bcadd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:38.470296Z",
     "iopub.status.busy": "2023-02-27T11:25:38.469735Z",
     "iopub.status.idle": "2023-02-27T11:25:50.097062Z",
     "shell.execute_reply": "2023-02-27T11:25:50.096341Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 310 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t3 = FastTreeValue(_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(t3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8be7ea",
   "metadata": {},
   "source": [
    "### Deep Copy of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "91998e6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:25:50.100206Z",
     "iopub.status.busy": "2023-02-27T11:25:50.099686Z",
     "iopub.status.idle": "2023-02-27T11:26:01.706707Z",
     "shell.execute_reply": "2023-02-27T11:26:01.706028Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143 µs ± 257 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "b3 = Batch(**_TREE_DATA_3)\n",
    "%timeit copy.deepcopy(b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223162fb",
   "metadata": {},
   "source": [
    "## Stack, Concat and Split Operation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fa4a73",
   "metadata": {},
   "source": [
    "### Performance of TreeValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c2b697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:01.709819Z",
     "iopub.status.busy": "2023-02-27T11:26:01.709306Z",
     "iopub.status.idle": "2023-02-27T11:26:01.712971Z",
     "shell.execute_reply": "2023-02-27T11:26:01.712408Z"
    }
   },
   "outputs": [],
   "source": [
    "trees = [FastTreeValue(_TREE_DATA_2) for _ in range(8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "017ea5a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:01.715734Z",
     "iopub.status.busy": "2023-02-27T11:26:01.715049Z",
     "iopub.status.idle": "2023-02-27T11:26:01.722492Z",
     "shell.execute_reply": "2023-02-27T11:26:01.721928Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f371ce4e970>\n",
       "├── 'a' --> tensor([[[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]],\n",
       "│           \n",
       "│                   [[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]],\n",
       "│           \n",
       "│                   [[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]],\n",
       "│           \n",
       "│                   [[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]],\n",
       "│           \n",
       "│                   [[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]],\n",
       "│           \n",
       "│                   [[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]],\n",
       "│           \n",
       "│                   [[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]],\n",
       "│           \n",
       "│                   [[ 1.3796, -1.1110, -0.7006],\n",
       "│                    [ 1.1744,  1.1401,  0.5001]]])\n",
       "└── 'x' --> <FastTreeValue 0x7f371ce4e070>\n",
       "    └── 'c' --> tensor([[[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "                \n",
       "                        [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "                \n",
       "                        [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "                \n",
       "                        [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "                \n",
       "                        [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "                \n",
       "                        [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "                \n",
       "                        [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "                \n",
       "                        [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                         [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                         [-0.0407,  0.4492, -0.0841,  1.4048]]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_stack = FastTreeValue.func(subside=True)(torch.stack)\n",
    "\n",
    "t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8b3f415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:01.725177Z",
     "iopub.status.busy": "2023-02-27T11:26:01.724503Z",
     "iopub.status.idle": "2023-02-27T11:26:04.290715Z",
     "shell.execute_reply": "2023-02-27T11:26:04.289822Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.6 µs ± 34.4 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_stack(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94b56771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:04.294017Z",
     "iopub.status.busy": "2023-02-27T11:26:04.293578Z",
     "iopub.status.idle": "2023-02-27T11:26:04.302960Z",
     "shell.execute_reply": "2023-02-27T11:26:04.302316Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FastTreeValue 0x7f371cddac70>\n",
       "├── 'a' --> tensor([[ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001],\n",
       "│                   [ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001],\n",
       "│                   [ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001],\n",
       "│                   [ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001],\n",
       "│                   [ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001],\n",
       "│                   [ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001],\n",
       "│                   [ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001],\n",
       "│                   [ 1.3796, -1.1110, -0.7006],\n",
       "│                   [ 1.1744,  1.1401,  0.5001]])\n",
       "└── 'x' --> <FastTreeValue 0x7f371cdd50d0>\n",
       "    └── 'c' --> tensor([[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                        [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                        [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                        [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                        [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                        [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                        [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                        [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                        [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                        [-0.0407,  0.4492, -0.0841,  1.4048]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cat = FastTreeValue.func(subside=True)(torch.cat)\n",
    "\n",
    "t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e9c06a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:04.306048Z",
     "iopub.status.busy": "2023-02-27T11:26:04.305569Z",
     "iopub.status.idle": "2023-02-27T11:26:06.723130Z",
     "shell.execute_reply": "2023-02-27T11:26:06.722234Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.7 µs ± 57.7 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit t_cat(trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a3ab5c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:06.726560Z",
     "iopub.status.busy": "2023-02-27T11:26:06.726123Z",
     "iopub.status.idle": "2023-02-27T11:26:11.384699Z",
     "shell.execute_reply": "2023-02-27T11:26:11.383819Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.3 µs ± 50.9 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "t_split = FastTreeValue.func(rise=True)(torch.split)\n",
    "tree = FastTreeValue({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1),\n",
    "})\n",
    "\n",
    "%timeit t_split(tree, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c3ec0b",
   "metadata": {},
   "source": [
    "### Performance of Tianshou Batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ead828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:11.388752Z",
     "iopub.status.busy": "2023-02-27T11:26:11.388170Z",
     "iopub.status.idle": "2023-02-27T11:26:11.396477Z",
     "shell.execute_reply": "2023-02-27T11:26:11.395857Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "              \n",
       "                      [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "              \n",
       "                      [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "              \n",
       "                      [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "              \n",
       "                      [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "              \n",
       "                      [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "              \n",
       "                      [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]],\n",
       "              \n",
       "                      [[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                       [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                       [-0.0407,  0.4492, -0.0841,  1.4048]]]),\n",
       "       ),\n",
       "    a: tensor([[[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]],\n",
       "       \n",
       "               [[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]],\n",
       "       \n",
       "               [[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]],\n",
       "       \n",
       "               [[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]],\n",
       "       \n",
       "               [[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]],\n",
       "       \n",
       "               [[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]],\n",
       "       \n",
       "               [[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]],\n",
       "       \n",
       "               [[ 1.3796, -1.1110, -0.7006],\n",
       "                [ 1.1744,  1.1401,  0.5001]]]),\n",
       ")"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batches = [Batch(**_TREE_DATA_2) for _ in range(8)]\n",
    "\n",
    "Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec9037a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:11.399440Z",
     "iopub.status.busy": "2023-02-27T11:26:11.399087Z",
     "iopub.status.idle": "2023-02-27T11:26:17.758006Z",
     "shell.execute_reply": "2023-02-27T11:26:17.757105Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.2 µs ± 91 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.stack(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb8ab77e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:17.761885Z",
     "iopub.status.busy": "2023-02-27T11:26:17.761267Z",
     "iopub.status.idle": "2023-02-27T11:26:17.770064Z",
     "shell.execute_reply": "2023-02-27T11:26:17.768906Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Batch(\n",
       "    x: Batch(\n",
       "           c: tensor([[ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                      [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                      [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                      [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                      [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                      [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                      [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048],\n",
       "                      [ 0.3564, -0.7416, -0.8685, -0.9736],\n",
       "                      [-1.7870, -1.5400, -1.0367,  0.6007],\n",
       "                      [-0.0407,  0.4492, -0.0841,  1.4048]]),\n",
       "       ),\n",
       "    a: tensor([[ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001],\n",
       "               [ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001],\n",
       "               [ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001],\n",
       "               [ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001],\n",
       "               [ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001],\n",
       "               [ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001],\n",
       "               [ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001],\n",
       "               [ 1.3796, -1.1110, -0.7006],\n",
       "               [ 1.1744,  1.1401,  0.5001]]),\n",
       ")"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "18dfb045",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:17.773054Z",
     "iopub.status.busy": "2023-02-27T11:26:17.772464Z",
     "iopub.status.idle": "2023-02-27T11:26:32.679616Z",
     "shell.execute_reply": "2023-02-27T11:26:32.678825Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "184 µs ± 330 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit Batch.cat(batches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6688e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-27T11:26:32.683722Z",
     "iopub.status.busy": "2023-02-27T11:26:32.683257Z",
     "iopub.status.idle": "2023-02-27T11:26:35.318593Z",
     "shell.execute_reply": "2023-02-27T11:26:35.317873Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "322 µs ± 2.33 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "batch = Batch({\n",
    "    'obs': torch.randn(8, 4, 84, 84),\n",
    "    'action': torch.randint(0, 6, size=(8, 1,)),\n",
    "    'reward': torch.rand(8, 1)}\n",
    ")\n",
    "\n",
    "%timeit list(Batch.split(batch, 1, shuffle=False, merge_last=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2539fbd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
